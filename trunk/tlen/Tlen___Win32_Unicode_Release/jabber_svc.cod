	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JOGO@Tlen?5login?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FF@CLOP@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FO@CDMM@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OBPM@?$DMi?$DO?$CFs?$DM?1i?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PCJB@?$DMemail?$DO?$CFs?$DM?1email?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NNDG@?$DMnick?$DO?$CFs?$DM?1nick?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@DPIJ@?$DMfirst?$DO?$CFs?$DM?1first?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEGG@?$DMlast?$DO?$CFs?$DM?1last?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@HDHJ@DB?1Contact?1Add?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@POEG@Proto?1AddToContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ELKP@NotOnList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@BBFJ@DB?1Event?1Get?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FD@DAJJ@E?3?2Documents?5and?5Settings?2piotr?2@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MAJI@AutoAdd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@OMLA@Try?5adding?5contact?5automatically@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@JMMB@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8unsubscr@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@GNDM@SetAwayMsg?5called?0?5wParam?$DN?$CFd?5lPa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FF@KAMC@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FM@GGCG@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FEOM@VisibilitySupport?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJDI@ApparentMode?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DE@FNAM@?$DMpresence?5to?$DN?8?$CFs?8?$DO?$DMshow?$DOavailabl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@JOOO@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8invisibl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CDLC@?$DMalert?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07PMPL@?$DMimage?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DCIF@pic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@INH@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5crc?$DN?8@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FDIC@groupchat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DPEB@privchat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FLKK@chat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CCAA@MsgAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@MLLC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?$DO?$DMbody@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@FCCL@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?86?8?5s?$DN?810?8?5f?$DN?80?8@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GL@LNLA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IB@ENPC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EM@DAPA@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IFC@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?85?8?5v?$DN?81?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CFHL@Invoking?5FileCancel?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@CBGE@ft?9?$DOs?5is?5now?5NULL?0?5ft?9?$DOstate?5is?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LPAN@?8?$CFs?8?5is?5an?5invalid?5filename?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MECO@?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FL@JEAB@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DD@DHDE@?$DMf?5t?$DN?8?$CFs?8?5n?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@NFMN@?$DMf?5t?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN?8?$CFd?8?5s?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@BJOD@?1RecvMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@DBCN@Proto?1RecvMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PJIN@Proto?1RecvFile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JDFO@Group?5set?5to?5nothing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GD@Group?5set?5to?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PPEK@Nick?5set?5to?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@BDCD@Add?5?$CFs?5permanently?5to?5list?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@BOGB@jid?$DN?$CFs?5nick?$DN?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FH@JNDC@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@EHMG@?$DMm?5tp?$DN?8u?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CKCM@?$DMm?5tp?$DN?8t?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FCE@?1GetName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DCMN@?$CFs?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FCPI@?1GetAvatarInformation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GEBG@?1SendNudge?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@BKBG@?1GetAvatarCaps?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GKGP@?1SetMyAvatar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GIKM@?1GetMyAvatar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DIGM@?1GetStatus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@HIMO@?1CreateAccMgrUI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _Netlib_CloseHandle
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSetting_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBDeleteContactSetting
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingByte
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingWord
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingString
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TranslateDialogDefault
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetCaps
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetName
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetIcon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenRunSearch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenResetSearchQuery
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenBasicSearch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSearchByEmail
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSearchByName
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenCreateAdvSearchUI
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSearchAdvanced
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddToListByJID
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenAddToList
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenAddToListByEvent
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenAuthAllow
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenAuthDeny
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenConnect
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSetStatus
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetStatus
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSetAwayMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberGetInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSetApparentMode
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberSendMessageAckThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSendMessageFailedThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAwayMsgThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSendAlert
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSendMessage
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAvatarInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAwayMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileAllow
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileDeny
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileCancel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSendFile
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenRecvMessage
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenRecvFile
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _settingToChar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberDbSettingChanged
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberContactDeleted
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenUserIsTyping
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetMyAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenChangeAvatarDlgProc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSetMyAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAvatarCaps
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenOnEvent
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenAccMgrUI
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenInitServicesVTbl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_TlenGetCaps
PUBLIC	??_C@_0L@JOGO@Tlen?5login?$AA@			; `string'
PUBLIC	??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@	; `string'
PUBLIC	??_C@_03HCJC@jid?$AA@				; `string'
EXTRN	_pluginLink:DWORD
;	COMDAT ??_C@_0L@JOGO@Tlen?5login?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0L@JOGO@Tlen?5login?$AA@ DB 'Tlen login', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT
??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ DB 'LangPack/TranslateStrin'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT
??_C@_03HCJC@jid?$AA@ DB 'jid', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenGetCaps
_TEXT	SEGMENT
_type$ = 12
_TlenGetCaps PROC NEAR					; COMDAT

; 42   : 	if (type == PFLAGNUM_1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _type$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 06		 jne	 SHORT $L83371

; 43   : 		return PF1_IM|PF1_AUTHREQ|PF1_SERVERCLIST|PF1_MODEMSG|PF1_BASICSEARCH|PF1_SEARCHBYEMAIL|PF1_EXTSEARCH|PF1_EXTSEARCHUI|PF1_SEARCHBYNAME|PF1_FILE;//|PF1_VISLIST|PF1_INVISLIST;

  00009	b8 f3 03 18 68	 mov	 eax, 1746404339		; 681803f3H

; 53   : 		return (int) "jid";
; 54   : 	return 0;
; 55   : }

  0000e	c3		 ret	 0
$L83371:

; 44   : 	if (type == PFLAGNUM_2)

  0000f	83 f8 02	 cmp	 eax, 2
  00012	75 04		 jne	 SHORT $L83372
$L84713:

; 45   : 		return PF2_ONLINE|PF2_INVISIBLE|PF2_SHORTAWAY|PF2_LONGAWAY|PF2_HEAVYDND|PF2_FREECHAT;

  00014	6a 6f		 push	 111			; 0000006fH
  00016	58		 pop	 eax

; 53   : 		return (int) "jid";
; 54   : 	return 0;
; 55   : }

  00017	c3		 ret	 0
$L83372:

; 46   : 	if (type == PFLAGNUM_3)

  00018	83 f8 03	 cmp	 eax, 3

; 47   : 		return PF2_ONLINE|PF2_INVISIBLE|PF2_SHORTAWAY|PF2_LONGAWAY|PF2_HEAVYDND|PF2_FREECHAT;

  0001b	74 f7		 je	 SHORT $L84713

; 48   : 	if (type == PFLAGNUM_4)

  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 04		 jne	 SHORT $L83374

; 49   : 		return PF4_FORCEAUTH|PF4_NOCUSTOMAUTH|PF4_SUPPORTTYPING|PF4_AVATARS;

  00022	6a 2d		 push	 45			; 0000002dH

; 45   : 		return PF2_ONLINE|PF2_INVISIBLE|PF2_SHORTAWAY|PF2_LONGAWAY|PF2_HEAVYDND|PF2_FREECHAT;

  00024	58		 pop	 eax

; 53   : 		return (int) "jid";
; 54   : 	return 0;
; 55   : }

  00025	c3		 ret	 0
$L83374:

; 50   : 	if (type == PFLAG_UNIQUEIDTEXT)

  00026	83 f8 64	 cmp	 eax, 100		; 00000064H
  00029	75 18		 jne	 SHORT $L83375

; 51   : 		return (int) Translate("Tlen login");

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JOGO@Tlen?5login?$AA@ ; `string'
  00035	6a 00		 push	 0
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  0003c	ff 50 24	 call	 DWORD PTR [eax+36]
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 		return (int) "jid";
; 54   : 	return 0;
; 55   : }

  00042	c3		 ret	 0
$L83375:

; 52   : 	if (type == PFLAG_UNIQUEIDSETTING)

  00043	2d 2c 01 00 00	 sub	 eax, 300		; 0000012cH
  00048	f7 d8		 neg	 eax
  0004a	1b c0		 sbb	 eax, eax
  0004c	f7 d0		 not	 eax
  0004e	25 00 00 00 00	 and	 eax, OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'

; 53   : 		return (int) "jid";
; 54   : 	return 0;
; 55   : }

  00053	c3		 ret	 0
_TlenGetCaps ENDP
_TEXT	ENDS
PUBLIC	_TlenGetName
EXTRN	__imp__strncpy:NEAR
;	COMDAT _TlenGetName
_TEXT	SEGMENT
_ptr$ = 8
_wParam$ = 12
_lParam$ = 16
_TlenGetName PROC NEAR					; COMDAT

; 59   :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 60   : 	strncpy((char *) lParam, proto->iface.m_szProtoName, wParam);

  00000	ff 74 24 08	 push	 DWORD PTR _wParam$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR _ptr$[esp]
  00008	ff 70 18	 push	 DWORD PTR [eax+24]
  0000b	ff 74 24 14	 push	 DWORD PTR _lParam$[esp+4]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 61   : 	return 0;

  00018	33 c0		 xor	 eax, eax

; 62   : }

  0001a	c3		 ret	 0
_TlenGetName ENDP
_TEXT	ENDS
PUBLIC	_TlenGetIcon
EXTRN	__imp__CopyIcon@4:NEAR
EXTRN	_tlenIcons:BYTE
;	COMDAT _TlenGetIcon
_TEXT	SEGMENT
_iconIndex$ = 12
_TlenGetIcon PROC NEAR					; COMDAT

; 66   : 	if ((iconIndex&0xffff) == PLI_PROTOCOL)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _iconIndex$[esp-4]
  00004	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00009	83 f8 01	 cmp	 eax, 1
  0000c	75 0d		 jne	 SHORT $L83401

; 67   : 		return CopyIcon(tlenIcons[TLEN_IDI_TLEN]);

  0000e	ff 35 00 00 00
	00		 push	 DWORD PTR _tlenIcons
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyIcon@4

; 69   : }

  0001a	c3		 ret	 0
$L83401:

; 68   : 	return (HICON) NULL;

  0001b	33 c0		 xor	 eax, eax

; 69   : }

  0001d	c3		 ret	 0
_TlenGetIcon ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FF@CLOP@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
PUBLIC	??_C@_0FO@CDMM@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
PUBLIC	_TlenRunSearch
EXTRN	_JabberIqAdd:NEAR
EXTRN	_JabberIqResultSearch:NEAR
EXTRN	_JabberSend:NEAR
;	COMDAT ??_C@_0FF@CLOP@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0FF@CLOP@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ DB '<'
	DB	'iq type=''get'' id=''mim_%d'' to=''tuba''><query xmlns=''jabb'
	DB	'er:iq:search''>%s</query></iq>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FO@CDMM@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT
??_C@_0FO@CDMM@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ DB '<'
	DB	'iq type=''get'' id=''mim_%d'' to=''tuba''><query xmlns=''jabb'
	DB	'er:iq:search''>%s<f>%d</f></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenRunSearch
_TEXT	SEGMENT
_proto$ = 8
_TlenRunSearch PROC NEAR				; COMDAT

; 71   : int TlenRunSearch(TlenProtocol *proto) {

  00000	56		 push	 esi

; 72   : 	int iqId = 0;
; 73   : 	if (!proto->jabberOnline) return 0;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _proto$[esp]
  00005	57		 push	 edi
  00006	33 ff		 xor	 edi, edi
  00008	39 be 78 01 00
	00		 cmp	 DWORD PTR [esi+376], edi
  0000e	75 04		 jne	 SHORT $L83408
  00010	33 c0		 xor	 eax, eax
  00012	eb 6e		 jmp	 SHORT $L83406
$L83408:

; 74   : 	if (proto->searchQuery != NULL && proto->searchIndex < 10) {

  00014	83 be a8 01 00
	00 00		 cmp	 DWORD PTR [esi+424], 0
  0001b	74 63		 je	 SHORT $L83410
  0001d	83 be a4 01 00
	00 0a		 cmp	 DWORD PTR [esi+420], 10	; 0000000aH
  00024	7d 5a		 jge	 SHORT $L83410

; 75   : 		iqId = proto->searchID;

  00026	8b be a0 01 00
	00		 mov	 edi, DWORD PTR [esi+416]

; 76   : 		JabberIqAdd(proto, iqId, IQ_PROC_GETSEARCH, JabberIqResultSearch);

  0002c	68 00 00 00 00	 push	 OFFSET FLAT:_JabberIqResultSearch
  00031	6a 01		 push	 1
  00033	57		 push	 edi
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _JabberIqAdd

; 77   : 		if (proto->searchIndex == 0) {

  0003a	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	85 c0		 test	 eax, eax
  00045	75 17		 jne	 SHORT $L83411

; 78   : 			JabberSend(proto, "<iq type='get' id='"JABBER_IQID"%d' to='tuba'><query xmlns='jabber:iq:search'>%s</query></iq>", iqId, proto->searchQuery);

  00047	ff b6 a8 01 00
	00		 push	 DWORD PTR [esi+424]
  0004d	57		 push	 edi
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CLOP@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 _JabberSend
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 79   : 		} else {

  0005c	eb 1c		 jmp	 SHORT $L83413
$L83411:

; 80   : 			JabberSend(proto, "<iq type='get' id='"JABBER_IQID"%d' to='tuba'><query xmlns='jabber:iq:search'>%s<f>%d</f></query></iq>", iqId, proto->searchQuery, proto->searchIndex * TLEN_MAX_SEARCH_RESULTS_PER_PAGE);

  0005e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00061	c1 e0 02	 shl	 eax, 2
  00064	50		 push	 eax
  00065	ff b6 a8 01 00
	00		 push	 DWORD PTR [esi+424]
  0006b	57		 push	 edi
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FO@CDMM@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 _JabberSend
  00077	83 c4 14	 add	 esp, 20			; 00000014H
$L83413:

; 81   : 		}
; 82   : 		proto->searchIndex ++;

  0007a	ff 86 a4 01 00
	00		 inc	 DWORD PTR [esi+420]
$L83410:

; 83   : 	}
; 84   : 	return iqId;

  00080	8b c7		 mov	 eax, edi
$L83406:
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 85   : }

  00084	c3		 ret	 0
_TlenRunSearch ENDP
_TEXT	ENDS
PUBLIC	_TlenResetSearchQuery
EXTRN	_mmi:BYTE
EXTRN	_JabberSerialNext:NEAR
;	COMDAT _TlenResetSearchQuery
_TEXT	SEGMENT
_proto$ = 8
_TlenResetSearchQuery PROC NEAR				; COMDAT

; 87   : void TlenResetSearchQuery(TlenProtocol *proto) {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 88   : 	if (proto->searchQuery != NULL) {

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _proto$[esp+4]
  00006	8b 87 a8 01 00
	00		 mov	 eax, DWORD PTR [edi+424]
  0000c	8d b7 a8 01 00
	00		 lea	 esi, DWORD PTR [edi+424]
  00012	85 c0		 test	 eax, eax
  00014	74 0b		 je	 SHORT $L83420

; 89   : 		mir_free(proto->searchQuery);

  00016	50		 push	 eax
  00017	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 90   : 		proto->searchQuery = NULL;

  0001d	83 26 00	 and	 DWORD PTR [esi], 0
  00020	59		 pop	 ecx
$L83420:

; 91   : 	}
; 92   : 	proto->searchQueryLen = 0;

  00021	83 a7 ac 01 00
	00 00		 and	 DWORD PTR [edi+428], 0

; 93   : 	proto->searchIndex = 0;

  00028	83 a7 a4 01 00
	00 00		 and	 DWORD PTR [edi+420], 0

; 94   : 	proto->searchID = JabberSerialNext(proto);

  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _JabberSerialNext
  00035	59		 pop	 ecx
  00036	89 87 a0 01 00
	00		 mov	 DWORD PTR [edi+416], eax
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 95   : }

  0003e	c3		 ret	 0
_TlenResetSearchQuery ENDP
_TEXT	ENDS
PUBLIC	_TlenBasicSearch
PUBLIC	??_C@_09OBPM@?$DMi?$DO?$CFs?$DM?1i?$DO?$AA@	; `string'
EXTRN	_JabberTextEncode:NEAR
EXTRN	_JabberStringAppend:NEAR
;	COMDAT ??_C@_09OBPM@?$DMi?$DO?$CFs?$DM?1i?$DO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_09OBPM@?$DMi?$DO?$CFs?$DM?1i?$DO?$AA@ DB '<i>%s</i>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenBasicSearch
_TEXT	SEGMENT
_ptr$ = 8
_id$ = 12
_TlenBasicSearch PROC NEAR				; COMDAT

; 98   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 99   : 	char *jid;
; 100  : 	int iqId = 0;
; 101  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 102  : 	if (!proto->jabberOnline) return 0;

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _ptr$[esp+4]
  00006	33 db		 xor	 ebx, ebx
  00008	39 9e 78 01 00
	00		 cmp	 DWORD PTR [esi+376], ebx
  0000e	74 06		 je	 SHORT $L84725

; 103  : 	if (id == NULL) return 0;

  00010	39 5c 24 10	 cmp	 DWORD PTR _id$[esp+4], ebx
  00014	75 04		 jne	 SHORT $L83434
$L84725:
  00016	33 c0		 xor	 eax, eax
  00018	eb 55		 jmp	 SHORT $L83427
$L83434:
  0001a	57		 push	 edi

; 104  : 	if ((jid=JabberTextEncode(id)) != NULL) {

  0001b	ff 74 24 14	 push	 DWORD PTR _id$[esp+8]
  0001f	e8 00 00 00 00	 call	 _JabberTextEncode
  00024	8b f8		 mov	 edi, eax
  00026	59		 pop	 ecx
  00027	3b fb		 cmp	 edi, ebx
  00029	74 41		 je	 SHORT $L83436

; 105  : 		proto->searchJID = mir_strdup(id);

  0002b	ff 74 24 14	 push	 DWORD PTR _id$[esp+8]
  0002f	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 106  : 		TlenResetSearchQuery(proto);

  00035	56		 push	 esi
  00036	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax
  0003c	e8 00 00 00 00	 call	 _TlenResetSearchQuery

; 107  : 		JabberStringAppend(&proto->searchQuery, &proto->searchQueryLen, "<i>%s</i>", jid);

  00041	57		 push	 edi
  00042	8d 86 ac 01 00
	00		 lea	 eax, DWORD PTR [esi+428]
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09OBPM@?$DMi?$DO?$CFs?$DM?1i?$DO?$AA@ ; `string'
  0004d	50		 push	 eax
  0004e	8d 86 a8 01 00
	00		 lea	 eax, DWORD PTR [esi+424]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _JabberStringAppend

; 108  : 		iqId = TlenRunSearch(proto);

  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _TlenRunSearch

; 109  : 		mir_free(jid);

  00060	57		 push	 edi
  00061	8b d8		 mov	 ebx, eax
  00063	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00069	83 c4 20	 add	 esp, 32			; 00000020H
$L83436:

; 110  : 	}
; 111  : 	return (HANDLE)iqId;

  0006c	8b c3		 mov	 eax, ebx
  0006e	5f		 pop	 edi
$L83427:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 112  : }

  00071	c3		 ret	 0
_TlenBasicSearch ENDP
_TEXT	ENDS
PUBLIC	_TlenSearchByEmail
PUBLIC	??_C@_0BC@PCJB@?$DMemail?$DO?$CFs?$DM?1email?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BC@PCJB@?$DMemail?$DO?$CFs?$DM?1email?$DO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0BC@PCJB@?$DMemail?$DO?$CFs?$DM?1email?$DO?$AA@ DB '<email>%s</emai'
	DB	'l>', 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenSearchByEmail
_TEXT	SEGMENT
_ptr$ = 8
_email$ = 12
_TlenSearchByEmail PROC NEAR				; COMDAT

; 115  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 116  : 	char *emailEnc;
; 117  : 	int iqId = 0;
; 118  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 119  : 
; 120  : 	if (!proto->jabberOnline) return 0;

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _ptr$[esp+4]
  00006	33 db		 xor	 ebx, ebx
  00008	39 9e 78 01 00
	00		 cmp	 DWORD PTR [esi+376], ebx
  0000e	74 06		 je	 SHORT $L84728

; 121  : 	if (email == NULL) return 0;

  00010	39 5c 24 10	 cmp	 DWORD PTR _email$[esp+4], ebx
  00014	75 04		 jne	 SHORT $L83451
$L84728:
  00016	33 c0		 xor	 eax, eax
  00018	eb 45		 jmp	 SHORT $L83444
$L83451:
  0001a	57		 push	 edi

; 122  : 
; 123  : 	if ((emailEnc=JabberTextEncode(email)) != NULL) {

  0001b	ff 74 24 14	 push	 DWORD PTR _email$[esp+8]
  0001f	e8 00 00 00 00	 call	 _JabberTextEncode
  00024	8b f8		 mov	 edi, eax
  00026	59		 pop	 ecx
  00027	3b fb		 cmp	 edi, ebx
  00029	74 31		 je	 SHORT $L83453

; 124  : 		TlenResetSearchQuery(proto);

  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _TlenResetSearchQuery

; 125  : 		JabberStringAppend(&proto->searchQuery, &proto->searchQueryLen, "<email>%s</email>", emailEnc);

  00031	57		 push	 edi
  00032	8d 86 ac 01 00
	00		 lea	 eax, DWORD PTR [esi+428]
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@PCJB@?$DMemail?$DO?$CFs?$DM?1email?$DO?$AA@ ; `string'
  0003d	50		 push	 eax
  0003e	8d 86 a8 01 00
	00		 lea	 eax, DWORD PTR [esi+424]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _JabberStringAppend

; 126  : 		iqId = TlenRunSearch(proto);

  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _TlenRunSearch

; 127  : 		mir_free(emailEnc);

  00050	57		 push	 edi
  00051	8b d8		 mov	 ebx, eax
  00053	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00059	83 c4 1c	 add	 esp, 28			; 0000001cH
$L83453:

; 128  : 	}
; 129  : 	return (HANDLE)iqId;

  0005c	8b c3		 mov	 eax, ebx
  0005e	5f		 pop	 edi
$L83444:
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 130  : }

  00061	c3		 ret	 0
_TlenSearchByEmail ENDP
_TEXT	ENDS
PUBLIC	_TlenSearchByName
PUBLIC	??_C@_0BA@NNDG@?$DMnick?$DO?$CFs?$DM?1nick?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BC@DPIJ@?$DMfirst?$DO?$CFs?$DM?1first?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BA@FEGG@?$DMlast?$DO?$CFs?$DM?1last?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BA@NNDG@?$DMnick?$DO?$CFs?$DM?1nick?$DO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0BA@NNDG@?$DMnick?$DO?$CFs?$DM?1nick?$DO?$AA@ DB '<nick>%s</nick>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@DPIJ@?$DMfirst?$DO?$CFs?$DM?1first?$DO?$AA@
_DATA	SEGMENT
??_C@_0BC@DPIJ@?$DMfirst?$DO?$CFs?$DM?1first?$DO?$AA@ DB '<first>%s</firs'
	DB	't>', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEGG@?$DMlast?$DO?$CFs?$DM?1last?$DO?$AA@
_DATA	SEGMENT
??_C@_0BA@FEGG@?$DMlast?$DO?$CFs?$DM?1last?$DO?$AA@ DB '<last>%s</last>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenSearchByName
_TEXT	SEGMENT
_ptr$ = 8
_nick$ = 12
_firstName$ = 16
_lastName$ = 20
_TlenSearchByName PROC NEAR				; COMDAT

; 133  : {

  00000	56		 push	 esi

; 134  : 	char *p;
; 135  : 	int iqId = 0;
; 136  : 
; 137  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 138  : 	if (!proto->jabberOnline) return 0;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ptr$[esp]
  00005	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  0000c	75 04		 jne	 SHORT $L83470
  0000e	33 c0		 xor	 eax, eax
  00010	5e		 pop	 esi

; 162  : 	return (HANDLE)iqId;
; 163  : }

  00011	c3		 ret	 0
$L83470:
  00012	57		 push	 edi

; 139  : 
; 140  : 	TlenResetSearchQuery(proto);

  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _TlenResetSearchQuery

; 141  : 
; 142  : 	if (nick != NULL && nick[0] != '\0') {

  00019	8b 44 24 14	 mov	 eax, DWORD PTR _nick$[esp+8]
  0001d	59		 pop	 ecx
  0001e	85 c0		 test	 eax, eax
  00020	74 35		 je	 SHORT $L83474
  00022	80 38 00	 cmp	 BYTE PTR [eax], 0
  00025	74 30		 je	 SHORT $L83474

; 143  : 		if ((p=JabberTextEncode(nick)) != NULL) {

  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _JabberTextEncode
  0002d	8b f8		 mov	 edi, eax
  0002f	59		 pop	 ecx
  00030	85 ff		 test	 edi, edi
  00032	74 23		 je	 SHORT $L83474

; 144  : 			JabberStringAppend(&proto->searchQuery, &proto->searchQueryLen, "<nick>%s</nick>", p);

  00034	57		 push	 edi
  00035	8d 86 ac 01 00
	00		 lea	 eax, DWORD PTR [esi+428]
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@NNDG@?$DMnick?$DO?$CFs?$DM?1nick?$DO?$AA@ ; `string'
  00040	50		 push	 eax
  00041	8d 86 a8 01 00
	00		 lea	 eax, DWORD PTR [esi+424]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _JabberStringAppend

; 145  : 			mir_free(p);

  0004d	57		 push	 edi
  0004e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00054	83 c4 14	 add	 esp, 20			; 00000014H
$L83474:

; 146  : 		}
; 147  : 	}
; 148  : 	if (firstName != NULL && firstName[0] != '\0') {

  00057	8b 44 24 14	 mov	 eax, DWORD PTR _firstName$[esp+4]
  0005b	85 c0		 test	 eax, eax
  0005d	74 35		 je	 SHORT $L83479
  0005f	80 38 00	 cmp	 BYTE PTR [eax], 0
  00062	74 30		 je	 SHORT $L83479

; 149  : 		if ((p=JabberTextEncode(firstName)) != NULL) {

  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _JabberTextEncode
  0006a	8b f8		 mov	 edi, eax
  0006c	59		 pop	 ecx
  0006d	85 ff		 test	 edi, edi
  0006f	74 23		 je	 SHORT $L83479

; 150  : 			JabberStringAppend(&proto->searchQuery, &proto->searchQueryLen, "<first>%s</first>", p);

  00071	57		 push	 edi
  00072	8d 86 ac 01 00
	00		 lea	 eax, DWORD PTR [esi+428]
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DPIJ@?$DMfirst?$DO?$CFs?$DM?1first?$DO?$AA@ ; `string'
  0007d	50		 push	 eax
  0007e	8d 86 a8 01 00
	00		 lea	 eax, DWORD PTR [esi+424]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _JabberStringAppend

; 151  : 			mir_free(p);

  0008a	57		 push	 edi
  0008b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00091	83 c4 14	 add	 esp, 20			; 00000014H
$L83479:

; 152  : 		}
; 153  : 	}
; 154  : 	if (lastName != NULL && lastName[0] != '\0') {

  00094	8b 44 24 18	 mov	 eax, DWORD PTR _lastName$[esp+4]
  00098	85 c0		 test	 eax, eax
  0009a	74 35		 je	 SHORT $L83484
  0009c	80 38 00	 cmp	 BYTE PTR [eax], 0
  0009f	74 30		 je	 SHORT $L83484

; 155  : 		if ((p=JabberTextEncode(lastName)) != NULL) {

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _JabberTextEncode
  000a7	8b f8		 mov	 edi, eax
  000a9	59		 pop	 ecx
  000aa	85 ff		 test	 edi, edi
  000ac	74 23		 je	 SHORT $L83484

; 156  : 			JabberStringAppend(&proto->searchQuery, &proto->searchQueryLen, "<last>%s</last>", p);

  000ae	57		 push	 edi
  000af	8d 86 ac 01 00
	00		 lea	 eax, DWORD PTR [esi+428]
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@FEGG@?$DMlast?$DO?$CFs?$DM?1last?$DO?$AA@ ; `string'
  000ba	50		 push	 eax
  000bb	8d 86 a8 01 00
	00		 lea	 eax, DWORD PTR [esi+424]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _JabberStringAppend

; 157  : 			mir_free(p);

  000c7	57		 push	 edi
  000c8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
$L83484:

; 158  : 		}
; 159  : 	}
; 160  : 
; 161  : 	iqId = TlenRunSearch(proto);

  000d1	56		 push	 esi
  000d2	e8 00 00 00 00	 call	 _TlenRunSearch
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi

; 162  : 	return (HANDLE)iqId;
; 163  : }

  000da	c3		 ret	 0
_TlenSearchByName ENDP
_TEXT	ENDS
PUBLIC	_TlenCreateAdvSearchUI
EXTRN	__imp__CreateDialogParamW@20:NEAR
EXTRN	_hInst:DWORD
EXTRN	_TlenAdvSearchDlgProc@16:NEAR
;	COMDAT _TlenCreateAdvSearchUI
_TEXT	SEGMENT
_owner$ = 12
_TlenCreateAdvSearchUI PROC NEAR			; COMDAT

; 167  : 	return (HWND) CreateDialog(hInst, MAKEINTRESOURCE(IDD_ADVSEARCH), owner, TlenAdvSearchDlgProc);

  00000	6a 00		 push	 0
  00002	68 00 00 00 00	 push	 OFFSET FLAT:_TlenAdvSearchDlgProc@16
  00007	ff 74 24 10	 push	 DWORD PTR _owner$[esp+4]
  0000b	68 9e 00 00 00	 push	 158			; 0000009eH
  00010	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 168  : }

  0001c	c3		 ret	 0
_TlenCreateAdvSearchUI ENDP
_TEXT	ENDS
PUBLIC	_TlenSearchAdvanced
EXTRN	_TlenAdvSearchCreateQuery:NEAR
;	COMDAT _TlenSearchAdvanced
_TEXT	SEGMENT
_ptr$ = 8
_owner$ = 12
_TlenSearchAdvanced PROC NEAR				; COMDAT

; 171  : {

  00000	56		 push	 esi

; 172  : 	int iqId;
; 173  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 174  : 	if (!proto->jabberOnline) return 0;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ptr$[esp]
  00005	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  0000c	75 04		 jne	 SHORT $L83506
  0000e	33 c0		 xor	 eax, eax
  00010	5e		 pop	 esi

; 182  : }

  00011	c3		 ret	 0
$L83506:
  00012	57		 push	 edi

; 175  : 
; 176  : 	TlenResetSearchQuery(proto);

  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _TlenResetSearchQuery

; 177  : 	iqId = JabberSerialNext(proto);

  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _JabberSerialNext
  0001f	8b f8		 mov	 edi, eax

; 178  : 	if ((proto->searchQuery = TlenAdvSearchCreateQuery(owner, iqId)) != NULL) {

  00021	57		 push	 edi
  00022	ff 74 24 1c	 push	 DWORD PTR _owner$[esp+16]
  00026	e8 00 00 00 00	 call	 _TlenAdvSearchCreateQuery
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 86 a8 01 00
	00		 mov	 DWORD PTR [esi+424], eax
  00034	85 c0		 test	 eax, eax
  00036	74 09		 je	 SHORT $L83508

; 179  : 		iqId = TlenRunSearch(proto);

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _TlenRunSearch
  0003e	59		 pop	 ecx
  0003f	8b f8		 mov	 edi, eax
$L83508:

; 180  : 	}
; 181  : 	return (HWND)iqId;

  00041	8b c7		 mov	 eax, edi
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 182  : }

  00045	c3		 ret	 0
_TlenSearchAdvanced ENDP
_TEXT	ENDS
PUBLIC	_TlenAddToList
;	COMDAT _TlenAddToList
_TEXT	SEGMENT
_ptr$ = 8
_flags$ = 12
_psr$ = 16
_TlenAddToList PROC NEAR				; COMDAT

; 225  : 	HANDLE hContact;
; 226  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 227  :     JABBER_SEARCH_RESULT *jsr = (JABBER_SEARCH_RESULT*)psr;
; 228  : 	if (jsr->hdr.cbSize != sizeof(JABBER_SEARCH_RESULT))

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _psr$[esp-4]
  00004	81 38 24 01 00
	00		 cmp	 DWORD PTR [eax], 292	; 00000124H
  0000a	74 03		 je	 SHORT $L83551

; 229  : 		return (int) NULL;

  0000c	33 c0		 xor	 eax, eax

; 231  : 	return hContact;
; 232  : }

  0000e	c3		 ret	 0
$L83551:

; 230  : 	hContact = AddToListByJID(proto, jsr->jid, flags);	// wParam is flag e.g. PALF_TEMPORARY

  0000f	ff 74 24 08	 push	 DWORD PTR _flags$[esp-4]
  00013	83 c0 24	 add	 eax, 36			; 00000024H
  00016	50		 push	 eax
  00017	ff 74 24 0c	 push	 DWORD PTR _ptr$[esp+4]
  0001b	e8 00 00 00 00	 call	 _AddToListByJID
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 231  : 	return hContact;
; 232  : }

  00023	c3		 ret	 0
_TlenAddToList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@	; `string'
PUBLIC	??_C@_0P@HDHJ@DB?1Contact?1Add?$AA@		; `string'
PUBLIC	??_C@_0BD@POEG@Proto?1AddToContact?$AA@		; `string'
PUBLIC	??_C@_08GNFE@MyHandle?$AA@			; `string'
PUBLIC	??_C@_05NNBH@CList?$AA@				; `string'
PUBLIC	??_C@_09ELKP@NotOnList?$AA@			; `string'
PUBLIC	??_C@_06OCEO@Hidden?$AA@			; `string'
EXTRN	__imp___strlwr:NEAR
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	_JabberNickFromJID:NEAR
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ DB 'DB/Contact/WriteSetting'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@HDHJ@DB?1Contact?1Add?$AA@
_DATA	SEGMENT
??_C@_0P@HDHJ@DB?1Contact?1Add?$AA@ DB 'DB/Contact/Add', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@POEG@Proto?1AddToContact?$AA@
_DATA	SEGMENT
??_C@_0BD@POEG@Proto?1AddToContact?$AA@ DB 'Proto/AddToContact', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT
??_C@_08GNFE@MyHandle?$AA@ DB 'MyHandle', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT
??_C@_05NNBH@CList?$AA@ DB 'CList', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ELKP@NotOnList?$AA@
_DATA	SEGMENT
??_C@_09ELKP@NotOnList?$AA@ DB 'NotOnList', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT
??_C@_06OCEO@Hidden?$AA@ DB 'Hidden', 00H		; `string'
_DATA	ENDS
;	COMDAT _AddToListByJID
_TEXT	SEGMENT
_proto$ = 8
_newJid$ = 12
_flags$ = 16
_jid$ = -4
_nick$ = 8
_cws$84741 = -24
_cws$84746 = -24
_cws$84750 = -24
_cws$84754 = -24
_cws$84758 = -24
_AddToListByJID PROC NEAR				; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 186  : 	HANDLE hContact;
; 187  : 	char *jid, *nick;
; 188  : 
; 189  : 	if ((hContact=JabberHContactFromJID(proto, newJid)) == NULL) {

  00008	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 0c	 push	 DWORD PTR _newJid$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00015	8b d8		 mov	 ebx, eax
  00017	59		 pop	 ecx
  00018	85 db		 test	 ebx, ebx
  0001a	59		 pop	 ecx
  0001b	0f 85 f9 00 00
	00		 jne	 $L83522

; 190  : 		// not already there: add
; 191  : 		jid = mir_strdup(newJid); _strlwr(jid);

  00021	ff 75 0c	 push	 DWORD PTR _newJid$[ebp]
  00024	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0002a	8b f8		 mov	 edi, eax
  0002c	57		 push	 edi
  0002d	89 7d fc	 mov	 DWORD PTR _jid$[ebp], edi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strlwr

; 192  : 		hContact = (HANDLE) CallService(MS_DB_CONTACT_ADD, 0, 0);

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0003b	53		 push	 ebx
  0003c	53		 push	 ebx
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@HDHJ@DB?1Contact?1Add?$AA@ ; `string'
  00042	ff 50 24	 call	 DWORD PTR [eax+36]

; 193  : 		CallService(MS_PROTO_ADDTOCONTACT, (WPARAM) hContact, (LPARAM) proto->iface.m_szModuleName);

  00045	ff 76 1c	 push	 DWORD PTR [esi+28]
  00048	8b d8		 mov	 ebx, eax
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0004f	53		 push	 ebx
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@POEG@Proto?1AddToContact?$AA@ ; `string'
  00055	ff 50 24	 call	 DWORD PTR [eax+36]

; 194  : 		DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "jid", jid);

  00058	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005b	80 4d f0 ff	 or	 BYTE PTR _cws$84741[ebp+8], 255 ; 000000ffH
  0005f	89 45 e8	 mov	 DWORD PTR _cws$84741[ebp], eax
  00062	8d 45 e8	 lea	 eax, DWORD PTR _cws$84741[ebp]
  00065	50		 push	 eax
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0006b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00070	53		 push	 ebx
  00071	56		 push	 esi
  00072	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$84741[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00079	89 7d f4	 mov	 DWORD PTR _cws$84741[ebp+12], edi
  0007c	ff 50 24	 call	 DWORD PTR [eax+36]

; 195  : 		if ((nick=JabberNickFromJID(newJid)) == NULL)

  0007f	ff 75 0c	 push	 DWORD PTR _newJid$[ebp]
  00082	e8 00 00 00 00	 call	 _JabberNickFromJID
  00087	83 c4 30	 add	 esp, 48			; 00000030H
  0008a	89 45 08	 mov	 DWORD PTR _nick$[ebp], eax
  0008d	85 c0		 test	 eax, eax
  0008f	75 0d		 jne	 SHORT $L83529

; 196  : 			nick = mir_strdup(newJid);

  00091	ff 75 0c	 push	 DWORD PTR _newJid$[ebp]
  00094	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0009a	59		 pop	 ecx
  0009b	89 45 08	 mov	 DWORD PTR _nick$[ebp], eax
$L83529:

; 197  : 		DBWriteContactSettingString(hContact, "CList", "MyHandle", nick);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _nick$[ebp]
  000a1	80 4d f0 ff	 or	 BYTE PTR _cws$84746[ebp+8], 255 ; 000000ffH
  000a5	89 45 f4	 mov	 DWORD PTR _cws$84746[ebp+12], eax
  000a8	8d 45 e8	 lea	 eax, DWORD PTR _cws$84746[ebp]
  000ab	50		 push	 eax
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000b1	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  000b6	53		 push	 ebx
  000b7	56		 push	 esi
  000b8	89 7d e8	 mov	 DWORD PTR _cws$84746[ebp], edi
  000bb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$84746[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  000c2	ff 50 24	 call	 DWORD PTR [eax+36]

; 198  : 		mir_free(nick);

  000c5	ff 75 08	 push	 DWORD PTR _nick$[ebp]
  000c8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 199  : 		mir_free(jid);

  000ce	ff 75 fc	 push	 DWORD PTR _jid$[ebp]
  000d1	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 200  : 
; 201  : 		// Note that by removing or disable the "NotOnList" will trigger
; 202  : 		// the plugin to add a particular contact to the roster list.
; 203  : 		// See DBSettingChanged hook at the bottom part of this source file.
; 204  : 		// But the add module will delete "NotOnList". So we will not do it here.
; 205  : 		// Also because we need "MyHandle" and "Group" info, which are set after
; 206  : 		// PS_ADDTOLIST is called but before the add dialog issue deletion of
; 207  : 		// "NotOnList".
; 208  : 		// If temporary add, "NotOnList" won't be deleted, and that's expected.
; 209  : 		DBWriteContactSettingByte(hContact, "CList", "NotOnList", 1);

  000d7	8d 45 e8	 lea	 eax, DWORD PTR _cws$84750[ebp]
  000da	89 7d e8	 mov	 DWORD PTR _cws$84750[ebp], edi
  000dd	50		 push	 eax
  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e3	53		 push	 ebx
  000e4	56		 push	 esi
  000e5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$84750[ebp+4], OFFSET FLAT:??_C@_09ELKP@NotOnList?$AA@ ; `string'
  000ec	c6 45 f0 01	 mov	 BYTE PTR _cws$84750[ebp+8], 1
  000f0	c6 45 f4 01	 mov	 BYTE PTR _cws$84750[ebp+12], 1
  000f4	ff 50 24	 call	 DWORD PTR [eax+36]
  000f7	83 c4 20	 add	 esp, 32			; 00000020H

; 210  : 		if (flags & PALF_TEMPORARY)

  000fa	f6 45 10 01	 test	 BYTE PTR _flags$[ebp], 1
  000fe	74 4b		 je	 SHORT $L84757

; 211  : 			DBWriteContactSettingByte(hContact, "CList", "Hidden", 1);

  00100	8d 45 e8	 lea	 eax, DWORD PTR _cws$84754[ebp]
  00103	89 7d e8	 mov	 DWORD PTR _cws$84754[ebp], edi
  00106	50		 push	 eax
  00107	53		 push	 ebx
  00108	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$84754[ebp+4], OFFSET FLAT:??_C@_06OCEO@Hidden?$AA@ ; `string'
  0010f	c6 45 f0 01	 mov	 BYTE PTR _cws$84754[ebp+8], 1
  00113	c6 45 f4 01	 mov	 BYTE PTR _cws$84754[ebp+12], 1
  00117	56		 push	 esi

; 212  : 	}
; 213  : 	else {

  00118	eb 26		 jmp	 SHORT $L84760
$L83522:

; 214  : 		// already exist
; 215  : 		// Set up a dummy "NotOnList" when adding permanently only
; 216  : 		if (!(flags&PALF_TEMPORARY))

  0011a	f6 45 10 01	 test	 BYTE PTR _flags$[ebp], 1
  0011e	75 2b		 jne	 SHORT $L84757

; 217  : 			DBWriteContactSettingByte(hContact, "CList", "NotOnList", 1);

  00120	8d 45 e8	 lea	 eax, DWORD PTR _cws$84758[ebp]
  00123	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cws$84758[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  0012a	50		 push	 eax
  0012b	53		 push	 ebx
  0012c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$84758[ebp+4], OFFSET FLAT:??_C@_09ELKP@NotOnList?$AA@ ; `string'
  00133	c6 45 f0 01	 mov	 BYTE PTR _cws$84758[ebp+8], 1
  00137	c6 45 f4 01	 mov	 BYTE PTR _cws$84758[ebp+12], 1
  0013b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
$L84760:
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00145	ff 50 24	 call	 DWORD PTR [eax+36]
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84757:
  0014b	5f		 pop	 edi

; 218  : 	}
; 219  : 
; 220  : 	return hContact;

  0014c	8b c3		 mov	 eax, ebx
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx

; 221  : }

  00150	c9		 leave
  00151	c3		 ret	 0
_AddToListByJID ENDP
_TEXT	ENDS
PUBLIC	_TlenAddToListByEvent
PUBLIC	??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@	; `string'
PUBLIC	??_C@_0N@BBFJ@DB?1Event?1Get?$AA@		; `string'
EXTRN	_memset:NEAR
EXTRN	_strcmp:NEAR
EXTRN	_strlen:NEAR
;	COMDAT ??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@ DB 'DB/Event/GetBlobSize', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@BBFJ@DB?1Event?1Get?$AA@
_DATA	SEGMENT
??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ DB 'DB/Event/Get', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenAddToListByEvent
_TEXT	SEGMENT
_ptr$ = 8
_flags$ = 12
_hDbEvent$ = 20
_dbei$ = -28
_TlenAddToListByEvent PROC NEAR				; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi

; 236  : 	DBEVENTINFO dbei;
; 237  : 	HANDLE hContact;
; 238  : 	char *nick, *firstName, *lastName, *jid;
; 239  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 240  : 
; 241  : 	ZeroMemory(&dbei, sizeof(dbei));

  00007	6a 1c		 push	 28			; 0000001cH
  00009	5e		 pop	 esi
  0000a	8d 45 e4	 lea	 eax, DWORD PTR _dbei$[ebp]
  0000d	56		 push	 esi
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset

; 242  : 	dbei.cbSize = sizeof(dbei);
; 243  : 	if ((dbei.cbBlob=CallService(MS_DB_EVENT_GETBLOBSIZE, (WPARAM)hDbEvent, 0)) == (DWORD)(-1))

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001b	6a 00		 push	 0
  0001d	ff 75 14	 push	 DWORD PTR _hDbEvent$[ebp]
  00020	89 75 e4	 mov	 DWORD PTR _dbei$[ebp], esi
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@ ; `string'
  00028	ff 50 24	 call	 DWORD PTR [eax+36]
  0002b	83 c4 18	 add	 esp, 24			; 00000018H
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	89 45 f8	 mov	 DWORD PTR _dbei$[ebp+20], eax

; 244  : 		return (int)(HANDLE) NULL;

  00034	74 0f		 je	 SHORT $L84766

; 245  : 	if ((dbei.pBlob=(PBYTE) mir_alloc(dbei.cbBlob)) == NULL)

  00036	50		 push	 eax
  00037	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0003d	85 c0		 test	 eax, eax
  0003f	59		 pop	 ecx
  00040	89 45 fc	 mov	 DWORD PTR _dbei$[ebp+24], eax
  00043	75 04		 jne	 SHORT $L83581
$L84766:

; 246  : 		return (int)(HANDLE) NULL;

  00045	33 c0		 xor	 eax, eax
  00047	eb 7c		 jmp	 SHORT $L83563
$L83581:

; 247  : 	if (CallService(MS_DB_EVENT_GET, (WPARAM)hDbEvent, (LPARAM) &dbei)) {

  00049	8d 45 e4	 lea	 eax, DWORD PTR _dbei$[ebp]
  0004c	57		 push	 edi
  0004d	50		 push	 eax
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00053	ff 75 14	 push	 DWORD PTR _hDbEvent$[ebp]
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ ; `string'
  0005b	ff 50 24	 call	 DWORD PTR [eax+36]
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	85 c0		 test	 eax, eax
  00063	74 04		 je	 SHORT $L83587
$L84765:
  00065	33 f6		 xor	 esi, esi
  00067	eb 4f		 jmp	 SHORT $L84762
$L83587:

; 248  : 		mir_free(dbei.pBlob);
; 249  : 		return (int)(HANDLE) NULL;
; 250  : 	}
; 251  : 	if (strcmp(dbei.szModule, proto->iface.m_szModuleName)) {

  00069	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0006c	ff 77 1c	 push	 DWORD PTR [edi+28]
  0006f	ff 75 e8	 push	 DWORD PTR _dbei$[ebp+4]
  00072	e8 00 00 00 00	 call	 _strcmp
  00077	59		 pop	 ecx
  00078	85 c0		 test	 eax, eax
  0007a	59		 pop	 ecx
  0007b	75 e8		 jne	 SHORT $L84765

; 252  : 		mir_free(dbei.pBlob);
; 253  : 		return (int)(HANDLE) NULL;
; 254  : 	}
; 255  : 
; 256  : /*
; 257  : 	// EVENTTYPE_CONTACTS is when adding from when we receive contact list (not used in Jabber)
; 258  : 	// EVENTTYPE_ADDED is when adding from when we receive "You are added" (also not used in Jabber)
; 259  : 	// Jabber will only handle the case of EVENTTYPE_AUTHREQUEST
; 260  : 	// EVENTTYPE_AUTHREQUEST is when adding from the authorization request dialog
; 261  : */
; 262  : 
; 263  : 	if (dbei.eventType != EVENTTYPE_AUTHREQUEST) {

  0007d	66 81 7d f4 e9
	03		 cmp	 WORD PTR _dbei$[ebp+16], 1001 ; 000003e9H
  00083	75 e0		 jne	 SHORT $L84765

; 264  : 		mir_free(dbei.pBlob);
; 265  : 		return (int)(HANDLE) NULL;
; 266  : 	}
; 267  : 
; 268  : 	nick = (char *) (dbei.pBlob + sizeof(DWORD) + sizeof(HANDLE));

  00085	8b 45 fc	 mov	 eax, DWORD PTR _dbei$[ebp+24]
  00088	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 269  : 	firstName = nick + strlen(nick) + 1;

  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 _strlen
  00091	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 270  : 	lastName = firstName + strlen(firstName) + 1;

  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 _strlen
  0009b	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 271  : 	jid = lastName + strlen(lastName) + 1;

  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _strlen

; 272  : 
; 273  : 	hContact = (HANDLE) AddToListByJID(proto, jid, flags);

  000a5	ff 75 0c	 push	 DWORD PTR _flags$[ebp]
  000a8	8d 44 30 01	 lea	 eax, DWORD PTR [eax+esi+1]
  000ac	50		 push	 eax
  000ad	57		 push	 edi
  000ae	e8 00 00 00 00	 call	 _AddToListByJID
  000b3	83 c4 18	 add	 esp, 24			; 00000018H
  000b6	8b f0		 mov	 esi, eax
$L84762:

; 274  : 	mir_free(dbei.pBlob);

  000b8	ff 75 fc	 push	 DWORD PTR _dbei$[ebp+24]
  000bb	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000c1	59		 pop	 ecx

; 275  : 
; 276  : 	return hContact;

  000c2	8b c6		 mov	 eax, esi
  000c4	5f		 pop	 edi
$L83563:
  000c5	5e		 pop	 esi

; 277  : }

  000c6	c9		 leave
  000c7	c3		 ret	 0
_TlenAddToListByEvent ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@	; `string'
PUBLIC	??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@	; `string'
PUBLIC	_TlenAuthAllow
PUBLIC	??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
PUBLIC	??_C@_07MAJI@AutoAdd?$AA@			; `string'
PUBLIC	??_C@_0CI@OMLA@Try?5adding?5contact?5automatically@ ; `string'
EXTRN	_JabberListGetItemPtr:NEAR
EXTRN	_JabberLog:NEAR
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ DB 'DB/Contact/GetSetting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT
??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ DB 'DB/Contact/DeleteSetti'
	DB	'ng', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT
??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ DB '<pr'
	DB	'esence to=''%s'' type=''subscribed''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MAJI@AutoAdd?$AA@
_DATA	SEGMENT
??_C@_07MAJI@AutoAdd?$AA@ DB 'AutoAdd', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@OMLA@Try?5adding?5contact?5automatically@
_DATA	SEGMENT
??_C@_0CI@OMLA@Try?5adding?5contact?5automatically@ DB 'Try adding contac'
	DB	't automatically jid=%s', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenAuthAllow
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_dbei$ = -52
_dbv$84770 = -24
_cgs$84771 = -12
_cgs$84779 = -12
_TlenAuthAllow PROC NEAR				; COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 281  : 	DBEVENTINFO dbei;
; 282  : 	char *nick, *firstName, *lastName, *jid;
; 283  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 284  : 
; 285  : 	if (!proto->jabberOnline)

  00009	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0000c	33 db		 xor	 ebx, ebx
  0000e	39 9f 78 01 00
	00		 cmp	 DWORD PTR [edi+376], ebx

; 286  : 		return 1;

  00014	74 3c		 je	 SHORT $L84786

; 287  : 
; 288  : 	memset(&dbei, sizeof(dbei), 0);

  00016	53		 push	 ebx
  00017	6a 1c		 push	 28			; 0000001cH
  00019	5e		 pop	 esi
  0001a	8d 45 cc	 lea	 eax, DWORD PTR _dbei$[ebp]
  0001d	56		 push	 esi
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _memset

; 289  : 	dbei.cbSize = sizeof(dbei);
; 290  : 	if ((dbei.cbBlob=CallService(MS_DB_EVENT_GETBLOBSIZE, (WPARAM)hContact, 0)) == (DWORD)(-1))

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00029	53		 push	 ebx
  0002a	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  0002d	89 75 cc	 mov	 DWORD PTR _dbei$[ebp], esi
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@ ; `string'
  00035	ff 50 24	 call	 DWORD PTR [eax+36]
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	89 45 e0	 mov	 DWORD PTR _dbei$[ebp+20], eax

; 291  : 		return 1;

  00041	74 0f		 je	 SHORT $L84786

; 292  : 	if ((dbei.pBlob=(PBYTE) mir_alloc(dbei.cbBlob)) == NULL)

  00043	50		 push	 eax
  00044	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0004a	3b c3		 cmp	 eax, ebx
  0004c	59		 pop	 ecx
  0004d	89 45 e4	 mov	 DWORD PTR _dbei$[ebp+24], eax
  00050	75 08		 jne	 SHORT $L83623
$L84786:

; 293  : 		return 1;

  00052	6a 01		 push	 1
  00054	58		 pop	 eax
  00055	e9 07 01 00 00	 jmp	 $L83609
$L83623:

; 294  : 	if (CallService(MS_DB_EVENT_GET, (WPARAM)hContact, (LPARAM) &dbei)) {

  0005a	8d 45 cc	 lea	 eax, DWORD PTR _dbei$[ebp]
  0005d	50		 push	 eax
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00063	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ ; `string'
  0006b	ff 50 24	 call	 DWORD PTR [eax+36]
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	85 c0		 test	 eax, eax
  00073	74 08		 je	 SHORT $L83626
$L84785:
  00075	6a 01		 push	 1
  00077	5b		 pop	 ebx
  00078	e9 d8 00 00 00	 jmp	 $L84782
$L83626:

; 295  : 		mir_free(dbei.pBlob);
; 296  : 		return 1;
; 297  : 	}
; 298  : 	if (dbei.eventType != EVENTTYPE_AUTHREQUEST) {

  0007d	66 81 7d dc e9
	03		 cmp	 WORD PTR _dbei$[ebp+16], 1001 ; 000003e9H
  00083	75 f0		 jne	 SHORT $L84785

; 299  : 		mir_free(dbei.pBlob);
; 300  : 		return 1;
; 301  : 	}
; 302  : 	if (strcmp(dbei.szModule, proto->iface.m_szModuleName)) {

  00085	ff 77 1c	 push	 DWORD PTR [edi+28]
  00088	ff 75 d0	 push	 DWORD PTR _dbei$[ebp+4]
  0008b	e8 00 00 00 00	 call	 _strcmp
  00090	59		 pop	 ecx
  00091	85 c0		 test	 eax, eax
  00093	59		 pop	 ecx
  00094	75 df		 jne	 SHORT $L84785

; 303  : 		mir_free(dbei.pBlob);
; 304  : 		return 1;
; 305  : 	}
; 306  : 
; 307  : 	nick = (char *) (dbei.pBlob + sizeof(DWORD) + sizeof(HANDLE));

  00096	8b 45 e4	 mov	 eax, DWORD PTR _dbei$[ebp+24]
  00099	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 308  : 	firstName = nick + strlen(nick) + 1;

  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 _strlen
  000a2	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 309  : 	lastName = firstName + strlen(firstName) + 1;

  000a6	56		 push	 esi
  000a7	e8 00 00 00 00	 call	 _strlen
  000ac	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 310  : 	jid = lastName + strlen(lastName) + 1;

  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 _strlen
  000b6	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 311  : 
; 312  : 	JabberSend(proto, "<presence to='%s' type='subscribed'/>", jid);

  000ba	56		 push	 esi
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
  000c0	57		 push	 edi
  000c1	e8 00 00 00 00	 call	 _JabberSend

; 313  : 
; 314  : 	// Automatically add this user to my roster if option is enabled
; 315  : 	if (DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "AutoAdd", TRUE) == TRUE) {

  000c6	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000c9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84771[ebp+4], OFFSET FLAT:??_C@_07MAJI@AutoAdd?$AA@ ; `string'
  000d0	89 45 f4	 mov	 DWORD PTR _cgs$84771[ebp], eax
  000d3	8d 45 e8	 lea	 eax, DWORD PTR _dbv$84770[ebp]
  000d6	89 45 fc	 mov	 DWORD PTR _cgs$84771[ebp+8], eax
  000d9	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84771[ebp]
  000dc	50		 push	 eax
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e2	53		 push	 ebx
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000e8	ff 50 24	 call	 DWORD PTR [eax+36]
  000eb	83 c4 24	 add	 esp, 36			; 00000024H
  000ee	85 c0		 test	 eax, eax
  000f0	75 09		 jne	 SHORT $L84781
  000f2	0f b6 45 ec	 movzx	 eax, BYTE PTR _dbv$84770[ebp+4]
  000f6	83 f8 01	 cmp	 eax, 1
  000f9	75 5a		 jne	 SHORT $L84782
$L84781:

; 316  : 		HANDLE hContact;
; 317  : 		JABBER_LIST_ITEM *item;
; 318  : 
; 319  : 		if ((item=JabberListGetItemPtr(proto, LIST_ROSTER, jid))==NULL || (item->subscription!=SUB_BOTH && item->subscription!=SUB_TO)) {

  000fb	56		 push	 esi
  000fc	53		 push	 ebx
  000fd	57		 push	 edi
  000fe	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
  00106	3b c3		 cmp	 eax, ebx
  00108	74 0d		 je	 SHORT $L83641
  0010a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0010d	83 f8 03	 cmp	 eax, 3
  00110	74 43		 je	 SHORT $L84782
  00112	83 f8 01	 cmp	 eax, 1
  00115	74 3e		 je	 SHORT $L84782
$L83641:

; 320  : 			JabberLog(proto, "Try adding contact automatically jid=%s", jid);

  00117	56		 push	 esi
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OMLA@Try?5adding?5contact?5automatically@ ; `string'
  0011d	57		 push	 edi
  0011e	e8 00 00 00 00	 call	 _JabberLog

; 321  : 			if ((hContact=AddToListByJID(proto, jid, 0)) != NULL) {

  00123	53		 push	 ebx
  00124	56		 push	 esi
  00125	57		 push	 edi
  00126	e8 00 00 00 00	 call	 _AddToListByJID
  0012b	83 c4 18	 add	 esp, 24			; 00000018H
  0012e	3b c3		 cmp	 eax, ebx
  00130	74 23		 je	 SHORT $L84782

; 322  : 				// Trigger actual add by removing the "NotOnList" added by AddToListByJID()
; 323  : 				// See AddToListByJID() and JabberDbSettingChanged().
; 324  : 				DBDeleteContactSetting(hContact, "CList", "NotOnList");

  00132	8d 4d f4	 lea	 ecx, DWORD PTR _cgs$84779[ebp]
  00135	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$84779[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  0013c	51		 push	 ecx
  0013d	50		 push	 eax
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  00148	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84779[ebp+4], OFFSET FLAT:??_C@_09ELKP@NotOnList?$AA@ ; `string'
  0014f	ff 50 24	 call	 DWORD PTR [eax+36]
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84782:

; 325  : 			}
; 326  : 		}
; 327  : 	}
; 328  : 
; 329  : 	mir_free(dbei.pBlob);

  00155	ff 75 e4	 push	 DWORD PTR _dbei$[ebp+24]
  00158	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0015e	59		 pop	 ecx

; 330  : 	return 0;

  0015f	8b c3		 mov	 eax, ebx
$L83609:
  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx

; 331  : }

  00164	c9		 leave
  00165	c3		 ret	 0
_TlenAuthAllow ENDP
_TEXT	ENDS
PUBLIC	_TlenAuthDeny
PUBLIC	??_C@_0CI@JMMB@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8unsubscr@ ; `string'
PUBLIC	??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
;	COMDAT ??_C@_0CI@JMMB@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8unsubscr@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0CI@JMMB@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8unsubscr@ DB '<pr'
	DB	'esence to=''%s'' type=''unsubscribed''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT
??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ DB '<'
	DB	'iq type=''set''><query xmlns=''jabber:iq:roster''><item jid='''
	DB	'%s'' subscription=''remove''/></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenAuthDeny
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_dbei$ = -28
_TlenAuthDeny PROC NEAR					; COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 335  : 	DBEVENTINFO dbei;
; 336  : 	char *nick, *firstName, *lastName, *jid;
; 337  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 338  : 
; 339  : 	if (!proto->jabberOnline)

  00008	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0000b	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0

; 340  : 		return 1;

  00012	74 3e		 je	 SHORT $L84792

; 341  : 
; 342  : 	memset(&dbei, sizeof(dbei), 0);

  00014	6a 00		 push	 0
  00016	6a 1c		 push	 28			; 0000001cH
  00018	5e		 pop	 esi
  00019	8d 45 e4	 lea	 eax, DWORD PTR _dbei$[ebp]
  0001c	56		 push	 esi
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memset

; 343  : 	dbei.cbSize = sizeof(dbei);
; 344  : 	if ((dbei.cbBlob=CallService(MS_DB_EVENT_GETBLOBSIZE, (WPARAM)hContact, 0)) == (DWORD)(-1))

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00028	6a 00		 push	 0
  0002a	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  0002d	89 75 e4	 mov	 DWORD PTR _dbei$[ebp], esi
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@MNII@DB?1Event?1GetBlobSize?$AA@ ; `string'
  00035	ff 50 24	 call	 DWORD PTR [eax+36]
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	89 45 f8	 mov	 DWORD PTR _dbei$[ebp+20], eax

; 345  : 		return 1;

  00041	74 0f		 je	 SHORT $L84792

; 346  : 	if ((dbei.pBlob=(PBYTE) mir_alloc(dbei.cbBlob)) == NULL)

  00043	50		 push	 eax
  00044	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0004a	85 c0		 test	 eax, eax
  0004c	59		 pop	 ecx
  0004d	89 45 fc	 mov	 DWORD PTR _dbei$[ebp+24], eax
  00050	75 08		 jne	 SHORT $L83666
$L84792:

; 347  : 		return 1;

  00052	6a 01		 push	 1
  00054	58		 pop	 eax
  00055	e9 86 00 00 00	 jmp	 $L83652
$L83666:

; 348  : 	if (CallService(MS_DB_EVENT_GET, (WPARAM)hContact, (LPARAM) &dbei)) {

  0005a	8d 45 e4	 lea	 eax, DWORD PTR _dbei$[ebp]
  0005d	50		 push	 eax
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00063	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ ; `string'
  0006b	ff 50 24	 call	 DWORD PTR [eax+36]
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	85 c0		 test	 eax, eax
  00073	74 05		 je	 SHORT $L83669
$L84791:
  00075	6a 01		 push	 1
  00077	5e		 pop	 esi
  00078	eb 5a		 jmp	 SHORT $L84788
$L83669:

; 349  : 		mir_free(dbei.pBlob);
; 350  : 		return 1;
; 351  : 	}
; 352  : 	if (dbei.eventType != EVENTTYPE_AUTHREQUEST) {

  0007a	66 81 7d f4 e9
	03		 cmp	 WORD PTR _dbei$[ebp+16], 1001 ; 000003e9H
  00080	75 f3		 jne	 SHORT $L84791

; 353  : 		mir_free(dbei.pBlob);
; 354  : 		return 1;
; 355  : 	}
; 356  : 	if (strcmp(dbei.szModule, proto->iface.m_szModuleName)) {

  00082	ff 77 1c	 push	 DWORD PTR [edi+28]
  00085	ff 75 e8	 push	 DWORD PTR _dbei$[ebp+4]
  00088	e8 00 00 00 00	 call	 _strcmp
  0008d	59		 pop	 ecx
  0008e	85 c0		 test	 eax, eax
  00090	59		 pop	 ecx
  00091	75 e2		 jne	 SHORT $L84791

; 357  : 		mir_free(dbei.pBlob);
; 358  : 		return 1;
; 359  : 	}
; 360  : 
; 361  : 	nick = (char *) (dbei.pBlob + sizeof(DWORD) + sizeof(HANDLE));

  00093	8b 45 fc	 mov	 eax, DWORD PTR _dbei$[ebp+24]
  00096	8d 70 08	 lea	 esi, DWORD PTR [eax+8]

; 362  : 	firstName = nick + strlen(nick) + 1;

  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 _strlen
  0009f	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 363  : 	lastName = firstName + strlen(firstName) + 1;

  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _strlen
  000a9	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 364  : 	jid = lastName + strlen(lastName) + 1;

  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _strlen
  000b3	8d 74 30 01	 lea	 esi, DWORD PTR [eax+esi+1]

; 365  : 
; 366  : 	JabberSend(proto, "<presence to='%s' type='unsubscribed'/>", jid);

  000b7	56		 push	 esi
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@JMMB@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8unsubscr@ ; `string'
  000bd	57		 push	 edi
  000be	e8 00 00 00 00	 call	 _JabberSend

; 367  : 	JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item jid='%s' subscription='remove'/></query></iq>", jid);

  000c3	56		 push	 esi
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  000c9	57		 push	 edi
  000ca	e8 00 00 00 00	 call	 _JabberSend
  000cf	83 c4 24	 add	 esp, 36			; 00000024H
  000d2	33 f6		 xor	 esi, esi
$L84788:

; 368  : 	mir_free(dbei.pBlob);

  000d4	ff 75 fc	 push	 DWORD PTR _dbei$[ebp+24]
  000d7	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000dd	59		 pop	 ecx

; 369  : 	return 0;

  000de	8b c6		 mov	 eax, esi
$L83652:
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi

; 370  : }

  000e2	c9		 leave
  000e3	c3		 ret	 0
_TlenAuthDeny ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@		; `string'
PUBLIC	_TlenSetStatus
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_JabberSendPresence:NEAR
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ DB 'Netlib/CloseHandle', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenSetStatus
_TEXT	SEGMENT
_ptr$ = 8
_iNewStatus$ = 12
_ack$84800 = -28
_ack$84806 = -28
_TlenSetStatus PROC NEAR				; COMDAT

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 392  : 	int oldStatus;
; 393  : 	HANDLE s;
; 394  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 395  : 
; 396  : 	proto->iface.m_iDesiredStatus = iNewStatus;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _iNewStatus$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]

; 397  : 
; 398  :  	if (iNewStatus == ID_STATUS_OFFLINE) {

  0000e	ba 87 9c 00 00	 mov	 edx, 40071		; 00009c87H
  00013	57		 push	 edi
  00014	3b c2		 cmp	 eax, edx
  00016	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00019	0f 85 a3 00 00
	00		 jne	 $L83704

; 399  : 		if (proto->threadData) {

  0001f	8d be e0 00 00
	00		 lea	 edi, DWORD PTR [esi+224]
  00025	33 db		 xor	 ebx, ebx
  00027	39 1f		 cmp	 DWORD PTR [edi], ebx
  00029	74 4d		 je	 SHORT $L83705

; 400  : 			if (proto->jabberConnected) {

  0002b	39 9e 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], ebx
  00031	74 09		 je	 SHORT $L83706

; 401  : 				JabberSendPresence(proto, ID_STATUS_OFFLINE);

  00033	52		 push	 edx
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _JabberSendPresence
  0003a	59		 pop	 ecx
  0003b	59		 pop	 ecx
$L83706:

; 402  : 			}
; 403  : 			s = proto;
; 404  : 			proto->threadData = NULL;
; 405  : 			if (proto->jabberConnected) {

  0003c	39 9e 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], ebx
  00042	89 1f		 mov	 DWORD PTR [edi], ebx
  00044	0f 84 e1 00 00
	00		 je	 $L84805

; 406  : 				Sleep(200);

  0004a	68 c8 00 00 00	 push	 200			; 000000c8H
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 407  : //				JabberSend(s, "</s>");
; 408  : 				// Force closing connection
; 409  : 				proto->jabberConnected = FALSE;
; 410  : 				proto->jabberOnline = FALSE;
; 411  : 				Netlib_CloseHandle(s);

  00055	53		 push	 ebx
  00056	56		 push	 esi
  00057	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx
  0005d	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
$L84809:
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0006d	ff 50 24	 call	 DWORD PTR [eax+36]
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 			}
; 413  : 		}
; 414  : 		else {

  00073	e9 b3 00 00 00	 jmp	 $L84805
$L83705:

; 415  : 			if (proto->iface.m_iStatus != ID_STATUS_OFFLINE) {

  00078	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007b	3b c2		 cmp	 eax, edx
  0007d	89 45 0c	 mov	 DWORD PTR 12+[ebp], eax
  00080	0f 84 a5 00 00
	00		 je	 $L84805

; 416  : 				oldStatus = proto->iface.m_iStatus;
; 417  : 				proto->iface.m_iStatus = ID_STATUS_OFFLINE;
; 418  : 				ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, proto->iface.m_iStatus);

  00086	6a 06		 push	 6
  00088	33 c0		 xor	 eax, eax
  0008a	59		 pop	 ecx
  0008b	8d 7d e8	 lea	 edi, DWORD PTR _ack$84800[ebp+4]
  0008e	f3 ab		 rep stosd
  00090	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00093	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00096	89 45 e8	 mov	 DWORD PTR _ack$84800[ebp+4], eax
  00099	8b 45 0c	 mov	 eax, DWORD PTR 12+[ebp]
  0009c	89 45 f8	 mov	 DWORD PTR _ack$84800[ebp+20], eax
  0009f	8d 45 e4	 lea	 eax, DWORD PTR _ack$84800[ebp]
  000a2	50		 push	 eax
  000a3	53		 push	 ebx
  000a4	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84800[ebp], 28 ; 0000001cH
  000ab	89 5d ec	 mov	 DWORD PTR _ack$84800[ebp+8], ebx
  000ae	c7 45 f0 0c 00
	00 00		 mov	 DWORD PTR _ack$84800[ebp+12], 12 ; 0000000cH
  000b5	89 5d f4	 mov	 DWORD PTR _ack$84800[ebp+16], ebx
  000b8	89 55 fc	 mov	 DWORD PTR _ack$84800[ebp+24], edx
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'

; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	else if (iNewStatus != proto->iface.m_iStatus) {

  000c0	eb a6		 jmp	 SHORT $L84809
$L83704:
  000c2	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000c5	3b c1		 cmp	 eax, ecx
  000c7	89 4d 0c	 mov	 DWORD PTR 12+[ebp], ecx
  000ca	74 5f		 je	 SHORT $L84805

; 423  : 		if (!proto->jabberConnected)

  000cc	33 db		 xor	 ebx, ebx

; 424  : 			TlenConnect(proto, iNewStatus);

  000ce	50		 push	 eax
  000cf	39 9e 7c 01 00
	00		 cmp	 DWORD PTR [esi+380], ebx
  000d5	56		 push	 esi
  000d6	75 09		 jne	 SHORT $L83715
  000d8	e8 00 00 00 00	 call	 _TlenConnect
  000dd	59		 pop	 ecx
  000de	59		 pop	 ecx

; 425  : 		else {

  000df	eb 4a		 jmp	 SHORT $L84805
$L83715:

; 426  : 			// change status
; 427  : 			oldStatus = proto->iface.m_iStatus;
; 428  : 			// send presence update
; 429  : 			JabberSendPresence(proto, iNewStatus);

  000e1	e8 00 00 00 00	 call	 _JabberSendPresence

; 430  : 			ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, proto->iface.m_iStatus);

  000e6	6a 06		 push	 6
  000e8	33 c0		 xor	 eax, eax
  000ea	59		 pop	 ecx
  000eb	8d 7d e8	 lea	 edi, DWORD PTR _ack$84806[ebp+4]
  000ee	f3 ab		 rep stosd
  000f0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000f3	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84806[ebp], 28 ; 0000001cH
  000fa	89 45 e8	 mov	 DWORD PTR _ack$84806[ebp+4], eax
  000fd	8b 45 0c	 mov	 eax, DWORD PTR 12+[ebp]
  00100	89 45 f8	 mov	 DWORD PTR _ack$84806[ebp+20], eax
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	89 45 fc	 mov	 DWORD PTR _ack$84806[ebp+24], eax
  00109	8d 45 e4	 lea	 eax, DWORD PTR _ack$84806[ebp]
  0010c	50		 push	 eax
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00112	53		 push	 ebx
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00118	89 5d ec	 mov	 DWORD PTR _ack$84806[ebp+8], ebx
  0011b	c7 45 f0 0c 00
	00 00		 mov	 DWORD PTR _ack$84806[ebp+12], 12 ; 0000000cH
  00122	89 5d f4	 mov	 DWORD PTR _ack$84806[ebp+16], ebx
  00125	ff 50 24	 call	 DWORD PTR [eax+36]
  00128	83 c4 14	 add	 esp, 20			; 00000014H
$L84805:
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi

; 431  : 		}
; 432  : 	}
; 433  : 	return 0;

  0012d	33 c0		 xor	 eax, eax
  0012f	5b		 pop	 ebx

; 434  : }

  00130	c9		 leave
  00131	c3		 ret	 0
_TlenSetStatus ENDP
_TEXT	ENDS
EXTRN	_JabberServerThread:NEAR
EXTRN	_JabberForkThread:NEAR
;	COMDAT _TlenConnect
_TEXT	SEGMENT
_proto$ = 8
_initialStatus$ = 12
_ack$84814 = -28
_TlenConnect PROC NEAR					; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi

; 374  : 	if (!proto->jabberConnected) {

  00007	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000a	83 be 7c 01 00
	00 00		 cmp	 DWORD PTR [esi+380], 0
  00011	0f 85 84 00 00
	00		 jne	 $L83683
  00017	53		 push	 ebx
  00018	57		 push	 edi

; 375  : 		ThreadData *thread;
; 376  : 		int oldStatus;
; 377  : 
; 378  : 		thread = (ThreadData *) mir_alloc(sizeof(ThreadData));

  00019	bf 24 0f 00 00	 mov	 edi, 3876		; 00000f24H
  0001e	57		 push	 edi
  0001f	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00025	8b d8		 mov	 ebx, eax

; 379  : 		memset(thread, 0, sizeof(ThreadData));

  00027	57		 push	 edi
  00028	6a 00		 push	 0
  0002a	53		 push	 ebx
  0002b	e8 00 00 00 00	 call	 _memset

; 380  :         thread->proto = proto;
; 381  : 		proto->iface.m_iDesiredStatus = initialStatus;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _initialStatus$[ebp]
  00033	89 b3 20 0f 00
	00		 mov	 DWORD PTR [ebx+3872], esi

; 382  : 
; 383  : 		oldStatus = proto->iface.m_iStatus;

  00039	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 384  : 		proto->iface.m_iStatus = ID_STATUS_CONNECTING;
; 385  : 		ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, proto->iface.m_iStatus);

  0003c	6a 06		 push	 6
  0003e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00041	59		 pop	 ecx
  00042	33 c0		 xor	 eax, eax
  00044	8d 7d e8	 lea	 edi, DWORD PTR _ack$84814[ebp+4]
  00047	f3 ab		 rep stosd
  00049	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004c	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  00053	89 45 e8	 mov	 DWORD PTR _ack$84814[ebp+4], eax
  00056	8d 45 e4	 lea	 eax, DWORD PTR _ack$84814[ebp]
  00059	33 f6		 xor	 esi, esi
  0005b	50		 push	 eax
  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00061	56		 push	 esi
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00067	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84814[ebp], 28 ; 0000001cH
  0006e	89 75 ec	 mov	 DWORD PTR _ack$84814[ebp+8], esi
  00071	c7 45 f0 0c 00
	00 00		 mov	 DWORD PTR _ack$84814[ebp+12], 12 ; 0000000cH
  00078	89 75 f4	 mov	 DWORD PTR _ack$84814[ebp+16], esi
  0007b	89 55 f8	 mov	 DWORD PTR _ack$84814[ebp+20], edx
  0007e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _ack$84814[ebp+24], 1
  00085	ff 50 24	 call	 DWORD PTR [eax+36]

; 386  : 		thread->hThread = (HANDLE) JabberForkThread((void (__cdecl *)(void*))JabberServerThread, 0, thread);

  00088	53		 push	 ebx
  00089	56		 push	 esi
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:_JabberServerThread
  0008f	e8 00 00 00 00	 call	 _JabberForkThread
  00094	83 c4 28	 add	 esp, 40			; 00000028H
  00097	89 03		 mov	 DWORD PTR [ebx], eax
  00099	5f		 pop	 edi
  0009a	5b		 pop	 ebx
$L83683:
  0009b	5e		 pop	 esi

; 387  : 	}
; 388  : }

  0009c	c9		 leave
  0009d	c3		 ret	 0
_TlenConnect ENDP
_TEXT	ENDS
PUBLIC	_TlenGetStatus
;	COMDAT _TlenGetStatus
_TEXT	SEGMENT
_ptr$ = 8
_TlenGetStatus PROC NEAR				; COMDAT

; 438  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 439  : 	return proto->iface.m_iStatus;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 440  : }

  00007	c3		 ret	 0
_TlenGetStatus ENDP
_TEXT	ENDS
PUBLIC	_TlenSetAwayMsg
PUBLIC	??_C@_0CH@GNDM@SetAwayMsg?5called?0?5wParam?$DN?$CFd?5lPa@ ; `string'
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__LeaveCriticalSection@4:NEAR
;	COMDAT ??_C@_0CH@GNDM@SetAwayMsg?5called?0?5wParam?$DN?$CFd?5lPa@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0CH@GNDM@SetAwayMsg?5called?0?5wParam?$DN?$CFd?5lPa@ DB 'SetAwayMsg'
	DB	' called, wParam=%d lParam=%s', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenSetAwayMsg
_TEXT	SEGMENT
_ptr$ = 8
_iStatus$ = 12
_msg$ = 16
_TlenSetAwayMsg PROC NEAR				; COMDAT

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 445  : 	char **szMsg;
; 446  : 	char *newModeMsg;
; 447  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 448  : 
; 449  : 	JabberLog(proto, "SetAwayMsg called, wParam=%d lParam=%s", iStatus, msg);

  00005	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  00008	57		 push	 edi
  00009	ff 75 10	 push	 DWORD PTR _msg$[ebp]
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _iStatus$[ebp]
  0000f	57		 push	 edi
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@GNDM@SetAwayMsg?5called?0?5wParam?$DN?$CFd?5lPa@ ; `string'
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _JabberLog

; 450  : 
; 451  : 	newModeMsg = JabberTextEncode(msg);

  0001b	ff 75 10	 push	 DWORD PTR _msg$[ebp]
  0001e	e8 00 00 00 00	 call	 _JabberTextEncode
  00023	83 c4 14	 add	 esp, 20			; 00000014H
  00026	8b d8		 mov	 ebx, eax

; 452  : 
; 453  : 	EnterCriticalSection(&proto->modeMsgMutex);

  00028	8d 86 80 01 00
	00		 lea	 eax, DWORD PTR [esi+384]
  0002e	50		 push	 eax
  0002f	89 45 10	 mov	 DWORD PTR 16+[ebp], eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 454  : 
; 455  : 	switch (iStatus) {

  00038	8d 87 78 63 ff
	ff		 lea	 eax, DWORD PTR [edi-40072]
  0003e	83 f8 08	 cmp	 eax, 8
  00041	0f 87 82 00 00
	00		 ja	 $L83752
  00047	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L84825[eax*4]
$L83746:

; 456  : 	case ID_STATUS_ONLINE:
; 457  : 		szMsg = &proto->modeMsgs.szOnline;

  0004e	8d be c8 00 00
	00		 lea	 edi, DWORD PTR [esi+200]

; 458  : 		break;

  00054	eb 26		 jmp	 SHORT $L83743
$L83747:

; 459  : 	case ID_STATUS_AWAY:
; 460  : 	case ID_STATUS_ONTHEPHONE:
; 461  : 	case ID_STATUS_OUTTOLUNCH:
; 462  : 		szMsg = &proto->modeMsgs.szAway;

  00056	8d be cc 00 00
	00		 lea	 edi, DWORD PTR [esi+204]

; 463  : 		break;

  0005c	eb 1e		 jmp	 SHORT $L83743
$L83748:

; 464  : 	case ID_STATUS_NA:
; 465  : 		szMsg = &proto->modeMsgs.szNa;

  0005e	8d be d0 00 00
	00		 lea	 edi, DWORD PTR [esi+208]

; 466  : 		break;

  00064	eb 16		 jmp	 SHORT $L83743
$L83749:

; 467  : 	case ID_STATUS_DND:
; 468  : 	case ID_STATUS_OCCUPIED:
; 469  : 		szMsg = &proto->modeMsgs.szDnd;

  00066	8d be d4 00 00
	00		 lea	 edi, DWORD PTR [esi+212]

; 470  : 		break;

  0006c	eb 0e		 jmp	 SHORT $L83743
$L83750:

; 471  : 	case ID_STATUS_FREECHAT:
; 472  : 		szMsg = &proto->modeMsgs.szFreechat;

  0006e	8d be d8 00 00
	00		 lea	 edi, DWORD PTR [esi+216]

; 473  : 		break;

  00074	eb 06		 jmp	 SHORT $L83743
$L83751:

; 474  : 	case ID_STATUS_INVISIBLE:
; 475  : 		szMsg = &proto->modeMsgs.szInvisible;

  00076	8d be dc 00 00
	00		 lea	 edi, DWORD PTR [esi+220]
$L83743:

; 476  : 		break;
; 477  : 	default:
; 478  : 		LeaveCriticalSection(&proto->modeMsgMutex);
; 479  : 		return 1;
; 480  : 	}
; 481  : 
; 482  : 	if ((*szMsg==NULL && newModeMsg==NULL) ||
; 483  : 		(*szMsg!=NULL && newModeMsg!=NULL && !strcmp(*szMsg, newModeMsg))) {

  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	85 c0		 test	 eax, eax
  00080	75 08		 jne	 SHORT $L84823
  00082	85 db		 test	 ebx, ebx
  00084	74 3f		 je	 SHORT $L83765
  00086	85 c0		 test	 eax, eax
  00088	74 1a		 je	 SHORT $L83757
$L84823:
  0008a	85 db		 test	 ebx, ebx
  0008c	74 16		 je	 SHORT $L83757
  0008e	53		 push	 ebx
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _strcmp
  00095	59		 pop	 ecx
  00096	85 c0		 test	 eax, eax
  00098	59		 pop	 ecx
  00099	75 09		 jne	 SHORT $L83757

; 484  : 		// Message is the same, no update needed
; 485  : 		if (newModeMsg != NULL) mir_free(newModeMsg);

  0009b	53		 push	 ebx
  0009c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 486  : 	}
; 487  : 	else {

  000a2	eb 20		 jmp	 SHORT $L84824
$L83757:

; 488  : 		// Update with the new mode message
; 489  : 		if (*szMsg != NULL) mir_free(*szMsg);

  000a4	8b 07		 mov	 eax, DWORD PTR [edi]
  000a6	85 c0		 test	 eax, eax
  000a8	74 08		 je	 SHORT $L83764
  000aa	50		 push	 eax
  000ab	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000b1	59		 pop	 ecx
$L83764:

; 490  : 		*szMsg = newModeMsg;

  000b2	89 1f		 mov	 DWORD PTR [edi], ebx

; 491  : 		// Send a presence update if needed
; 492  : 		if (iStatus == proto->iface.m_iStatus) {

  000b4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b7	39 45 0c	 cmp	 DWORD PTR _iStatus$[ebp], eax
  000ba	75 09		 jne	 SHORT $L83765

; 493  : 			JabberSendPresence(proto, proto->iface.m_iStatus);

  000bc	50		 push	 eax
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 _JabberSendPresence
  000c3	59		 pop	 ecx
$L84824:
  000c4	59		 pop	 ecx
$L83765:
  000c5	33 f6		 xor	 esi, esi
  000c7	eb 03		 jmp	 SHORT $L84820
$L83752:
  000c9	6a 01		 push	 1
  000cb	5e		 pop	 esi
$L84820:
  000cc	ff 75 10	 push	 DWORD PTR 16+[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000d5	8b c6		 mov	 eax, esi
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 494  : 		}
; 495  : 	}
; 496  : 
; 497  : 	LeaveCriticalSection(&proto->modeMsgMutex);
; 498  : 	return 0;
; 499  : }

  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$L84825:
  000dc	00 00 00 00	 DD	 $L83746
  000e0	00 00 00 00	 DD	 $L83747
  000e4	00 00 00 00	 DD	 $L83749
  000e8	00 00 00 00	 DD	 $L83748
  000ec	00 00 00 00	 DD	 $L83749
  000f0	00 00 00 00	 DD	 $L83750
  000f4	00 00 00 00	 DD	 $L83751
  000f8	00 00 00 00	 DD	 $L83747
  000fc	00 00 00 00	 DD	 $L83747
_TlenSetAwayMsg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@	; `string'
PUBLIC	??_C@_0FF@KAMC@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
PUBLIC	??_C@_0FM@GGCG@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
PUBLIC	_JabberGetInfo
EXTRN	_TlenIqResultVcard:NEAR
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ DB 'DB/Contact/FreeVariant', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FF@KAMC@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT
??_C@_0FF@KAMC@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ DB '<'
	DB	'iq type=''get'' id=''mim_%d'' to=''tuba''><query xmlns=''jabb'
	DB	'er:iq:register''></query></iq>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FM@GGCG@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@
_DATA	SEGMENT
??_C@_0FM@GGCG@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ DB '<'
	DB	'iq type=''get'' id=''mim_%d'' to=''tuba''><query xmlns=''jabb'
	DB	'er:iq:search''><i>%s</i></query></iq>', 00H	; `string'
_DATA	ENDS
;	COMDAT _JabberGetInfo
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_dbv$ = -24
_nick$ = 12
_cgs$84830 = -12
_JabberGetInfo PROC NEAR				; COMDAT

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 503  : 	DBVARIANT dbv;
; 504  : 	int iqId;
; 505  : 	char *nick, *pNick;
; 506  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 507  : 
; 508  : 	if (!proto->jabberOnline) return 1;

  00008	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	57		 push	 edi
  0000e	39 9e 78 01 00
	00		 cmp	 DWORD PTR [esi+376], ebx
  00014	74 5e		 je	 SHORT $L84836

; 509  : 	if (hContact==NULL) {

  00016	39 5d 0c	 cmp	 DWORD PTR _hContact$[ebp], ebx
  00019	75 2b		 jne	 SHORT $L83781

; 510  : 		iqId = JabberSerialNext(proto);

  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _JabberSerialNext
  00021	8b f8		 mov	 edi, eax

; 511  : 		JabberIqAdd(proto, iqId, IQ_PROC_NONE, TlenIqResultVcard);

  00023	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:_TlenIqResultVcard
  0002a	53		 push	 ebx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _JabberIqAdd

; 512  : 		JabberSend(proto, "<iq type='get' id='"JABBER_IQID"%d' to='tuba'><query xmlns='jabber:iq:register'></query></iq>", iqId);

  00032	57		 push	 edi
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@KAMC@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _JabberSend
  0003e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 513  : 	} else {

  00041	e9 9f 00 00 00	 jmp	 $L84834
$L83781:

; 514  : 		if (DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) return 1;

  00046	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84830[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00050	89 45 f4	 mov	 DWORD PTR _cgs$84830[ebp], eax
  00053	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00056	89 45 fc	 mov	 DWORD PTR _cgs$84830[ebp+8], eax
  00059	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84830[ebp]
  0005c	50		 push	 eax
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00062	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0006a	ff 50 24	 call	 DWORD PTR [eax+36]
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	85 c0		 test	 eax, eax
  00072	74 05		 je	 SHORT $L83784
$L84836:
  00074	6a 01		 push	 1
  00076	58		 pop	 eax
  00077	eb 6e		 jmp	 SHORT $L83772
$L83784:

; 515  : 		if ((nick=JabberNickFromJID(dbv.pszVal)) != NULL) {

  00079	ff 75 ec	 push	 DWORD PTR _dbv$[ebp+4]
  0007c	e8 00 00 00 00	 call	 _JabberNickFromJID
  00081	3b c3		 cmp	 eax, ebx
  00083	59		 pop	 ecx
  00084	89 45 0c	 mov	 DWORD PTR _nick$[ebp], eax
  00087	74 46		 je	 SHORT $L83786

; 516  : 			if ((pNick=JabberTextEncode(nick)) != NULL) {

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _JabberTextEncode
  0008f	8b f8		 mov	 edi, eax
  00091	59		 pop	 ecx
  00092	3b fb		 cmp	 edi, ebx
  00094	74 2f		 je	 SHORT $L83788

; 517  : 				iqId = JabberSerialNext(proto);

  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _JabberSerialNext
  0009c	8b d8		 mov	 ebx, eax

; 518  : 				JabberIqAdd(proto, iqId, IQ_PROC_NONE, TlenIqResultVcard);

  0009e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:_TlenIqResultVcard
  000a5	6a 00		 push	 0
  000a7	53		 push	 ebx
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _JabberIqAdd

; 519  : 				JabberSend(proto, "<iq type='get' id='"JABBER_IQID"%d' to='tuba'><query xmlns='jabber:iq:search'><i>%s</i></query></iq>", iqId, pNick);

  000ae	57		 push	 edi
  000af	53		 push	 ebx
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FM@GGCG@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?5to?$DN?8t@ ; `string'
  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _JabberSend

; 520  : 				mir_free(pNick);

  000bb	57		 push	 edi
  000bc	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000c2	83 c4 24	 add	 esp, 36			; 00000024H
$L83788:

; 521  : 			}
; 522  : 			mir_free(nick);

  000c5	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  000c8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000ce	59		 pop	 ecx
$L83786:

; 523  : 		}
; 524  : 		DBFreeVariant(&dbv);

  000cf	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  000d2	50		 push	 eax
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d8	6a 00		 push	 0
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000df	ff 50 24	 call	 DWORD PTR [eax+36]
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84834:

; 525  : 	}
; 526  : 	return 0;

  000e5	33 c0		 xor	 eax, eax
$L83772:
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 527  : }

  000ea	c9		 leave
  000eb	c3		 ret	 0
_JabberGetInfo ENDP
_TEXT	ENDS
PUBLIC	_TlenSetApparentMode
PUBLIC	??_C@_0BC@FEOM@VisibilitySupport?$AA@		; `string'
PUBLIC	??_C@_0N@CJDI@ApparentMode?$AA@			; `string'
PUBLIC	??_C@_0DE@FNAM@?$DMpresence?5to?$DN?8?$CFs?8?$DO?$DMshow?$DOavailabl@ ; `string'
PUBLIC	??_C@_0CF@JOOO@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8invisibl@ ; `string'
;	COMDAT ??_C@_0BC@FEOM@VisibilitySupport?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BC@FEOM@VisibilitySupport?$AA@ DB 'VisibilitySupport', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJDI@ApparentMode?$AA@
_DATA	SEGMENT
??_C@_0N@CJDI@ApparentMode?$AA@ DB 'ApparentMode', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DE@FNAM@?$DMpresence?5to?$DN?8?$CFs?8?$DO?$DMshow?$DOavailabl@
_DATA	SEGMENT
??_C@_0DE@FNAM@?$DMpresence?5to?$DN?8?$CFs?8?$DO?$DMshow?$DOavailabl@ DB '<'
	DB	'presence to=''%s''><show>available</show></presence>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@JOOO@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8invisibl@
_DATA	SEGMENT
??_C@_0CF@JOOO@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8invisibl@ DB '<pr'
	DB	'esence to=''%s'' type=''invisible''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenSetApparentMode
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_mode$ = 16
_dbv$ = -12
_oldMode$ = 8
_dbv$84840 = -36
_cgs$84841 = -24
_dbv$84849 = -36
_cgs$84850 = -24
_cws$84856 = -44
_cgs$84862 = -24
_TlenSetApparentMode PROC NEAR				; COMDAT

; 530  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 531  : 	DBVARIANT dbv;
; 532  : 	int oldMode;
; 533  : 	char *jid;
; 534  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 535  : 
; 536  : 	if (!proto->jabberOnline) return 0;

  00008	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	57		 push	 edi
  0000e	39 9e 78 01 00
	00		 cmp	 DWORD PTR [esi+376], ebx
  00014	0f 84 7a 01 00
	00		 je	 $L84868

; 537  : 	if (!DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "VisibilitySupport", FALSE)) return 0;

  0001a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001d	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00022	89 45 e8	 mov	 DWORD PTR _cgs$84841[ebp], eax
  00025	8d 45 dc	 lea	 eax, DWORD PTR _dbv$84840[ebp]
  00028	89 45 f0	 mov	 DWORD PTR _cgs$84841[ebp+8], eax
  0002b	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84841[ebp]
  0002e	50		 push	 eax
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00034	53		 push	 ebx
  00035	57		 push	 edi
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84841[ebp+4], OFFSET FLAT:??_C@_0BC@FEOM@VisibilitySupport?$AA@ ; `string'
  0003d	ff 50 24	 call	 DWORD PTR [eax+36]
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	85 c0		 test	 eax, eax
  00045	0f 85 49 01 00
	00		 jne	 $L84868
  0004b	0f b6 45 e0	 movzx	 eax, BYTE PTR _dbv$84840[ebp+4]
  0004f	3b c3		 cmp	 eax, ebx
  00051	0f 84 3d 01 00
	00		 je	 $L84868

; 538  : 	if (mode!=0 && mode!=ID_STATUS_ONLINE && mode!=ID_STATUS_OFFLINE) return 1;

  00057	39 5d 10	 cmp	 DWORD PTR _mode$[ebp], ebx
  0005a	74 12		 je	 SHORT $L83807
  0005c	81 7d 10 88 9c
	00 00		 cmp	 DWORD PTR _mode$[ebp], 40072 ; 00009c88H
  00063	74 09		 je	 SHORT $L83807
  00065	81 7d 10 87 9c
	00 00		 cmp	 DWORD PTR _mode$[ebp], 40071 ; 00009c87H
  0006c	75 40		 jne	 SHORT $L84871
$L83807:

; 539  : 	oldMode = DBGetContactSettingWord(hContact, proto->iface.m_szModuleName, "ApparentMode", 0);

  0006e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00071	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0N@CJDI@ApparentMode?$AA@ ; `string'
  00076	89 45 e8	 mov	 DWORD PTR _cgs$84850[ebp], eax
  00079	8d 45 dc	 lea	 eax, DWORD PTR _dbv$84849[ebp]
  0007c	89 45 f0	 mov	 DWORD PTR _cgs$84850[ebp+8], eax
  0007f	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84850[ebp]
  00082	50		 push	 eax
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00088	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  0008b	89 5d ec	 mov	 DWORD PTR _cgs$84850[ebp+4], ebx
  0008e	57		 push	 edi
  0008f	ff 50 24	 call	 DWORD PTR [eax+36]
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	85 c0		 test	 eax, eax
  00097	74 06		 je	 SHORT $L84851
  00099	83 65 08 00	 and	 DWORD PTR _oldMode$[ebp], 0
  0009d	eb 07		 jmp	 SHORT $L84848
$L84851:
  0009f	0f b7 45 e0	 movzx	 eax, WORD PTR _dbv$84849[ebp+4]
  000a3	89 45 08	 mov	 DWORD PTR _oldMode$[ebp], eax
$L84848:

; 540  : 	if ((int) mode == oldMode) return 1;

  000a6	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  000a9	3b 45 08	 cmp	 eax, DWORD PTR _oldMode$[ebp]
  000ac	75 08		 jne	 SHORT $L83810
$L84871:
  000ae	6a 01		 push	 1
  000b0	58		 pop	 eax
  000b1	e9 e0 00 00 00	 jmp	 $L83797
$L83810:

; 541  : 	DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "ApparentMode", (WORD) mode);

  000b6	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000b9	66 89 45 e0	 mov	 WORD PTR _cws$84856[ebp+12], ax
  000bd	8d 45 d4	 lea	 eax, DWORD PTR _cws$84856[ebp]
  000c0	89 4d d4	 mov	 DWORD PTR _cws$84856[ebp], ecx
  000c3	50		 push	 eax
  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000c9	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  000cc	89 5d d8	 mov	 DWORD PTR _cws$84856[ebp+4], ebx
  000cf	c6 45 dc 02	 mov	 BYTE PTR _cws$84856[ebp+8], 2
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  000d8	ff 50 24	 call	 DWORD PTR [eax+36]

; 542  : 	if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  000db	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000de	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84862[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  000e5	89 45 e8	 mov	 DWORD PTR _cgs$84862[ebp], eax
  000e8	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  000eb	89 45 f0	 mov	 DWORD PTR _cgs$84862[ebp+8], eax
  000ee	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84862[ebp]
  000f1	50		 push	 eax
  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000f7	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  000fa	57		 push	 edi
  000fb	ff 50 24	 call	 DWORD PTR [eax+36]
  000fe	83 c4 18	 add	 esp, 24			; 00000018H
  00101	85 c0		 test	 eax, eax
  00103	0f 85 8b 00 00
	00		 jne	 $L84868

; 543  : 		jid = dbv.pszVal;
; 544  : 		switch (mode) {

  00109	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  0010c	83 e8 00	 sub	 eax, 0
  0010f	74 2e		 je	 SHORT $L83825
  00111	b9 87 9c 00 00	 mov	 ecx, 40071		; 00009c87H
  00116	2b c1		 sub	 eax, ecx
  00118	74 13		 je	 SHORT $L83821
  0011a	48		 dec	 eax
  0011b	75 61		 jne	 SHORT $L83828

; 545  : 		case ID_STATUS_ONLINE:
; 546  : 			if (proto->iface.m_iStatus==ID_STATUS_INVISIBLE || oldMode==ID_STATUS_OFFLINE)

  0011d	81 7e 04 8e 9c
	00 00		 cmp	 DWORD PTR [esi+4], 40078 ; 00009c8eH
  00124	74 47		 je	 SHORT $L83819
  00126	39 4d 08	 cmp	 DWORD PTR _oldMode$[ebp], ecx
  00129	75 53		 jne	 SHORT $L83828

; 547  : 				JabberSend(proto, "<presence to='%s'><show>available</show></presence>", jid);
; 548  : 			break;

  0012b	eb 40		 jmp	 SHORT $L83819
$L83821:

; 549  : 		case ID_STATUS_OFFLINE:
; 550  : 			if (proto->iface.m_iStatus!=ID_STATUS_INVISIBLE || oldMode==ID_STATUS_ONLINE)

  0012d	81 7e 04 8e 9c
	00 00		 cmp	 DWORD PTR [esi+4], 40078 ; 00009c8eH
  00134	75 1b		 jne	 SHORT $L83823
  00136	81 7d 08 88 9c
	00 00		 cmp	 DWORD PTR _oldMode$[ebp], 40072 ; 00009c88H

; 551  : 				JabberSend(proto, "<presence to='%s' type='invisible'/>", jid);
; 552  : 			break;

  0013d	eb 10		 jmp	 SHORT $L84870
$L83825:

; 553  : 		case 0:
; 554  : 			if (oldMode==ID_STATUS_ONLINE && proto->iface.m_iStatus==ID_STATUS_INVISIBLE)

  0013f	81 7d 08 88 9c
	00 00		 cmp	 DWORD PTR _oldMode$[ebp], 40072 ; 00009c88H
  00146	75 13		 jne	 SHORT $L83826
  00148	81 7e 04 8e 9c
	00 00		 cmp	 DWORD PTR [esi+4], 40078 ; 00009c8eH
$L84870:
  0014f	75 2d		 jne	 SHORT $L83828
$L83823:

; 555  : 				JabberSend(proto, "<presence to='%s' type='invisible'/>", jid);

  00151	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00154	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@JOOO@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8invisibl@ ; `string'

; 556  : 			else if (oldMode==ID_STATUS_OFFLINE && proto->iface.m_iStatus!=ID_STATUS_INVISIBLE)

  00159	eb 1a		 jmp	 SHORT $L84869
$L83826:
  0015b	81 7d 08 87 9c
	00 00		 cmp	 DWORD PTR _oldMode$[ebp], 40071 ; 00009c87H
  00162	75 1a		 jne	 SHORT $L83828
  00164	81 7e 04 8e 9c
	00 00		 cmp	 DWORD PTR [esi+4], 40078 ; 00009c8eH
  0016b	74 11		 je	 SHORT $L83828
$L83819:

; 557  : 				JabberSend(proto, "<presence to='%s'><show>available</show></presence>", jid);

  0016d	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00170	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@FNAM@?$DMpresence?5to?$DN?8?$CFs?8?$DO?$DMshow?$DOavailabl@ ; `string'
$L84869:
  00175	56		 push	 esi
  00176	e8 00 00 00 00	 call	 _JabberSend
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83828:

; 558  : 			break;
; 559  : 		}
; 560  : 		DBFreeVariant(&dbv);

  0017e	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  00181	50		 push	 eax
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00187	6a 00		 push	 0
  00189	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  0018e	ff 50 24	 call	 DWORD PTR [eax+36]
  00191	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84868:

; 561  : 	}
; 562  : 	return 0;

  00194	33 c0		 xor	 eax, eax
$L83797:
  00196	5f		 pop	 edi
  00197	5e		 pop	 esi
  00198	5b		 pop	 ebx

; 563  : }

  00199	c9		 leave
  0019a	c3		 ret	 0
_TlenSetApparentMode ENDP
_TEXT	ENDS
PUBLIC	_TlenSendAlert
PUBLIC	??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ DB '<m tp='''
	DB	'a'' to=''%s''/>', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenSendAlert
_TEXT	SEGMENT
_cgs$84876 = -12
_ptr$ = 8
_wParam$ = 12
_dbv$ = -24
_TlenSendAlert PROC NEAR				; COMDAT

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 609  : 	HANDLE hContact = ( HANDLE )wParam;
; 610  : 	DBVARIANT dbv;
; 611  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 612  : 	if (proto->jabberOnline && !DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00007	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000a	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00011	74 52		 je	 SHORT $L84880
  00013	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84876[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0001d	89 45 f4	 mov	 DWORD PTR _cgs$84876[ebp], eax
  00020	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00023	89 45 fc	 mov	 DWORD PTR _cgs$84876[ebp+8], eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84876[ebp]
  00029	50		 push	 eax
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0002f	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00037	ff 50 24	 call	 DWORD PTR [eax+36]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	75 24		 jne	 SHORT $L84880

; 613  : 		JabberSend(proto, "<m tp='a' to='%s'/>", dbv.pszVal);

  00041	ff 75 ec	 push	 DWORD PTR _dbv$[ebp+4]
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _JabberSend

; 614  : 
; 615  : 		DBFreeVariant(&dbv);

  0004f	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00052	50		 push	 eax
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00058	6a 00		 push	 0
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  0005f	ff 50 24	 call	 DWORD PTR [eax+36]
  00062	83 c4 18	 add	 esp, 24			; 00000018H
$L84880:

; 616  : 	}
; 617  : 	return 0;

  00065	33 c0		 xor	 eax, eax
  00067	5e		 pop	 esi

; 618  : }

  00068	c9		 leave
  00069	c3		 ret	 0
_TlenSendAlert ENDP
_TEXT	ENDS
PUBLIC	_TlenSendMessage
PUBLIC	??_C@_07CDLC@?$DMalert?$DO?$AA@			; `string'
PUBLIC	??_C@_07PMPL@?$DMimage?$DO?$AA@			; `string'
PUBLIC	??_C@_03DCIF@pic?$AA@				; `string'
PUBLIC	??_C@_0CP@INH@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5crc?$DN?8@ ; `string'
PUBLIC	??_C@_09FDIC@groupchat?$AA@			; `string'
PUBLIC	??_C@_05LMFM@bChat?$AA@				; `string'
PUBLIC	??_C@_08DPEB@privchat?$AA@			; `string'
PUBLIC	??_C@_04FLKK@chat?$AA@				; `string'
PUBLIC	??_C@_06CCAA@MsgAck?$AA@			; `string'
PUBLIC	??_C@_0DF@MLLC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?$DO?$DMbody@ ; `string'
PUBLIC	??_C@_0DH@FCCL@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?86?8?5s?$DN?810?8?5f?$DN?80?8@ ; `string'
PUBLIC	??_C@_0GL@LNLA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ ; `string'
PUBLIC	??_C@_0IB@ENPC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ ; `string'
EXTRN	_JabberListExist:NEAR
EXTRN	_strcpy:NEAR
EXTRN	__imp__strchr:NEAR
;	COMDAT ??_C@_07CDLC@?$DMalert?$DO?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_07CDLC@?$DMalert?$DO?$AA@ DB '<alert>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07PMPL@?$DMimage?$DO?$AA@
_DATA	SEGMENT
??_C@_07PMPL@?$DMimage?$DO?$AA@ DB '<image>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DCIF@pic?$AA@
_DATA	SEGMENT
??_C@_03DCIF@pic?$AA@ DB 'pic', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CP@INH@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5crc?$DN?8@
_DATA	SEGMENT
??_C@_0CP@INH@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5crc?$DN?8@ DB '<'
	DB	'message to=''%s'' type=''%s'' crc=''%x'' idt=''%d''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FDIC@groupchat?$AA@
_DATA	SEGMENT
??_C@_09FDIC@groupchat?$AA@ DB 'groupchat', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT
??_C@_05LMFM@bChat?$AA@ DB 'bChat', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DPEB@privchat?$AA@
_DATA	SEGMENT
??_C@_08DPEB@privchat?$AA@ DB 'privchat', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FLKK@chat?$AA@
_DATA	SEGMENT
??_C@_04FLKK@chat?$AA@ DB 'chat', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CCAA@MsgAck?$AA@
_DATA	SEGMENT
??_C@_06CCAA@MsgAck?$AA@ DB 'MsgAck', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@MLLC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?$DO?$DMbody@
_DATA	SEGMENT
??_C@_0DF@MLLC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?$DO?$DMbody@ DB '<'
	DB	'message to=''%s'' type=''%s''><body>%s</body></message>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DH@FCCL@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?86?8?5s?$DN?810?8?5f?$DN?80?8@
_DATA	SEGMENT
??_C@_0DH@FCCL@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?86?8?5s?$DN?810?8?5f?$DN?80?8@ DB '<'
	DB	'm to=''%s''><b n=''6'' s=''10'' f=''0'' c=''000000''>%s</b></'
	DB	'm>', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GL@LNLA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@
_DATA	SEGMENT
??_C@_0GL@LNLA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ DB '<'
	DB	'message to=''%s'' type=''%s'' id=''mim_%d''><body>%s</body><x'
	DB	' xmlns=''jabber:x:event''><composing/></x></message>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0IB@ENPC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@
_DATA	SEGMENT
??_C@_0IB@ENPC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ DB '<'
	DB	'message to=''%s'' type=''%s'' id=''mim_%d''><body>%s</body><x'
	DB	' xmlns=''jabber:x:event''><offline/><delivered/><composing/><'
	DB	'/x></message>', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenSendMessage
_TEXT	SEGMENT
_cgs$84886 = -24
_dbv$84891 = -36
_cgs$84892 = -24
_dbv$84899 = -36
_cgs$84900 = -24
_ptr$ = 8
_hContact$ = 12
_msg$ = 20
_dbv$ = -12
_msgEnc$ = 20
_msgType$ = -52
_TlenSendMessage PROC NEAR				; COMDAT

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx

; 623  : 	DBVARIANT dbv;
; 624  : 	char *msgEnc;
; 625  : 	JABBER_LIST_ITEM *item;
; 626  : 	int id;
; 627  : 	char msgType[16];
; 628  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 629  : 
; 630  : 	if (!proto->jabberOnline || DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _hContact$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000e	57		 push	 edi
  0000f	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00016	0f 84 8d 02 00
	00		 je	 $L83899
  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00024	89 45 e8	 mov	 DWORD PTR _cgs$84886[ebp], eax
  00027	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  0002a	89 45 f0	 mov	 DWORD PTR _cgs$84886[ebp+8], eax
  0002d	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84886[ebp]
  00030	50		 push	 eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84886[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0003f	ff 50 24	 call	 DWORD PTR [eax+36]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	85 c0		 test	 eax, eax
  00047	0f 85 5c 02 00
	00		 jne	 $L83899

; 636  : 	}
; 637  : 	if (!strcmp(msg, "<alert>")) {

  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CDLC@?$DMalert?$DO?$AA@ ; `string'
  00052	ff 75 14	 push	 DWORD PTR _msg$[ebp]
  00055	e8 00 00 00 00	 call	 _strcmp
  0005a	59		 pop	 ecx
  0005b	85 c0		 test	 eax, eax
  0005d	59		 pop	 ecx
  0005e	75 32		 jne	 SHORT $L83904

; 638  :         SENDACKTHREADDATA *tdata = (SENDACKTHREADDATA*) mir_alloc(sizeof(SENDACKTHREADDATA));

  00060	6a 08		 push	 8
  00062	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00068	8b f8		 mov	 edi, eax

; 639  :         tdata->proto = proto;

  0006a	89 37		 mov	 DWORD PTR [edi], esi

; 640  :         tdata->hContact = hContact;

  0006c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 641  : 		JabberSend(proto, "<m tp='a' to='%s'/>", dbv.pszVal);

  0006f	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@COME@?$DMm?5tp?$DN?8a?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 _JabberSend

; 642  : 		JabberForkThread(JabberSendMessageAckThread, 0, (void *) tdata);

  0007d	57		 push	 edi
  0007e	6a 00		 push	 0
  00080	68 00 00 00 00	 push	 OFFSET FLAT:_JabberSendMessageAckThread
  00085	e8 00 00 00 00	 call	 _JabberForkThread
  0008a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 643  : 	}  else if (!strcmp(msg, "<image>")) {

  0008d	e9 fd 01 00 00	 jmp	 $L83919
$L83904:
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PMPL@?$DMimage?$DO?$AA@ ; `string'
  00097	ff 75 14	 push	 DWORD PTR _msg$[ebp]
  0009a	e8 00 00 00 00	 call	 _strcmp
  0009f	59		 pop	 ecx
  000a0	85 c0		 test	 eax, eax
  000a2	59		 pop	 ecx
  000a3	75 43		 jne	 SHORT $L83911

; 644  :         SENDACKTHREADDATA *tdata = (SENDACKTHREADDATA*) mir_alloc(sizeof(SENDACKTHREADDATA));

  000a5	6a 08		 push	 8
  000a7	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  000ad	8b f8		 mov	 edi, eax

; 645  :         tdata->proto = proto;
; 646  :         tdata->hContact = hContact;
; 647  : 		id = JabberSerialNext(proto);

  000af	56		 push	 esi
  000b0	89 37		 mov	 DWORD PTR [edi], esi
  000b2	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  000b5	e8 00 00 00 00	 call	 _JabberSerialNext

; 648  : 		JabberSend(proto, "<message to='%s' type='%s' crc='%x' idt='%d'/>", dbv.pszVal, "pic", 0x757f044, id);

  000ba	50		 push	 eax
  000bb	68 44 f0 57 07	 push	 123203652		; 0757f044H
  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03DCIF@pic?$AA@ ; `string'
  000c5	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@INH@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5crc?$DN?8@ ; `string'
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 _JabberSend

; 649  : 		JabberForkThread(JabberSendMessageAckThread, 0, (void *) tdata);

  000d3	57		 push	 edi
  000d4	6a 00		 push	 0
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:_JabberSendMessageAckThread
  000db	e8 00 00 00 00	 call	 _JabberForkThread
  000e0	83 c4 2c	 add	 esp, 44			; 0000002cH

; 650  : 	} else {

  000e3	e9 a7 01 00 00	 jmp	 $L83919
$L83911:

; 651  : 		if ((msgEnc=JabberTextEncode(msg)) != NULL) {

  000e8	ff 75 14	 push	 DWORD PTR _msg$[ebp]
  000eb	e8 00 00 00 00	 call	 _JabberTextEncode
  000f0	85 c0		 test	 eax, eax
  000f2	59		 pop	 ecx
  000f3	89 45 14	 mov	 DWORD PTR _msgEnc$[ebp], eax
  000f6	0f 84 89 01 00
	00		 je	 $L83946

; 652  : 			if (JabberListExist(proto, LIST_CHATROOM, dbv.pszVal) && strchr(dbv.pszVal, '/')==NULL) {

  000fc	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  000ff	6a 01		 push	 1
  00101	56		 push	 esi
  00102	e8 00 00 00 00	 call	 _JabberListExist
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	85 c0		 test	 eax, eax
  0010c	74 18		 je	 SHORT $L83923
  0010e	6a 2f		 push	 47			; 0000002fH
  00110	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00119	59		 pop	 ecx
  0011a	85 c0		 test	 eax, eax
  0011c	59		 pop	 ecx
  0011d	75 07		 jne	 SHORT $L83923

; 653  : 				strcpy(msgType, "groupchat");

  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FDIC@groupchat?$AA@ ; `string'

; 654  : 			} else if (DBGetContactSettingByte(hContact, proto->iface.m_szModuleName, "bChat", FALSE)) {

  00124	eb 3c		 jmp	 SHORT $L84911
$L83923:
  00126	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00129	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84892[ebp+4], OFFSET FLAT:??_C@_05LMFM@bChat?$AA@ ; `string'
  00130	89 45 e8	 mov	 DWORD PTR _cgs$84892[ebp], eax
  00133	8d 45 dc	 lea	 eax, DWORD PTR _dbv$84891[ebp]
  00136	89 45 f0	 mov	 DWORD PTR _cgs$84892[ebp+8], eax
  00139	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84892[ebp]
  0013c	50		 push	 eax
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00142	53		 push	 ebx
  00143	57		 push	 edi
  00144	ff 50 24	 call	 DWORD PTR [eax+36]
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	85 c0		 test	 eax, eax
  0014c	75 0f		 jne	 SHORT $L83926
  0014e	0f b6 45 e0	 movzx	 eax, BYTE PTR _dbv$84891[ebp+4]
  00152	85 c0		 test	 eax, eax
  00154	74 07		 je	 SHORT $L83926

; 655  : 				strcpy(msgType, "privchat");

  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DPEB@privchat?$AA@ ; `string'

; 656  : 			} else {

  0015b	eb 05		 jmp	 SHORT $L84911
$L83926:

; 657  : 				strcpy(msgType, "chat");

  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04FLKK@chat?$AA@ ; `string'
$L84911:
  00162	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _strcpy
  0016b	59		 pop	 ecx

; 658  : 			}
; 659  : 			if (!strcmp(msgType, "groupchat") || DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "MsgAck", FALSE) == FALSE) {

  0016c	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  0016f	59		 pop	 ecx
  00170	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FDIC@groupchat?$AA@ ; `string'
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _strcmp
  0017b	59		 pop	 ecx
  0017c	85 c0		 test	 eax, eax
  0017e	59		 pop	 ecx
  0017f	74 6c		 je	 SHORT $L83933
  00181	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00184	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84900[ebp+4], OFFSET FLAT:??_C@_06CCAA@MsgAck?$AA@ ; `string'
  0018b	89 45 e8	 mov	 DWORD PTR _cgs$84900[ebp], eax
  0018e	8d 45 dc	 lea	 eax, DWORD PTR _dbv$84899[ebp]
  00191	89 45 f0	 mov	 DWORD PTR _cgs$84900[ebp+8], eax
  00194	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84900[ebp]
  00197	50		 push	 eax
  00198	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0019d	6a 00		 push	 0
  0019f	57		 push	 edi
  001a0	ff 50 24	 call	 DWORD PTR [eax+36]
  001a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a6	85 c0		 test	 eax, eax
  001a8	75 43		 jne	 SHORT $L83933
  001aa	0f b6 45 e0	 movzx	 eax, BYTE PTR _dbv$84899[ebp+4]
  001ae	85 c0		 test	 eax, eax
  001b0	74 3b		 je	 SHORT $L83933

; 672  : 			}
; 673  : 			else {
; 674  : 				id = JabberSerialNext(proto);

  001b2	56		 push	 esi
  001b3	e8 00 00 00 00	 call	 _JabberSerialNext

; 675  : 				if ((item=JabberListGetItemPtr(proto, LIST_ROSTER, dbv.pszVal)) != NULL)

  001b8	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  001bb	8b f8		 mov	 edi, eax
  001bd	6a 00		 push	 0
  001bf	56		 push	 esi
  001c0	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  001c5	83 c4 10	 add	 esp, 16			; 00000010H
  001c8	85 c0		 test	 eax, eax
  001ca	74 03		 je	 SHORT $L83948

; 676  : 					item->idMsgAckPending = id;

  001cc	89 78 44	 mov	 DWORD PTR [eax+68], edi
$L83948:

; 677  : 				JabberSend(proto, "<message to='%s' type='%s' id='"JABBER_IQID"%d'><body>%s</body><x xmlns='jabber:x:event'><offline/><delivered/><composing/></x></message>", dbv.pszVal, msgType, id, msgEnc);

  001cf	ff 75 14	 push	 DWORD PTR _msgEnc$[ebp]
  001d2	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  001d5	57		 push	 edi
  001d6	50		 push	 eax
  001d7	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  001da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0IB@ENPC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ ; `string'
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 _JabberSend
  001e5	83 c4 18	 add	 esp, 24			; 00000018H
  001e8	e9 98 00 00 00	 jmp	 $L83946
$L83933:

; 660  :                 SENDACKTHREADDATA *tdata = (SENDACKTHREADDATA*) mir_alloc(sizeof(SENDACKTHREADDATA));

  001ed	6a 08		 push	 8
  001ef	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  001f5	8b f8		 mov	 edi, eax

; 661  :                 tdata->proto = proto;
; 662  :                 tdata->hContact = hContact;
; 663  : 				if (!strcmp(msgType, "groupchat")) {

  001f7	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  001fa	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_09FDIC@groupchat?$AA@ ; `string'
  00201	50		 push	 eax
  00202	89 37		 mov	 DWORD PTR [edi], esi
  00204	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00207	e8 00 00 00 00	 call	 _strcmp
  0020c	59		 pop	 ecx
  0020d	85 c0		 test	 eax, eax
  0020f	59		 pop	 ecx
  00210	75 1a		 jne	 SHORT $L83938

; 664  : 					JabberSend(proto, "<message to='%s' type='%s'><body>%s</body></message>", dbv.pszVal, msgType, msgEnc);

  00212	ff 75 14	 push	 DWORD PTR _msgEnc$[ebp]
  00215	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  00218	50		 push	 eax
  00219	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  0021c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@MLLC@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?$DO?$DMbody@ ; `string'
  00221	56		 push	 esi
  00222	e8 00 00 00 00	 call	 _JabberSend
  00227	83 c4 14	 add	 esp, 20			; 00000014H

; 665  : 				} else if (!strcmp(msgType, "privchat")) {

  0022a	eb 49		 jmp	 SHORT $L83943
$L83938:
  0022c	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  0022f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DPEB@privchat?$AA@ ; `string'
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 _strcmp
  0023a	59		 pop	 ecx
  0023b	85 c0		 test	 eax, eax
  0023d	59		 pop	 ecx
  0023e	75 16		 jne	 SHORT $L83941

; 666  : 					JabberSend(proto, "<m to='%s'><b n='6' s='10' f='0' c='000000'>%s</b></m>", dbv.pszVal, msgEnc);

  00240	ff 75 14	 push	 DWORD PTR _msgEnc$[ebp]
  00243	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00246	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@FCCL@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?86?8?5s?$DN?810?8?5f?$DN?80?8@ ; `string'
  0024b	56		 push	 esi
  0024c	e8 00 00 00 00	 call	 _JabberSend
  00251	83 c4 10	 add	 esp, 16			; 00000010H

; 667  : 				} else {

  00254	eb 1f		 jmp	 SHORT $L83943
$L83941:

; 668  : 					id = JabberSerialNext(proto);

  00256	56		 push	 esi
  00257	e8 00 00 00 00	 call	 _JabberSerialNext

; 669  : 					JabberSend(proto, "<message to='%s' type='%s' id='"JABBER_IQID"%d'><body>%s</body><x xmlns='jabber:x:event'><composing/></x></message>", dbv.pszVal, msgType, id, msgEnc);

  0025c	ff 75 14	 push	 DWORD PTR _msgEnc$[ebp]
  0025f	50		 push	 eax
  00260	8d 45 cc	 lea	 eax, DWORD PTR _msgType$[ebp]
  00263	50		 push	 eax
  00264	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00267	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GL@LNLA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8?$CFs?8?5id?$DN?8m@ ; `string'
  0026c	56		 push	 esi
  0026d	e8 00 00 00 00	 call	 _JabberSend
  00272	83 c4 1c	 add	 esp, 28			; 0000001cH
$L83943:

; 670  : 				}
; 671  : 				JabberForkThread(JabberSendMessageAckThread, 0, (void *) tdata);

  00275	57		 push	 edi
  00276	6a 00		 push	 0
  00278	68 00 00 00 00	 push	 OFFSET FLAT:_JabberSendMessageAckThread
  0027d	e8 00 00 00 00	 call	 _JabberForkThread
  00282	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83946:

; 678  : 			}
; 679  : 		}
; 680  : 		mir_free(msgEnc);

  00285	ff 75 14	 push	 DWORD PTR _msgEnc$[ebp]
  00288	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0028e	59		 pop	 ecx
$L83919:

; 681  : 	}
; 682  : 	DBFreeVariant(&dbv);

  0028f	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  00292	50		 push	 eax
  00293	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00298	6a 00		 push	 0
  0029a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  0029f	ff 50 24	 call	 DWORD PTR [eax+36]
  002a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 683  : 	return 1;

  002a5	6a 01		 push	 1
  002a7	eb 1f		 jmp	 SHORT $L84912
$L83899:

; 631  :         SENDACKTHREADDATA *tdata = (SENDACKTHREADDATA*) mir_alloc(sizeof(SENDACKTHREADDATA));

  002a9	6a 08		 push	 8
  002ab	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 632  :         tdata->proto = proto;
; 633  :         tdata->hContact = hContact;
; 634  : 		JabberForkThread(TlenSendMessageFailedThread, 0, (void *) tdata);

  002b1	50		 push	 eax
  002b2	6a 00		 push	 0
  002b4	68 00 00 00 00	 push	 OFFSET FLAT:_TlenSendMessageFailedThread
  002b9	89 30		 mov	 DWORD PTR [eax], esi
  002bb	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  002be	e8 00 00 00 00	 call	 _JabberForkThread
  002c3	83 c4 10	 add	 esp, 16			; 00000010H

; 635  : 		return 2;

  002c6	6a 02		 push	 2
$L84912:
  002c8	58		 pop	 eax
  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi
  002cb	5b		 pop	 ebx

; 684  : }

  002cc	c9		 leave
  002cd	c3		 ret	 0
_TlenSendMessage ENDP
_TEXT	ENDS
EXTRN	__imp__SleepEx@8:NEAR
;	COMDAT _JabberSendMessageAckThread
_TEXT	SEGMENT
_ptr$ = 8
_ack$84916 = -28
_JabberSendMessageAckThread PROC NEAR			; COMDAT

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 572  :     SENDACKTHREADDATA *data = (SENDACKTHREADDATA *)ptr;
; 573  : 	SleepEx(10, TRUE);

  00008	6a 01		 push	 1
  0000a	6a 0a		 push	 10			; 0000000aH
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8

; 574  : 	ProtoBroadcastAck(data->proto->iface.m_szModuleName, data->hContact, ACKTYPE_MESSAGE, ACKRESULT_SUCCESS, (HANDLE) 1, 0);

  00012	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  00015	6a 06		 push	 6
  00017	59		 pop	 ecx
  00018	33 c0		 xor	 eax, eax
  0001a	8d 7d e8	 lea	 edi, DWORD PTR _ack$84916[ebp+4]
  0001d	f3 ab		 rep stosd
  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	8d 4d e4	 lea	 ecx, DWORD PTR _ack$84916[ebp]
  00024	51		 push	 ecx
  00025	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84916[ebp], 28 ; 0000001cH
  0002c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0002f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ack$84916[ebp+20], 1
  00036	89 45 e8	 mov	 DWORD PTR _ack$84916[ebp+4], eax
  00039	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003c	89 45 ec	 mov	 DWORD PTR _ack$84916[ebp+8], eax
  0003f	33 c0		 xor	 eax, eax
  00041	89 45 f0	 mov	 DWORD PTR _ack$84916[ebp+12], eax
  00044	89 45 f4	 mov	 DWORD PTR _ack$84916[ebp+16], eax
  00047	89 45 fc	 mov	 DWORD PTR _ack$84916[ebp+24], eax
  0004a	50		 push	 eax
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00055	ff 50 24	 call	 DWORD PTR [eax+36]

; 575  :     mir_free(data);

  00058	56		 push	 esi
  00059	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 576  : }

  00064	c9		 leave
  00065	c3		 ret	 0
_JabberSendMessageAckThread ENDP
_TEXT	ENDS
;	COMDAT _TlenSendMessageFailedThread
_TEXT	SEGMENT
_ptr$ = 8
_ack$84923 = -28
_TlenSendMessageFailedThread PROC NEAR			; COMDAT

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 580  :     SENDACKTHREADDATA *data = (SENDACKTHREADDATA *)ptr;
; 581  : 	SleepEx(10, TRUE);

  00008	6a 01		 push	 1
  0000a	6a 0a		 push	 10			; 0000000aH
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8

; 582  : 	ProtoBroadcastAck(data->proto->iface.m_szModuleName, data->hContact, ACKTYPE_MESSAGE, ACKRESULT_FAILED, (HANDLE) 2, 0);

  00012	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  00015	6a 06		 push	 6
  00017	59		 pop	 ecx
  00018	33 c0		 xor	 eax, eax
  0001a	8d 7d e8	 lea	 edi, DWORD PTR _ack$84923[ebp+4]
  0001d	f3 ab		 rep stosd
  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	8d 4d e4	 lea	 ecx, DWORD PTR _ack$84923[ebp]
  00024	51		 push	 ecx
  00025	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84923[ebp], 28 ; 0000001cH
  0002c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0002f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ack$84923[ebp+16], 1
  00036	89 45 e8	 mov	 DWORD PTR _ack$84923[ebp+4], eax
  00039	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003c	89 45 ec	 mov	 DWORD PTR _ack$84923[ebp+8], eax
  0003f	33 c0		 xor	 eax, eax
  00041	89 45 f0	 mov	 DWORD PTR _ack$84923[ebp+12], eax
  00044	89 45 fc	 mov	 DWORD PTR _ack$84923[ebp+24], eax
  00047	50		 push	 eax
  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00052	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _ack$84923[ebp+20], 2
  00059	ff 50 24	 call	 DWORD PTR [eax+36]

; 583  :     mir_free(data);

  0005c	56		 push	 esi
  0005d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 584  : }

  00068	c9		 leave
  00069	c3		 ret	 0
_TlenSendMessageFailedThread ENDP
_TEXT	ENDS
PUBLIC	_TlenGetAwayMsg
;	COMDAT _TlenGetAwayMsg
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_TlenGetAwayMsg PROC NEAR				; COMDAT

; 730  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 731  :     SENDACKTHREADDATA *tdata = (SENDACKTHREADDATA*) mir_alloc(sizeof(SENDACKTHREADDATA));

  00000	6a 08		 push	 8
  00002	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 732  :     tdata->proto = proto;

  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR _ptr$[esp]

; 733  :     tdata->hContact = hContact;
; 734  : 	JabberForkThread((void (__cdecl *)(void*))TlenGetAwayMsgThread, 0, (void *) tdata);

  0000c	50		 push	 eax
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 4c 24 10	 mov	 ecx, DWORD PTR _hContact$[esp+4]
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetAwayMsgThread
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	e8 00 00 00 00	 call	 _JabberForkThread
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 735  : 	return 1;

  00025	6a 01		 push	 1
  00027	58		 pop	 eax

; 736  : }

  00028	c3		 ret	 0
_TlenGetAwayMsg ENDP
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT _TlenGetAwayMsgThread
_TEXT	SEGMENT
_ptr$ = 8
_dbv$ = -24
_cgs$84933 = -12
_ack$84942 = -52
_ack$84952 = -52
_TlenGetAwayMsgThread PROC NEAR				; COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 588  : 	DBVARIANT dbv;
; 589  : 	JABBER_LIST_ITEM *item;
; 590  :     SENDACKTHREADDATA *data = (SENDACKTHREADDATA *)ptr;
; 591  : 	if (!DBGetContactSetting(data->hContact, data->proto->iface.m_szModuleName, "jid", &dbv)) {

  00008	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000b	57		 push	 edi
  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84933[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0001b	89 4d f4	 mov	 DWORD PTR _cgs$84933[ebp], ecx
  0001e	8d 4d e8	 lea	 ecx, DWORD PTR _dbv$[ebp]
  00021	89 4d fc	 mov	 DWORD PTR _cgs$84933[ebp+8], ecx
  00024	8d 4d f4	 lea	 ecx, DWORD PTR _cgs$84933[ebp]
  00027	51		 push	 ecx
  00028	50		 push	 eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00033	ff 50 24	 call	 DWORD PTR [eax+36]
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	33 db		 xor	 ebx, ebx
  0003b	85 c0		 test	 eax, eax
  0003d	0f 85 80 00 00
	00		 jne	 $L84948

; 592  : 		if ((item=JabberListGetItemPtr(data->proto, LIST_ROSTER, dbv.pszVal)) != NULL) {

  00043	ff 75 ec	 push	 DWORD PTR _dbv$[ebp+4]
  00046	53		 push	 ebx
  00047	ff 36		 push	 DWORD PTR [esi]
  00049	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	8b f8		 mov	 edi, eax

; 593  :             DBFreeVariant(&dbv);

  00053	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00056	3b fb		 cmp	 edi, ebx
  00058	50		 push	 eax
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0005e	53		 push	 ebx
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00064	74 57		 je	 SHORT $L83857
  00066	ff 50 24	 call	 DWORD PTR [eax+36]

; 594  :             if (item->statusMessage != NULL) {

  00069	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	3b d3		 cmp	 edx, ebx
  00071	74 50		 je	 SHORT $L84948

; 595  : 				ProtoBroadcastAck(data->proto->iface.m_szModuleName, data->hContact, ACKTYPE_AWAYMSG, ACKRESULT_SUCCESS, (HANDLE) 1, (LPARAM) item->statusMessage);

  00073	6a 06		 push	 6
  00075	33 c0		 xor	 eax, eax
  00077	59		 pop	 ecx
  00078	8d 7d d0	 lea	 edi, DWORD PTR _ack$84942[ebp+4]
  0007b	f3 ab		 rep stosd
  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	c7 45 cc 1c 00
	00 00		 mov	 DWORD PTR _ack$84942[ebp], 28 ; 0000001cH
  00086	c7 45 d8 04 00
	00 00		 mov	 DWORD PTR _ack$84942[ebp+12], 4
  0008d	89 5d dc	 mov	 DWORD PTR _ack$84942[ebp+16], ebx
  00090	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00093	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _ack$84942[ebp+20], 1
  0009a	89 45 d0	 mov	 DWORD PTR _ack$84942[ebp+4], eax
  0009d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a0	89 45 d4	 mov	 DWORD PTR _ack$84942[ebp+8], eax
  000a3	8d 45 cc	 lea	 eax, DWORD PTR _ack$84942[ebp]
  000a6	50		 push	 eax
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000ac	53		 push	 ebx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  000b2	89 55 e4	 mov	 DWORD PTR _ack$84942[ebp+24], edx
  000b5	ff 50 24	 call	 DWORD PTR [eax+36]
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 				return;

  000bb	eb 59		 jmp	 SHORT $L83850
$L83857:

; 597  : 			}
; 598  : 		}
; 599  : 		else {
; 600  : 			DBFreeVariant(&dbv);

  000bd	ff 50 24	 call	 DWORD PTR [eax+36]
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84948:

; 601  : 		}
; 602  : 	}
; 603  : 	ProtoBroadcastAck(data->proto->iface.m_szModuleName, data->hContact, ACKTYPE_AWAYMSG, ACKRESULT_SUCCESS, (HANDLE) 1, (LPARAM) "");

  000c3	6a 06		 push	 6
  000c5	33 c0		 xor	 eax, eax
  000c7	59		 pop	 ecx
  000c8	8d 7d d0	 lea	 edi, DWORD PTR _ack$84952[ebp+4]
  000cb	f3 ab		 rep stosd
  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
  000cf	c7 45 cc 1c 00
	00 00		 mov	 DWORD PTR _ack$84952[ebp], 28 ; 0000001cH
  000d6	c7 45 d8 04 00
	00 00		 mov	 DWORD PTR _ack$84952[ebp+12], 4
  000dd	89 5d dc	 mov	 DWORD PTR _ack$84952[ebp+16], ebx
  000e0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000e3	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _ack$84952[ebp+20], 1
  000ea	89 45 d0	 mov	 DWORD PTR _ack$84952[ebp+4], eax
  000ed	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f0	89 45 d4	 mov	 DWORD PTR _ack$84952[ebp+8], eax
  000f3	8d 45 cc	 lea	 eax, DWORD PTR _ack$84952[ebp]
  000f6	50		 push	 eax
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000fc	53		 push	 ebx
  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00102	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ack$84952[ebp+24], OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  00109	ff 50 24	 call	 DWORD PTR [eax+36]

; 604  :     mir_free(data);

  0010c	56		 push	 esi
  0010d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00113	83 c4 10	 add	 esp, 16			; 00000010H
$L83850:
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx

; 605  : }

  00119	c9		 leave
  0011a	c3		 ret	 0
_TlenGetAwayMsgThread ENDP
_TEXT	ENDS
PUBLIC	_TlenFileAllow
PUBLIC	??_C@_0EM@DAPA@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
PUBLIC	??_C@_0BP@IFC@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?85?8?5v?$DN?81?8?1?$DO?$AA@ ; `string'
EXTRN	_JabberListAdd:NEAR
;	COMDAT ??_C@_0EM@DAPA@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0EM@DAPA@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ DB '<'
	DB	'iq to=''%s''><query xmlns=''p2p''><fs t=''%s'' e=''5'' i=''%s'
	DB	''' v=''1''/></query></iq>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IFC@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?85?8?5v?$DN?81?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BP@IFC@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?85?8?5v?$DN?81?8?1?$DO?$AA@ DB '<'
	DB	'f t=''%s'' i=''%s'' e=''5'' v=''1''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenFileAllow
_TEXT	SEGMENT
_ptr$ = 8
_hTransfer$ = 16
_szPath$ = 20
_TlenFileAllow PROC NEAR				; COMDAT

; 739  : {

  00000	57		 push	 edi

; 740  : 	TLEN_FILE_TRANSFER *ft;
; 741  : 	JABBER_LIST_ITEM *item;
; 742  : 	char *nick;
; 743  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 744  : 
; 745  : 	if (!proto->jabberOnline) return 0;

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR _ptr$[esp]
  00005	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  0000c	75 04		 jne	 SHORT $L84014
  0000e	33 c0		 xor	 eax, eax
  00010	5f		 pop	 edi

; 760  : }

  00011	c3		 ret	 0
$L84014:
  00012	53		 push	 ebx
  00013	56		 push	 esi

; 746  : 
; 747  : 	ft = (TLEN_FILE_TRANSFER *) hTransfer;
; 748  : 	ft->szSavePath = mir_strdup(szPath);

  00014	ff 74 24 1c	 push	 DWORD PTR _szPath$[esp+8]
  00018	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0001e	8b 74 24 1c	 mov	 esi, DWORD PTR _hTransfer$[esp+12]

; 749  : 	if ((item=JabberListAdd(proto, LIST_FILE, ft->iqId)) != NULL) {

  00022	ff 76 18	 push	 DWORD PTR [esi+24]
  00025	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00028	6a 02		 push	 2
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 _JabberListAdd
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	85 c0		 test	 eax, eax
  00035	74 03		 je	 SHORT $L84017

; 750  : 		item->ft = ft;

  00037	89 70 58	 mov	 DWORD PTR [eax+88], esi
$L84017:

; 751  : 	}
; 752  : 	nick = JabberNickFromJID(ft->jid);

  0003a	ff 76 10	 push	 DWORD PTR [esi+16]
  0003d	e8 00 00 00 00	 call	 _JabberNickFromJID

; 753  : 	if (ft->newP2P) {

  00042	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00046	59		 pop	 ecx
  00047	8b d8		 mov	 ebx, eax
  00049	74 18		 je	 SHORT $L84018

; 754  : 		JabberSend(proto, "<iq to='%s'><query xmlns='p2p'><fs t='%s' e='5' i='%s' v='1'/></query></iq>", ft->jid, ft->jid, ft->iqId);

  0004b	ff 76 18	 push	 DWORD PTR [esi+24]
  0004e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00051	50		 push	 eax
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@DAPA@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 _JabberSend
  0005e	83 c4 14	 add	 esp, 20			; 00000014H

; 755  : 	} else {

  00061	eb 12		 jmp	 SHORT $L84020
$L84018:

; 756  : 		JabberSend(proto, "<f t='%s' i='%s' e='5' v='1'/>", nick, ft->iqId);

  00063	ff 76 18	 push	 DWORD PTR [esi+24]
  00066	53		 push	 ebx
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IFC@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?85?8?5v?$DN?81?8?1?$DO?$AA@ ; `string'
  0006c	57		 push	 edi
  0006d	e8 00 00 00 00	 call	 _JabberSend
  00072	83 c4 10	 add	 esp, 16			; 00000010H
$L84020:

; 757  : 	}
; 758  : 	mir_free(nick);

  00075	53		 push	 ebx
  00076	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0007c	59		 pop	 ecx

; 759  : 	return (int)hTransfer;

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	5f		 pop	 edi

; 760  : }

  00082	c3		 ret	 0
_TlenFileAllow ENDP
_TEXT	ENDS
PUBLIC	_TlenFileDeny
PUBLIC	??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
EXTRN	_TlenP2PFreeFileTransfer:NEAR
;	COMDAT ??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'f i=''%s'' e=''4'' t=''%s''/>', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenFileDeny
_TEXT	SEGMENT
_ptr$ = 8
_hTransfer$ = 16
_TlenFileDeny PROC NEAR					; COMDAT

; 763  : {

  00000	53		 push	 ebx

; 764  : 	TLEN_FILE_TRANSFER *ft;
; 765  : 	char *nick;
; 766  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 767  : 
; 768  : 	if (!proto->jabberOnline) return 1;

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ptr$[esp]
  00005	83 bb 78 01 00
	00 00		 cmp	 DWORD PTR [ebx+376], 0
  0000c	75 05		 jne	 SHORT $L84037
  0000e	6a 01		 push	 1
  00010	58		 pop	 eax
  00011	5b		 pop	 ebx

; 780  : }

  00012	c3		 ret	 0
$L84037:
  00013	56		 push	 esi

; 769  : 
; 770  : 	ft = (TLEN_FILE_TRANSFER *) hTransfer;
; 771  : 	nick = JabberNickFromJID(ft->jid);

  00014	8b 74 24 14	 mov	 esi, DWORD PTR _hTransfer$[esp+4]
  00018	57		 push	 edi
  00019	ff 76 10	 push	 DWORD PTR [esi+16]
  0001c	e8 00 00 00 00	 call	 _JabberNickFromJID
  00021	59		 pop	 ecx
  00022	8b f8		 mov	 edi, eax

; 772  : 	if (ft->newP2P) {

  00024	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0

; 773  : 		JabberSend(proto, "<f i='%s' e='4' t='%s'/>", ft->iqId, nick);\

  00028	57		 push	 edi
  00029	ff 76 18	 push	 DWORD PTR [esi+24]
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00031	53		 push	 ebx

; 774  : 	} else {
; 775  : 		JabberSend(proto, "<f i='%s' e='4' t='%s'/>", ft->iqId, nick);\

  00032	e8 00 00 00 00	 call	 _JabberSend
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 776  : 	}
; 777  : 	mir_free(nick);

  0003a	57		 push	 edi
  0003b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 778  : 	TlenP2PFreeFileTransfer(ft);

  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  00047	59		 pop	 ecx

; 779  : 	return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 780  : }

  0004e	c3		 ret	 0
_TlenFileDeny ENDP
_TEXT	ENDS
PUBLIC	_TlenFileCancel
PUBLIC	??_C@_0BG@CFHL@Invoking?5FileCancel?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CN@CBGE@ft?9?$DOs?5is?5now?5NULL?0?5ft?9?$DOstate?5is?5@ ; `string'
EXTRN	__imp__SetEvent@4:NEAR
;	COMDAT ??_C@_0BG@CFHL@Invoking?5FileCancel?$CI?$CJ?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_netlib.h
_DATA	SEGMENT
??_C@_0BG@CFHL@Invoking?5FileCancel?$CI?$CJ?$AA@ DB 'Invoking FileCancel('
	DB	')', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ DB 'Closing ft->s = %'
	DB	'd', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@CBGE@ft?9?$DOs?5is?5now?5NULL?0?5ft?9?$DOstate?5is?5@
_DATA	SEGMENT
??_C@_0CN@CBGE@ft?9?$DOs?5is?5now?5NULL?0?5ft?9?$DOstate?5is?5@ DB 'ft->s'
	DB	' is now NULL, ft->state is now FT_ERROR', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenFileCancel
_TEXT	SEGMENT
_ptr$ = 8
_hTransfer$ = 16
_TlenFileCancel PROC NEAR				; COMDAT

; 783  : {

  00000	56		 push	 esi

; 784  : 	TLEN_FILE_TRANSFER *ft = (TLEN_FILE_TRANSFER *) hTransfer;
; 785  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 786  : 	JabberLog(proto, "Invoking FileCancel()");

  00001	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@CFHL@Invoking?5FileCancel?$CI?$CJ?$AA@ ; `string'
  00006	ff 74 24 0c	 push	 DWORD PTR _ptr$[esp+4]
  0000a	e8 00 00 00 00	 call	 _JabberLog

; 787  : 	if (ft->s) {

  0000f	8b 74 24 18	 mov	 esi, DWORD PTR _hTransfer$[esp+8]
  00013	59		 pop	 ecx
  00014	59		 pop	 ecx
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	85 c0		 test	 eax, eax
  0001a	74 51		 je	 SHORT $L84055

; 788  : 		//ProtoBroadcastAck(iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);
; 789  : 		JabberLog(proto, "Closing ft->s = %d", ft->s);

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ ; `string'
  00022	ff 74 24 10	 push	 DWORD PTR _ptr$[esp+8]
  00026	e8 00 00 00 00	 call	 _JabberLog

; 790  : 		ft->state = FT_ERROR;
; 791  : 		Netlib_CloseHandle(ft->s);

  0002b	6a 00		 push	 0
  0002d	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
  00034	ff 76 04	 push	 DWORD PTR [esi+4]
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00041	ff 50 24	 call	 DWORD PTR [eax+36]

; 792  : 		ft->s = NULL;
; 793  : 		if (ft->hFileEvent != NULL) {

  00044	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00047	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
  0004e	85 c0		 test	 eax, eax
  00050	74 0b		 je	 SHORT $L84059

; 794  : 			HANDLE hEvent = ft->hFileEvent;
; 795  : 			ft->hFileEvent = NULL;

  00052	83 66 3c 00	 and	 DWORD PTR [esi+60], 0

; 796  : 			SetEvent(hEvent);

  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$L84059:

; 797  : 		}
; 798  : 		JabberLog(proto, "ft->s is now NULL, ft->state is now FT_ERROR");

  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@CBGE@ft?9?$DOs?5is?5now?5NULL?0?5ft?9?$DOstate?5is?5@ ; `string'
  00062	ff 74 24 0c	 push	 DWORD PTR _ptr$[esp+4]
  00066	e8 00 00 00 00	 call	 _JabberLog
  0006b	59		 pop	 ecx
  0006c	59		 pop	 ecx
$L84055:

; 799  : 	}
; 800  : 	return 0;

  0006d	33 c0		 xor	 eax, eax
  0006f	5e		 pop	 esi

; 801  : }

  00070	c3		 ret	 0
_TlenFileCancel ENDP
_TEXT	ENDS
PUBLIC	_TlenSendFile
PUBLIC	??_C@_0BM@LPAN@?8?$CFs?8?5is?5an?5invalid?5filename?$AA@ ; `string'
PUBLIC	??_C@_02MECO@?$CFd?$AA@				; `string'
PUBLIC	??_C@_0FL@JEAB@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
PUBLIC	??_C@_0DD@DHDE@?$DMf?5t?$DN?8?$CFs?8?5n?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN@ ; `string'
PUBLIC	??_C@_0CN@NFMN@?$DMf?5t?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN?8?$CFd?8?5s?$DN@ ; `string'
EXTRN	__imp___stat:NEAR
EXTRN	_TlenFileCreateFT:NEAR
EXTRN	__imp__strrchr:NEAR
EXTRN	__imp___snprintf:NEAR
;	COMDAT ??_C@_0BM@LPAN@?8?$CFs?8?5is?5an?5invalid?5filename?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BM@LPAN@?8?$CFs?8?5is?5an?5invalid?5filename?$AA@ DB '''%s'' is an'
	DB	' invalid filename', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02MECO@?$CFd?$AA@
_DATA	SEGMENT
??_C@_02MECO@?$CFd?$AA@ DB '%d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FL@JEAB@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT
??_C@_0FL@JEAB@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ DB '<'
	DB	'iq to=''%s''><query xmlns=''p2p''><fs t=''%s'' e=''1'' i=''%s'
	DB	''' c=''%d'' s=''%d'' v=''%d''/></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DD@DHDE@?$DMf?5t?$DN?8?$CFs?8?5n?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN@
_DATA	SEGMENT
??_C@_0DD@DHDE@?$DMf?5t?$DN?8?$CFs?8?5n?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN@ DB '<'
	DB	'f t=''%s'' n=''%s'' e=''1'' i=''%s'' c=''1'' s=''%d'' v=''1'''
	DB	'/>', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@NFMN@?$DMf?5t?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN?8?$CFd?8?5s?$DN@
_DATA	SEGMENT
??_C@_0CN@NFMN@?$DMf?5t?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN?8?$CFd?8?5s?$DN@ DB '<'
	DB	'f t=''%s'' e=''1'' i=''%s'' c=''%d'' s=''%d'' v=''1''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenSendFile
_TEXT	SEGMENT
_ptr$ = 8
_hContact$ = 12
_szDescription$ = 16
_ppszFiles$ = 20
_i$ = -4
_statbuf$ = -76
_dbv$ = -40
_nick$ = 12
_idStr$ = -16
_cgs$84971 = -28
_TlenSendFile PROC NEAR					; COMDAT

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 805  : 	TLEN_FILE_TRANSFER *ft;
; 806  : 	int i, j;
; 807  : 	struct _stat statbuf;
; 808  : 	DBVARIANT dbv;
; 809  : 	char *nick, *p, idStr[10];
; 810  : 	JABBER_LIST_ITEM *item;
; 811  : 	int id;
; 812  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 813  : 
; 814  : 	if (!proto->jabberOnline) return 0;

  00008	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	39 9f 78 01 00
	00		 cmp	 DWORD PTR [edi+376], ebx
  00013	74 2e		 je	 SHORT $L84982

; 815  : //	if (DBGetContactSettingWord(ccs->hContact, iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) == ID_STATUS_OFFLINE) return 0;
; 816  : 	if (DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) return 0;

  00015	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00018	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$84971[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0001f	89 45 e4	 mov	 DWORD PTR _cgs$84971[ebp], eax
  00022	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00025	89 45 ec	 mov	 DWORD PTR _cgs$84971[ebp+8], eax
  00028	8d 45 e4	 lea	 eax, DWORD PTR _cgs$84971[ebp]
  0002b	50		 push	 eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00031	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00039	ff 50 24	 call	 DWORD PTR [eax+36]
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	85 c0		 test	 eax, eax
  00041	74 07		 je	 SHORT $L84086
$L84982:
  00043	33 c0		 xor	 eax, eax
  00045	e9 ca 01 00 00	 jmp	 $L84072
$L84086:
  0004a	56		 push	 esi

; 817  :     ft = TlenFileCreateFT(proto, dbv.pszVal);

  0004b	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  0004e	57		 push	 edi
  0004f	e8 00 00 00 00	 call	 _TlenFileCreateFT
  00054	59		 pop	 ecx
  00055	8b f0		 mov	 esi, eax
  00057	59		 pop	 ecx

; 818  : 	for(ft->fileCount=0; ppszFiles[ft->fileCount]; ft->fileCount++);

  00058	8b 4d 14	 mov	 ecx, DWORD PTR _ppszFiles$[ebp]
  0005b	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  0005e	39 19		 cmp	 DWORD PTR [ecx], ebx
  00060	74 0b		 je	 SHORT $L84089
$L84087:
  00062	ff 46 40	 inc	 DWORD PTR [esi+64]
  00065	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00068	39 1c 81	 cmp	 DWORD PTR [ecx+eax*4], ebx
  0006b	75 f5		 jne	 SHORT $L84087
$L84089:

; 819  : 	ft->files = (char **) mir_alloc(sizeof(char *) * ft->fileCount);

  0006d	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00070	c1 e0 02	 shl	 eax, 2
  00073	50		 push	 eax
  00074	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0007a	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 820  : 	ft->filesSize = (long *) mir_alloc(sizeof(long) * ft->fileCount);

  0007d	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00080	c1 e0 02	 shl	 eax, 2
  00083	50		 push	 eax
  00084	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 821  : 	ft->allFileTotalSize = 0;
; 822  : 	for(i=j=0; i<ft->fileCount; i++) {

  0008a	83 65 fc 00	 and	 DWORD PTR _i$[ebp], 0
  0008e	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00092	59		 pop	 ecx
  00093	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00096	59		 pop	 ecx
  00097	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  0009a	7e 61		 jle	 SHORT $L84096
  0009c	8b 45 14	 mov	 eax, DWORD PTR _ppszFiles$[ebp]
  0009f	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
$L84094:

; 823  : 		if (_stat(ppszFiles[i], &statbuf))

  000a2	8d 45 b4	 lea	 eax, DWORD PTR _statbuf$[ebp]
  000a5	50		 push	 eax
  000a6	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  000a9	ff 30		 push	 DWORD PTR [eax]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stat
  000b1	59		 pop	 ecx
  000b2	85 c0		 test	 eax, eax
  000b4	59		 pop	 ecx
  000b5	74 15		 je	 SHORT $L84097

; 824  : 			JabberLog(proto, "'%s' is an invalid filename", ppszFiles[i]);

  000b7	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  000ba	ff 30		 push	 DWORD PTR [eax]
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@LPAN@?8?$CFs?8?5is?5an?5invalid?5filename?$AA@ ; `string'
  000c1	57		 push	 edi
  000c2	e8 00 00 00 00	 call	 _JabberLog
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 825  : 		else {

  000ca	eb 22		 jmp	 SHORT $L84095
$L84097:

; 826  : 			ft->filesSize[j] = statbuf.st_size;

  000cc	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000cf	8b 4d c8	 mov	 ecx, DWORD PTR _statbuf$[ebp+20]
  000d2	89 0c 98	 mov	 DWORD PTR [eax+ebx*4], ecx

; 827  : 			ft->files[j++] = mir_strdup(ppszFiles[i]);

  000d5	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  000d8	ff 30		 push	 DWORD PTR [eax]
  000da	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  000e0	59		 pop	 ecx
  000e1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000e4	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax

; 828  : 			ft->allFileTotalSize += statbuf.st_size;

  000e7	8b 45 c8	 mov	 eax, DWORD PTR _statbuf$[ebp+20]
  000ea	43		 inc	 ebx
  000eb	01 46 4c	 add	 DWORD PTR [esi+76], eax
$L84095:
  000ee	ff 45 fc	 inc	 DWORD PTR _i$[ebp]
  000f1	83 45 08 04	 add	 DWORD PTR 8+[ebp], 4
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f8	3b 46 40	 cmp	 eax, DWORD PTR [esi+64]
  000fb	7c a5		 jl	 SHORT $L84094
$L84096:

; 829  : 		}
; 830  : 	}
; 831  : 	ft->fileCount = j;
; 832  : 	ft->szDescription = mir_strdup(szDescription);

  000fd	ff 75 10	 push	 DWORD PTR _szDescription$[ebp]
  00100	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  00103	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 833  : 	ft->hContact = hContact;
; 834  : 	ft->currentFile = 0;

  00109	83 66 58 00	 and	 DWORD PTR [esi+88], 0
  0010d	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00110	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  00113	89 06		 mov	 DWORD PTR [esi], eax

; 835  : 	DBFreeVariant(&dbv);

  00115	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00118	50		 push	 eax
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0011e	6a 00		 push	 0
  00120	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00125	ff 50 24	 call	 DWORD PTR [eax+36]

; 836  : 
; 837  : 	id = JabberSerialNext(proto);

  00128	57		 push	 edi
  00129	e8 00 00 00 00	 call	 _JabberSerialNext

; 838  : 	_snprintf(idStr, sizeof(idStr), "%d", id);

  0012e	50		 push	 eax
  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02MECO@?$CFd?$AA@ ; `string'
  00134	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  00137	6a 0a		 push	 10			; 0000000aH
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 839  : 	if ((item=JabberListAdd(proto, LIST_FILE, idStr)) != NULL) {

  00140	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  00143	50		 push	 eax
  00144	6a 02		 push	 2
  00146	57		 push	 edi
  00147	e8 00 00 00 00	 call	 _JabberListAdd
  0014c	8b d8		 mov	 ebx, eax
  0014e	83 c4 30	 add	 esp, 48			; 00000030H
  00151	85 db		 test	 ebx, ebx
  00153	0f 84 b8 00 00
	00		 je	 $L84102

; 840  : 		ft->iqId = mir_strdup(idStr);

  00159	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  0015c	50		 push	 eax
  0015d	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 841  : 		nick = JabberNickFromJID(ft->jid);

  00163	ff 76 10	 push	 DWORD PTR [esi+16]
  00166	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00169	e8 00 00 00 00	 call	 _JabberNickFromJID
  0016e	59		 pop	 ecx

; 842  : 		item->ft = ft;

  0016f	89 73 58	 mov	 DWORD PTR [ebx+88], esi

; 843  : 		if (proto->tlenOptions.useNewP2P) {

  00172	83 bf ec 01 00
	00 00		 cmp	 DWORD PTR [edi+492], 0
  00179	89 45 0c	 mov	 DWORD PTR _nick$[ebp], eax

; 844  : 			JabberSend(proto, "<iq to='%s'><query xmlns='p2p'><fs t='%s' e='1' i='%s' c='%d' s='%d' v='%d'/></query></iq>",
; 845  : 				ft->jid, ft->jid, idStr, ft->fileCount, ft->allFileTotalSize, ft->fileCount);

  0017c	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0017f	59		 pop	 ecx
  00180	74 25		 je	 SHORT $L84103
  00182	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00185	50		 push	 eax
  00186	ff 76 4c	 push	 DWORD PTR [esi+76]
  00189	50		 push	 eax
  0018a	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  0018d	50		 push	 eax
  0018e	51		 push	 ecx
  0018f	51		 push	 ecx
  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FL@JEAB@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
  00195	57		 push	 edi
  00196	e8 00 00 00 00	 call	 _JabberSend
  0019b	83 c4 20	 add	 esp, 32			; 00000020H

; 846  : 			
; 847  : 			ft->newP2P = TRUE;

  0019e	c7 46 5c 01 00
	00 00		 mov	 DWORD PTR [esi+92], 1

; 848  : 		} else {

  001a5	eb 60		 jmp	 SHORT $L84111
$L84103:

; 849  : 			if (ft->fileCount == 1) {

  001a7	83 f8 01	 cmp	 eax, 1
  001aa	75 42		 jne	 SHORT $L84106

; 850  : 				if ((p=strrchr(ppszFiles[0], '\\')) != NULL)

  001ac	8b 5d 14	 mov	 ebx, DWORD PTR _ppszFiles$[ebp]
  001af	6a 5c		 push	 92			; 0000005cH
  001b1	ff 33		 push	 DWORD PTR [ebx]
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrchr
  001b9	59		 pop	 ecx
  001ba	85 c0		 test	 eax, eax
  001bc	59		 pop	 ecx
  001bd	74 03		 je	 SHORT $L84108

; 851  : 					p++;

  001bf	40		 inc	 eax

; 852  : 				else

  001c0	eb 02		 jmp	 SHORT $L84109
$L84108:

; 853  : 					p = ppszFiles[0];

  001c2	8b 03		 mov	 eax, DWORD PTR [ebx]
$L84109:

; 854  : 				p = JabberTextEncode(p);

  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 _JabberTextEncode

; 855  : 				JabberSend(proto, "<f t='%s' n='%s' e='1' i='%s' c='1' s='%d' v='1'/>", nick, p, idStr, ft->allFileTotalSize);

  001ca	ff 76 4c	 push	 DWORD PTR [esi+76]
  001cd	8b d8		 mov	 ebx, eax
  001cf	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  001d2	50		 push	 eax
  001d3	53		 push	 ebx
  001d4	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  001d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@DHDE@?$DMf?5t?$DN?8?$CFs?8?5n?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN@ ; `string'
  001dc	57		 push	 edi
  001dd	e8 00 00 00 00	 call	 _JabberSend

; 856  : 				mir_free(p);

  001e2	53		 push	 ebx
  001e3	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001e9	83 c4 20	 add	 esp, 32			; 00000020H

; 857  : 			}
; 858  : 			else

  001ec	eb 19		 jmp	 SHORT $L84111
$L84106:

; 859  : 				JabberSend(proto, "<f t='%s' e='1' i='%s' c='%d' s='%d' v='1'/>", nick, idStr, ft->fileCount, ft->allFileTotalSize);

  001ee	ff 76 4c	 push	 DWORD PTR [esi+76]
  001f1	50		 push	 eax
  001f2	8d 45 f0	 lea	 eax, DWORD PTR _idStr$[ebp]
  001f5	50		 push	 eax
  001f6	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  001f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@NFMN@?$DMf?5t?$DN?8?$CFs?8?5e?$DN?81?8?5i?$DN?8?$CFs?8?5c?$DN?8?$CFd?8?5s?$DN@ ; `string'
  001fe	57		 push	 edi
  001ff	e8 00 00 00 00	 call	 _JabberSend
  00204	83 c4 18	 add	 esp, 24			; 00000018H
$L84111:

; 860  : 		}
; 861  : 		mir_free(nick);

  00207	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  0020a	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00210	59		 pop	 ecx
$L84102:

; 862  : 	}
; 863  : 
; 864  : 	return (int)(HANDLE) ft;

  00211	8b c6		 mov	 eax, esi
  00213	5e		 pop	 esi
$L84072:
  00214	5f		 pop	 edi
  00215	5b		 pop	 ebx

; 865  : }

  00216	c9		 leave
  00217	c3		 ret	 0
_TlenSendFile ENDP
_TEXT	ENDS
PUBLIC	_TlenRecvMessage
PUBLIC	??_C@_0N@BJOD@?1RecvMessage?$AA@		; `string'
PUBLIC	??_C@_0BC@DBCN@Proto?1RecvMessage?$AA@		; `string'
;	COMDAT ??_C@_0N@BJOD@?1RecvMessage?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0N@BJOD@?1RecvMessage?$AA@ DB '/RecvMessage', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@DBCN@Proto?1RecvMessage?$AA@
_DATA	SEGMENT
??_C@_0BC@DBCN@Proto?1RecvMessage?$AA@ DB 'Proto/RecvMessage', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenRecvMessage
_TEXT	SEGMENT
_hContact$ = 12
_evt$ = 16
_ccs$ = -16
_TlenRecvMessage PROC NEAR				; COMDAT

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 869  : 	CCSDATA ccs = { hContact, PSR_MESSAGE, 0, ( LPARAM )evt };

  00006	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  00009	83 65 f8 00	 and	 DWORD PTR _ccs$[ebp+8], 0
  0000d	89 45 f0	 mov	 DWORD PTR _ccs$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _evt$[ebp]
  00013	89 45 fc	 mov	 DWORD PTR _ccs$[ebp+12], eax

; 870  : 	return CallService( MS_PROTO_RECVMSG, 0, ( LPARAM )&ccs );

  00016	8d 45 f0	 lea	 eax, DWORD PTR _ccs$[ebp]
  00019	50		 push	 eax
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001f	6a 00		 push	 0
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DBCN@Proto?1RecvMessage?$AA@ ; `string'
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_0N@BJOD@?1RecvMessage?$AA@ ; `string'
  0002d	ff 50 24	 call	 DWORD PTR [eax+36]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 871  : }

  00033	c9		 leave
  00034	c3		 ret	 0
_TlenRecvMessage ENDP
_TEXT	ENDS
PUBLIC	_TlenRecvFile
PUBLIC	??_C@_09KKHM@?1RecvFile?$AA@			; `string'
PUBLIC	??_C@_0P@PJIN@Proto?1RecvFile?$AA@		; `string'
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_09KKHM@?1RecvFile?$AA@ DB '/RecvFile', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@PJIN@Proto?1RecvFile?$AA@
_DATA	SEGMENT
??_C@_0P@PJIN@Proto?1RecvFile?$AA@ DB 'Proto/RecvFile', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenRecvFile
_TEXT	SEGMENT
_hContact$ = 12
_evt$ = 16
_ccs$ = -16
_TlenRecvFile PROC NEAR					; COMDAT

; 874  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 875  : 	CCSDATA ccs = { hContact, PSR_FILE, 0, ( LPARAM )evt };

  00006	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  00009	83 65 f8 00	 and	 DWORD PTR _ccs$[ebp+8], 0
  0000d	89 45 f0	 mov	 DWORD PTR _ccs$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _evt$[ebp]
  00013	89 45 fc	 mov	 DWORD PTR _ccs$[ebp+12], eax

; 876  : 	return CallService( MS_PROTO_RECVFILE, 0, ( LPARAM )&ccs );

  00016	8d 45 f0	 lea	 eax, DWORD PTR _ccs$[ebp]
  00019	50		 push	 eax
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001f	6a 00		 push	 0
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PJIN@Proto?1RecvFile?$AA@ ; `string'
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_09KKHM@?1RecvFile?$AA@ ; `string'
  0002d	ff 50 24	 call	 DWORD PTR [eax+36]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 877  : }

  00033	c9		 leave
  00034	c3		 ret	 0
_TlenRecvFile ENDP
_TEXT	ENDS
PUBLIC	_JabberDbSettingChanged
PUBLIC	??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@	; `string'
PUBLIC	??_C@_05GGEJ@Group?$AA@				; `string'
PUBLIC	??_C@_04LMAM@Nick?$AA@				; `string'
PUBLIC	??_C@_0BF@JDFO@Group?5set?5to?5nothing?$AA@	; `string'
PUBLIC	??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
PUBLIC	??_C@_0BA@GD@Group?5set?5to?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
PUBLIC	??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ ; `string'
PUBLIC	??_C@_0P@PPEK@Nick?5set?5to?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BL@BDCD@Add?5?$CFs?5permanently?5to?5list?$AA@ ; `string'
PUBLIC	??_C@_0P@BOGB@jid?$DN?$CFs?5nick?$DN?$CFs?$AA@	; `string'
PUBLIC	??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
PUBLIC	??_C@_0FH@JNDC@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
EXTRN	_TlenGroupEncode:NEAR
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ DB 'Proto/GetContactBasePr'
	DB	'oto', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT
??_C@_05GGEJ@Group?$AA@ DB 'Group', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT
??_C@_04LMAM@Nick?$AA@ DB 'Nick', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JDFO@Group?5set?5to?5nothing?$AA@
_DATA	SEGMENT
??_C@_0BF@JDFO@Group?5set?5to?5nothing?$AA@ DB 'Group set to nothing', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT
??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ DB '<'
	DB	'iq type=''set''><query xmlns=''jabber:iq:roster''><item name='
	DB	'''%s'' jid=''%s''></item></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GD@Group?5set?5to?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BA@GD@Group?5set?5to?5?$CFs?$AA@ DB 'Group set to %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT
??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ DB '<'
	DB	'iq type=''set''><query xmlns=''jabber:iq:roster''><item name='
	DB	'''%s'' jid=''%s''><group>%s</group></item></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@
_DATA	SEGMENT
??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ DB 'CList/GetContactDisp'
	DB	'layName', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@PPEK@Nick?5set?5to?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0P@PPEK@Nick?5set?5to?5?$CFs?$AA@ DB 'Nick set to %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@BDCD@Add?5?$CFs?5permanently?5to?5list?$AA@
_DATA	SEGMENT
??_C@_0BL@BDCD@Add?5?$CFs?5permanently?5to?5list?$AA@ DB 'Add %s permanen'
	DB	'tly to list', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@BOGB@jid?$DN?$CFs?5nick?$DN?$CFs?$AA@
_DATA	SEGMENT
??_C@_0P@BOGB@jid?$DN?$CFs?5nick?$DN?$CFs?$AA@ DB 'jid=%s nick=%s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT
??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ DB '<pr'
	DB	'esence to=''%s'' type=''subscribe''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FH@JNDC@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@
_DATA	SEGMENT
??_C@_0FH@JNDC@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ DB '<'
	DB	'iq type=''set''><query xmlns=''jabber:iq:roster''><item name='
	DB	'''%s'' jid=''%s''/></query></iq>', 00H	; `string'
_DATA	ENDS
;	COMDAT _JabberDbSettingChanged
_TEXT	SEGMENT
_cgs$84999 = -28
_cgs$85007 = -28
_cgs$85019 = -28
_cgs$85028 = -28
_cgs$85037 = -28
_cgs$85045 = -28
_cgs$85052 = -28
_ptr$ = 8
_wParam$ = 12
_lParam$ = 16
_dbv$84171 = -16
_item$84172 = -4
_nick$84174 = 12
_jid$84175 = 16
_newNick$84214 = 8
_jid$84243 = 16
_nick$84244 = -4
_cgs$84989 = -28
_JabberDbSettingChanged PROC NEAR			; COMDAT

; 892  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 893  : 	DBCONTACTWRITESETTING *cws = (DBCONTACTWRITESETTING *) lParam;
; 894  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 895  : 	// no action for hContact == NULL or when offline
; 896  : 	if ((HANDLE) wParam == NULL) return 0;

  00006	83 7d 0c 00	 cmp	 DWORD PTR _wParam$[ebp], 0
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	0f 84 20 05 00
	00		 je	 $L84183

; 897  : 	if (!proto->jabberConnected) return 0;

  00013	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  00016	83 bf 7c 01 00
	00 00		 cmp	 DWORD PTR [edi+380], 0
  0001d	0f 84 10 05 00
	00		 je	 $L84183

; 898  : 
; 899  : 	if (!strcmp(cws->szModule, "CList")) {

  00023	8b 75 10	 mov	 esi, DWORD PTR _lParam$[ebp]
  00026	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  0002b	53		 push	 ebx
  0002c	ff 36		 push	 DWORD PTR [esi]
  0002e	e8 00 00 00 00	 call	 _strcmp
  00033	59		 pop	 ecx
  00034	85 c0		 test	 eax, eax
  00036	59		 pop	 ecx
  00037	0f 85 f6 04 00
	00		 jne	 $L84183

; 900  : 		HANDLE hContact;
; 901  : 		DBVARIANT dbv;
; 902  : 		JABBER_LIST_ITEM *item;
; 903  : 		char *szProto, *nick, *jid, *group;
; 904  : 
; 905  : 		hContact = (HANDLE) wParam;
; 906  : 		szProto = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);

  0003d	50		 push	 eax
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00043	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  0004b	ff 50 24	 call	 DWORD PTR [eax+36]
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 907  : 		if (szProto==NULL || strcmp(szProto, proto->iface.m_szModuleName)) return 0;

  00051	85 c0		 test	 eax, eax
  00053	0f 84 da 04 00
	00		 je	 $L84183
  00059	ff 77 1c	 push	 DWORD PTR [edi+28]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _strcmp
  00062	59		 pop	 ecx
  00063	85 c0		 test	 eax, eax
  00065	59		 pop	 ecx
  00066	0f 85 c7 04 00
	00		 jne	 $L84183

; 908  : //		if (DBGetContactSettingByte(hContact, iface.m_szModuleName, "ChatRoom", 0) != 0) return 0;
; 909  : 		// A contact's group is changed
; 910  : 		if (!strcmp(cws->szSetting, "Group")) {

  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	e8 00 00 00 00	 call	 _strcmp
  00079	59		 pop	 ecx
  0007a	85 c0		 test	 eax, eax
  0007c	59		 pop	 ecx
  0007d	0f 85 8e 01 00
	00		 jne	 $L84184

; 911  : 			if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00083	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00086	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0008b	89 45 e4	 mov	 DWORD PTR _cgs$84989[ebp], eax
  0008e	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00091	89 45 ec	 mov	 DWORD PTR _cgs$84989[ebp+8], eax
  00094	8d 45 e4	 lea	 eax, DWORD PTR _cgs$84989[ebp]
  00097	50		 push	 eax
  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0009d	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  000a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$84989[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  000a7	56		 push	 esi
  000a8	ff 50 24	 call	 DWORD PTR [eax+36]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	85 c0		 test	 eax, eax
  000b0	0f 85 7d 04 00
	00		 jne	 $L84183

; 912  : 				if ((item=JabberListGetItemPtr(proto, LIST_ROSTER, dbv.pszVal)) != NULL) {

  000b6	ff 75 f4	 push	 DWORD PTR _dbv$84171[ebp+4]
  000b9	50		 push	 eax
  000ba	57		 push	 edi
  000bb	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c3	89 45 fc	 mov	 DWORD PTR _item$84172[ebp], eax
  000c6	85 c0		 test	 eax, eax

; 913  : 					DBFreeVariant(&dbv);

  000c8	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  000cb	50		 push	 eax
  000cc	6a 00		 push	 0
  000ce	0f 84 76 02 00
	00		 je	 $L84188
  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d9	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000de	57		 push	 edi
  000df	ff 50 24	 call	 DWORD PTR [eax+36]

; 914  : 					if (!DBGetContactSetting(hContact, "CList", "MyHandle", &dbv)) {

  000e2	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  000e5	89 5d e4	 mov	 DWORD PTR _cgs$84999[ebp], ebx
  000e8	89 45 ec	 mov	 DWORD PTR _cgs$84999[ebp+8], eax
  000eb	8d 45 e4	 lea	 eax, DWORD PTR _cgs$84999[ebp]
  000ee	50		 push	 eax
  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000f4	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  000f7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$84999[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  000fe	56		 push	 esi
  000ff	ff 50 24	 call	 DWORD PTR [eax+36]
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	85 c0		 test	 eax, eax
  00107	75 22		 jne	 SHORT $L84189
$L85056:

; 915  : 						nick = JabberTextEncode(dbv.pszVal);

  00109	ff 75 f4	 push	 DWORD PTR _dbv$84171[ebp+4]
  0010c	e8 00 00 00 00	 call	 _JabberTextEncode
  00111	89 45 0c	 mov	 DWORD PTR _nick$84174[ebp], eax

; 916  : 						DBFreeVariant(&dbv);

  00114	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00117	50		 push	 eax
  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0011d	6a 00		 push	 0
  0011f	57		 push	 edi
  00120	ff 50 24	 call	 DWORD PTR [eax+36]

; 917  : 					} else if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "Nick", &dbv)) {

  00123	8b 75 fc	 mov	 esi, DWORD PTR _item$84172[ebp]
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	eb 3c		 jmp	 SHORT $L84193
$L84189:
  0012b	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0012e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85007[ebp+4], OFFSET FLAT:??_C@_04LMAM@Nick?$AA@ ; `string'
  00135	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00138	89 45 e4	 mov	 DWORD PTR _cgs$85007[ebp], eax
  0013b	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  0013e	89 45 ec	 mov	 DWORD PTR _cgs$85007[ebp+8], eax
  00141	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85007[ebp]
  00144	50		 push	 eax
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0014a	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  0014d	56		 push	 esi
  0014e	ff 50 24	 call	 DWORD PTR [eax+36]
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
  00154	85 c0		 test	 eax, eax

; 918  : 						nick = JabberTextEncode(dbv.pszVal);
; 919  : 						DBFreeVariant(&dbv);
; 920  : 					} else {

  00156	74 b1		 je	 SHORT $L85056

; 921  : 						nick = JabberNickFromJID(item->jid);

  00158	8b 75 fc	 mov	 esi, DWORD PTR _item$84172[ebp]
  0015b	ff 76 04	 push	 DWORD PTR [esi+4]
  0015e	e8 00 00 00 00	 call	 _JabberNickFromJID
  00163	59		 pop	 ecx
  00164	89 45 0c	 mov	 DWORD PTR _nick$84174[ebp], eax
$L84193:

; 922  : 					}
; 923  : 					if (nick != NULL) {

  00167	33 c9		 xor	 ecx, ecx
  00169	39 4d 0c	 cmp	 DWORD PTR _nick$84174[ebp], ecx
  0016c	0f 84 c1 03 00
	00		 je	 $L84183

; 924  : 						// Note: we need to compare with item->group to prevent infinite loop
; 925  : 						if (cws->value.type==DBVT_DELETED && item->group!=NULL) {

  00172	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  00175	38 48 08	 cmp	 BYTE PTR [eax+8], cl
  00178	75 2a		 jne	 SHORT $L84197
  0017a	39 4e 28	 cmp	 DWORD PTR [esi+40], ecx
  0017d	74 25		 je	 SHORT $L84197

; 926  : 							JabberLog(proto, "Group set to nothing");

  0017f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JDFO@Group?5set?5to?5nothing?$AA@ ; `string'
  00184	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  00187	e8 00 00 00 00	 call	 _JabberLog

; 927  : 							JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'></item></query></iq>", nick, item->jid);

  0018c	ff 76 04	 push	 DWORD PTR [esi+4]
  0018f	ff 75 0c	 push	 DWORD PTR _nick$84174[ebp]
  00192	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  00197	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  0019a	e8 00 00 00 00	 call	 _JabberSend
  0019f	83 c4 18	 add	 esp, 24			; 00000018H

; 928  : 						} else if (cws->value.pszVal != NULL) {

  001a2	eb 65		 jmp	 SHORT $L84202
$L84197:
  001a4	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  001a7	74 60		 je	 SHORT $L84202

; 929  : 							char *newGroup = settingToChar(cws);

  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _settingToChar
  001af	8b d8		 mov	 ebx, eax

; 930  : 							if (item->group==NULL || strcmp(newGroup, item->group)) {

  001b1	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  001b4	85 c0		 test	 eax, eax
  001b6	59		 pop	 ecx
  001b7	74 0d		 je	 SHORT $L84206
  001b9	50		 push	 eax
  001ba	53		 push	 ebx
  001bb	e8 00 00 00 00	 call	 _strcmp
  001c0	59		 pop	 ecx
  001c1	85 c0		 test	 eax, eax
  001c3	59		 pop	 ecx
  001c4	74 3b		 je	 SHORT $L84209
$L84206:

; 931  : 								JabberLog(proto, "Group set to %s", newGroup);

  001c6	53		 push	 ebx
  001c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GD@Group?5set?5to?5?$CFs?$AA@ ; `string'
  001cc	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  001cf	e8 00 00 00 00	 call	 _JabberLog

; 932  : 								if ((group=TlenGroupEncode(newGroup)) != NULL) {

  001d4	53		 push	 ebx
  001d5	e8 00 00 00 00	 call	 _TlenGroupEncode
  001da	8b f8		 mov	 edi, eax
  001dc	83 c4 10	 add	 esp, 16			; 00000010H
  001df	85 ff		 test	 edi, edi
  001e1	74 1e		 je	 SHORT $L84209

; 933  : 									JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'><group>%s</group></item></query></iq>", nick, item->jid, group);

  001e3	57		 push	 edi
  001e4	ff 76 04	 push	 DWORD PTR [esi+4]
  001e7	ff 75 0c	 push	 DWORD PTR _nick$84174[ebp]
  001ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  001ef	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  001f2	e8 00 00 00 00	 call	 _JabberSend

; 934  : 									mir_free(group);

  001f7	57		 push	 edi
  001f8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001fe	83 c4 18	 add	 esp, 24			; 00000018H
$L84209:

; 935  : 								}
; 936  : 							}
; 937  : 							mir_free(newGroup);

  00201	53		 push	 ebx
  00202	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00208	59		 pop	 ecx
$L84202:

; 938  : 						}
; 939  : 						mir_free(nick);

  00209	ff 75 0c	 push	 DWORD PTR _nick$84174[ebp]

; 940  : 					}
; 941  : 				}
; 942  : 				else {

  0020c	e9 1b 03 00 00	 jmp	 $L85058
$L84184:

; 943  : 					DBFreeVariant(&dbv);
; 944  : 				}
; 945  : 			}
; 946  : 		}
; 947  : 		// A contact is renamed
; 948  : 		else if (!strcmp(cws->szSetting, "MyHandle")) {

  00211	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  00216	ff 76 04	 push	 DWORD PTR [esi+4]
  00219	e8 00 00 00 00	 call	 _strcmp
  0021e	59		 pop	 ecx
  0021f	85 c0		 test	 eax, eax
  00221	59		 pop	 ecx
  00222	0f 85 37 01 00
	00		 jne	 $L84213

; 949  : 			char *newNick;
; 950  : 
; 951  : //			hContact = (HANDLE) wParam;
; 952  : //			szProto = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);
; 953  : //			if (szProto==NULL || strcmp(szProto, iface.m_szModuleName)) return 0;
; 954  : 
; 955  : 			if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00228	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0022b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85019[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00232	89 45 e4	 mov	 DWORD PTR _cgs$85019[ebp], eax
  00235	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00238	89 45 ec	 mov	 DWORD PTR _cgs$85019[ebp+8], eax
  0023b	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85019[ebp]
  0023e	50		 push	 eax
  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00244	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00247	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0024c	ff 50 24	 call	 DWORD PTR [eax+36]
  0024f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00252	85 c0		 test	 eax, eax
  00254	0f 85 d9 02 00
	00		 jne	 $L84183

; 956  : 				jid = dbv.pszVal;

  0025a	8b 45 f4	 mov	 eax, DWORD PTR _dbv$84171[ebp+4]

; 957  : 				if ((item=JabberListGetItemPtr(proto, LIST_ROSTER, dbv.pszVal)) != NULL) {

  0025d	50		 push	 eax
  0025e	6a 00		 push	 0
  00260	57		 push	 edi
  00261	89 45 10	 mov	 DWORD PTR _jid$84175[ebp], eax
  00264	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00269	8b d8		 mov	 ebx, eax
  0026b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026e	85 db		 test	 ebx, ebx
  00270	0f 84 ce 00 00
	00		 je	 $L84240

; 958  : 					if (cws->value.type == DBVT_DELETED) {

  00276	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  0027a	75 21		 jne	 SHORT $L84218

; 959  : 						newNick = mir_strdup((char *) CallService(MS_CLIST_GETCONTACTDISPLAYNAME, (WPARAM) hContact, GCDNF_NOMYHANDLE));

  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00281	6a 01		 push	 1
  00283	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00286	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ ; `string'
  0028b	ff 50 24	 call	 DWORD PTR [eax+36]
  0028e	50		 push	 eax
  0028f	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00295	83 c4 10	 add	 esp, 16			; 00000010H
$L85057:
  00298	89 45 08	 mov	 DWORD PTR _newNick$84214[ebp], eax

; 960  : 					} else if (cws->value.pszVal!=NULL) {

  0029b	eb 13		 jmp	 SHORT $L84225
$L84218:
  0029d	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  002a1	74 09		 je	 SHORT $L84224

; 961  :                         newNick = settingToChar(cws);

  002a3	56		 push	 esi
  002a4	e8 00 00 00 00	 call	 _settingToChar
  002a9	59		 pop	 ecx

; 962  : 					} else {

  002aa	eb ec		 jmp	 SHORT $L85057
$L84224:

; 963  : 						newNick = NULL;

  002ac	83 65 08 00	 and	 DWORD PTR _newNick$84214[ebp], 0
$L84225:

; 964  : 					}
; 965  : 					// Note: we need to compare with item->nick to prevent infinite loop
; 966  : 					if (newNick!=NULL && (item->nick==NULL || (item->nick!=NULL && strcmp(item->nick, newNick)))) {

  002b0	83 7d 08 00	 cmp	 DWORD PTR _newNick$84214[ebp], 0
  002b4	0f 84 8a 00 00
	00		 je	 $L84240
  002ba	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  002bd	85 c0		 test	 eax, eax
  002bf	74 0f		 je	 SHORT $L84231
  002c1	ff 75 08	 push	 DWORD PTR _newNick$84214[ebp]
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 _strcmp
  002ca	59		 pop	 ecx
  002cb	85 c0		 test	 eax, eax
  002cd	59		 pop	 ecx
  002ce	74 6a		 je	 SHORT $L84233
$L84231:

; 967  : 						if ((nick=JabberTextEncode(newNick)) != NULL) {

  002d0	ff 75 08	 push	 DWORD PTR _newNick$84214[ebp]
  002d3	e8 00 00 00 00	 call	 _JabberTextEncode
  002d8	8b f0		 mov	 esi, eax
  002da	59		 pop	 ecx
  002db	85 f6		 test	 esi, esi
  002dd	74 5b		 je	 SHORT $L84233

; 968  : 							JabberLog(proto, "Nick set to %s", newNick);

  002df	ff 75 08	 push	 DWORD PTR _newNick$84214[ebp]
  002e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PPEK@Nick?5set?5to?5?$CFs?$AA@ ; `string'
  002e7	57		 push	 edi
  002e8	e8 00 00 00 00	 call	 _JabberLog

; 969  : 							if (item->group!=NULL && (group=TlenGroupEncode(item->group))!=NULL) {

  002ed	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  002f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f3	85 c0		 test	 eax, eax
  002f5	74 29		 je	 SHORT $L84237
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _TlenGroupEncode
  002fd	8b d8		 mov	 ebx, eax
  002ff	59		 pop	 ecx
  00300	85 db		 test	 ebx, ebx
  00302	74 1c		 je	 SHORT $L84237

; 970  : 								JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'><group>%s</group></item></query></iq>", nick, jid, group);

  00304	53		 push	 ebx
  00305	ff 75 10	 push	 DWORD PTR _jid$84175[ebp]
  00308	56		 push	 esi
  00309	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  0030e	57		 push	 edi
  0030f	e8 00 00 00 00	 call	 _JabberSend

; 971  : 								mir_free(group);

  00314	53		 push	 ebx
  00315	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0031b	83 c4 18	 add	 esp, 24			; 00000018H

; 972  : 							} else {

  0031e	eb 12		 jmp	 SHORT $L84238
$L84237:

; 973  : 								JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'></item></query></iq>", nick, jid);

  00320	ff 75 10	 push	 DWORD PTR _jid$84175[ebp]
  00323	56		 push	 esi
  00324	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FN@FPGF@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  00329	57		 push	 edi
  0032a	e8 00 00 00 00	 call	 _JabberSend
  0032f	83 c4 10	 add	 esp, 16			; 00000010H
$L84238:

; 974  : 							}
; 975  : 							mir_free(nick);

  00332	56		 push	 esi
  00333	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00339	59		 pop	 ecx
$L84233:

; 976  : 						}
; 977  : 					}
; 978  : 					if (newNick != NULL) mir_free(newNick);

  0033a	ff 75 08	 push	 DWORD PTR _newNick$84214[ebp]
  0033d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00343	59		 pop	 ecx
$L84240:

; 979  : 				}
; 980  : 				DBFreeVariant(&dbv);

  00344	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00347	50		 push	 eax
  00348	6a 00		 push	 0
$L84188:
  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0034f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00354	ff 50 24	 call	 DWORD PTR [eax+36]
  00357	83 c4 0c	 add	 esp, 12			; 0000000cH

; 981  : 			}
; 982  : 		}
; 983  : 		// A temporary contact has been added permanently
; 984  : 		else if (!strcmp(cws->szSetting, "NotOnList")) {

  0035a	e9 d4 01 00 00	 jmp	 $L84183
$L84213:
  0035f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09ELKP@NotOnList?$AA@ ; `string'
  00364	ff 76 04	 push	 DWORD PTR [esi+4]
  00367	e8 00 00 00 00	 call	 _strcmp
  0036c	59		 pop	 ecx
  0036d	85 c0		 test	 eax, eax
  0036f	59		 pop	 ecx
  00370	0f 85 bd 01 00
	00		 jne	 $L84183

; 985  : 			char *jid, *nick, *pGroup;
; 986  : 
; 987  : 			if (cws->value.type==DBVT_DELETED || (cws->value.type==DBVT_BYTE && cws->value.bVal==0)) {

  00376	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  00379	84 c0		 test	 al, al
  0037b	74 12		 je	 SHORT $L84247
  0037d	3c 01		 cmp	 al, 1
  0037f	0f 85 ae 01 00
	00		 jne	 $L84183
  00385	80 7e 0c 00	 cmp	 BYTE PTR [esi+12], 0
  00389	0f 85 a4 01 00
	00		 jne	 $L84183
$L84247:

; 988  : 				if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  0038f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00392	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00397	89 45 e4	 mov	 DWORD PTR _cgs$85028[ebp], eax
  0039a	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  0039d	89 45 ec	 mov	 DWORD PTR _cgs$85028[ebp+8], eax
  003a0	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85028[ebp]
  003a3	50		 push	 eax
  003a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003a9	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  003ac	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85028[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  003b3	56		 push	 esi
  003b4	ff 50 24	 call	 DWORD PTR [eax+36]
  003b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ba	85 c0		 test	 eax, eax
  003bc	0f 85 71 01 00
	00		 jne	 $L84183

; 989  : 					jid = mir_strdup(dbv.pszVal);

  003c2	ff 75 f4	 push	 DWORD PTR _dbv$84171[ebp+4]
  003c5	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  003cb	89 45 10	 mov	 DWORD PTR _jid$84243[ebp], eax

; 990  : 					DBFreeVariant(&dbv);

  003ce	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  003d1	50		 push	 eax
  003d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003d7	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  003dc	6a 00		 push	 0
  003de	57		 push	 edi
  003df	ff 50 24	 call	 DWORD PTR [eax+36]

; 991  : 					JabberLog(proto, "Add %s permanently to list", jid);

  003e2	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  003e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@BDCD@Add?5?$CFs?5permanently?5to?5list?$AA@ ; `string'
  003ea	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  003ed	e8 00 00 00 00	 call	 _JabberLog

; 992  : 					if (!DBGetContactSetting(hContact, "CList", "MyHandle", &dbv)) {

  003f2	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  003f5	89 5d e4	 mov	 DWORD PTR _cgs$85037[ebp], ebx
  003f8	89 45 ec	 mov	 DWORD PTR _cgs$85037[ebp+8], eax
  003fb	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85037[ebp]
  003fe	50		 push	 eax
  003ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00404	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00407	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85037[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  0040e	56		 push	 esi
  0040f	ff 50 24	 call	 DWORD PTR [eax+36]
  00412	83 c4 28	 add	 esp, 40			; 00000028H
  00415	85 c0		 test	 eax, eax
  00417	75 1f		 jne	 SHORT $L84250

; 993  : 						nick = JabberTextEncode(dbv.pszVal); //Utf8Encode

  00419	ff 75 f4	 push	 DWORD PTR _dbv$84171[ebp+4]
  0041c	e8 00 00 00 00	 call	 _JabberTextEncode
  00421	89 45 fc	 mov	 DWORD PTR _nick$84244[ebp], eax

; 994  : 						DBFreeVariant(&dbv);

  00424	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00427	50		 push	 eax
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0042d	6a 00		 push	 0
  0042f	57		 push	 edi
  00430	ff 50 24	 call	 DWORD PTR [eax+36]
  00433	83 c4 10	 add	 esp, 16			; 00000010H

; 995  : 					}
; 996  : 					else {

  00436	eb 0c		 jmp	 SHORT $L84251
$L84250:

; 997  : 						nick = JabberNickFromJID(jid);

  00438	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  0043b	e8 00 00 00 00	 call	 _JabberNickFromJID
  00440	59		 pop	 ecx
  00441	89 45 fc	 mov	 DWORD PTR _nick$84244[ebp], eax
$L84251:

; 998  : 					}
; 999  : 					if (nick != NULL) {

  00444	83 7d fc 00	 cmp	 DWORD PTR _nick$84244[ebp], 0
  00448	0f 84 db 00 00
	00		 je	 $L85051

; 1000 : 						JabberLog(proto, "jid=%s nick=%s", jid, nick);

  0044e	ff 75 fc	 push	 DWORD PTR _nick$84244[ebp]
  00451	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  00454	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BOGB@jid?$DN?$CFs?5nick?$DN?$CFs?$AA@ ; `string'
  00459	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  0045c	e8 00 00 00 00	 call	 _JabberLog

; 1001 : 						if (!DBGetContactSetting(hContact, "CList", "Group", &dbv)) {

  00461	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  00464	89 5d e4	 mov	 DWORD PTR _cgs$85045[ebp], ebx
  00467	89 45 ec	 mov	 DWORD PTR _cgs$85045[ebp+8], eax
  0046a	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85045[ebp]
  0046d	50		 push	 eax
  0046e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00473	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00476	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85045[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  0047d	56		 push	 esi
  0047e	ff 50 24	 call	 DWORD PTR [eax+36]
  00481	83 c4 1c	 add	 esp, 28			; 0000001cH
  00484	85 c0		 test	 eax, eax
  00486	75 51		 jne	 SHORT $L84255

; 1002 : 							if ((pGroup=TlenGroupEncode(dbv.pszVal)) != NULL) {

  00488	ff 75 f4	 push	 DWORD PTR _dbv$84171[ebp+4]
  0048b	e8 00 00 00 00	 call	 _TlenGroupEncode
  00490	8b f0		 mov	 esi, eax
  00492	59		 pop	 ecx
  00493	85 f6		 test	 esi, esi
  00495	74 2e		 je	 SHORT $L84257

; 1003 : 								JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'><group>%s</group></item></query></iq>", nick, jid, pGroup);

  00497	56		 push	 esi
  00498	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  0049b	ff 75 fc	 push	 DWORD PTR _nick$84244[ebp]
  0049e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GO@KJBN@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  004a3	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  004a6	e8 00 00 00 00	 call	 _JabberSend

; 1004 : 								JabberSend(proto, "<presence to='%s' type='subscribe'/>", jid);

  004ab	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  004ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
  004b3	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  004b6	e8 00 00 00 00	 call	 _JabberSend

; 1005 : 								mir_free(pGroup);

  004bb	56		 push	 esi
  004bc	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  004c2	83 c4 24	 add	 esp, 36			; 00000024H
$L84257:

; 1006 : 							}
; 1007 : 							DBFreeVariant(&dbv);

  004c5	8d 45 f0	 lea	 eax, DWORD PTR _dbv$84171[ebp]
  004c8	50		 push	 eax
  004c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004ce	6a 00		 push	 0
  004d0	57		 push	 edi
  004d1	ff 50 24	 call	 DWORD PTR [eax+36]
  004d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1008 : 						}
; 1009 : 						else {

  004d7	eb 26		 jmp	 SHORT $L84259
$L84255:

; 1010 : 							JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item name='%s' jid='%s'/></query></iq>", nick, jid);

  004d9	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  004dc	ff 75 fc	 push	 DWORD PTR _nick$84244[ebp]
  004df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@JNDC@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  004e4	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  004e7	e8 00 00 00 00	 call	 _JabberSend

; 1011 : 							JabberSend(proto, "<presence to='%s' type='subscribe'/>", jid);

  004ec	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
  004ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@PIBP@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
  004f4	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  004f7	e8 00 00 00 00	 call	 _JabberSend
  004fc	83 c4 1c	 add	 esp, 28			; 0000001cH
$L84259:

; 1012 : 						}
; 1013 : 						mir_free(nick);

  004ff	ff 75 fc	 push	 DWORD PTR _nick$84244[ebp]
  00502	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1014 : 						DBDeleteContactSetting(hContact, "CList", "Hidden");

  00508	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85052[ebp]
  0050b	89 5d e4	 mov	 DWORD PTR _cgs$85052[ebp], ebx
  0050e	50		 push	 eax
  0050f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00514	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00517	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85052[ebp+4], OFFSET FLAT:??_C@_06OCEO@Hidden?$AA@ ; `string'
  0051e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  00523	ff 50 24	 call	 DWORD PTR [eax+36]
  00526	83 c4 10	 add	 esp, 16			; 00000010H
$L85051:

; 1015 : 					}
; 1016 : 					mir_free(jid);

  00529	ff 75 10	 push	 DWORD PTR _jid$84243[ebp]
$L85058:
  0052c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00532	59		 pop	 ecx
$L84183:
  00533	5f		 pop	 edi
  00534	5e		 pop	 esi

; 1017 : 				}
; 1018 : 			}
; 1019 : 		}
; 1020 : 	}
; 1021 : 
; 1022 : 	return 0;

  00535	33 c0		 xor	 eax, eax
  00537	5b		 pop	 ebx

; 1023 : }

  00538	c9		 leave
  00539	c3		 ret	 0
_JabberDbSettingChanged ENDP
_TEXT	ENDS
EXTRN	_utfi:BYTE
;	COMDAT _settingToChar
_TEXT	SEGMENT
_cws$ = 8
_settingToChar PROC NEAR				; COMDAT

; 882  : 	switch( cws->value.type ) {

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _cws$[esp-4]
  00004	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  00008	2d fd 00 00 00	 sub	 eax, 253		; 000000fdH
  0000d	74 12		 je	 SHORT $L84150
  0000f	48		 dec	 eax
  00010	48		 dec	 eax
  00011	74 03		 je	 SHORT $L84149

; 887  : 	}
; 888  : 	return NULL;

  00013	33 c0		 xor	 eax, eax

; 889  : }

  00015	c3		 ret	 0
$L84149:

; 883  : 	case DBVT_ASCIIZ:
; 884  : 			return mir_strdup( cws->value.pszVal );

  00016	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00019	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 885  : 	case DBVT_UTF8:
; 886  :     		return mir_utf8decode(mir_strdup(cws->value.pszVal), NULL);

  0001f	59		 pop	 ecx

; 889  : }

  00020	c3		 ret	 0
$L84150:

; 885  : 	case DBVT_UTF8:
; 886  :     		return mir_utf8decode(mir_strdup(cws->value.pszVal), NULL);

  00021	6a 00		 push	 0
  00023	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00026	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0002c	59		 pop	 ecx
  0002d	50		 push	 eax
  0002e	ff 15 04 00 00
	00		 call	 DWORD PTR _utfi+4
  00034	59		 pop	 ecx
  00035	59		 pop	 ecx

; 889  : }

  00036	c3		 ret	 0
_settingToChar ENDP
_TEXT	ENDS
PUBLIC	_JabberContactDeleted
;	COMDAT _JabberContactDeleted
_TEXT	SEGMENT
_cgs$85067 = -12
_ptr$ = 8
_wParam$ = 12
_dbv$ = -24
_jid$84280 = 12
_JabberContactDeleted PROC NEAR				; COMDAT

; 1026 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 1027 : 	char *szProto;
; 1028 : 	DBVARIANT dbv;
; 1029 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1030 : 
; 1031 : 	if(!proto->jabberOnline)	// should never happen

  00008	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	39 9f 78 01 00
	00		 cmp	 DWORD PTR [edi+376], ebx

; 1032 : 		return 0;

  00013	0f 84 ba 00 00
	00		 je	 $L85071

; 1033 : 	szProto = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, wParam, 0);

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001e	53		 push	 ebx
  0001f	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  00027	ff 50 24	 call	 DWORD PTR [eax+36]
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1034 : 	if (szProto==NULL || strcmp(szProto, proto->iface.m_szModuleName))

  0002d	3b c3		 cmp	 eax, ebx
  0002f	0f 84 9e 00 00
	00		 je	 $L85071
  00035	ff 77 1c	 push	 DWORD PTR [edi+28]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _strcmp
  0003e	59		 pop	 ecx
  0003f	85 c0		 test	 eax, eax
  00041	59		 pop	 ecx
  00042	0f 85 8b 00 00
	00		 jne	 $L85071

; 1035 : 		return 0;
; 1036 : 	if (!DBGetContactSetting((HANDLE) wParam, proto->iface.m_szModuleName, "jid", &dbv)) {

  00048	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0004b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85067[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00052	89 45 f4	 mov	 DWORD PTR _cgs$85067[ebp], eax
  00055	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00058	89 45 fc	 mov	 DWORD PTR _cgs$85067[ebp+8], eax
  0005b	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85067[ebp]
  0005e	50		 push	 eax
  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00064	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0006c	ff 50 24	 call	 DWORD PTR [eax+36]
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	85 c0		 test	 eax, eax
  00074	75 5d		 jne	 SHORT $L85071

; 1037 : 		char *jid, *p, *q;
; 1038 : 
; 1039 : 		jid = dbv.pszVal;

  00076	8b 45 ec	 mov	 eax, DWORD PTR _dbv$[ebp+4]
  00079	56		 push	 esi

; 1040 : 		if ((p=strchr(jid, '@')) != NULL) {

  0007a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__strchr
  00080	6a 40		 push	 64			; 00000040H
  00082	50		 push	 eax
  00083	89 45 0c	 mov	 DWORD PTR _jid$84280[ebp], eax
  00086	ff d6		 call	 esi
  00088	59		 pop	 ecx
  00089	3b c3		 cmp	 eax, ebx
  0008b	59		 pop	 ecx
  0008c	74 0d		 je	 SHORT $L84286

; 1041 : 			if ((q=strchr(p, '/')) != NULL)

  0008e	6a 2f		 push	 47			; 0000002fH
  00090	50		 push	 eax
  00091	ff d6		 call	 esi
  00093	59		 pop	 ecx
  00094	3b c3		 cmp	 eax, ebx
  00096	59		 pop	 ecx
  00097	74 02		 je	 SHORT $L84286

; 1042 : 				*q = '\0';

  00099	88 18		 mov	 BYTE PTR [eax], bl
$L84286:

; 1043 : 		}
; 1044 : 		if (JabberListExist(proto, LIST_ROSTER, jid)) {

  0009b	ff 75 0c	 push	 DWORD PTR _jid$84280[ebp]
  0009e	53		 push	 ebx
  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 _JabberListExist
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	85 c0		 test	 eax, eax
  000aa	5e		 pop	 esi
  000ab	74 11		 je	 SHORT $L84287

; 1045 : 			// Remove from roster, server also handles the presence unsubscription process.
; 1046 : 			JabberSend(proto, "<iq type='set'><query xmlns='jabber:iq:roster'><item jid='%s' subscription='remove'/></query></iq>", jid);

  000ad	ff 75 0c	 push	 DWORD PTR _jid$84280[ebp]
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GD@PFCM@?$DMiq?5type?$DN?8set?8?$DO?$DMquery?5xmlns?$DN?8jab@ ; `string'
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _JabberSend
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84287:

; 1047 : 		}
; 1048 : 
; 1049 : 		DBFreeVariant(&dbv);

  000be	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  000c1	50		 push	 eax
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000c7	53		 push	 ebx
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000cd	ff 50 24	 call	 DWORD PTR [eax+36]
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85071:
  000d3	5f		 pop	 edi
  000d4	33 c0		 xor	 eax, eax
  000d6	5b		 pop	 ebx

; 1050 : 	}
; 1051 : 	return 0;
; 1052 : }

  000d7	c9		 leave
  000d8	c3		 ret	 0
_JabberContactDeleted ENDP
_TEXT	ENDS
PUBLIC	_TlenUserIsTyping
PUBLIC	??_C@_0BE@EHMG@?$DMm?5tp?$DN?8u?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BE@CKCM@?$DMm?5tp?$DN?8t?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
;	COMDAT ??_C@_0BE@EHMG@?$DMm?5tp?$DN?8u?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BE@EHMG@?$DMm?5tp?$DN?8u?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ DB '<m tp='''
	DB	'u'' to=''%s''/>', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CKCM@?$DMm?5tp?$DN?8t?8?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BE@CKCM@?$DMm?5tp?$DN?8t?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ DB '<m tp='''
	DB	't'' to=''%s''/>', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenUserIsTyping
_TEXT	SEGMENT
_cgs$85077 = -24
_ptr$ = 8
_hContact$ = 12
_type$ = 16
_dbv$ = -12
_TlenUserIsTyping PROC NEAR				; COMDAT

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 1056 : 	DBVARIANT dbv;
; 1057 : 	JABBER_LIST_ITEM *item;
; 1058 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1059 : 
; 1060 : 	if (!proto->jabberOnline) return 0;

  00007	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000a	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00011	74 7b		 je	 SHORT $L85081

; 1061 : 	if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00013	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00016	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$85077[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0001d	89 45 e8	 mov	 DWORD PTR _cgs$85077[ebp], eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  00023	89 45 f0	 mov	 DWORD PTR _cgs$85077[ebp+8], eax
  00026	8d 45 e8	 lea	 eax, DWORD PTR _cgs$85077[ebp]
  00029	50		 push	 eax
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0002f	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00037	ff 50 24	 call	 DWORD PTR [eax+36]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	75 4d		 jne	 SHORT $L85081

; 1062 : 		if ((item=JabberListGetItemPtr(proto, LIST_ROSTER, dbv.pszVal))!=NULL /*&& item->wantComposingEvent==TRUE*/) {

  00041	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00044	50		 push	 eax
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	85 c0		 test	 eax, eax
  00050	74 26		 je	 SHORT $L84305

; 1063 : 			switch (type) {

  00052	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00055	83 e8 00	 sub	 eax, 0
  00058	74 0d		 je	 SHORT $L84308
  0005a	48		 dec	 eax
  0005b	75 1b		 jne	 SHORT $L84305

; 1066 : 				break;
; 1067 : 			case PROTOTYPE_SELFTYPING_ON:
; 1068 : 				JabberSend(proto, "<m tp='t' to='%s'/>", dbv.pszVal);

  0005d	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CKCM@?$DMm?5tp?$DN?8t?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'

; 1069 : 				break;

  00065	eb 08		 jmp	 SHORT $L85082
$L84308:

; 1064 : 			case PROTOTYPE_SELFTYPING_OFF:
; 1065 : 				JabberSend(proto, "<m tp='u' to='%s'/>", dbv.pszVal);

  00067	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@EHMG@?$DMm?5tp?$DN?8u?8?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
$L85082:
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 _JabberSend
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84305:

; 1070 : 			}
; 1071 : 		}
; 1072 : 		DBFreeVariant(&dbv);

  00078	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  0007b	50		 push	 eax
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00081	6a 00		 push	 0
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00088	ff 50 24	 call	 DWORD PTR [eax+36]
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85081:

; 1073 : 	}
; 1074 : 	return 0;

  0008e	33 c0		 xor	 eax, eax
  00090	5e		 pop	 esi

; 1075 : }

  00091	c9		 leave
  00092	c3		 ret	 0
_TlenUserIsTyping ENDP
_TEXT	ENDS
PUBLIC	_TlenGetMyAvatar
EXTRN	_TlenGetAvatarFileName:NEAR
;	COMDAT _TlenGetMyAvatar
_TEXT	SEGMENT
_ptr$ = 8
_wParam$ = 12
_lParam$ = 16
_TlenGetMyAvatar PROC NEAR				; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1079 : 	char* buf = ( char* )wParam;
; 1080 : 	int  size = ( int )lParam;
; 1081 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1082 : 
; 1083 : 	if ( buf == NULL || size <= 0 )

  00003	33 c0		 xor	 eax, eax
  00005	39 45 0c	 cmp	 DWORD PTR _wParam$[ebp], eax
  00008	74 1b		 je	 SHORT $L84328
  0000a	39 45 10	 cmp	 DWORD PTR _lParam$[ebp], eax
  0000d	7e 16		 jle	 SHORT $L84328

; 1085 : 
; 1086 : 	TlenGetAvatarFileName( proto, NULL, buf, size );

  0000f	ff 75 10	 push	 DWORD PTR _lParam$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00015	50		 push	 eax
  00016	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  00019	e8 00 00 00 00	 call	 _TlenGetAvatarFileName
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 1087 : 	return 0;

  00021	33 c0		 xor	 eax, eax

; 1088 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$L84328:

; 1084 : 		return -1;

  00025	83 c8 ff	 or	 eax, -1

; 1088 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_TlenGetMyAvatar ENDP
_TEXT	ENDS
PUBLIC	_TlenSetMyAvatar
EXTRN	__imp__open:NEAR
EXTRN	__imp__read:NEAR
EXTRN	__imp__DialogBoxParamW@20:NEAR
EXTRN	_TlenUploadAvatar:NEAR
EXTRN	_TlenRemoveAvatar:NEAR
EXTRN	__imp__CopyFileA@12:NEAR
EXTRN	__imp__close:NEAR
EXTRN	__imp__filelength:NEAR
;	COMDAT _TlenSetMyAvatar
_TEXT	SEGMENT
_ptr$ = 8
_lParam$ = 16
_tFileName$ = -260
_fileIn$ = 16
_TlenSetMyAvatar PROC NEAR				; COMDAT

; 1116 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx

; 1117 : 	char* szFileName = ( char* )lParam;
; 1118 :    	char tFileName[ MAX_PATH ];
; 1119 : 	int fileIn;
; 1120 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1121 : 	if(!proto->jabberOnline) return 1;

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _ptr$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	39 bb 78 01 00
	00		 cmp	 DWORD PTR [ebx+376], edi
  00017	74 4e		 je	 SHORT $L85085

; 1122 : 	if (szFileName != NULL) {

  00019	39 7d 10	 cmp	 DWORD PTR _lParam$[ebp], edi
  0001c	0f 84 b5 00 00
	00		 je	 $L84375

; 1123 : 		int result = DialogBoxParam(hInst, MAKEINTRESOURCE(IDD_USER_CHANGEAVATAR), NULL, TlenChangeAvatarDlgProc, (LPARAM) NULL);

  00022	57		 push	 edi
  00023	68 00 00 00 00	 push	 OFFSET FLAT:_TlenChangeAvatarDlgProc@16
  00028	57		 push	 edi
  00029	68 a1 00 00 00	 push	 161			; 000000a1H
  0002e	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  0003a	8b f0		 mov	 esi, eax

; 1124 : 		TlenGetAvatarFileName( proto, NULL, tFileName, MAX_PATH);

  0003c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tFileName$[ebp]
  00042	68 04 01 00 00	 push	 260			; 00000104H
  00047	50		 push	 eax
  00048	57		 push	 edi
  00049	53		 push	 ebx
  0004a	e8 00 00 00 00	 call	 _TlenGetAvatarFileName
  0004f	83 c4 10	 add	 esp, 16			; 00000010H

; 1125 : 		if ( CopyFileA( szFileName, tFileName, FALSE ) == FALSE ) {

  00052	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tFileName$[ebp]
  00058	57		 push	 edi
  00059	50		 push	 eax
  0005a	ff 75 10	 push	 DWORD PTR _lParam$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileA@12
  00063	85 c0		 test	 eax, eax
  00065	75 05		 jne	 SHORT $L84384
$L85085:

; 1126 : 			return 1;

  00067	6a 01		 push	 1
  00069	58		 pop	 eax
  0006a	eb 74		 jmp	 SHORT $L84366
$L84384:

; 1127 : 		}
; 1128 : 		fileIn = open( tFileName, O_RDWR | O_BINARY, S_IREAD | S_IWRITE );

  0006c	68 80 01 00 00	 push	 384			; 00000180H
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tFileName$[ebp]
  00077	68 02 80 00 00	 push	 32770			; 00008002H
  0007c	50		 push	 eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__open
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1129 : 		if ( fileIn != -1 ) {

  00086	83 f8 ff	 cmp	 eax, -1
  00089	89 45 10	 mov	 DWORD PTR _fileIn$[ebp], eax
  0008c	74 50		 je	 SHORT $L84391

; 1130 : 			long  dwPngSize = filelength(fileIn);

  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__filelength
  00095	8b d8		 mov	 ebx, eax

; 1131 : 			BYTE* pResult = (BYTE *)mir_alloc(dwPngSize);

  00097	53		 push	 ebx
  00098	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0009e	8b f8		 mov	 edi, eax
  000a0	59		 pop	 ecx

; 1132 : 			if (pResult != NULL) {

  000a1	85 ff		 test	 edi, edi
  000a3	59		 pop	 ecx
  000a4	74 38		 je	 SHORT $L84391

; 1133 : 				read( fileIn, pResult, dwPngSize );

  000a6	53		 push	 ebx
  000a7	57		 push	 edi
  000a8	ff 75 10	 push	 DWORD PTR _fileIn$[ebp]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__read

; 1134 : 				close( fileIn );

  000b1	ff 75 10	 push	 DWORD PTR _fileIn$[ebp]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__close

; 1135 : 				TlenUploadAvatar(proto, pResult, dwPngSize, (result & 0x10000) != 0);

  000ba	c1 ee 10	 shr	 esi, 16			; 00000010H
  000bd	83 e6 01	 and	 esi, 1
  000c0	56		 push	 esi
  000c1	53		 push	 ebx
  000c2	57		 push	 edi
  000c3	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  000c6	e8 00 00 00 00	 call	 _TlenUploadAvatar

; 1136 : 				mir_free(pResult);

  000cb	57		 push	 edi
  000cc	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000d2	83 c4 24	 add	 esp, 36			; 00000024H

; 1137 : 			}
; 1138 : 		}
; 1139 : 	} else {

  000d5	eb 07		 jmp	 SHORT $L84391
$L84375:

; 1140 : 		TlenRemoveAvatar(proto);

  000d7	53		 push	 ebx
  000d8	e8 00 00 00 00	 call	 _TlenRemoveAvatar
  000dd	59		 pop	 ecx
$L84391:

; 1141 : 	}
; 1142 : 	return 0;

  000de	33 c0		 xor	 eax, eax
$L84366:
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 1143 : }

  000e3	c9		 leave
  000e4	c3		 ret	 0
_TlenSetMyAvatar ENDP
_TEXT	ENDS
EXTRN	__imp__EndDialog@8:NEAR
EXTRN	__imp__CheckDlgButton@12:NEAR
EXTRN	__imp__IsDlgButtonChecked@8:NEAR
EXTRN	__imp__SendMessageW@16:NEAR
;	COMDAT _TlenChangeAvatarDlgProc@16
_TEXT	SEGMENT
_hwndDlg$ = 8
_msg$ = 12
_wParam$ = 16
_TlenChangeAvatarDlgProc@16 PROC NEAR			; COMDAT

; 1091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1092 : 	switch ( msg ) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00006	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  0000b	74 39		 je	 SHORT $L84344
  0000d	48		 dec	 eax
  0000e	75 07		 jne	 SHORT $L84351

; 1098 : 	case WM_COMMAND:
; 1099 : 		switch (LOWORD(wParam)) {

  00010	0f b7 45 10	 movzx	 eax, WORD PTR _wParam$[ebp]
  00014	48		 dec	 eax
  00015	74 04		 je	 SHORT $L84354
$L84351:

; 1109 : 		}
; 1110 : 		break;
; 1111 : 	}
; 1112 : 	return 0;

  00017	33 c0		 xor	 eax, eax
  00019	eb 5d		 jmp	 SHORT $L84339
$L84354:
  0001b	56		 push	 esi

; 1100 : 		case IDOK:
; 1101 : 			{
; 1102 : 				int result = LOWORD(wParam);

  0001c	6a 01		 push	 1
  0001e	5e		 pop	 esi

; 1103 : 				if (IsDlgButtonChecked(hwndDlg, IDC_PUBLICAVATAR)) {

  0001f	68 c0 04 00 00	 push	 1216			; 000004c0H
  00024	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDlgButtonChecked@8
  0002d	85 c0		 test	 eax, eax
  0002f	74 05		 je	 SHORT $L84358

; 1104 : 					result |= 0x10000;

  00031	be 01 00 01 00	 mov	 esi, 65537		; 00010001H
$L84358:

; 1105 : 				}
; 1106 : 				EndDialog(hwndDlg, result);

  00036	56		 push	 esi
  00037	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1107 : 			}
; 1108 : 			return TRUE;

  00040	6a 01		 push	 1
  00042	58		 pop	 eax
  00043	5e		 pop	 esi
  00044	eb 32		 jmp	 SHORT $L84339
$L84344:

; 1093 : 	case WM_INITDIALOG:
; 1094 : 		TranslateDialogDefault( hwndDlg );

  00046	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00049	e8 00 00 00 00	 call	 _TranslateDialogDefault
  0004e	59		 pop	 ecx

; 1095 : 		SendMessage(hwndDlg, WM_SETICON, (WPARAM) ICON_BIG, (LPARAM) tlenIcons[TLEN_IDI_TLEN]);

  0004f	ff 35 00 00 00
	00		 push	 DWORD PTR _tlenIcons
  00055	6a 01		 push	 1
  00057	68 80 00 00 00	 push	 128			; 00000080H
  0005c	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 1096 : 		CheckDlgButton(hwndDlg, IDC_PUBLICAVATAR, TRUE);

  00065	6a 01		 push	 1
  00067	68 c0 04 00 00	 push	 1216			; 000004c0H
  0006c	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CheckDlgButton@12

; 1097 : 		return TRUE;

  00075	6a 01		 push	 1
  00077	58		 pop	 eax
$L84339:

; 1113 : }

  00078	5d		 pop	 ebp
  00079	c2 10 00	 ret	 16			; 00000010H
_TlenChangeAvatarDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@	; `string'
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_langpack.h
_DATA	SEGMENT
??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@ DB 'LangPack/TranslateDialo'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT _TranslateDialogDefault
_TEXT	SEGMENT
_hwndDlg$ = 8
_lptd$ = -16
_TranslateDialogDefault PROC NEAR			; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 82   : 	LANGPACKTRANSLATEDIALOG lptd;
; 83   : 	lptd.cbSize=sizeof(lptd);
; 84   : 	lptd.flags=0;
; 85   : 	lptd.hwndDlg=hwndDlg;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _hwndDlg$[ebp]
  00009	33 c0		 xor	 eax, eax
  0000b	89 4d f8	 mov	 DWORD PTR _lptd$[ebp+8], ecx

; 86   : 	lptd.ignoreControls=NULL;
; 87   : 	return CallService(MS_LANGPACK_TRANSLATEDIALOG,0,(LPARAM)&lptd);

  0000e	8d 4d f0	 lea	 ecx, DWORD PTR _lptd$[ebp]
  00011	51		 push	 ecx
  00012	89 45 f4	 mov	 DWORD PTR _lptd$[ebp+4], eax
  00015	89 45 fc	 mov	 DWORD PTR _lptd$[ebp+12], eax
  00018	50		 push	 eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@ ; `string'
  00023	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _lptd$[ebp], 16 ; 00000010H
  0002a	ff 50 24	 call	 DWORD PTR [eax+36]
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : }

  00030	c9		 leave
  00031	c3		 ret	 0
_TranslateDialogDefault ENDP
_TEXT	ENDS
PUBLIC	_TlenGetAvatarCaps
;	COMDAT _TlenGetAvatarCaps
_TEXT	SEGMENT
_ptr$ = 8
_wParam$ = 12
_lParam$ = 16
_TlenGetAvatarCaps PROC NEAR				; COMDAT

; 1147 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1148 : 	switch (wParam) {

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _wParam$[esp-4]
  00004	48		 dec	 eax
  00005	74 3d		 je	 SHORT $L84406
  00007	48		 dec	 eax
  00008	74 2b		 je	 SHORT $L84410
  0000a	48		 dec	 eax
  0000b	74 2c		 je	 SHORT $L84411
  0000d	48		 dec	 eax
  0000e	74 0f		 je	 SHORT $L84412
  00010	48		 dec	 eax
  00011	74 22		 je	 SHORT $L84410
  00013	48		 dec	 eax
  00014	74 03		 je	 SHORT $L84414
  00016	48		 dec	 eax

; 1166 : 	case AF_DELAYAFTERFAIL:
; 1167 : 		return 0;

  00017	eb 3b		 jmp	 SHORT $L85090
$L84414:

; 1162 : 	case AF_DONTNEEDDELAYS:
; 1163 : 		return 1;
; 1164 : 	case AF_MAXFILESIZE:
; 1165 : 		return 10 * 1024;

  00019	b8 00 28 00 00	 mov	 eax, 10240		; 00002800H

; 1168 : 	}
; 1169 : 	return 0;
; 1170 : }

  0001e	c3		 ret	 0
$L84412:

; 1160 : 	case AF_ENABLED:
; 1161 : 		return (proto->tlenOptions.enableAvatars && proto->jabberOnline) ? 1 : 0;

  0001f	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00023	83 b8 dc 01 00
	00 00		 cmp	 DWORD PTR [eax+476], 0
  0002a	74 28		 je	 SHORT $L85090
  0002c	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  00033	74 1f		 je	 SHORT $L85090
$L84410:
  00035	6a 01		 push	 1
  00037	58		 pop	 eax

; 1168 : 	}
; 1169 : 	return 0;
; 1170 : }

  00038	c3		 ret	 0
$L84411:

; 1156 : 	case AF_PROPORTION:
; 1157 : 		return PIP_SQUARE;
; 1158 : 	case AF_FORMATSUPPORTED:
; 1159 : 		return (lParam == PA_FORMAT_PNG) ? 1 : 0;

  00039	33 c0		 xor	 eax, eax
  0003b	83 7c 24 0c 01	 cmp	 DWORD PTR _lParam$[esp-4], 1
  00040	0f 94 c0	 sete	 al

; 1168 : 	}
; 1169 : 	return 0;
; 1170 : }

  00043	c3		 ret	 0
$L84406:

; 1149 : 	case AF_MAXSIZE:
; 1150 : 		{
; 1151 : 			POINT* size = (POINT*)lParam;
; 1152 : 			if ( size )

  00044	8b 44 24 0c	 mov	 eax, DWORD PTR _lParam$[esp-4]
  00048	85 c0		 test	 eax, eax
  0004a	74 08		 je	 SHORT $L85090

; 1153 : 				size->x = size->y = 64;

  0004c	6a 40		 push	 64			; 00000040H
  0004e	59		 pop	 ecx
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00052	89 08		 mov	 DWORD PTR [eax], ecx
$L85090:

; 1154 : 		}
; 1155 : 	    return 0;

  00054	33 c0		 xor	 eax, eax

; 1168 : 	}
; 1169 : 	return 0;
; 1170 : }

  00056	c3		 ret	 0
_TlenGetAvatarCaps ENDP
_TEXT	ENDS
PUBLIC	_TlenOnEvent
PUBLIC	??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@	; `string'
EXTRN	_TlenOnModulesLoaded:NEAR
EXTRN	_TlenOptionsInit:NEAR
EXTRN	_TlenPreShutdown:NEAR
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ DB 'CList/ModifyMenuItem', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenOnEvent
_TEXT	SEGMENT
_ptr$ = 8
_eventType$ = 12
_wParam$ = 16
_lParam$ = 20
_clmi$84436 = -40
_TlenOnEvent PROC NEAR					; COMDAT

; 1174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 1175 :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 1176 : 	switch( eventType ) {

  00006	8b 45 0c	 mov	 eax, DWORD PTR _eventType$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	2b c1		 sub	 eax, ecx
  0000d	74 68		 je	 SHORT $L84432
  0000f	48		 dec	 eax
  00010	48		 dec	 eax
  00011	74 58		 je	 SHORT $L84434
  00013	48		 dec	 eax
  00014	74 13		 je	 SHORT $L84435
  00016	48		 dec	 eax
  00017	75 4d		 jne	 SHORT $L84429

; 1178 : 	case EV_PROTO_ONOPTIONS: return TlenOptionsInit(proto, wParam, lParam );

  00019	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0001c	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  0001f	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  00022	e8 00 00 00 00	 call	 _TlenOptionsInit
  00027	eb 58		 jmp	 SHORT $L85094
$L84435:
  00029	57		 push	 edi

; 1180 : 	case EV_PROTO_ONRENAME:
; 1181 : 		{	
; 1182 : 			CLISTMENUITEM clmi = { 0 };

  0002a	6a 09		 push	 9
  0002c	59		 pop	 ecx
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 7d dc	 lea	 edi, DWORD PTR _clmi$84436[ebp+4]
  00032	f3 ab		 rep stosd

; 1183 : 			clmi.cbSize = sizeof( CLISTMENUITEM );
; 1184 : 			clmi.flags = CMIM_NAME | CMIF_TCHAR;
; 1185 : 			clmi.ptszName = proto->iface.m_tszUserName;

  00034	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00037	c7 45 d8 28 00
	00 00		 mov	 DWORD PTR _clmi$84436[ebp], 40 ; 00000028H
  0003e	c7 45 e0 00 02
	00 80		 mov	 DWORD PTR _clmi$84436[ebp+8], -2147483136 ; 80000200H
  00045	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00048	89 4d dc	 mov	 DWORD PTR _clmi$84436[ebp+4], ecx

; 1186 : 			CallService( MS_CLIST_MODIFYMENUITEM, ( WPARAM )proto->hMenuRoot, ( LPARAM )&clmi );

  0004b	8d 4d d8	 lea	 ecx, DWORD PTR _clmi$84436[ebp]
  0004e	51		 push	 ecx
  0004f	ff b0 98 01 00
	00		 push	 DWORD PTR [eax+408]
  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ ; `string'
  0005f	ff 50 24	 call	 DWORD PTR [eax+36]
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	5f		 pop	 edi
$L84429:

; 1187 :     	}	
; 1188 :     }	
; 1189 : 	return 1;

  00066	6a 01		 push	 1
  00068	58		 pop	 eax

; 1190 : }

  00069	c9		 leave
  0006a	c3		 ret	 0
$L84434:

; 1179 : 	case EV_PROTO_ONEXIT:    return TlenPreShutdown(proto, 0, 0 );

  0006b	51		 push	 ecx
  0006c	51		 push	 ecx
  0006d	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  00070	e8 00 00 00 00	 call	 _TlenPreShutdown
  00075	eb 0a		 jmp	 SHORT $L85094
$L84432:

; 1177 : 	case EV_PROTO_ONLOAD:    return TlenOnModulesLoaded(proto, 0, 0 );

  00077	51		 push	 ecx
  00078	51		 push	 ecx
  00079	ff 75 08	 push	 DWORD PTR _ptr$[ebp]
  0007c	e8 00 00 00 00	 call	 _TlenOnModulesLoaded
$L85094:
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1190 : }

  00084	c9		 leave
  00085	c3		 ret	 0
_TlenOnEvent ENDP
_TEXT	ENDS
PUBLIC	_TlenAccMgrUI
EXTRN	_TlenAccMgrUIDlgProc@16:NEAR
;	COMDAT _TlenAccMgrUI
_TEXT	SEGMENT
_ptr$ = 8
_lParam$ = 16
_TlenAccMgrUI PROC NEAR					; COMDAT

; 1196 : 	return (int) CreateDialogParam(hInst, MAKEINTRESOURCE(IDD_ACCMGRUI), (HWND)lParam, TlenAccMgrUIDlgProc, (LPARAM) ptr);

  00000	ff 74 24 04	 push	 DWORD PTR _ptr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:_TlenAccMgrUIDlgProc@16
  00009	ff 74 24 14	 push	 DWORD PTR _lParam$[esp+4]
  0000d	68 a2 00 00 00	 push	 162			; 000000a2H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 1197 : }

  0001e	c3		 ret	 0
_TlenAccMgrUI ENDP
_TEXT	ENDS
PUBLIC	_TlenInitServicesVTbl
PUBLIC	??_C@_08FCE@?1GetName?$AA@			; `string'
PUBLIC	??_C@_04DCMN@?$CFs?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BG@FCPI@?1GetAvatarInformation?$AA@	; `string'
PUBLIC	??_C@_0L@GEBG@?1SendNudge?$AA@			; `string'
PUBLIC	??_C@_0P@BKBG@?1GetAvatarCaps?$AA@		; `string'
PUBLIC	??_C@_0N@GKGP@?1SetMyAvatar?$AA@		; `string'
PUBLIC	??_C@_0N@GIKM@?1GetMyAvatar?$AA@		; `string'
PUBLIC	??_C@_0L@DIGM@?1GetStatus?$AA@			; `string'
PUBLIC	??_C@_0BA@HIMO@?1CreateAccMgrUI?$AA@		; `string'
EXTRN	__imp__sprintf:NEAR
EXTRN	_CreateServiceFunction_Ex:NEAR
;	COMDAT ??_C@_08FCE@?1GetName?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_svc.c
_DATA	SEGMENT
??_C@_08FCE@?1GetName?$AA@ DB '/GetName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DCMN@?$CFs?$CFs?$AA@
_DATA	SEGMENT
??_C@_04DCMN@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FCPI@?1GetAvatarInformation?$AA@
_DATA	SEGMENT
??_C@_0BG@FCPI@?1GetAvatarInformation?$AA@ DB '/GetAvatarInformation', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GEBG@?1SendNudge?$AA@
_DATA	SEGMENT
??_C@_0L@GEBG@?1SendNudge?$AA@ DB '/SendNudge', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@BKBG@?1GetAvatarCaps?$AA@
_DATA	SEGMENT
??_C@_0P@BKBG@?1GetAvatarCaps?$AA@ DB '/GetAvatarCaps', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@GKGP@?1SetMyAvatar?$AA@
_DATA	SEGMENT
??_C@_0N@GKGP@?1SetMyAvatar?$AA@ DB '/SetMyAvatar', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@GIKM@?1GetMyAvatar?$AA@
_DATA	SEGMENT
??_C@_0N@GIKM@?1GetMyAvatar?$AA@ DB '/GetMyAvatar', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DIGM@?1GetStatus?$AA@
_DATA	SEGMENT
??_C@_0L@DIGM@?1GetStatus?$AA@ DB '/GetStatus', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@HIMO@?1CreateAccMgrUI?$AA@
_DATA	SEGMENT
??_C@_0BA@HIMO@?1CreateAccMgrUI?$AA@ DB '/CreateAccMgrUI', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenInitServicesVTbl
_TEXT	SEGMENT
_proto$ = 8
_s$ = -128
_TlenInitServicesVTbl PROC NEAR				; COMDAT

; 1199 : void TlenInitServicesVTbl(TlenProtocol *proto) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1200 : 	char s[128];
; 1201 :     proto->iface.vtbl = (PROTO_INTERFACE_VTBL*) mir_alloc(sizeof(PROTO_INTERFACE_VTBL));

  0000c	68 8c 00 00 00	 push	 140			; 0000008cH
  00011	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00017	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]

; 1202 :     proto->iface.vtbl->AddToList = TlenAddToList;
; 1203 :     proto->iface.vtbl->AddToListByEvent = TlenAddToListByEvent;
; 1204 :     proto->iface.vtbl->AuthDeny = TlenAuthDeny;
; 1205 :     proto->iface.vtbl->AuthRecv = NULL;
; 1206 :     proto->iface.vtbl->AuthRequest = NULL;
; 1207 :     proto->iface.vtbl->Authorize = TlenAuthAllow;
; 1208 :     proto->iface.vtbl->ChangeInfo = NULL;
; 1209 :     proto->iface.vtbl->FileAllow = TlenFileAllow;
; 1210 :     proto->iface.vtbl->FileCancel = TlenFileCancel;
; 1211 :     proto->iface.vtbl->FileDeny = TlenFileDeny;
; 1212 :     proto->iface.vtbl->FileResume = NULL;
; 1213 :     proto->iface.vtbl->SearchBasic = TlenBasicSearch;
; 1214 :     proto->iface.vtbl->SearchByEmail = TlenSearchByEmail;
; 1215 :     proto->iface.vtbl->SearchByName = TlenSearchByName;
; 1216 :     proto->iface.vtbl->SearchAdvanced = TlenSearchAdvanced;
; 1217 :     proto->iface.vtbl->CreateExtendedSearchUI = TlenCreateAdvSearchUI;
; 1218 :     
; 1219 :     proto->iface.vtbl->RecvContacts = NULL;
; 1220 :     proto->iface.vtbl->RecvFile = TlenRecvFile;
; 1221 :     proto->iface.vtbl->RecvMsg = TlenRecvMessage;
; 1222 :     proto->iface.vtbl->RecvUrl = NULL;
; 1223 : 
; 1224 :     proto->iface.vtbl->SendContacts = NULL;
; 1225 :     proto->iface.vtbl->SendFile = TlenSendFile;
; 1226 :     proto->iface.vtbl->SendMsg = TlenSendMessage;
; 1227 :     proto->iface.vtbl->SendUrl = NULL;
; 1228 :     
; 1229 :     proto->iface.vtbl->GetCaps = TlenGetCaps;
; 1230 :     proto->iface.vtbl->GetIcon = TlenGetIcon;
; 1231 :     proto->iface.vtbl->GetInfo = JabberGetInfo;
; 1232 :     proto->iface.vtbl->SetApparentMode = TlenSetApparentMode;
; 1233 :     proto->iface.vtbl->SetStatus = TlenSetStatus;
; 1234 :    
; 1235 : 
; 1236 :     proto->iface.vtbl->GetAwayMsg = TlenGetAwayMsg;
; 1237 :     proto->iface.vtbl->RecvAwayMsg = NULL;
; 1238 :     proto->iface.vtbl->SendAwayMsg = NULL;
; 1239 :     proto->iface.vtbl->SetAwayMsg = TlenSetAwayMsg;
; 1240 : 
; 1241 :     proto->iface.vtbl->UserIsTyping = TlenUserIsTyping;
; 1242 :     
; 1243 :     proto->iface.vtbl->OnEvent = TlenOnEvent;
; 1244 : 
; 1245 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_GETNAME);

  0001a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_08FCE@?1GetName?$AA@ ; `string'
  00021	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_04DCMN@?$CFs?$CFs?$AA@ ; `string'
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:_TlenAddToList
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET FLAT:_TlenAddToListByEvent
  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:_TlenAuthDeny
  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	33 c0		 xor	 eax, eax
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:_TlenAuthAllow
  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0005a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005c	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET FLAT:_TlenFileAllow
  00063	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00065	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], OFFSET FLAT:_TlenFileCancel
  0006c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], OFFSET FLAT:_TlenFileDeny
  00075	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00077	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  0007a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0007c	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], OFFSET FLAT:_TlenBasicSearch
  00083	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00085	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], OFFSET FLAT:_TlenSearchByEmail
  0008c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008e	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:_TlenSearchByName
  00095	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00097	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], OFFSET FLAT:_TlenSearchAdvanced
  0009e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a0	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], OFFSET FLAT:_TlenCreateAdvSearchUI
  000a7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a9	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  000ac	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ae	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET FLAT:_TlenRecvFile
  000b5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b7	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET FLAT:_TlenRecvMessage
  000be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c0	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  000c3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c5	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  000c8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ca	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], OFFSET FLAT:_TlenSendFile
  000d1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000d3	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], OFFSET FLAT:_TlenSendMessage
  000da	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000dc	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  000df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e1	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], OFFSET FLAT:_TlenGetCaps
  000e8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ea	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET FLAT:_TlenGetIcon
  000f1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f3	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], OFFSET FLAT:_JabberGetInfo
  000fa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fc	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], OFFSET FLAT:_TlenSetApparentMode
  00103	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00105	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], OFFSET FLAT:_TlenSetStatus
  0010c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0010e	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], OFFSET FLAT:_TlenGetAwayMsg
  00115	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00117	89 41 78	 mov	 DWORD PTR [ecx+120], eax
  0011a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011c	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
  0011f	8b 06		 mov	 eax, DWORD PTR [esi]
  00121	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], OFFSET FLAT:_TlenSetAwayMsg
  0012b	8b 06		 mov	 eax, DWORD PTR [esi]
  0012d	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], OFFSET FLAT:_TlenUserIsTyping
  00137	8b 06		 mov	 eax, DWORD PTR [esi]
  00139	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], OFFSET FLAT:_TlenOnEvent
  00143	ff 76 1c	 push	 DWORD PTR [esi+28]
  00146	53		 push	 ebx
  00147	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__sprintf
  0014d	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00150	50		 push	 eax
  00151	ff d7		 call	 edi

; 1246 : 	CreateServiceFunction_Ex(s, proto, TlenGetName);

  00153	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetName
  00158	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  0015b	56		 push	 esi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1247 :     
; 1248 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_GETAVATARINFO);

  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FCPI@?1GetAvatarInformation?$AA@ ; `string'
  00167	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  0016a	ff 76 1c	 push	 DWORD PTR [esi+28]
  0016d	53		 push	 ebx
  0016e	50		 push	 eax
  0016f	ff d7		 call	 edi

; 1249 : 	CreateServiceFunction_Ex(s, proto,TlenGetAvatarInfo);

  00171	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetAvatarInfo
  00176	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00179	56		 push	 esi
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1250 :  
; 1251 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, "/SendNudge");

  00180	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@GEBG@?1SendNudge?$AA@ ; `string'
  00185	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00188	ff 76 1c	 push	 DWORD PTR [esi+28]
  0018b	53		 push	 ebx
  0018c	50		 push	 eax
  0018d	ff d7		 call	 edi
  0018f	83 c4 48	 add	 esp, 72			; 00000048H

; 1252 : 	CreateServiceFunction_Ex(s, proto,TlenSendAlert);

  00192	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00195	68 00 00 00 00	 push	 OFFSET FLAT:_TlenSendAlert
  0019a	56		 push	 esi
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1253 : 
; 1254 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_GETAVATARCAPS);

  001a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BKBG@?1GetAvatarCaps?$AA@ ; `string'
  001a6	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001a9	ff 76 1c	 push	 DWORD PTR [esi+28]
  001ac	53		 push	 ebx
  001ad	50		 push	 eax
  001ae	ff d7		 call	 edi

; 1255 : 	CreateServiceFunction_Ex(s, proto,TlenGetAvatarCaps);

  001b0	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetAvatarCaps
  001b5	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001b8	56		 push	 esi
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1256 : 
; 1257 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_SETMYAVATAR);

  001bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@GKGP@?1SetMyAvatar?$AA@ ; `string'
  001c4	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001c7	ff 76 1c	 push	 DWORD PTR [esi+28]
  001ca	53		 push	 ebx
  001cb	50		 push	 eax
  001cc	ff d7		 call	 edi

; 1258 : 	CreateServiceFunction_Ex(s, proto,TlenSetMyAvatar);

  001ce	68 00 00 00 00	 push	 OFFSET FLAT:_TlenSetMyAvatar
  001d3	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001d6	56		 push	 esi
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex
  001dd	83 c4 44	 add	 esp, 68			; 00000044H

; 1259 : 
; 1260 : 	sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_GETMYAVATAR);

  001e0	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@GIKM@?1GetMyAvatar?$AA@ ; `string'
  001e8	ff 76 1c	 push	 DWORD PTR [esi+28]
  001eb	53		 push	 ebx
  001ec	50		 push	 eax
  001ed	ff d7		 call	 edi

; 1261 : 	CreateServiceFunction_Ex(s, proto,TlenGetMyAvatar);

  001ef	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetMyAvatar
  001f4	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  001f7	56		 push	 esi
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1262 : 
; 1263 :     sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_GETSTATUS);

  001fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@DIGM@?1GetStatus?$AA@ ; `string'
  00203	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00206	ff 76 1c	 push	 DWORD PTR [esi+28]
  00209	53		 push	 ebx
  0020a	50		 push	 eax
  0020b	ff d7		 call	 edi

; 1264 : 	CreateServiceFunction_Ex(s, proto, TlenGetStatus);

  0020d	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetStatus
  00212	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00215	56		 push	 esi
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex

; 1265 : 
; 1266 :     sprintf(s, "%s%s", proto->iface.m_szModuleName, PS_CREATEACCMGRUI);

  0021c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@HIMO@?1CreateAccMgrUI?$AA@ ; `string'
  00221	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00224	ff 76 1c	 push	 DWORD PTR [esi+28]
  00227	53		 push	 ebx
  00228	50		 push	 eax
  00229	ff d7		 call	 edi
  0022b	83 c4 48	 add	 esp, 72			; 00000048H

; 1267 : 	CreateServiceFunction_Ex(s, proto, TlenAccMgrUI);

  0022e	8d 45 80	 lea	 eax, DWORD PTR _s$[ebp]
  00231	68 00 00 00 00	 push	 OFFSET FLAT:_TlenAccMgrUI
  00236	56		 push	 esi
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 _CreateServiceFunction_Ex
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx

; 1268 :     
; 1269 :     
; 1270 : }

  00243	c9		 leave
  00244	c3		 ret	 0
_TlenInitServicesVTbl ENDP
_TEXT	ENDS
;	COMDAT _TlenGetAvatarInfo
_TEXT	SEGMENT
_cgs$85105 = -12
_ptr$ = 8
_wParam$ = 12
_lParam$ = 16
_dbv$ = -24
_TlenGetAvatarInfo PROC NEAR				; COMDAT

; 690  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 691  : 	BOOL downloadingAvatar = FALSE;
; 692  : 	char *avatarHash = NULL;
; 693  : 	JABBER_LIST_ITEM *item = NULL;
; 694  : 	DBVARIANT dbv;
; 695  :     TlenProtocol *proto = (TlenProtocol *)ptr;
; 696  : 	PROTO_AVATAR_INFORMATION* AI = ( PROTO_AVATAR_INFORMATION* )lParam;
; 697  : 	if (!proto->tlenOptions.enableAvatars) return GAIR_NOAVATAR;

  00008	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	33 c9		 xor	 ecx, ecx
  00010	39 be dc 01 00
	00		 cmp	 DWORD PTR [esi+476], edi
  00016	0f 84 d4 00 00
	00		 je	 $L85111

; 698  : 
; 699  : 	if (AI->hContact != NULL) {

  0001c	8b 5d 10	 mov	 ebx, DWORD PTR _lParam$[ebp]
  0001f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00022	3b c7		 cmp	 eax, edi
  00024	74 5e		 je	 SHORT $L83970

; 700  : 		if (!DBGetContactSetting(AI->hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00026	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85105[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00030	89 4d f4	 mov	 DWORD PTR _cgs$85105[ebp], ecx
  00033	8d 4d e8	 lea	 ecx, DWORD PTR _dbv$[ebp]
  00036	89 4d fc	 mov	 DWORD PTR _cgs$85105[ebp+8], ecx
  00039	8d 4d f4	 lea	 ecx, DWORD PTR _cgs$85105[ebp]
  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00048	ff 50 24	 call	 DWORD PTR [eax+36]
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	85 c0		 test	 eax, eax
  00050	0f 85 9a 00 00
	00		 jne	 $L85111

; 701  : 			item = JabberListGetItemPtr(proto, LIST_ROSTER, dbv.pszVal);

  00056	ff 75 ec	 push	 DWORD PTR _dbv$[ebp+4]
  00059	50		 push	 eax
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00060	8b f8		 mov	 edi, eax

; 702  : 			DBFreeVariant(&dbv);

  00062	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00065	50		 push	 eax
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0006b	6a 00		 push	 0
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00072	ff 50 24	 call	 DWORD PTR [eax+36]
  00075	83 c4 18	 add	 esp, 24			; 00000018H

; 703  : 			if (item != NULL) {

  00078	85 ff		 test	 edi, edi
  0007a	74 74		 je	 SHORT $L85111

; 704  : 				downloadingAvatar = item->newAvatarDownloading;

  0007c	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]

; 705  : 				avatarHash = item->avatarHash;

  0007f	8b 47 34	 mov	 eax, DWORD PTR [edi+52]

; 706  : 			}
; 707  : 		}
; 708  : 	} else {

  00082	eb 0f		 jmp	 SHORT $L83976
$L83970:

; 709  : 		if (proto->threadData != NULL) {

  00084	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0008a	3b c7		 cmp	 eax, edi
  0008c	74 62		 je	 SHORT $L85111

; 710  : 			avatarHash = proto->threadData->avatarHash;

  0008e	05 88 02 00 00	 add	 eax, 648		; 00000288H
$L83976:

; 711  : 		}
; 712  : 	}
; 713  : 	if ((avatarHash == NULL || avatarHash[0] == '\0') && !downloadingAvatar) {

  00093	85 c0		 test	 eax, eax
  00095	74 05		 je	 SHORT $L83979
  00097	80 38 00	 cmp	 BYTE PTR [eax], 0
  0009a	75 04		 jne	 SHORT $L83978
$L83979:
  0009c	85 c9		 test	 ecx, ecx

; 714  : 		return GAIR_NOAVATAR;

  0009e	74 50		 je	 SHORT $L85111
$L83978:

; 715  : 	}
; 716  : 	if (avatarHash != NULL && !downloadingAvatar) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 35		 je	 SHORT $L83981
  000a4	85 c9		 test	 ecx, ecx
  000a6	75 31		 jne	 SHORT $L83981

; 717  : 		TlenGetAvatarFileName(proto, item, AI->filename, sizeof AI->filename);

  000a8	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000ab	68 04 01 00 00	 push	 260			; 00000104H
  000b0	50		 push	 eax
  000b1	57		 push	 edi
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 _TlenGetAvatarFileName
  000b8	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 		AI->format = ( AI->hContact == NULL ) ? proto->threadData->avatarFormat : item->avatarFormat;

  000bb	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  000bf	75 0e		 jne	 SHORT $L85099
  000c1	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  000c7	8b b8 c8 02 00
	00		 mov	 edi, DWORD PTR [eax+712]
  000cd	eb 03		 jmp	 SHORT $L85100
$L85099:
  000cf	8b 7f 30	 mov	 edi, DWORD PTR [edi+48]
$L85100:
  000d2	89 7b 08	 mov	 DWORD PTR [ebx+8], edi

; 719  : 		return GAIR_SUCCESS;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 1a		 jmp	 SHORT $L83957
$L83981:

; 720  : 	}
; 721  : 	if (( wParam & GAIF_FORCE ) != 0 && AI->hContact != NULL && proto->jabberOnline) {

  000d9	6a 01		 push	 1
  000db	58		 pop	 eax
  000dc	84 45 0c	 test	 BYTE PTR _wParam$[ebp], al
  000df	74 0f		 je	 SHORT $L85111
  000e1	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  000e5	74 09		 je	 SHORT $L85111
  000e7	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0

; 722  : 		/* get avatar */
; 723  : 		return GAIR_WAITFOR;

  000ee	75 03		 jne	 SHORT $L83957
$L85111:

; 724  : 	}
; 725  : 	return GAIR_NOAVATAR;

  000f0	6a 02		 push	 2
  000f2	58		 pop	 eax
$L83957:
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx

; 726  : }

  000f6	c9		 leave
  000f7	c3		 ret	 0
_TlenGetAvatarInfo ENDP
_TEXT	ENDS
END
