	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FB@BHEL@E?3?2Documents?5and?5Settings?2piotr?2@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@BGN@Miranda?1Contact?1GetContactInfo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GL@MUCC?1OutgoingEvent?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DO@LMFE@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DE@MEOP@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PBCA@?$DMp?5to?$DN?8?$CFs?8?5type?$DN?8d?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@DCFC@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?84?8?5ex@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@DGJD@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?80?8?1?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@BKPH@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?8?$CFd?8?5?1@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LELA@?$CFs?1?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FJHD@GroupChatPolicy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@HOEC@MUCC?1Event?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@OCEB@You?5have?5been?5kicked?4?5Reason?3?5?$CFs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IFC@f?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KKCM@code?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@EDEP@You?5cannot?5join?5this?5chat?5room?0?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CFAF@Chat?5room?5not?5found?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EA@NHNK@This?5is?5a?5private?5chat?5room?5and?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DM@KKDJ@You?5cannot?5send?5any?5message?5unle@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@JNCI@Chat?5room?5with?5already?5created?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@OLCD@Nickname?5?8?$CFs?8?5is?5already?5registe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KHAP@free?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EF@LBBH@Nickname?5already?5in?5use?0?5please?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03EBLA@num?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@BNEG@You?5cannot?5register?5more?5than?5?$CFs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@MBHC@You?5cannot?5create?5more?5than?5?$CFs?5c@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OPNN@You?5cannot?5join?5more?5than?5?$CFs?5cha@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@BBKF@Anonymous?5nicknames?5are?5not?5allo@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GEGM@Unknown?5error?5code?5?3?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DB@LPOI@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMinv?5to?$DN?8?$CFs?8?$DO?$DMr?$DO?$DM?1@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JCIP@?$DMp?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@DEJE@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMs?$DOunavailable?$DM?1s?$DO?$DM?1p@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@JKDJ@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?8?$CFd?8?5s?$DN?8?$CFd?8?5f?$DN?8?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@FDCN@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMsubject?$DO?$CFs?$DM?1subject?$DO@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DEKK@mim_?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@DEDL@?$DMiq?5to?$DN?8c?8?5type?$DN?83?8?5n?$DN?8?$CFs?8?5id?$DN?8?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@BPKP@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HIHI@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@IOLE@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?5n?$DN?8?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@HIDM@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?5k?$DN?8u@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@LAC@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KCGP@?$DMiq?5to?$DN?8?$CFs?8?5type?$DN?8?$CFd?8?5k?$DN?8?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DLON@hello?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@HJGC@MUCC?1NewWindow?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01JME@l?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOI@x?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IBHF@id?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BIOC@cn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@FHGJ@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSetting_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingByte
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _isSelf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _stringToHex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _getDisplayName
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCInit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCHandleEvent
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCRecvInvitation
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCRecvPresence
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCRecvMessage
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCRecvTopic
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCRecvError
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCSendInvitation
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCSendPresence
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCSendMessage
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCSendTopic
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCSendQuery
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCCreateWindow
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCFreeQueryResult
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultChatGroups
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultChatRooms
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultUserRooms
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultUserNicks
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultChatRoomUsers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultRoomSearch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultRoomInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCCSendQueryResultThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCQueryContacts
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCMenuHandleMUC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCMenuHandleChats
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMUCContactMenuHandleMUC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_TlenMUCInit
PUBLIC	??_C@_0BD@GL@MUCC?1OutgoingEvent?$AA@		; `string'
EXTRN	_HookEventObj_Ex:NEAR
;	COMDAT ??_C@_0BD@GL@MUCC?1OutgoingEvent?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_0BD@GL@MUCC?1OutgoingEvent?$AA@ DB 'MUCC/OutgoingEvent', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenMUCInit
_TEXT	SEGMENT
_proto$ = 8
_TlenMUCInit PROC NEAR					; COMDAT

; 100  : 	HookEventObj_Ex(ME_MUCC_EVENT, proto, TlenMUCHandleEvent);

  00000	68 00 00 00 00	 push	 OFFSET FLAT:_TlenMUCHandleEvent
  00005	ff 74 24 08	 push	 DWORD PTR _proto$[esp]
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GL@MUCC?1OutgoingEvent?$AA@ ; `string'
  0000e	e8 00 00 00 00	 call	 _HookEventObj_Ex
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 101  : 	return 0;

  00016	33 c0		 xor	 eax, eax

; 102  : }

  00018	c3		 ret	 0
_TlenMUCInit ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCCreateWindow
PUBLIC	??_C@_0M@IBOM@LoginServer?$AA@			; `string'
PUBLIC	??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@		; `string'
PUBLIC	??_C@_0DO@LMFE@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ ; `string'
PUBLIC	??_C@_0DE@MEOP@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ ; `string'
PUBLIC	??_C@_0BG@PBCA@?$DMp?5to?$DN?8?$CFs?8?5type?$DN?8d?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0DI@DCFC@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?84?8?5ex@ ; `string'
PUBLIC	??_C@_0CI@DGJD@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?80?8?1?$DO?$DM@ ; `string'
PUBLIC	??_C@_0CK@BKPH@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?8?$CFd?8?5?1@ ; `string'
PUBLIC	??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_05LELA@?$CFs?1?$CFs?$AA@			; `string'
PUBLIC	??_C@_05LMFM@bChat?$AA@				; `string'
PUBLIC	??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@		; `string'
PUBLIC	??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@	; `string'
PUBLIC	??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@	; `string'
PUBLIC	??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@	; `string'
EXTRN	_mmi:BYTE
EXTRN	_strcmp:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp___snprintf:NEAR
EXTRN	__imp__sprintf:NEAR
EXTRN	_JabberSerialNext:NEAR
EXTRN	_JabberSend:NEAR
EXTRN	_JabberResourceFromJID:NEAR
EXTRN	_JabberTextEncode:NEAR
EXTRN	_JabberDBCreateContact:NEAR
EXTRN	_pluginLink:DWORD
EXTRN	_JabberListRemove:NEAR
EXTRN	_JabberListGetItemPtr:NEAR
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ DB 'DB/Contact/GetSetting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT
??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ DB 'DB/Contact/FreeVariant', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT
??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ DB 'DB/Contact/WriteSetting'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
_DATA	SEGMENT
??_C@_0M@IBOM@LoginServer?$AA@ DB 'LoginServer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT
??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ DB '%s@%s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DO@LMFE@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@
_DATA	SEGMENT
??_C@_0DO@LMFE@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ DB '<'
	DB	'p to=''c'' tp=''c'' id=''mim_%d'' x=''%d'' n=''%s'' p=''%s'' '
	DB	'nick=''%s''/>', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DE@MEOP@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@
_DATA	SEGMENT
??_C@_0DE@MEOP@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ DB '<'
	DB	'p to=''c'' tp=''c'' id=''mim_%d'' x=''%d'' n=''%s'' p=''%s''/'
	DB	'>', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PBCA@?$DMp?5to?$DN?8?$CFs?8?5type?$DN?8d?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BG@PBCA@?$DMp?5to?$DN?8?$CFs?8?5type?$DN?8d?8?1?$DO?$AA@ DB '<p to'
	DB	'=''%s'' type=''d''/>', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DI@DCFC@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?84?8?5ex@
_DATA	SEGMENT
??_C@_0DI@DCFC@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?84?8?5ex@ DB '<'
	DB	'p to=''%s''><x><i i=''%s'' a=''4'' ex=''%d'' rs=''%s''/></x><'
	DB	'/p>', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@DGJD@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?80?8?1?$DO?$DM@
_DATA	SEGMENT
??_C@_0CI@DGJD@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?80?8?1?$DO?$DM@ DB '<'
	DB	'p to=''%s''><x><i i=''%s'' a=''0''/></x></p>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@BKPH@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?8?$CFd?8?5?1@
_DATA	SEGMENT
??_C@_0CK@BKPH@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?8?$CFd?8?5?1@ DB '<'
	DB	'p to=''%s''><x><i i=''%s'' a=''%d'' /></x></p>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@ DB '<'
	DB	'p to=''c'' tp=''c'' id=''mim_%d''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LELA@?$CFs?1?$CFs?$AA@
_DATA	SEGMENT
??_C@_05LELA@?$CFs?1?$CFs?$AA@ DB '%s/%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT
??_C@_05LMFM@bChat?$AA@ DB 'bChat', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@
_DATA	SEGMENT
??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@ DB 'SRMsg/SendCommand', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenMUCHandleEvent
_TEXT	SEGMENT
_cws$84229 = -20
_cgs$84235 = -32
_ptr$ = 8
_lParam$ = 16
_nick$83307 = 8
_item$83343 = 8
_str$83351 = -288
_dbv$83359 = -12
_str$83362 = -544
_TlenMUCHandleEvent PROC NEAR				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 02 00
	00		 sub	 esp, 544		; 00000220H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 105  : 	HANDLE hContact;
; 106  : 	int id;
; 107  : 	MUCCEVENT *mucce=(MUCCEVENT *) lParam;
; 108  : 	TlenProtocol *proto = (TlenProtocol *)ptr;
; 109  : 	if (!strcmp(mucce->pszModule, proto->iface.m_szModuleName)) {

  0000b	8b 75 10	 mov	 esi, DWORD PTR _lParam$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  00012	ff 77 1c	 push	 DWORD PTR [edi+28]
  00015	ff 76 18	 push	 DWORD PTR [esi+24]
  00018	e8 00 00 00 00	 call	 _strcmp
  0001d	59		 pop	 ecx
  0001e	85 c0		 test	 eax, eax
  00020	59		 pop	 ecx
  00021	0f 85 9e 04 00
	00		 jne	 $L83271

; 110  : 		switch (mucce->iType) {

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	b9 09 01 00 00	 mov	 ecx, 265		; 00000109H
  0002f	3b c1		 cmp	 eax, ecx
  00031	0f 8f 35 03 00
	00		 jg	 $L84223
  00037	0f 84 d5 02 00
	00		 je	 $L83305
  0003d	83 c1 fa	 add	 ecx, -6			; fffffffaH
  00040	3b c1		 cmp	 eax, ecx
  00042	0f 8f 33 02 00
	00		 jg	 $L84224
  00048	0f 84 df 00 00
	00		 je	 $L83341
  0004e	48		 dec	 eax
  0004f	0f 84 cb 00 00
	00		 je	 $L83275
  00055	83 e8 04	 sub	 eax, 4
  00058	0f 84 b9 00 00
	00		 je	 $L83276
  0005e	83 e8 7b	 sub	 eax, 123		; 0000007bH
  00061	74 2e		 je	 SHORT $L83328
  00063	48		 dec	 eax
  00064	74 1f		 je	 SHORT $L83277
  00066	2d 81 00 00 00	 sub	 eax, 129		; 00000081H
  0006b	0f 85 54 04 00
	00		 jne	 $L83271

; 111  : 			case MUCC_EVENT_INVITE:
; 112  : 				TlenMUCSendInvitation(proto, mucce->pszID, mucce->pszNick);

  00071	ff 76 28	 push	 DWORD PTR [esi+40]
  00074	ff 76 1c	 push	 DWORD PTR [esi+28]
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 _TlenMUCSendInvitation
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  : 				break;

  00080	e9 40 04 00 00	 jmp	 $L83271
$L83277:

; 120  : 			case MUCC_EVENT_LEAVE:
; 121  : 				TlenMUCSendPresence(proto, mucce->pszID, NULL, ID_STATUS_OFFLINE);

  00085	68 87 9c 00 00	 push	 40071			; 00009c87H
  0008a	6a 00		 push	 0
  0008c	ff 76 1c	 push	 DWORD PTR [esi+28]

; 122  : 				break;

  0008f	eb 49		 jmp	 SHORT $L84247
$L83328:

; 225  : 			case MUCC_EVENT_JOIN:
; 226  : 				if (proto->jabberOnline) {

  00091	33 db		 xor	 ebx, ebx
  00093	39 9f 78 01 00
	00		 cmp	 DWORD PTR [edi+376], ebx
  00099	0f 84 26 04 00
	00		 je	 $L83271

; 227  : 					if (mucce->pszID==NULL || strlen(mucce->pszID)==0) {

  0009f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000a2	3b c3		 cmp	 eax, ebx
  000a4	74 3f		 je	 SHORT $L83332
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _strlen
  000ac	85 c0		 test	 eax, eax
  000ae	59		 pop	 ecx
  000af	74 34		 je	 SHORT $L83332

; 233  : 						}
; 234  : 					} else { // join existing chat room
; 235  : 						if (!TlenMUCCreateWindow(proto, mucce->pszID, mucce->pszName, mucce->dwFlags, mucce->pszNick, NULL)) {

  000b1	53		 push	 ebx
  000b2	ff 76 28	 push	 DWORD PTR [esi+40]
  000b5	ff 76 08	 push	 DWORD PTR [esi+8]
  000b8	ff 76 20	 push	 DWORD PTR [esi+32]
  000bb	ff 76 1c	 push	 DWORD PTR [esi+28]
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 _TlenMUCCreateWindow
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
  000c7	85 c0		 test	 eax, eax
  000c9	0f 85 f6 03 00
	00		 jne	 $L83271

; 236  : 							TlenMUCSendPresence(proto, mucce->pszID, mucce->pszNick, ID_STATUS_ONLINE);

  000cf	68 88 9c 00 00	 push	 40072			; 00009c88H
  000d4	ff 76 28	 push	 DWORD PTR [esi+40]
  000d7	ff 76 1c	 push	 DWORD PTR [esi+28]
$L84247:
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 _TlenMUCSendPresence
  000e0	e9 dd 03 00 00	 jmp	 $L84241
$L83332:

; 228  : 						if (mucce->pszName==NULL || strlen(mucce->pszName)==0) { // create a new chat room

  000e5	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000e8	3b c3		 cmp	 eax, ebx
  000ea	74 14		 je	 SHORT $L83335
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _strlen
  000f2	85 c0		 test	 eax, eax
  000f4	59		 pop	 ecx
  000f5	74 09		 je	 SHORT $L83335

; 231  : 						} else { // find a chat room by name
; 232  : 							TlenMUCSendQuery(proto, 3, mucce->pszName, 0);

  000f7	53		 push	 ebx
  000f8	ff 76 20	 push	 DWORD PTR [esi+32]
  000fb	e9 b1 03 00 00	 jmp	 $L84245
$L83335:

; 229  : 							id = JabberSerialNext(proto);

  00100	57		 push	 edi
  00101	e8 00 00 00 00	 call	 _JabberSerialNext

; 230  : 							JabberSend(proto, "<p to='c' tp='c' id='"JABBER_IQID"%d'/>", id);

  00106	50		 push	 eax
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@ ; `string'
  0010c	57		 push	 edi
  0010d	e8 00 00 00 00	 call	 _JabberSend

; 237  : 						}
; 238  : 					}
; 239  : 				}
; 240  : 				break;

  00112	e9 ab 03 00 00	 jmp	 $L84241
$L83276:

; 117  : 			case MUCC_EVENT_TOPIC:
; 118  : 				TlenMUCSendTopic(proto, mucce);

  00117	56		 push	 esi
  00118	57		 push	 edi
  00119	e8 00 00 00 00	 call	 _TlenMUCSendTopic

; 119  : 				break;

  0011e	eb 07		 jmp	 SHORT $L84252
$L83275:

; 114  : 			case MUCC_EVENT_MESSAGE:
; 115  : 				TlenMUCSendMessage(proto, mucce);

  00120	56		 push	 esi
  00121	57		 push	 edi
  00122	e8 00 00 00 00	 call	 _TlenMUCSendMessage
$L84252:
  00127	59		 pop	 ecx

; 116  : 				break;

  00128	e9 48 01 00 00	 jmp	 $L84250
$L83341:

; 241  : 			case MUCC_EVENT_START_PRIV:
; 242  : 				if (proto->jabberOnline) {

  0012d	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  00134	0f 84 8b 03 00
	00		 je	 $L83271

; 243  : 					JABBER_LIST_ITEM *item;
; 244  : 					item = JabberListGetItemPtr(proto, LIST_CHATROOM, mucce->pszID);

  0013a	ff 76 1c	 push	 DWORD PTR [esi+28]
  0013d	6a 01		 push	 1
  0013f	57		 push	 edi
  00140	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH
  00148	89 45 08	 mov	 DWORD PTR _item$83343[ebp], eax

; 245  : 					if (item!=NULL) {

  0014b	85 c0		 test	 eax, eax
  0014d	0f 84 72 03 00
	00		 je	 $L83271

; 246  : 						char *nick;
; 247  : 						nick = JabberResourceFromJID(mucce->pszUID);

  00153	ff 76 24	 push	 DWORD PTR [esi+36]
  00156	e8 00 00 00 00	 call	 _JabberResourceFromJID
  0015b	8b d8		 mov	 ebx, eax

; 248  : 						if (!isSelf(proto, mucce->pszID, nick)) {

  0015d	53		 push	 ebx
  0015e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00161	57		 push	 edi
  00162	e8 00 00 00 00	 call	 _isSelf
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	85 c0		 test	 eax, eax
  0016c	0f 85 fc 00 00
	00		 jne	 $L83319

; 249  : 							if (nick[0]=='~' || item->nick!=NULL) {

  00172	80 3b 7e	 cmp	 BYTE PTR [ebx], 126	; 0000007eH
  00175	0f 84 91 00 00
	00		 je	 $L83350
  0017b	8b 45 08	 mov	 eax, DWORD PTR _item$83343[ebp]
  0017e	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00182	0f 85 84 00 00
	00		 jne	 $L83350

; 255  : 							} else {
; 256  : 								DBVARIANT dbv;
; 257  : 								if (!DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  00188	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0018b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _cgs$84235[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00192	89 45 e0	 mov	 DWORD PTR _cgs$84235[ebp], eax
  00195	8d 45 f4	 lea	 eax, DWORD PTR _dbv$83359[ebp]
  00198	89 45 e8	 mov	 DWORD PTR _cgs$84235[ebp+8], eax
  0019b	8d 45 e0	 lea	 eax, DWORD PTR _cgs$84235[ebp]
  0019e	50		 push	 eax
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001a4	6a 00		 push	 0
  001a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  001ab	ff 50 24	 call	 DWORD PTR [eax+36]
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b1	85 c0		 test	 eax, eax
  001b3	0f 85 b5 00 00
	00		 jne	 $L83319

; 258  : 									char str[512];
; 259  : 									_snprintf(str, sizeof(str), "%s@%s", nick, dbv.pszVal);

  001b9	ff 75 f8	 push	 DWORD PTR _dbv$83359[ebp+4]
  001bc	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _str$83362[ebp]
  001c2	53		 push	 ebx
  001c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  001c8	68 00 02 00 00	 push	 512			; 00000200H
  001cd	50		 push	 eax
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 260  : 									DBFreeVariant(&dbv);

  001d4	8d 45 f4	 lea	 eax, DWORD PTR _dbv$83359[ebp]
  001d7	50		 push	 eax
  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001dd	6a 00		 push	 0
  001df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  001e4	ff 50 24	 call	 DWORD PTR [eax+36]

; 261  : 									hContact = JabberDBCreateContact(proto, str, nick, TRUE);

  001e7	6a 01		 push	 1
  001e9	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _str$83362[ebp]
  001ef	53		 push	 ebx
  001f0	50		 push	 eax
  001f1	57		 push	 edi
  001f2	e8 00 00 00 00	 call	 _JabberDBCreateContact

; 262  : 									CallService(MS_MSG_SENDMESSAGE, (WPARAM) hContact, (LPARAM) NULL);

  001f7	6a 00		 push	 0
  001f9	50		 push	 eax
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@ ; `string'
  00204	ff 50 24	 call	 DWORD PTR [eax+36]
  00207	83 c4 3c	 add	 esp, 60			; 0000003cH
  0020a	eb 62		 jmp	 SHORT $L83319
$L83350:

; 250  : 								char str[256];
; 251  : 								sprintf(str, "%s/%s", mucce->pszID, nick);

  0020c	53		 push	 ebx
  0020d	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _str$83351[ebp]
  00213	ff 76 1c	 push	 DWORD PTR [esi+28]
  00216	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05LELA@?$CFs?1?$CFs?$AA@ ; `string'
  0021b	50		 push	 eax
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 252  : 								hContact = JabberDBCreateContact(proto, str, nick, TRUE); //(char *)mucce->pszUID

  00222	6a 01		 push	 1
  00224	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _str$83351[ebp]
  0022a	53		 push	 ebx
  0022b	50		 push	 eax
  0022c	57		 push	 edi
  0022d	e8 00 00 00 00	 call	 _JabberDBCreateContact
  00232	8b f0		 mov	 esi, eax

; 253  : 								DBWriteContactSettingByte(hContact, proto->iface.m_szModuleName, "bChat", TRUE);

  00234	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00237	89 45 ec	 mov	 DWORD PTR _cws$84229[ebp], eax
  0023a	8d 45 ec	 lea	 eax, DWORD PTR _cws$84229[ebp]
  0023d	50		 push	 eax
  0023e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00243	56		 push	 esi
  00244	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00249	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$84229[ebp+4], OFFSET FLAT:??_C@_05LMFM@bChat?$AA@ ; `string'
  00250	c6 45 f4 01	 mov	 BYTE PTR _cws$84229[ebp+8], 1
  00254	c6 45 f8 01	 mov	 BYTE PTR _cws$84229[ebp+12], 1
  00258	ff 50 24	 call	 DWORD PTR [eax+36]

; 254  : 								CallService(MS_MSG_SENDMESSAGE, (WPARAM) hContact, (LPARAM) NULL);

  0025b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00260	6a 00		 push	 0
  00262	56		 push	 esi
  00263	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@HAJP@SRMsg?1SendCommand?$AA@ ; `string'
  00268	ff 50 24	 call	 DWORD PTR [eax+36]
  0026b	83 c4 38	 add	 esp, 56			; 00000038H
$L83319:

; 263  : 								}
; 264  : 							}
; 265  : 						}
; 266  : 						mir_free(nick);

  0026e	53		 push	 ebx
$L84251:
  0026f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
$L84250:
  00275	59		 pop	 ecx

; 267  : 					}
; 268  : 				}
; 269  : 				break;

  00276	e9 4a 02 00 00	 jmp	 $L83271
$L84224:

; 110  : 		switch (mucce->iType) {

  0027b	2d 05 01 00 00	 sub	 eax, 261		; 00000105H
  00280	0f 84 80 00 00
	00		 je	 $L83293
  00286	48		 dec	 eax
  00287	74 79		 je	 SHORT $L83294
  00289	48		 dec	 eax
  0028a	74 2f		 je	 SHORT $L83295
  0028c	48		 dec	 eax
  0028d	0f 85 32 02 00
	00		 jne	 $L83271

; 170  : 			case MUCC_EVENT_REMOVE_ROOM:
; 171  : 				if (proto->jabberOnline) {

  00293	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  0029a	0f 84 25 02 00
	00		 je	 $L83271

; 172  : 					JabberSend(proto, "<p to='%s' type='d'/>", mucce->pszID);

  002a0	ff 76 1c	 push	 DWORD PTR [esi+28]
  002a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PBCA@?$DMp?5to?$DN?8?$CFs?8?5type?$DN?8d?8?1?$DO?$AA@ ; `string'
  002a8	57		 push	 edi
  002a9	e8 00 00 00 00	 call	 _JabberSend

; 173  : 					JabberListRemove(proto, LIST_CHATROOM, mucce->pszID);

  002ae	ff 76 1c	 push	 DWORD PTR [esi+28]
  002b1	6a 01		 push	 1
  002b3	57		 push	 edi
  002b4	e8 00 00 00 00	 call	 _JabberListRemove

; 174  : 				//	TlenMUCSendPresence(mucce->pszID, NULL, ID_STATUS_OFFLINE);
; 175  : 				}
; 176  : 				break;

  002b9	eb 33		 jmp	 SHORT $L84248
$L83295:

; 160  : 			case MUCC_EVENT_REGISTER_ROOM:
; 161  : 				id = JabberSerialNext(proto);

  002bb	57		 push	 edi
  002bc	e8 00 00 00 00	 call	 _JabberSerialNext

; 162  : 				if (proto->jabberOnline) {

  002c1	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  002c8	59		 pop	 ecx
  002c9	0f 84 f6 01 00
	00		 je	 $L83271

; 163  : 					if (mucce->pszNick!=NULL) {
; 164  : 						JabberSend(proto, "<p to='c' tp='c' id='"JABBER_IQID"%d' x='%d' n='%s' p='%s' nick='%s'/>", id, mucce->dwFlags | 0x10, mucce->pszName, mucce->pszID);

  002cf	ff 76 1c	 push	 DWORD PTR [esi+28]
  002d2	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  002d6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002d9	ff 76 20	 push	 DWORD PTR [esi+32]
  002dc	74 18		 je	 SHORT $L83298
  002de	83 c9 10	 or	 ecx, 16			; 00000010H
  002e1	51		 push	 ecx
  002e2	50		 push	 eax
  002e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@LMFE@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ ; `string'
$L84249:
  002e8	57		 push	 edi
  002e9	e8 00 00 00 00	 call	 _JabberSend
$L84248:
  002ee	83 c4 18	 add	 esp, 24			; 00000018H

; 165  : 					} else {

  002f1	e9 cf 01 00 00	 jmp	 $L83271
$L83298:

; 166  : 						JabberSend(proto, "<p to='c' tp='c' id='"JABBER_IQID"%d' x='%d' n='%s' p='%s'/>", id, mucce->dwFlags | 0x10, mucce->pszName, mucce->pszID);

  002f6	83 c9 10	 or	 ecx, 16			; 00000010H
  002f9	51		 push	 ecx
  002fa	50		 push	 eax
  002fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@MEOP@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?5x?$DN?8@ ; `string'

; 167  : 					}
; 168  : 				}
; 169  : 				break;

  00300	eb e6		 jmp	 SHORT $L84249
$L83294:

; 157  : 			case MUCC_EVENT_REMOVE_NICK:
; 158  : 				TlenMUCSendQuery(proto, 6, mucce->pszNick, 1);

  00302	6a 01		 push	 1

; 159  : 				break;

  00304	eb 02		 jmp	 SHORT $L84246
$L83293:

; 154  : 			case MUCC_EVENT_REGISTER_NICK:
; 155  : 				TlenMUCSendQuery(proto, 6, mucce->pszNick, 0);

  00306	6a 00		 push	 0
$L84246:
  00308	ff 76 28	 push	 DWORD PTR [esi+40]
  0030b	6a 06		 push	 6

; 156  : 				break;

  0030d	e9 aa 01 00 00	 jmp	 $L84242
$L83305:

; 177  : 			case MUCC_EVENT_KICK_BAN:
; 178  : 				if (proto->jabberOnline) {

  00312	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  00319	0f 84 a6 01 00
	00		 je	 $L83271

; 179  : 					char *nick;
; 180  : 					nick = JabberResourceFromJID(mucce->pszUID);

  0031f	ff 76 24	 push	 DWORD PTR [esi+36]
  00322	e8 00 00 00 00	 call	 _JabberResourceFromJID

; 181  : 					if (!isSelf(proto, mucce->pszID, nick)) {

  00327	50		 push	 eax
  00328	89 45 08	 mov	 DWORD PTR _nick$83307[ebp], eax
  0032b	ff 76 1c	 push	 DWORD PTR [esi+28]
  0032e	57		 push	 edi
  0032f	e8 00 00 00 00	 call	 _isSelf
  00334	83 c4 10	 add	 esp, 16			; 00000010H
  00337	85 c0		 test	 eax, eax
  00339	75 29		 jne	 SHORT $L83308

; 182  : 						char *reason = JabberTextEncode(mucce->pszText);

  0033b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0033e	e8 00 00 00 00	 call	 _JabberTextEncode
  00343	8b d8		 mov	 ebx, eax

; 183  : 						JabberSend(proto, "<p to='%s'><x><i i='%s' a='4' ex='%d' rs='%s'/></x></p>", mucce->pszID, nick, mucce->dwData, reason);

  00345	53		 push	 ebx
  00346	ff 76 30	 push	 DWORD PTR [esi+48]
  00349	ff 75 08	 push	 DWORD PTR _nick$83307[ebp]
  0034c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0034f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@DCFC@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?84?8?5ex@ ; `string'
  00354	57		 push	 edi
  00355	e8 00 00 00 00	 call	 _JabberSend

; 184  : 						mir_free(reason);

  0035a	53		 push	 ebx
  0035b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00361	83 c4 20	 add	 esp, 32			; 00000020H
$L83308:

; 185  : 					}
; 186  : 					mir_free(nick);

  00364	ff 75 08	 push	 DWORD PTR _nick$83307[ebp]

; 187  : 				}
; 188  : 				break;

  00367	e9 03 ff ff ff	 jmp	 $L84251
$L84223:

; 110  : 		switch (mucce->iType) {

  0036c	b9 22 01 00 00	 mov	 ecx, 290		; 00000122H
  00371	3b c1		 cmp	 eax, ecx
  00373	0f 8f dc 00 00
	00		 jg	 $L84225
  00379	0f 84 cd 00 00
	00		 je	 $L83326
  0037f	2d 0a 01 00 00	 sub	 eax, 266		; 0000010aH
  00384	74 6b		 je	 SHORT $L83316
  00386	48		 dec	 eax
  00387	74 25		 je	 SHORT $L83311
  00389	83 e8 15	 sub	 eax, 21			; 00000015H
  0038c	74 14		 je	 SHORT $L83279
  0038e	48		 dec	 eax
  0038f	0f 85 30 01 00
	00		 jne	 $L83271

; 126  : 			case MUCC_EVENT_QUERY_ROOMS:
; 127  : 				TlenMUCSendQuery(proto, 2, mucce->pszID, mucce->dwData);

  00395	ff 76 30	 push	 DWORD PTR [esi+48]
  00398	ff 76 1c	 push	 DWORD PTR [esi+28]
  0039b	6a 02		 push	 2

; 128  : 				break;

  0039d	e9 1a 01 00 00	 jmp	 $L84242
$L83279:

; 123  : 			case MUCC_EVENT_QUERY_GROUPS:
; 124  : 				TlenMUCSendQuery(proto, 1, mucce->pszID, 0);

  003a2	6a 00		 push	 0
  003a4	ff 76 1c	 push	 DWORD PTR [esi+28]
  003a7	6a 01		 push	 1

; 125  : 				break;

  003a9	e9 0e 01 00 00	 jmp	 $L84242
$L83311:

; 189  : 			case MUCC_EVENT_UNBAN:
; 190  : 				if (proto->jabberOnline) {

  003ae	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  003b5	0f 84 0a 01 00
	00		 je	 $L83271

; 191  : 					char *nick;
; 192  : 					nick = JabberResourceFromJID(mucce->pszUID);

  003bb	ff 76 24	 push	 DWORD PTR [esi+36]
  003be	e8 00 00 00 00	 call	 _JabberResourceFromJID
  003c3	8b d8		 mov	 ebx, eax

; 193  : 					if (!isSelf(proto, mucce->pszID, nick)) {

  003c5	53		 push	 ebx
  003c6	ff 76 1c	 push	 DWORD PTR [esi+28]
  003c9	57		 push	 edi
  003ca	e8 00 00 00 00	 call	 _isSelf
  003cf	83 c4 10	 add	 esp, 16			; 00000010H
  003d2	85 c0		 test	 eax, eax
  003d4	0f 85 94 fe ff
	ff		 jne	 $L83319

; 194  : 						JabberSend(proto, "<p to='%s'><x><i i='%s' a='0'/></x></p>", mucce->pszID, nick);

  003da	53		 push	 ebx
  003db	ff 76 1c	 push	 DWORD PTR [esi+28]
  003de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@DGJD@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?80?8?1?$DO?$DM@ ; `string'
  003e3	57		 push	 edi
  003e4	e8 00 00 00 00	 call	 _JabberSend
  003e9	83 c4 10	 add	 esp, 16			; 00000010H

; 195  : 					}
; 196  : 					mir_free(nick);
; 197  : 				}
; 198  : 				break;

  003ec	e9 7d fe ff ff	 jmp	 $L83319
$L83316:

; 199  : 			case MUCC_EVENT_SET_USER_ROLE:
; 200  : 				if (proto->jabberOnline) {

  003f1	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  003f8	0f 84 c7 00 00
	00		 je	 $L83271

; 201  : 					char *nick;
; 202  : 					nick = JabberResourceFromJID(mucce->pszUID);

  003fe	ff 76 24	 push	 DWORD PTR [esi+36]
  00401	e8 00 00 00 00	 call	 _JabberResourceFromJID
  00406	8b d8		 mov	 ebx, eax

; 203  : 					if (!isSelf(proto, mucce->pszID, nick)) {

  00408	53		 push	 ebx
  00409	ff 76 1c	 push	 DWORD PTR [esi+28]
  0040c	57		 push	 edi
  0040d	e8 00 00 00 00	 call	 _isSelf
  00412	83 c4 10	 add	 esp, 16			; 00000010H
  00415	85 c0		 test	 eax, eax
  00417	0f 85 51 fe ff
	ff		 jne	 $L83319

; 204  : 						if (mucce->dwFlags == MUCC_EF_USER_ADMIN) {

  0041d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00420	83 f8 02	 cmp	 eax, 2
  00423	75 04		 jne	 SHORT $L83320

; 205  : 							id = 2;

  00425	50		 push	 eax
$L84243:
  00426	58		 pop	 eax

; 206  : 						} else if (mucce->dwFlags == MUCC_EF_USER_MEMBER) {

  00427	eb 0b		 jmp	 SHORT $L83323
$L83320:
  00429	83 f8 08	 cmp	 eax, 8
  0042c	75 04		 jne	 SHORT $L83322

; 207  : 							id = 3;

  0042e	6a 03		 push	 3

; 208  : 						} else {

  00430	eb f4		 jmp	 SHORT $L84243
$L83322:

; 209  : 							id = 0;

  00432	33 c0		 xor	 eax, eax
$L83323:

; 210  : 						}
; 211  : 						JabberSend(proto, "<p to='%s'><x><i i='%s' a='%d' /></x></p>", mucce->pszID, nick, id);

  00434	50		 push	 eax
  00435	53		 push	 ebx
  00436	ff 76 1c	 push	 DWORD PTR [esi+28]
  00439	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@BKPH@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMi?5i?$DN?8?$CFs?8?5a?$DN?8?$CFd?8?5?1@ ; `string'
  0043e	57		 push	 edi
  0043f	e8 00 00 00 00	 call	 _JabberSend
  00444	83 c4 14	 add	 esp, 20			; 00000014H

; 212  : 					}
; 213  : 					mir_free(nick);
; 214  : 				}
; 215  : 				break;

  00447	e9 22 fe ff ff	 jmp	 $L83319
$L83326:

; 218  : 				break;
; 219  : 			case MUCC_EVENT_QUERY_USER_ROOMS:
; 220  : 				TlenMUCSendQuery(proto, 8, mucce->pszID, 0);

  0044c	6a 00		 push	 0
  0044e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00451	6a 08		 push	 8

; 221  : 				break;

  00453	eb 67		 jmp	 SHORT $L84242
$L84225:

; 110  : 		switch (mucce->iType) {

  00455	2d 23 01 00 00	 sub	 eax, 291		; 00000123H
  0045a	74 59		 je	 SHORT $L83325
  0045c	48		 dec	 eax
  0045d	74 4d		 je	 SHORT $L83281
  0045f	83 e8 0c	 sub	 eax, 12			; 0000000cH
  00462	74 3a		 je	 SHORT $L83327
  00464	48		 dec	 eax
  00465	75 5e		 jne	 SHORT $L83271

; 132  : 			case MUCC_EVENT_QUERY_USERS:
; 133  : 				switch (mucce->dwFlags) {

  00467	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0046a	48		 dec	 eax
  0046b	74 26		 je	 SHORT $L83287
  0046d	48		 dec	 eax
  0046e	74 1f		 je	 SHORT $L83288
  00470	83 e8 06	 sub	 eax, 6
  00473	74 16		 je	 SHORT $L83289
  00475	83 e8 08	 sub	 eax, 8
  00478	74 0d		 je	 SHORT $L83291
  0047a	83 e8 10	 sub	 eax, 16			; 00000010H
  0047d	74 04		 je	 SHORT $L83290

; 149  : 				default:
; 150  : 					id = 0;

  0047f	33 c0		 xor	 eax, eax

; 151  : 				}

  00481	eb 13		 jmp	 SHORT $L83284
$L83290:

; 143  : 				case MUCC_EF_USER_BANNED:
; 144  : 					id = 4;

  00483	6a 04		 push	 4

; 145  : 					break;

  00485	eb 0e		 jmp	 SHORT $L84244
$L83291:

; 146  : 				case MUCC_EF_USER_MODERATOR:
; 147  : 					id = 6;

  00487	6a 06		 push	 6

; 148  : 					break;

  00489	eb 0a		 jmp	 SHORT $L84244
$L83289:

; 140  : 				case MUCC_EF_USER_MEMBER:
; 141  : 					id = 3;

  0048b	6a 03		 push	 3

; 142  : 					break;

  0048d	eb 06		 jmp	 SHORT $L84244
$L83288:

; 136  : 					break;
; 137  : 				case MUCC_EF_USER_ADMIN:
; 138  : 					id = 2;

  0048f	6a 02		 push	 2

; 139  : 					break;

  00491	eb 02		 jmp	 SHORT $L84244
$L83287:

; 134  : 				case MUCC_EF_USER_OWNER:
; 135  : 					id = 1;

  00493	6a 01		 push	 1
$L84244:
  00495	58		 pop	 eax
$L83284:

; 152  : 				TlenMUCSendQuery(proto, 4, mucce->pszID, id);

  00496	50		 push	 eax
  00497	ff 76 1c	 push	 DWORD PTR [esi+28]
  0049a	6a 04		 push	 4

; 153  : 				break;

  0049c	eb 1e		 jmp	 SHORT $L84242
$L83327:

; 222  : 			case MUCC_EVENT_QUERY_CONTACTS:
; 223  : 				TlenMUCQueryContacts(proto, mucce->pszID);

  0049e	ff 76 1c	 push	 DWORD PTR [esi+28]
  004a1	57		 push	 edi
  004a2	e8 00 00 00 00	 call	 _TlenMUCQueryContacts

; 224  : 				break;

  004a7	e9 7b fc ff ff	 jmp	 $L84252
$L83281:

; 129  : 			case MUCC_EVENT_QUERY_SEARCH:
; 130  : 				TlenMUCSendQuery(proto, 3, mucce->pszName, 0);

  004ac	6a 00		 push	 0
  004ae	ff 76 20	 push	 DWORD PTR [esi+32]
$L84245:
  004b1	6a 03		 push	 3

; 131  : 				break;

  004b3	eb 07		 jmp	 SHORT $L84242
$L83325:

; 216  : 			case MUCC_EVENT_QUERY_USER_NICKS:
; 217  : 				TlenMUCSendQuery(proto, 7, mucce->pszID, 0);

  004b5	6a 00		 push	 0
  004b7	ff 76 1c	 push	 DWORD PTR [esi+28]
  004ba	6a 07		 push	 7
$L84242:
  004bc	57		 push	 edi
  004bd	e8 00 00 00 00	 call	 _TlenMUCSendQuery
$L84241:
  004c2	83 c4 10	 add	 esp, 16			; 00000010H
$L83271:
  004c5	5f		 pop	 edi
  004c6	5e		 pop	 esi

; 270  : 		}
; 271  : 	}
; 272  : 	return 0;

  004c7	33 c0		 xor	 eax, eax
  004c9	5b		 pop	 ebx

; 273  : }

  004ca	c9		 leave
  004cb	c3		 ret	 0
_TlenMUCHandleEvent ENDP
_TEXT	ENDS
;	COMDAT _isSelf
_TEXT	SEGMENT
_proto$ = 8
_roomID$ = 12
_nick$ = 16
_isSelf	PROC NEAR					; COMDAT

; 37   : {

  00000	56		 push	 esi

; 38   : 	JABBER_LIST_ITEM *item;
; 39   : 	int result;
; 40   : 	result=0;
; 41   : 	item = JabberListGetItemPtr(proto, LIST_CHATROOM, roomID);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _proto$[esp]
  00005	57		 push	 edi
  00006	33 ff		 xor	 edi, edi
  00008	ff 74 24 10	 push	 DWORD PTR _roomID$[esp+4]
  0000c	6a 01		 push	 1
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 	if (item!=NULL) {

  00017	85 c0		 test	 eax, eax
  00019	74 31		 je	 SHORT $L83213

; 43   : 		if (item->nick==NULL) {

  0001b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0001e	85 c0		 test	 eax, eax
  00020	75 10		 jne	 SHORT $L83209

; 44   : 			if (!strcmp(nick, proto->threadData->username)) result = 1;

  00022	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00028	83 c0 08	 add	 eax, 8
  0002b	50		 push	 eax
  0002c	ff 74 24 18	 push	 DWORD PTR _nick$[esp+8]

; 45   : 		} else if (nick[0]=='~') {

  00030	eb 0c		 jmp	 SHORT $L84254
$L83209:
  00032	8b 4c 24 14	 mov	 ecx, DWORD PTR _nick$[esp+4]
  00036	80 39 7e	 cmp	 BYTE PTR [ecx], 126	; 0000007eH
  00039	75 11		 jne	 SHORT $L83213

; 46   : 			if (!strcmp(nick+1, item->nick)) {

  0003b	41		 inc	 ecx
  0003c	50		 push	 eax
  0003d	51		 push	 ecx
$L84254:
  0003e	e8 00 00 00 00	 call	 _strcmp
  00043	59		 pop	 ecx
  00044	85 c0		 test	 eax, eax
  00046	59		 pop	 ecx
  00047	75 03		 jne	 SHORT $L83213

; 47   : 				result = 1;

  00049	6a 01		 push	 1
  0004b	5f		 pop	 edi
$L83213:

; 48   : 			}
; 49   : 		}
; 50   : 	}
; 51   : 	return result;

  0004c	8b c7		 mov	 eax, edi
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 52   : }

  00050	c3		 ret	 0
_isSelf	ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCRecvInvitation
PUBLIC	??_C@_0BA@FJHD@GroupChatPolicy?$AA@		; `string'
PUBLIC	??_C@_0L@HOEC@MUCC?1Event?$AA@			; `string'
EXTRN	_strcpy:NEAR
;	COMDAT ??_C@_0BA@FJHD@GroupChatPolicy?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BA@FJHD@GroupChatPolicy?$AA@ DB 'GroupChatPolicy', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@HOEC@MUCC?1Event?$AA@
_DATA	SEGMENT
??_C@_0L@HOEC@MUCC?1Event?$AA@ DB 'MUCC/Event', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenMUCRecvInvitation
_TEXT	SEGMENT
_dbv$84260 = -24
_cgs$84261 = -12
_cgs$84269 = -12
_cgs$84279 = -12
_proto$ = 8
_roomId$ = 12
_roomName$ = 16
_from$ = 20
_reason$ = 24
_jid$83390 = -340
_dbv$83392 = -24
_jid$83403 = -340
_dbv$83405 = -24
_mucce$83418 = -84
_TlenMUCRecvInvitation PROC NEAR			; COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx

; 277  : 	char *nick;
; 278  : 	int	 ignore, ask, groupChatPolicy;
; 279  : 	if (roomId == NULL) return 1;

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5d 0c	 cmp	 DWORD PTR _roomId$[ebp], ebx
  0000f	75 08		 jne	 SHORT $L83382
  00011	6a 01		 push	 1
  00013	58		 pop	 eax
  00014	e9 1f 02 00 00	 jmp	 $L83376
$L83382:
  00019	56		 push	 esi
  0001a	57		 push	 edi

; 280  : 	groupChatPolicy = DBGetContactSettingWord(NULL, proto->iface.m_szModuleName, "GroupChatPolicy", 0);

  0001b	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  0001e	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84261[ebp+4], OFFSET FLAT:??_C@_0BA@FJHD@GroupChatPolicy?$AA@ ; `string'
  0002a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002d	89 45 f4	 mov	 DWORD PTR _cgs$84261[ebp], eax
  00030	8d 45 e8	 lea	 eax, DWORD PTR _dbv$84260[ebp]
  00033	89 45 fc	 mov	 DWORD PTR _cgs$84261[ebp+8], eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84261[ebp]
  00039	50		 push	 eax
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0003f	53		 push	 ebx
  00040	56		 push	 esi
  00041	ff 50 24	 call	 DWORD PTR [eax+36]
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	85 c0		 test	 eax, eax
  00049	0f 85 67 01 00
	00		 jne	 $L84286
  0004f	0f b7 45 ec	 movzx	 eax, WORD PTR _dbv$84260[ebp+4]

; 281  : 	ask = TRUE;
; 282  : 	ignore = FALSE;
; 283  : 	if (groupChatPolicy == TLEN_MUC_ASK) {

  00053	3b c3		 cmp	 eax, ebx

; 284  : 		ignore = FALSE;
; 285  : 		ask = TRUE;
; 286  : 	} else if (groupChatPolicy == TLEN_MUC_IGNORE_ALL) {

  00055	0f 84 5b 01 00
	00		 je	 $L84286
  0005b	83 f8 04	 cmp	 eax, 4

; 287  : 		ignore = TRUE;
; 288  : 	} else if (groupChatPolicy == TLEN_MUC_IGNORE_NIR) {

  0005e	0f 84 d0 01 00
	00		 je	 $L83425
  00064	83 f8 03	 cmp	 eax, 3
  00067	0f 85 9b 00 00
	00		 jne	 $L83389

; 289  : 		char jid[256];
; 290  : 		JABBER_LIST_ITEM *item;
; 291  : 		DBVARIANT dbv;
; 292  : 		if (!DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  0006d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00070	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84269[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00077	89 45 f4	 mov	 DWORD PTR _cgs$84269[ebp], eax
  0007a	8d 45 e8	 lea	 eax, DWORD PTR _dbv$83392[ebp]
  0007d	89 45 fc	 mov	 DWORD PTR _cgs$84269[ebp+8], eax
  00080	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84269[ebp]
  00083	50		 push	 eax
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00089	53		 push	 ebx
  0008a	56		 push	 esi
  0008b	ff 50 24	 call	 DWORD PTR [eax+36]
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00091	85 c0		 test	 eax, eax
  00093	75 34		 jne	 SHORT $L83394

; 293  : 			_snprintf(jid, sizeof(jid), "%s@%s", from, dbv.pszVal);

  00095	ff 75 ec	 push	 DWORD PTR _dbv$83392[ebp+4]
  00098	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83390[ebp]
  0009e	ff 75 14	 push	 DWORD PTR _from$[ebp]
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  000a6	68 00 01 00 00	 push	 256			; 00000100H
  000ab	50		 push	 eax
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 294  : 			DBFreeVariant(&dbv);

  000b2	8d 45 e8	 lea	 eax, DWORD PTR _dbv$83392[ebp]
  000b5	50		 push	 eax
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000bb	53		 push	 ebx
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000c1	ff 50 24	 call	 DWORD PTR [eax+36]
  000c4	83 c4 20	 add	 esp, 32			; 00000020H

; 295  : 		} else {

  000c7	eb 11		 jmp	 SHORT $L83395
$L83394:

; 296  : 			strcpy(jid, from);

  000c9	ff 75 14	 push	 DWORD PTR _from$[ebp]
  000cc	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83390[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 _strcpy
  000d8	59		 pop	 ecx
  000d9	59		 pop	 ecx
$L83395:

; 297  : 		}
; 298  : 		item = JabberListGetItemPtr(proto, LIST_ROSTER, jid);

  000da	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83390[ebp]
  000e0	50		 push	 eax
  000e1	53		 push	 ebx
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 		ignore = FALSE;

  000eb	33 c9		 xor	 ecx, ecx

; 300  : 		if (item == NULL) ignore = TRUE;

  000ed	3b c3		 cmp	 eax, ebx

; 301  : 		else if (item->subscription==SUB_NONE || item->subscription==SUB_TO) ignore = TRUE;

  000ef	74 0c		 je	 SHORT $L83400
  000f1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  000f4	3b c3		 cmp	 eax, ebx
  000f6	74 05		 je	 SHORT $L83400
  000f8	83 f8 01	 cmp	 eax, 1
  000fb	75 03		 jne	 SHORT $L83399
$L83400:
  000fd	6a 01		 push	 1
  000ff	59		 pop	 ecx
$L83399:

; 302  : 		ask = TRUE;

  00100	6a 01		 push	 1
  00102	58		 pop	 eax

; 303  : 	} else if (groupChatPolicy == TLEN_MUC_ACCEPT_IR) {

  00103	e9 a2 00 00 00	 jmp	 $L83415
$L83389:
  00108	83 f8 01	 cmp	 eax, 1
  0010b	0f 85 90 00 00
	00		 jne	 $L83402

; 304  : 		char jid[256];
; 305  : 		JABBER_LIST_ITEM *item;
; 306  : 		DBVARIANT dbv;
; 307  : 		if (!DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  00111	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00114	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84279[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  0011b	89 45 f4	 mov	 DWORD PTR _cgs$84279[ebp], eax
  0011e	8d 45 e8	 lea	 eax, DWORD PTR _dbv$83405[ebp]
  00121	89 45 fc	 mov	 DWORD PTR _cgs$84279[ebp+8], eax
  00124	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84279[ebp]
  00127	50		 push	 eax
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0012d	53		 push	 ebx
  0012e	56		 push	 esi
  0012f	ff 50 24	 call	 DWORD PTR [eax+36]
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
  00135	85 c0		 test	 eax, eax
  00137	75 34		 jne	 SHORT $L83407

; 308  : 			_snprintf(jid, sizeof(jid), "%s@%s", from, dbv.pszVal);

  00139	ff 75 ec	 push	 DWORD PTR _dbv$83405[ebp+4]
  0013c	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83403[ebp]
  00142	ff 75 14	 push	 DWORD PTR _from$[ebp]
  00145	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  0014a	68 00 01 00 00	 push	 256			; 00000100H
  0014f	50		 push	 eax
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 309  : 			DBFreeVariant(&dbv);

  00156	8d 45 e8	 lea	 eax, DWORD PTR _dbv$83405[ebp]
  00159	50		 push	 eax
  0015a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0015f	53		 push	 ebx
  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00165	ff 50 24	 call	 DWORD PTR [eax+36]
  00168	83 c4 20	 add	 esp, 32			; 00000020H

; 310  : 		} else {

  0016b	eb 11		 jmp	 SHORT $L83408
$L83407:

; 311  : 			strcpy(jid, from);

  0016d	ff 75 14	 push	 DWORD PTR _from$[ebp]
  00170	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83403[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _strcpy
  0017c	59		 pop	 ecx
  0017d	59		 pop	 ecx
$L83408:

; 312  : 		}
; 313  : 		item = JabberListGetItemPtr(proto, LIST_ROSTER, jid);

  0017e	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _jid$83403[ebp]
  00184	50		 push	 eax
  00185	53		 push	 ebx
  00186	57		 push	 edi
  00187	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  : 		ask = FALSE;
; 315  : 		if (item == NULL) ask = TRUE;

  0018f	3b c3		 cmp	 eax, ebx

; 316  : 		else if (item->subscription==SUB_NONE || item->subscription==SUB_TO) ask = TRUE;

  00191	74 23		 je	 SHORT $L84286
  00193	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00196	3b c3		 cmp	 eax, ebx
  00198	74 1c		 je	 SHORT $L84286
  0019a	83 f8 01	 cmp	 eax, 1
  0019d	75 6d		 jne	 SHORT $L83417

; 317  : 		ignore = FALSE;
; 318  : 	} else if (groupChatPolicy == TLEN_MUC_ACCEPT_ALL) {

  0019f	eb 15		 jmp	 SHORT $L84286
$L83402:
  001a1	83 f8 02	 cmp	 eax, 2
  001a4	75 10		 jne	 SHORT $L84286

; 319  : 		ask = FALSE;

  001a6	33 c0		 xor	 eax, eax

; 320  : 		ignore = FALSE;

  001a8	33 c9		 xor	 ecx, ecx
$L83415:

; 321  : 	}
; 322  : 	if (!ignore) {

  001aa	3b cb		 cmp	 ecx, ebx
  001ac	0f 85 82 00 00
	00		 jne	 $L83425

; 323  : 		if (ask) {

  001b2	3b c3		 cmp	 eax, ebx
  001b4	74 56		 je	 SHORT $L83417
$L84286:

; 324  : 			MUCCEVENT mucce;
; 325  : 			mucce.cbSize = sizeof(MUCCEVENT);
; 326  : 			mucce.pszModule = proto->iface.m_szModuleName;

  001b6	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  001b9	c7 45 ac 3c 00
	00 00		 mov	 DWORD PTR _mucce$83418[ebp], 60 ; 0000003cH
  001c0	89 45 c4	 mov	 DWORD PTR _mucce$83418[ebp+24], eax

; 327  : 			mucce.pszID = roomId;

  001c3	8b 45 0c	 mov	 eax, DWORD PTR _roomId$[ebp]
  001c6	89 45 c8	 mov	 DWORD PTR _mucce$83418[ebp+28], eax

; 328  : 			mucce.pszName = roomName;

  001c9	8b 45 10	 mov	 eax, DWORD PTR _roomName$[ebp]
  001cc	89 45 cc	 mov	 DWORD PTR _mucce$83418[ebp+32], eax

; 329  : 			mucce.iType = MUCC_EVENT_INVITATION;
; 330  : 			mucce.pszUID = from;

  001cf	8b 45 14	 mov	 eax, DWORD PTR _from$[ebp]

; 331  : 			nick = getDisplayName(proto, from);

  001d2	50		 push	 eax
  001d3	57		 push	 edi
  001d4	c7 45 b0 03 00
	00 00		 mov	 DWORD PTR _mucce$83418[ebp+4], 3
  001db	89 45 d0	 mov	 DWORD PTR _mucce$83418[ebp+36], eax
  001de	e8 00 00 00 00	 call	 _getDisplayName
  001e3	8b f0		 mov	 esi, eax

; 332  : 			mucce.pszNick = nick;
; 333  : 			mucce.pszText = reason;

  001e5	8b 45 18	 mov	 eax, DWORD PTR _reason$[ebp]
  001e8	89 45 d8	 mov	 DWORD PTR _mucce$83418[ebp+44], eax

; 334  : 			CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  001eb	8d 45 ac	 lea	 eax, DWORD PTR _mucce$83418[ebp]
  001ee	50		 push	 eax
  001ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001f4	53		 push	 ebx
  001f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  001fa	89 75 d4	 mov	 DWORD PTR _mucce$83418[ebp+40], esi
  001fd	ff 50 24	 call	 DWORD PTR [eax+36]

; 335  : 			mir_free(nick);

  00200	56		 push	 esi
  00201	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00207	83 c4 18	 add	 esp, 24			; 00000018H

; 336  : 		} else {

  0020a	eb 28		 jmp	 SHORT $L83425
$L83417:

; 337  : 			if (!TlenMUCCreateWindow(proto, roomId, roomName, 0, NULL, NULL)) {

  0020c	53		 push	 ebx
  0020d	53		 push	 ebx
  0020e	53		 push	 ebx
  0020f	ff 75 10	 push	 DWORD PTR _roomName$[ebp]
  00212	ff 75 0c	 push	 DWORD PTR _roomId$[ebp]
  00215	57		 push	 edi
  00216	e8 00 00 00 00	 call	 _TlenMUCCreateWindow
  0021b	83 c4 18	 add	 esp, 24			; 00000018H
  0021e	85 c0		 test	 eax, eax
  00220	75 12		 jne	 SHORT $L83425

; 338  : 				TlenMUCSendPresence(proto, roomId, NULL, ID_STATUS_ONLINE);

  00222	68 88 9c 00 00	 push	 40072			; 00009c88H
  00227	53		 push	 ebx
  00228	ff 75 0c	 push	 DWORD PTR _roomId$[ebp]
  0022b	57		 push	 edi
  0022c	e8 00 00 00 00	 call	 _TlenMUCSendPresence
  00231	83 c4 10	 add	 esp, 16			; 00000010H
$L83425:
  00234	5f		 pop	 edi

; 339  : 			}
; 340  : 		}
; 341  : 	}
; 342  : 	return 0;

  00235	33 c0		 xor	 eax, eax
  00237	5e		 pop	 esi
$L83376:
  00238	5b		 pop	 ebx

; 343  : }

  00239	c9		 leave
  0023a	c3		 ret	 0
_TlenMUCRecvInvitation ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BGN@Miranda?1Contact?1GetContactInfo?$AA@ ; `string'
EXTRN	_memset:NEAR
EXTRN	_JabberHContactFromJID:NEAR
;	COMDAT ??_C@_0BP@BGN@Miranda?1Contact?1GetContactInfo?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BP@BGN@Miranda?1Contact?1GetContactInfo?$AA@ DB 'Miranda/Contact/G'
	DB	'etContactInfo', 00H				; `string'
_DATA	ENDS
;	COMDAT _getDisplayName
_TEXT	SEGMENT
_proto$ = 8
_id$ = 12
_ci$ = -24
_jid$ = -304
_dbv$ = -48
_cgs$84296 = -36
_getDisplayName PROC NEAR				; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	56		 push	 esi

; 71   : 	CONTACTINFO ci;
; 72   : 	char jid[256];
; 73   : 	HANDLE hContact;
; 74   : 	DBVARIANT dbv;
; 75   : 	if (!DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  0000a	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000d	57		 push	 edi
  0000e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _cgs$84296[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00015	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00018	89 45 dc	 mov	 DWORD PTR _cgs$84296[ebp], eax
  0001b	8d 45 d0	 lea	 eax, DWORD PTR _dbv$[ebp]
  0001e	89 45 e4	 mov	 DWORD PTR _cgs$84296[ebp+8], eax
  00021	8d 45 dc	 lea	 eax, DWORD PTR _cgs$84296[ebp]
  00024	50		 push	 eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0002a	6a 00		 push	 0
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00031	ff 50 24	 call	 DWORD PTR [eax+36]
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
  00037	85 c0		 test	 eax, eax
  00039	0f 85 be 00 00
	00		 jne	 $L83249

; 76   : 		_snprintf(jid, sizeof(jid), "%s@%s", id, dbv.pszVal);

  0003f	ff 75 d4	 push	 DWORD PTR _dbv$[ebp+4]
  00042	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  00048	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  00050	68 00 01 00 00	 push	 256			; 00000100H
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 77   : 		DBFreeVariant(&dbv);

  0005c	8d 45 d0	 lea	 eax, DWORD PTR _dbv$[ebp]
  0005f	50		 push	 eax
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00065	6a 00		 push	 0
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  0006c	ff 50 24	 call	 DWORD PTR [eax+36]

; 78   : 		if (((hContact=JabberHContactFromJID(proto, jid)) != NULL) || !strcmp(id, proto->threadData->username)) {

  0006f	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  00075	50		 push	 eax
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0007c	8b f8		 mov	 edi, eax
  0007e	83 c4 28	 add	 esp, 40			; 00000028H
  00081	85 ff		 test	 edi, edi
  00083	75 18		 jne	 SHORT $L83243
  00085	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0008b	83 c0 08	 add	 eax, 8
  0008e	50		 push	 eax
  0008f	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  00092	e8 00 00 00 00	 call	 _strcmp
  00097	59		 pop	 ecx
  00098	85 c0		 test	 eax, eax
  0009a	59		 pop	 ecx
  0009b	75 60		 jne	 SHORT $L83249
$L83243:

; 79   : 			ZeroMemory(&ci, sizeof(ci));

  0009d	6a 18		 push	 24			; 00000018H
  0009f	8d 45 e8	 lea	 eax, DWORD PTR _ci$[ebp]
  000a2	6a 00		 push	 0
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _memset

; 80   : 			ci.cbSize = sizeof(ci);
; 81   : 			ci.hContact = hContact;
; 82   : 			ci.szProto = (char *)proto->iface.m_szModuleName;

  000aa	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000ad	c7 45 e8 18 00
	00 00		 mov	 DWORD PTR _ci$[ebp], 24	; 00000018H
  000b4	89 45 f4	 mov	 DWORD PTR _ci$[ebp+12], eax

; 83   : 			ci.dwFlag = CNF_DISPLAY;
; 84   : 			if (!CallService(MS_CONTACT_GETCONTACTINFO, 0, (LPARAM) & ci)) {

  000b7	8d 45 e8	 lea	 eax, DWORD PTR _ci$[ebp]
  000ba	50		 push	 eax
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000c0	6a 00		 push	 0
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BGN@Miranda?1Contact?1GetContactInfo?$AA@ ; `string'
  000c7	89 7d f0	 mov	 DWORD PTR _ci$[ebp+8], edi
  000ca	c6 45 ec 10	 mov	 BYTE PTR _ci$[ebp+4], 16 ; 00000010H
  000ce	ff 50 24	 call	 DWORD PTR [eax+36]
  000d1	83 c4 18	 add	 esp, 24			; 00000018H
  000d4	85 c0		 test	 eax, eax
  000d6	75 25		 jne	 SHORT $L83249

; 85   : 				if (ci.type == CNFT_ASCIIZ) {

  000d8	80 7d f8 04	 cmp	 BYTE PTR _ci$[ebp+16], 4
  000dc	75 1f		 jne	 SHORT $L83249

; 86   : 					if (ci.pszVal) {

  000de	39 45 fc	 cmp	 DWORD PTR _ci$[ebp+20], eax
  000e1	74 1a		 je	 SHORT $L83249

; 87   : 						char * str = mir_strdup((char *)ci.pszVal);

  000e3	ff 75 fc	 push	 DWORD PTR _ci$[ebp+20]
  000e6	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 88   : 						miranda_sys_free(ci.pszVal);

  000ec	ff 75 fc	 push	 DWORD PTR _ci$[ebp+20]
  000ef	8b f0		 mov	 esi, eax
  000f1	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000f7	59		 pop	 ecx

; 89   : 						return str;

  000f8	8b c6		 mov	 eax, esi
  000fa	59		 pop	 ecx
  000fb	eb 0a		 jmp	 SHORT $L83231
$L83249:

; 90   : 					}
; 91   : 				}
; 92   : 			}
; 93   : 		}
; 94   : 	}
; 95   : 	return mir_strdup(id);

  000fd	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  00100	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00106	59		 pop	 ecx
$L83231:
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi

; 96   : }

  00109	c9		 leave
  0010a	c3		 ret	 0
_getDisplayName ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCRecvPresence
PUBLIC	??_C@_0CC@OCEB@You?5have?5been?5kicked?4?5Reason?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@	; `string'
EXTRN	__imp__time:NEAR
EXTRN	_JabberLoginFromJID:NEAR
;	COMDAT ??_C@_0CC@OCEB@You?5have?5been?5kicked?4?5Reason?3?5?$CFs@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_0CC@OCEB@You?5have?5been?5kicked?4?5Reason?3?5?$CFs@ DB 'You have b'
	DB	'een kicked. Reason: %s ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT
??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ DB 'LangPack/TranslateStrin'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenMUCRecvPresence
_TEXT	SEGMENT
_proto$ = 8
_from$ = 12
_status$ = 16
_flags$ = 20
_kick$ = 24
_str$ = -572
_nick$ = 12
_mucce$ = -60
_TlenMUCRecvPresence PROC NEAR				; COMDAT

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 02 00
	00		 sub	 esp, 572		; 0000023cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 347  : 	char str[512];
; 348  : //	if (JabberListExist(LIST_CHATROOM, from)) {
; 349  : 		char *nick, *roomId, *userId;
; 350  : 		MUCCEVENT mucce;
; 351  : 		roomId = JabberLoginFromJID(from);

  0000c	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  0000f	e8 00 00 00 00	 call	 _JabberLoginFromJID

; 352  : 		userId = JabberResourceFromJID(from);

  00014	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  00017	8b d8		 mov	 ebx, eax
  00019	e8 00 00 00 00	 call	 _JabberResourceFromJID

; 353  : 		nick = getDisplayName(proto, userId);

  0001e	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00021	8b f8		 mov	 edi, eax
  00023	57		 push	 edi
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _getDisplayName

; 354  : 		mucce.cbSize = sizeof(MUCCEVENT);
; 355  : 		mucce.pszModule = proto->iface.m_szModuleName;

  0002a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]

; 356  : 		mucce.pszID = roomId;
; 357  : 		mucce.iType = MUCC_EVENT_STATUS;
; 358  : 		mucce.pszUID = userId;//from;
; 359  : 		mucce.pszNick = nick;
; 360  : 		mucce.time = time(NULL);

  0002d	6a 00		 push	 0
  0002f	89 45 0c	 mov	 DWORD PTR _nick$[ebp], eax
  00032	c7 45 c4 3c 00
	00 00		 mov	 DWORD PTR _mucce$[ebp], 60 ; 0000003cH
  00039	89 4d dc	 mov	 DWORD PTR _mucce$[ebp+24], ecx
  0003c	89 5d e0	 mov	 DWORD PTR _mucce$[ebp+28], ebx
  0003f	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+4], 2
  00046	89 7d e8	 mov	 DWORD PTR _mucce$[ebp+36], edi
  00049	89 45 ec	 mov	 DWORD PTR _mucce$[ebp+40], eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time

; 361  : 		mucce.bIsMe = isSelf(proto, roomId, userId);

  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	56		 push	 esi
  00055	89 45 fc	 mov	 DWORD PTR _mucce$[ebp+56], eax
  00058	e8 00 00 00 00	 call	 _isSelf

; 362  : 		mucce.dwData = status;
; 363  : 		mucce.dwFlags = 0;
; 364  : 		if (flags & USER_FLAGS_GLOBALOWNER) mucce.dwFlags |= MUCC_EF_USER_GLOBALOWNER;

  0005d	8a 4d 14	 mov	 cl, BYTE PTR _flags$[ebp]
  00060	89 45 f8	 mov	 DWORD PTR _mucce$[ebp+52], eax
  00063	8b 45 10	 mov	 eax, DWORD PTR _status$[ebp]
  00066	83 c4 20	 add	 esp, 32			; 00000020H
  00069	33 f6		 xor	 esi, esi
  0006b	89 45 f4	 mov	 DWORD PTR _mucce$[ebp+48], eax
  0006e	f6 c1 08	 test	 cl, 8
  00071	89 75 cc	 mov	 DWORD PTR _mucce$[ebp+8], esi
  00074	74 07		 je	 SHORT $L83445
  00076	c7 45 cc 40 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+8], 64 ; 00000040H
$L83445:

; 365  : 		if (flags & USER_FLAGS_OWNER) mucce.dwFlags |= MUCC_EF_USER_OWNER;

  0007d	f6 c1 01	 test	 cl, 1
  00080	74 04		 je	 SHORT $L83446
  00082	83 4d cc 01	 or	 DWORD PTR _mucce$[ebp+8], 1
$L83446:

; 366  : 		if (flags & USER_FLAGS_ADMIN) mucce.dwFlags |= MUCC_EF_USER_ADMIN;

  00086	f6 c1 02	 test	 cl, 2
  00089	74 04		 je	 SHORT $L83447
  0008b	83 4d cc 02	 or	 DWORD PTR _mucce$[ebp+8], 2
$L83447:

; 367  : 		if (flags & USER_FLAGS_REGISTERED) mucce.dwFlags |= MUCC_EF_USER_REGISTERED;

  0008f	6a 04		 push	 4
  00091	5a		 pop	 edx
  00092	84 ca		 test	 cl, dl
  00094	74 03		 je	 SHORT $L83448
  00096	09 55 cc	 or	 DWORD PTR _mucce$[ebp+8], edx
$L83448:

; 368  : 		if (status == ID_STATUS_OFFLINE && mucce.bIsMe && kick!=NULL) {

  00099	3d 87 9c 00 00	 cmp	 eax, 40071		; 00009c87H
  0009e	75 40		 jne	 SHORT $L83450
  000a0	39 75 f8	 cmp	 DWORD PTR _mucce$[ebp+52], esi
  000a3	74 3b		 je	 SHORT $L83450
  000a5	39 75 18	 cmp	 DWORD PTR _kick$[ebp], esi
  000a8	74 36		 je	 SHORT $L83450

; 369  : 			mucce.iType = MUCC_EVENT_ERROR;
; 370  : 			sprintf(str, Translate("You have been kicked. Reason: %s "), kick);

  000aa	ff 75 18	 push	 DWORD PTR _kick$[ebp]
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000b2	89 55 c8	 mov	 DWORD PTR _mucce$[ebp+4], edx
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@OCEB@You?5have?5been?5kicked?4?5Reason?3?5?$CFs@ ; `string'
  000ba	56		 push	 esi
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  000c0	ff 50 24	 call	 DWORD PTR [eax+36]
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	50		 push	 eax
  000c7	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 371  : 			mucce.pszText = str;

  000d4	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dd	89 45 f0	 mov	 DWORD PTR _mucce$[ebp+44], eax
$L83450:

; 372  : 		}
; 373  : 		CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  000e0	8d 45 c4	 lea	 eax, DWORD PTR _mucce$[ebp]
  000e3	50		 push	 eax
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e9	56		 push	 esi
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  000ef	ff 50 24	 call	 DWORD PTR [eax+36]

; 374  : 		mir_free(roomId);

  000f2	53		 push	 ebx
  000f3	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 375  : 		mir_free(userId);

  000f9	57		 push	 edi
  000fa	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 376  : 		mir_free(nick);

  00100	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  00103	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00109	83 c4 18	 add	 esp, 24			; 00000018H

; 377  : //	}
; 378  : 	return 0;

  0010c	33 c0		 xor	 eax, eax
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx

; 379  : }

  00111	c9		 leave
  00112	c3		 ret	 0
_TlenMUCRecvPresence ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCRecvMessage
PUBLIC	??_C@_01IFC@f?$AA@				; `string'
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	??_C@_01KBOJ@s?$AA@				; `string'
PUBLIC	??_C@_01FMOK@n?$AA@				; `string'
EXTRN	__imp__atoi:NEAR
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_JabberTextDecode:NEAR
;	COMDAT ??_C@_01IFC@f?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_01IFC@f?$AA@ DB 'f', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT
??_C@_01KBOJ@s?$AA@ DB 's', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT
??_C@_01FMOK@n?$AA@ DB 'n', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenMUCRecvMessage
_TEXT	SEGMENT
_proto$ = 8
_from$ = 12
_timestamp$ = 16
_bodyNode$ = 20
_localMessage$ = 8
_nick$ = 12
_roomId$ = -4
_mucce$ = -64
_TlenMUCRecvMessage PROC NEAR				; COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 383  : //	if (JabberListExist(LIST_CHATROOM, from)) {
; 384  : 		char *localMessage;
; 385  : 		char *nick, *style, *roomId, *userId;
; 386  : 		int	 iStyle;
; 387  : 		MUCCEVENT mucce;
; 388  : 		roomId = JabberLoginFromJID(from);

  00009	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  0000c	e8 00 00 00 00	 call	 _JabberLoginFromJID

; 389  : 		userId = JabberResourceFromJID(from);

  00011	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _roomId$[ebp], eax
  00017	e8 00 00 00 00	 call	 _JabberResourceFromJID

; 390  : 		nick = getDisplayName(proto, userId);

  0001c	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0001f	8b f8		 mov	 edi, eax
  00021	57		 push	 edi
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _getDisplayName
  00028	89 45 0c	 mov	 DWORD PTR _nick$[ebp], eax

; 391  : 		localMessage = JabberTextDecode(bodyNode->text);

  0002b	8b 45 14	 mov	 eax, DWORD PTR _bodyNode$[ebp]
  0002e	ff 70 20	 push	 DWORD PTR [eax+32]
  00031	e8 00 00 00 00	 call	 _JabberTextDecode

; 392  : 		mucce.cbSize = sizeof(MUCCEVENT);
; 393  : 		mucce.iType = MUCC_EVENT_MESSAGE;
; 394  : 		mucce.pszID = roomId;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _roomId$[ebp]

; 395  : 		mucce.pszModule = proto->iface.m_szModuleName;

  00039	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0003c	6a 01		 push	 1
  0003e	89 45 08	 mov	 DWORD PTR _localMessage$[ebp], eax

; 396  : 		mucce.pszText = localMessage;

  00041	89 45 ec	 mov	 DWORD PTR _mucce$[ebp+44], eax

; 397  : 		mucce.pszUID = userId;//from;
; 398  : 		mucce.pszNick = nick;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _nick$[ebp]
  00047	5b		 pop	 ebx
  00048	89 45 e8	 mov	 DWORD PTR _mucce$[ebp+40], eax

; 399  : 		mucce.time = timestamp;

  0004b	8b 45 10	 mov	 eax, DWORD PTR _timestamp$[ebp]

; 400  : 		mucce.bIsMe = isSelf(proto, roomId, userId);

  0004e	57		 push	 edi
  0004f	51		 push	 ecx
  00050	56		 push	 esi
  00051	c7 45 c0 3c 00
	00 00		 mov	 DWORD PTR _mucce$[ebp], 60 ; 0000003cH
  00058	89 5d c4	 mov	 DWORD PTR _mucce$[ebp+4], ebx
  0005b	89 4d dc	 mov	 DWORD PTR _mucce$[ebp+28], ecx
  0005e	89 55 d8	 mov	 DWORD PTR _mucce$[ebp+24], edx
  00061	89 7d e4	 mov	 DWORD PTR _mucce$[ebp+36], edi
  00064	89 45 f8	 mov	 DWORD PTR _mucce$[ebp+56], eax
  00067	e8 00 00 00 00	 call	 _isSelf

; 401  : 		mucce.dwFlags = 0;

  0006c	83 65 c8 00	 and	 DWORD PTR _mucce$[ebp+8], 0

; 402  : 		mucce.iFontSize = 0;

  00070	83 65 d0 00	 and	 DWORD PTR _mucce$[ebp+16], 0

; 403  : 		style = JabberXmlGetAttrValue(bodyNode, "f");

  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  00079	89 45 f4	 mov	 DWORD PTR _mucce$[ebp+52], eax
  0007c	ff 75 14	 push	 DWORD PTR _bodyNode$[ebp]
  0007f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00084	83 c4 28	 add	 esp, 40			; 00000028H

; 404  : 		if (style!=NULL) {

  00087	85 c0		 test	 eax, eax
  00089	74 1f		 je	 SHORT $L83478

; 405  : 			iStyle = atoi(style);

  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 406  : 			if (iStyle & 1) mucce.dwFlags |= MUCC_EF_FONT_BOLD;

  00092	84 c3		 test	 al, bl
  00094	59		 pop	 ecx
  00095	74 03		 je	 SHORT $L83476
  00097	08 5d c9	 or	 BYTE PTR _mucce$[ebp+9], bl
$L83476:

; 407  : 			if (iStyle & 2) mucce.dwFlags |= MUCC_EF_FONT_ITALIC;

  0009a	a8 02		 test	 al, 2
  0009c	74 04		 je	 SHORT $L83477
  0009e	80 4d c9 02	 or	 BYTE PTR _mucce$[ebp+9], 2
$L83477:

; 408  : 			if (iStyle & 4) mucce.dwFlags |= MUCC_EF_FONT_UNDERLINE;

  000a2	a8 04		 test	 al, 4
  000a4	74 04		 je	 SHORT $L83478
  000a6	80 4d c9 04	 or	 BYTE PTR _mucce$[ebp+9], 4
$L83478:

; 409  : 		}
; 410  : 		style = JabberXmlGetAttrValue(bodyNode, "c");

  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  000af	ff 75 14	 push	 DWORD PTR _bodyNode$[ebp]
  000b2	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000b7	8b f0		 mov	 esi, eax
  000b9	59		 pop	 ecx

; 411  : 		if (style!=NULL && strlen(style)>5) {

  000ba	85 f6		 test	 esi, esi
  000bc	59		 pop	 ecx
  000bd	74 35		 je	 SHORT $L83481
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 _strlen
  000c5	83 f8 05	 cmp	 eax, 5
  000c8	59		 pop	 ecx
  000c9	76 29		 jbe	 SHORT $L83481

; 412  : 			iStyle = (stringToHex(style)<<16) | (stringToHex(style+2)<<8) | stringToHex(style+4);

  000cb	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _stringToHex
  000d4	56		 push	 esi
  000d5	8b d8		 mov	 ebx, eax
  000d7	e8 00 00 00 00	 call	 _stringToHex
  000dc	c1 e0 08	 shl	 eax, 8
  000df	83 c6 04	 add	 esi, 4
  000e2	0b d8		 or	 ebx, eax
  000e4	56		 push	 esi
  000e5	c1 e3 08	 shl	 ebx, 8
  000e8	e8 00 00 00 00	 call	 _stringToHex
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	0b d8		 or	 ebx, eax

; 413  : 		} else {

  000f2	eb 03		 jmp	 SHORT $L83482
$L83481:

; 414  : 			iStyle = 0xFFFFFFFF;

  000f4	83 cb ff	 or	 ebx, -1
$L83482:

; 415  : 		}
; 416  : 		mucce.color = (COLORREF) iStyle;
; 417  : 		style = JabberXmlGetAttrValue(bodyNode, "s");

  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  000fc	89 5d d4	 mov	 DWORD PTR _mucce$[ebp+20], ebx
  000ff	ff 75 14	 push	 DWORD PTR _bodyNode$[ebp]
  00102	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00107	59		 pop	 ecx

; 418  : 		if (style!=NULL) {

  00108	85 c0		 test	 eax, eax
  0010a	59		 pop	 ecx
  0010b	74 0a		 je	 SHORT $L83486

; 419  : 			iStyle = atoi(style);

  0010d	50		 push	 eax
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00114	59		 pop	 ecx

; 420  : 		} else {

  00115	eb 02		 jmp	 SHORT $L83487
$L83486:

; 421  : 			iStyle = 0;

  00117	33 c0		 xor	 eax, eax
$L83487:

; 422  : 		}
; 423  : 		mucce.iFontSize = iStyle;
; 424  : 		style = JabberXmlGetAttrValue(bodyNode, "n");

  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  0011e	89 45 d0	 mov	 DWORD PTR _mucce$[ebp+16], eax
  00121	ff 75 14	 push	 DWORD PTR _bodyNode$[ebp]
  00124	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00129	59		 pop	 ecx

; 425  : 		if (style!=NULL) {

  0012a	85 c0		 test	 eax, eax
  0012c	59		 pop	 ecx
  0012d	74 0b		 je	 SHORT $L83490

; 426  : 			iStyle = atoi(style)-1;

  0012f	50		 push	 eax
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00136	59		 pop	 ecx
  00137	48		 dec	 eax

; 427  : 		} else {

  00138	eb 02		 jmp	 SHORT $L83491
$L83490:

; 428  : 			iStyle = 0;

  0013a	33 c0		 xor	 eax, eax
$L83491:

; 429  : 		}
; 430  : 		mucce.iFont = iStyle;

  0013c	89 45 cc	 mov	 DWORD PTR _mucce$[ebp+12], eax

; 431  : 		CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  0013f	8d 45 c0	 lea	 eax, DWORD PTR _mucce$[ebp]
  00142	50		 push	 eax
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00148	6a 00		 push	 0
  0014a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  0014f	ff 50 24	 call	 DWORD PTR [eax+36]

; 432  : 		mir_free(roomId);

  00152	ff 75 fc	 push	 DWORD PTR _roomId$[ebp]
  00155	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 433  : 		mir_free(userId);

  0015b	57		 push	 edi
  0015c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 434  : 		mir_free(nick);

  00162	ff 75 0c	 push	 DWORD PTR _nick$[ebp]
  00165	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 435  : 		mir_free(localMessage);

  0016b	ff 75 08	 push	 DWORD PTR _localMessage$[ebp]
  0016e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00174	83 c4 1c	 add	 esp, 28			; 0000001cH

; 436  : //	}
; 437  : 	return 0;

  00177	33 c0		 xor	 eax, eax
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx

; 438  : }

  0017c	c9		 leave
  0017d	c3		 ret	 0
_TlenMUCRecvMessage ENDP
_TEXT	ENDS
;	COMDAT _stringToHex
_TEXT	SEGMENT
_str$ = 8
_stringToHex PROC NEAR					; COMDAT

; 56   : 	int i, val;
; 57   : 	val = 0;

  00000	33 c0		 xor	 eax, eax

; 58   : 	for (i=0;i<2;i++) {

  00002	33 d2		 xor	 edx, edx
$L83220:

; 59   : 		val <<= 4;
; 60   : 		if (str[i]>='A' && str[i]<='F') {

  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _str$[esp-4]
  00008	c1 e0 04	 shl	 eax, 4
  0000b	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  0000e	80 f9 41	 cmp	 cl, 65			; 00000041H
  00011	7c 0e		 jl	 SHORT $L83223
  00013	80 f9 46	 cmp	 cl, 70			; 00000046H
  00016	7f 09		 jg	 SHORT $L83223

; 61   : 			val += 10 + str[i]-'A';

  00018	0f be c9	 movsx	 ecx, cl
  0001b	8d 44 08 c9	 lea	 eax, DWORD PTR [eax+ecx-55]

; 62   : 		} else if (str[i]>='0' && str[i]<='9') {

  0001f	eb 11		 jmp	 SHORT $L83221
$L83223:
  00021	80 f9 30	 cmp	 cl, 48			; 00000030H
  00024	7c 0c		 jl	 SHORT $L83221
  00026	80 f9 39	 cmp	 cl, 57			; 00000039H
  00029	7f 07		 jg	 SHORT $L83221

; 63   : 			val += str[i]-'0';

  0002b	0f be c9	 movsx	 ecx, cl
  0002e	8d 44 08 d0	 lea	 eax, DWORD PTR [eax+ecx-48]
$L83221:
  00032	42		 inc	 edx
  00033	83 fa 02	 cmp	 edx, 2
  00036	7c cc		 jl	 SHORT $L83220

; 64   : 		}
; 65   : 	}
; 66   : 	return val;
; 67   : 
; 68   : }

  00038	c3		 ret	 0
_stringToHex ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCRecvTopic
;	COMDAT _TlenMUCRecvTopic
_TEXT	SEGMENT
_proto$ = 8
_from$ = 12
_subject$ = 16
_mucce$ = -60
_TlenMUCRecvTopic PROC NEAR				; COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 441  : //	if (JabberListExist(LIST_CHATROOM, from)) {
; 442  : 		MUCCEVENT mucce;
; 443  : 		mucce.cbSize = sizeof(MUCCEVENT);
; 444  : 		mucce.iType = MUCC_EVENT_TOPIC;
; 445  : 		mucce.pszID = from;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]

; 446  : 		mucce.pszModule = proto->iface.m_szModuleName;
; 447  : 		mucce.pszText = subject;
; 448  : 		mucce.time = time(NULL);

  00009	6a 00		 push	 0
  0000b	89 45 e0	 mov	 DWORD PTR _mucce$[ebp+28], eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00011	c7 45 c4 3c 00
	00 00		 mov	 DWORD PTR _mucce$[ebp], 60 ; 0000003cH
  00018	c7 45 c8 05 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+4], 5
  0001f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00022	89 45 dc	 mov	 DWORD PTR _mucce$[ebp+24], eax
  00025	8b 45 10	 mov	 eax, DWORD PTR _subject$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR _mucce$[ebp+44], eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
  00031	89 45 fc	 mov	 DWORD PTR _mucce$[ebp+56], eax

; 449  : 		CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  00034	8d 45 c4	 lea	 eax, DWORD PTR _mucce$[ebp]
  00037	50		 push	 eax
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0003d	6a 00		 push	 0
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  00044	ff 50 24	 call	 DWORD PTR [eax+36]
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 450  : //	}
; 451  : 	return 0;

  0004a	33 c0		 xor	 eax, eax

; 452  : }

  0004c	c9		 leave
  0004d	c3		 ret	 0
_TlenMUCRecvTopic ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCRecvError
PUBLIC	??_C@_04KKCM@code?$AA@				; `string'
PUBLIC	??_C@_0DI@EDEP@You?5cannot?5join?5this?5chat?5room?0?5@ ; `string'
PUBLIC	??_C@_0BF@CFAF@Chat?5room?5not?5found?4?$AA@	; `string'
PUBLIC	??_C@_0EA@NHNK@This?5is?5a?5private?5chat?5room?5and?5@ ; `string'
PUBLIC	??_C@_0DM@KKDJ@You?5cannot?5send?5any?5message?5unle@ ; `string'
PUBLIC	??_C@_0CA@JNCI@Chat?5room?5with?5already?5created?4?$AA@ ; `string'
PUBLIC	??_C@_0CF@OLCD@Nickname?5?8?$CFs?8?5is?5already?5registe@ ; `string'
PUBLIC	??_C@_04KHAP@free?$AA@				; `string'
PUBLIC	??_C@_0EF@LBBH@Nickname?5already?5in?5use?0?5please?5@ ; `string'
PUBLIC	??_C@_03EBLA@num?$AA@				; `string'
PUBLIC	??_C@_0CM@BNEG@You?5cannot?5register?5more?5than?5?$CFs@ ; `string'
PUBLIC	??_C@_0CL@MBHC@You?5cannot?5create?5more?5than?5?$CFs?5c@ ; `string'
PUBLIC	??_C@_0CJ@OPNN@You?5cannot?5join?5more?5than?5?$CFs?5cha@ ; `string'
PUBLIC	??_C@_0DH@BBKF@Anonymous?5nicknames?5are?5not?5allo@ ; `string'
PUBLIC	??_C@_0BI@GEGM@Unknown?5error?5code?5?3?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_04KKCM@code?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_04KKCM@code?$AA@ DB 'code', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DI@EDEP@You?5cannot?5join?5this?5chat?5room?0?5@
_DATA	SEGMENT
??_C@_0DI@EDEP@You?5cannot?5join?5this?5chat?5room?0?5@ DB 'You cannot jo'
	DB	'in this chat room, because you are banned.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CFAF@Chat?5room?5not?5found?4?$AA@
_DATA	SEGMENT
??_C@_0BF@CFAF@Chat?5room?5not?5found?4?$AA@ DB 'Chat room not found.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EA@NHNK@This?5is?5a?5private?5chat?5room?5and?5@
_DATA	SEGMENT
??_C@_0EA@NHNK@This?5is?5a?5private?5chat?5room?5and?5@ DB 'This is a pri'
	DB	'vate chat room and you are not one of the members.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DM@KKDJ@You?5cannot?5send?5any?5message?5unle@
_DATA	SEGMENT
??_C@_0DM@KKDJ@You?5cannot?5send?5any?5message?5unle@ DB 'You cannot send'
	DB	' any message unless you join this chat room.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@JNCI@Chat?5room?5with?5already?5created?4?$AA@
_DATA	SEGMENT
??_C@_0CA@JNCI@Chat?5room?5with?5already?5created?4?$AA@ DB 'Chat room wi'
	DB	'th already created.', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@OLCD@Nickname?5?8?$CFs?8?5is?5already?5registe@
_DATA	SEGMENT
??_C@_0CF@OLCD@Nickname?5?8?$CFs?8?5is?5already?5registe@ DB 'Nickname '''
	DB	'%s'' is already registered.', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KHAP@free?$AA@
_DATA	SEGMENT
??_C@_04KHAP@free?$AA@ DB 'free', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EF@LBBH@Nickname?5already?5in?5use?0?5please?5@
_DATA	SEGMENT
??_C@_0EF@LBBH@Nickname?5already?5in?5use?0?5please?5@ DB 'Nickname alrea'
	DB	'dy in use, please try another one. Hint: ''%s'' is free.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03EBLA@num?$AA@
_DATA	SEGMENT
??_C@_03EBLA@num?$AA@ DB 'num', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CM@BNEG@You?5cannot?5register?5more?5than?5?$CFs@
_DATA	SEGMENT
??_C@_0CM@BNEG@You?5cannot?5register?5more?5than?5?$CFs@ DB 'You cannot r'
	DB	'egister more than %s nicknames.', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@MBHC@You?5cannot?5create?5more?5than?5?$CFs?5c@
_DATA	SEGMENT
??_C@_0CL@MBHC@You?5cannot?5create?5more?5than?5?$CFs?5c@ DB 'You cannot '
	DB	'create more than %s chat rooms.', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OPNN@You?5cannot?5join?5more?5than?5?$CFs?5cha@
_DATA	SEGMENT
??_C@_0CJ@OPNN@You?5cannot?5join?5more?5than?5?$CFs?5cha@ DB 'You cannot '
	DB	'join more than %s chat rooms.', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DH@BBKF@Anonymous?5nicknames?5are?5not?5allo@
_DATA	SEGMENT
??_C@_0DH@BBKF@Anonymous?5nicknames?5are?5not?5allo@ DB 'Anonymous nickna'
	DB	'mes are not allowed in this chat room.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GEGM@Unknown?5error?5code?5?3?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BI@GEGM@Unknown?5error?5code?5?3?5?$CFd?$AA@ DB 'Unknown error cod'
	DB	'e : %d', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenMUCRecvError
_TEXT	SEGMENT
_proto$ = 8
_from$ = 12
_errorNode$ = 16
_errCode$ = 12
_str$ = -572
_mucce$ = -60
_TlenMUCRecvError PROC NEAR				; COMDAT

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 02 00
	00		 sub	 esp, 572		; 0000023cH
  00009	53		 push	 ebx

; 456  : 	int errCode;
; 457  : 	char str[512];
; 458  : 	JABBER_LIST_ITEM *item;
; 459  : 	MUCCEVENT mucce;
; 460  : 	mucce.cbSize = sizeof(MUCCEVENT);
; 461  : 	mucce.iType = MUCC_EVENT_ERROR;
; 462  : 	mucce.pszID = from;

  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR _from$[ebp]
  0000d	56		 push	 esi

; 463  : 	mucce.pszModule = proto->iface.m_szModuleName;
; 464  : 	errCode = atoi(JabberXmlGetAttrValue(errorNode, "code"));

  0000e	8b 75 10	 mov	 esi, DWORD PTR _errorNode$[ebp]
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KKCM@code?$AA@ ; `string'
  0001a	56		 push	 esi
  0001b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0001e	c7 45 c4 3c 00
	00 00		 mov	 DWORD PTR _mucce$[ebp], 60 ; 0000003cH
  00025	c7 45 c8 04 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+4], 4
  0002c	89 5d e0	 mov	 DWORD PTR _mucce$[ebp+28], ebx
  0002f	89 45 dc	 mov	 DWORD PTR _mucce$[ebp+24], eax
  00032	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 465  : 	switch (errCode) {

  0003e	b9 59 02 00 00	 mov	 ecx, 601		; 00000259H
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	3b c1		 cmp	 eax, ecx
  00048	89 45 0c	 mov	 DWORD PTR _errCode$[ebp], eax
  0004b	0f 8f d8 00 00
	00		 jg	 $L84313
  00051	0f 84 ab 00 00
	00		 je	 $L83563
  00057	8d 88 6d fe ff
	ff		 lea	 ecx, DWORD PTR [eax-403]
  0005d	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00060	0f 87 c3 00 00
	00		 ja	 $L84313
  00066	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L84316[ecx*4]
$L83521:

; 466  : 		case 403:
; 467  : 			sprintf(str, Translate("You cannot join this chat room, because you are banned."));

  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@EDEP@You?5cannot?5join?5this?5chat?5room?0?5@ ; `string'

; 468  : 			break;

  00072	e9 90 00 00 00	 jmp	 $L84315
$L83525:

; 469  : 		case 404:
; 470  : 			sprintf(str, Translate("Chat room not found."));

  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@CFAF@Chat?5room?5not?5found?4?$AA@ ; `string'

; 471  : 			break;

  0007c	e9 86 00 00 00	 jmp	 $L84315
$L83529:

; 472  : 		case 407:
; 473  : 			sprintf(str, Translate("This is a private chat room and you are not one of the members."));

  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@NHNK@This?5is?5a?5private?5chat?5room?5and?5@ ; `string'

; 474  : 			break;

  00086	eb 7f		 jmp	 SHORT $L84315
$L83533:

; 475  : 		case 408:
; 476  : 			sprintf(str, Translate("You cannot send any message unless you join this chat room."));

  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@KKDJ@You?5cannot?5send?5any?5message?5unle@ ; `string'

; 477  : 			break;

  0008d	eb 78		 jmp	 SHORT $L84315
$L83537:

; 478  : 		case 410:
; 479  : 			sprintf(str, Translate("Chat room with already created."));

  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@JNCI@Chat?5room?5with?5already?5created?4?$AA@ ; `string'

; 480  : 			break;

  00094	eb 71		 jmp	 SHORT $L84315
$L83541:

; 481  : 		case 411:
; 482  : 			sprintf(str, Translate("Nickname '%s' is already registered."),
; 483  : 				JabberXmlGetAttrValue(errorNode, "n"));

  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000a1	59		 pop	 ecx
  000a2	59		 pop	 ecx
  000a3	50		 push	 eax
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OLCD@Nickname?5?8?$CFs?8?5is?5already?5registe@ ; `string'

; 484  : 			break;

  000a9	e9 81 00 00 00	 jmp	 $L84314
$L83545:

; 485  : 		case 412:
; 486  : 			sprintf(str, Translate("Nickname already in use, please try another one. Hint: '%s' is free."),
; 487  : 				JabberXmlGetAttrValue(errorNode, "free"));

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KHAP@free?$AA@ ; `string'
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000b9	59		 pop	 ecx
  000ba	59		 pop	 ecx
  000bb	50		 push	 eax
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@LBBH@Nickname?5already?5in?5use?0?5please?5@ ; `string'

; 488  : 			break;

  000c1	eb 6c		 jmp	 SHORT $L84314
$L83550:

; 489  : 		case 413:
; 490  : 			sprintf(str, Translate("You cannot register more than %s nicknames."),
; 491  : 				JabberXmlGetAttrValue(errorNode, "num"));

  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03EBLA@num?$AA@ ; `string'
  000c8	56		 push	 esi
  000c9	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000ce	59		 pop	 ecx
  000cf	59		 pop	 ecx
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@BNEG@You?5cannot?5register?5more?5than?5?$CFs@ ; `string'

; 492  : 			break;

  000d6	eb 57		 jmp	 SHORT $L84314
$L83555:

; 493  : 		case 414:
; 494  : 			sprintf(str, Translate("You cannot create more than %s chat rooms."),
; 495  : 				JabberXmlGetAttrValue(errorNode, "num"));

  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03EBLA@num?$AA@ ; `string'
  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000e3	59		 pop	 ecx
  000e4	59		 pop	 ecx
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@MBHC@You?5cannot?5create?5more?5than?5?$CFs?5c@ ; `string'

; 496  : 			break;

  000eb	eb 42		 jmp	 SHORT $L84314
$L83559:

; 497  : 		case 415:
; 498  : 			sprintf(str, Translate("You cannot join more than %s chat rooms."),
; 499  : 				JabberXmlGetAttrValue(errorNode, "num"));

  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03EBLA@num?$AA@ ; `string'
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000f8	59		 pop	 ecx
  000f9	59		 pop	 ecx
  000fa	50		 push	 eax
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@OPNN@You?5cannot?5join?5more?5than?5?$CFs?5cha@ ; `string'

; 500  : 			break;

  00100	eb 2d		 jmp	 SHORT $L84314
$L83563:

; 501  : 		case 601:
; 502  : 			sprintf(str, Translate("Anonymous nicknames are not allowed in this chat room."));

  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@BBKF@Anonymous?5nicknames?5are?5not?5allo@ ; `string'
$L84315:
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0010c	6a 00		 push	 0
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00113	ff 50 24	 call	 DWORD PTR [eax+36]
  00116	50		 push	 eax
  00117	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  0011d	50		 push	 eax
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00124	83 c4 14	 add	 esp, 20			; 00000014H

; 503  : 			break;

  00127	eb 29		 jmp	 SHORT $L83518
$L84313:

; 504  : 		default:
; 505  : 			sprintf(str, Translate("Unknown error code : %d"), errCode);

  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@GEGM@Unknown?5error?5code?5?3?5?$CFd?$AA@ ; `string'
$L84314:
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00134	6a 00		 push	 0
  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  0013b	ff 50 24	 call	 DWORD PTR [eax+36]
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00141	50		 push	 eax
  00142	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  00148	50		 push	 eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83518:

; 506  : 			break;
; 507  : 	}
; 508  : 	mucce.pszText = str;

  00152	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]

; 509  : 	CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  00158	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  0015d	89 45 f0	 mov	 DWORD PTR _mucce$[ebp+44], eax
  00160	8d 45 c4	 lea	 eax, DWORD PTR _mucce$[ebp]
  00163	50		 push	 eax
  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00169	6a 00		 push	 0
  0016b	56		 push	 esi
  0016c	ff 50 24	 call	 DWORD PTR [eax+36]
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 510  : 	if (proto->jabberOnline) {

  00172	83 bf 78 01 00
	00 00		 cmp	 DWORD PTR [edi+376], 0
  00179	0f 84 a6 00 00
	00		 je	 $L83579

; 511  : 		switch (errCode) {

  0017f	81 7d 0c 9c 01
	00 00		 cmp	 DWORD PTR _errCode$[ebp], 412 ; 0000019cH
  00186	74 4e		 je	 SHORT $L83577
  00188	81 7d 0c 59 02
	00 00		 cmp	 DWORD PTR _errCode$[ebp], 601 ; 00000259H
  0018f	0f 85 90 00 00
	00		 jne	 $L83579

; 522  : 				}
; 523  : 				break;
; 524  : 			case 601:
; 525  : 				item = JabberListGetItemPtr(proto, LIST_CHATROOM, from);

  00195	53		 push	 ebx
  00196	6a 01		 push	 1
  00198	57		 push	 edi
  00199	e8 00 00 00 00	 call	 _JabberListGetItemPtr

; 526  : 				if (item!=NULL) {

  0019e	33 c9		 xor	 ecx, ecx
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a3	3b c1		 cmp	 eax, ecx
  001a5	74 7e		 je	 SHORT $L83579

; 527  : 					mucce.iType = MUCC_EVENT_JOIN;
; 528  : 					mucce.dwFlags = 0;
; 529  : 					mucce.pszModule = proto->iface.m_szModuleName;

  001a7	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  001aa	c7 45 c8 80 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+4], 128 ; 00000080H
  001b1	89 4d cc	 mov	 DWORD PTR _mucce$[ebp+8], ecx
  001b4	89 55 dc	 mov	 DWORD PTR _mucce$[ebp+24], edx

; 530  : 					mucce.pszID = from;

  001b7	89 5d e0	 mov	 DWORD PTR _mucce$[ebp+28], ebx

; 531  : 					mucce.pszName = item->roomName;

  001ba	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  001bd	89 45 e4	 mov	 DWORD PTR _mucce$[ebp+32], eax

; 532  : 					mucce.pszNick = NULL;
; 533  : 					CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  001c0	8d 45 c4	 lea	 eax, DWORD PTR _mucce$[ebp]
  001c3	50		 push	 eax
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001c9	51		 push	 ecx
  001ca	56		 push	 esi
  001cb	89 4d ec	 mov	 DWORD PTR _mucce$[ebp+40], ecx
  001ce	ff 50 24	 call	 DWORD PTR [eax+36]
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 534  : 				}
; 535  : 				break;

  001d4	eb 4f		 jmp	 SHORT $L83579
$L83577:

; 512  : 			case 412:
; 513  : 				item = JabberListGetItemPtr(proto, LIST_CHATROOM, from);

  001d6	53		 push	 ebx
  001d7	6a 01		 push	 1
  001d9	57		 push	 edi
  001da	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 514  : 				if (item!=NULL) {

  001e2	85 c0		 test	 eax, eax
  001e4	74 3f		 je	 SHORT $L83579

; 515  : 					mucce.iType = MUCC_EVENT_JOIN;
; 516  : 					mucce.dwFlags = MUCC_EF_ROOM_NICKNAMES;
; 517  : 					mucce.pszModule = proto->iface.m_szModuleName;

  001e6	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 518  : 					mucce.pszID = from;
; 519  : 					mucce.pszName = item->roomName;
; 520  : 					mucce.pszNick = JabberXmlGetAttrValue(errorNode, "free");

  001e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KHAP@free?$AA@ ; `string'
  001ee	ff 75 10	 push	 DWORD PTR _errorNode$[ebp]
  001f1	c7 45 c8 80 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+4], 128 ; 00000080H
  001f8	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _mucce$[ebp+8], 2
  001ff	89 4d dc	 mov	 DWORD PTR _mucce$[ebp+24], ecx
  00202	89 5d e0	 mov	 DWORD PTR _mucce$[ebp+28], ebx
  00205	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00208	89 45 e4	 mov	 DWORD PTR _mucce$[ebp+32], eax
  0020b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00210	89 45 ec	 mov	 DWORD PTR _mucce$[ebp+40], eax

; 521  : 					CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  00213	8d 45 c4	 lea	 eax, DWORD PTR _mucce$[ebp]
  00216	50		 push	 eax
  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0021c	6a 00		 push	 0
  0021e	56		 push	 esi
  0021f	ff 50 24	 call	 DWORD PTR [eax+36]
  00222	83 c4 14	 add	 esp, 20			; 00000014H
$L83579:

; 536  : 		}
; 537  : 	}
; 538  : 	return 1;

  00225	6a 01		 push	 1
  00227	58		 pop	 eax
  00228	5f		 pop	 edi
  00229	5e		 pop	 esi
  0022a	5b		 pop	 ebx

; 539  : }

  0022b	c9		 leave
  0022c	c3		 ret	 0
$L84316:
  0022d	00 00 00 00	 DD	 $L83521
  00231	00 00 00 00	 DD	 $L83525
  00235	00 00 00 00	 DD	 $L84313
  00239	00 00 00 00	 DD	 $L84313
  0023d	00 00 00 00	 DD	 $L83529
  00241	00 00 00 00	 DD	 $L83533
  00245	00 00 00 00	 DD	 $L84313
  00249	00 00 00 00	 DD	 $L83537
  0024d	00 00 00 00	 DD	 $L83541
  00251	00 00 00 00	 DD	 $L83545
  00255	00 00 00 00	 DD	 $L83550
  00259	00 00 00 00	 DD	 $L83555
  0025d	00 00 00 00	 DD	 $L83559
_TlenMUCRecvError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@LPOI@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMinv?5to?$DN?8?$CFs?8?$DO?$DMr?$DO?$DM?1@ ; `string'
;	COMDAT ??_C@_0DB@LPOI@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMinv?5to?$DN?8?$CFs?8?$DO?$DMr?$DO?$DM?1@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_0DB@LPOI@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMinv?5to?$DN?8?$CFs?8?$DO?$DMr?$DO?$DM?1@ DB '<'
	DB	'm to=''%s''><x><inv to=''%s''><r></r></inv></x></m>', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenMUCSendInvitation
_TEXT	SEGMENT
_proto$ = 8
_roomID$ = 12
_user$ = 16
_TlenMUCSendInvitation PROC NEAR			; COMDAT

; 542  : 	if (!proto->jabberOnline) {

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _proto$[esp-4]
  00004	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  0000b	75 04		 jne	 SHORT $L83593

; 543  : 		return 1;

  0000d	6a 01		 push	 1
  0000f	58		 pop	 eax

; 547  : }

  00010	c3		 ret	 0
$L83593:

; 544  : 	}
; 545  : 	JabberSend(proto, "<m to='%s'><x><inv to='%s'><r></r></inv></x></m>", roomID, user);

  00011	ff 74 24 0c	 push	 DWORD PTR _user$[esp-4]
  00015	ff 74 24 0c	 push	 DWORD PTR _roomID$[esp]
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@LPOI@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMx?$DO?$DMinv?5to?$DN?8?$CFs?8?$DO?$DMr?$DO?$DM?1@ ; `string'
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _JabberSend
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 546  : 	return 0;

  00027	33 c0		 xor	 eax, eax

; 547  : }

  00029	c3		 ret	 0
_TlenMUCSendInvitation ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_0N@JCIP@?$DMp?5to?$DN?8?$CFs?8?1?$DO?$AA@	; `string'
PUBLIC	??_C@_0CC@DEJE@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMs?$DOunavailable?$DM?1s?$DO?$DM?1p@ ; `string'
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@JCIP@?$DMp?5to?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0N@JCIP@?$DMp?5to?$DN?8?$CFs?8?1?$DO?$AA@ DB '<p to=''%s''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CC@DEJE@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMs?$DOunavailable?$DM?1s?$DO?$DM?1p@
_DATA	SEGMENT
??_C@_0CC@DEJE@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMs?$DOunavailable?$DM?1s?$DO?$DM?1p@ DB '<'
	DB	'p to=''%s''><s>unavailable</s></p>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenMUCSendPresence
_TEXT	SEGMENT
_proto$ = 8
_roomID$ = 12
_nick$ = 16
_desiredStatus$ = 20
_str$ = -512
_TlenMUCSendPresence PROC NEAR				; COMDAT

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 02 00
	00		 sub	 esp, 512		; 00000200H
  00009	56		 push	 esi

; 551  : 	char str[512];
; 552  : 	char *jid;
; 553  : 	JABBER_LIST_ITEM *item;
; 554  : 	if (!proto->jabberOnline) {

  0000a	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000d	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00014	75 08		 jne	 SHORT $L83607

; 555  : 		return 1;

  00016	6a 01		 push	 1
  00018	58		 pop	 eax
  00019	e9 e2 00 00 00	 jmp	 $L83603
$L83607:
  0001e	53		 push	 ebx

; 556  : 	}
; 557  : 	if (nick!=NULL) {

  0001f	8b 5d 10	 mov	 ebx, DWORD PTR _nick$[ebp]
  00022	85 db		 test	 ebx, ebx
  00024	57		 push	 edi
  00025	74 20		 je	 SHORT $L83609

; 558  : 		_snprintf(str, sizeof(str), "%s/%s", roomID, nick);

  00027	53		 push	 ebx
  00028	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05LELA@?$CFs?1?$CFs?$AA@ ; `string'
  00036	68 00 02 00 00	 push	 512			; 00000200H
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 559  : 	} else {

  00045	eb 1d		 jmp	 SHORT $L83610
$L83609:

; 560  : 		_snprintf(str, sizeof(str), "%s", roomID);

  00047	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  0004a	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@ ; `string'
  00055	68 00 02 00 00	 push	 512			; 00000200H
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$L83610:

; 561  : 	}
; 562  : 	if ((jid = JabberTextEncode(str))!=NULL) {

  00064	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _str$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _JabberTextEncode
  00070	8b f8		 mov	 edi, eax
  00072	59		 pop	 ecx
  00073	85 ff		 test	 edi, edi
  00075	0f 84 81 00 00
	00		 je	 $L83613

; 563  : 		switch (desiredStatus) {

  0007b	81 7d 14 88 9c
	00 00		 cmp	 DWORD PTR _desiredStatus$[ebp], 40072 ; 00009c88H
  00082	74 2e		 je	 SHORT $L83618

; 572  : 					}
; 573  : 				}
; 574  : 				break;
; 575  : 			default:
; 576  : 				item = JabberListGetItemPtr(proto, LIST_CHATROOM, roomID);

  00084	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  00087	6a 01		 push	 1
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 577  : 				if (item!=NULL) {

  00092	85 c0		 test	 eax, eax
  00094	74 5e		 je	 SHORT $L83626

; 578  : 					JabberSend(proto, "<p to='%s'><s>unavailable</s></p>", jid);

  00096	57		 push	 edi
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@DEJE@?$DMp?5to?$DN?8?$CFs?8?$DO?$DMs?$DOunavailable?$DM?1s?$DO?$DM?1p@ ; `string'
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 _JabberSend

; 579  : 					JabberListRemove(proto, LIST_CHATROOM, roomID);

  000a2	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  000a5	6a 01		 push	 1
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 _JabberListRemove
  000ad	83 c4 18	 add	 esp, 24			; 00000018H

; 580  : 				}
; 581  : 				break;

  000b0	eb 42		 jmp	 SHORT $L83626
$L83618:

; 564  : 			case ID_STATUS_ONLINE:
; 565  : 				JabberSend(proto, "<p to='%s'/>", jid);

  000b2	57		 push	 edi
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@JCIP@?$DMp?5to?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 _JabberSend

; 566  : 				item = JabberListGetItemPtr(proto, LIST_CHATROOM, roomID);

  000be	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  000c1	6a 01		 push	 1
  000c3	56		 push	 esi
  000c4	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  000c9	8b f0		 mov	 esi, eax
  000cb	83 c4 18	 add	 esp, 24			; 00000018H

; 567  : 				if (item!=NULL) {

  000ce	85 f6		 test	 esi, esi
  000d0	74 22		 je	 SHORT $L83626

; 568  : 					if (item->nick!=NULL) mir_free(item->nick);

  000d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d5	85 c0		 test	 eax, eax
  000d7	74 08		 je	 SHORT $L83623
  000d9	50		 push	 eax
  000da	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000e0	59		 pop	 ecx
$L83623:

; 569  : 					item->nick = NULL;

  000e1	83 66 0c 00	 and	 DWORD PTR [esi+12], 0

; 570  : 					if (nick!=NULL) {

  000e5	85 db		 test	 ebx, ebx
  000e7	74 0b		 je	 SHORT $L83626

; 571  : 						item->nick = mir_strdup(nick);

  000e9	53		 push	 ebx
  000ea	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  000f0	59		 pop	 ecx
  000f1	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$L83626:

; 582  : 		}
; 583  : 		mir_free(jid);

  000f4	57		 push	 edi
  000f5	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000fb	59		 pop	 ecx
$L83613:
  000fc	5f		 pop	 edi

; 584  : 	}
; 585  : 	return 0;

  000fd	33 c0		 xor	 eax, eax
  000ff	5b		 pop	 ebx
$L83603:
  00100	5e		 pop	 esi

; 586  : }

  00101	c9		 leave
  00102	c3		 ret	 0
_TlenMUCSendPresence ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@JKDJ@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?8?$CFd?8?5s?$DN?8?$CFd?8?5f?$DN?8?$CF@ ; `string'
;	COMDAT ??_C@_0DH@JKDJ@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?8?$CFd?8?5s?$DN?8?$CFd?8?5f?$DN?8?$CF@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_0DH@JKDJ@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?8?$CFd?8?5s?$DN?8?$CFd?8?5f?$DN?8?$CF@ DB '<'
	DB	'm to=''%s''><b n=''%d'' s=''%d'' f=''%d'' c=''%06X''>%s</b></'
	DB	'm>', 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenMUCSendMessage
_TEXT	SEGMENT
_proto$ = 8
_event$ = 12
_TlenMUCSendMessage PROC NEAR				; COMDAT

; 590  : 	char *msg, *jid;
; 591  : 	int style;
; 592  : 
; 593  : 	if (!proto->jabberOnline) {

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _proto$[esp-4]
  00004	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  0000b	75 04		 jne	 SHORT $L83639

; 594  : 		return 1;

  0000d	6a 01		 push	 1
  0000f	58		 pop	 eax

; 608  : }

  00010	c3		 ret	 0
$L83639:
  00011	53		 push	 ebx
  00012	56		 push	 esi

; 595  : 	}
; 596  : 	if ((msg = JabberTextEncode(event->pszText))!=NULL) {

  00013	8b 74 24 10	 mov	 esi, DWORD PTR _event$[esp+4]
  00017	ff 76 2c	 push	 DWORD PTR [esi+44]
  0001a	e8 00 00 00 00	 call	 _JabberTextEncode
  0001f	8b d8		 mov	 ebx, eax
  00021	59		 pop	 ecx
  00022	85 db		 test	 ebx, ebx
  00024	74 5c		 je	 SHORT $L83641
  00026	57		 push	 edi

; 597  : 		if ((jid = JabberTextEncode(event->pszID))!=NULL) {

  00027	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002a	e8 00 00 00 00	 call	 _JabberTextEncode
  0002f	8b f8		 mov	 edi, eax
  00031	59		 pop	 ecx
  00032	85 ff		 test	 edi, edi
  00034	74 43		 je	 SHORT $L83643

; 598  : 			style = 0;
; 599  : 			if (event->dwFlags & MUCC_EF_FONT_BOLD) style |=1;

  00036	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00039	33 c9		 xor	 ecx, ecx
  0003b	f6 c4 01	 test	 ah, 1
  0003e	74 03		 je	 SHORT $L83644
  00040	6a 01		 push	 1
  00042	59		 pop	 ecx
$L83644:

; 600  : 			if (event->dwFlags & MUCC_EF_FONT_ITALIC) style |=2;

  00043	f6 c4 02	 test	 ah, 2
  00046	74 03		 je	 SHORT $L83645
  00048	83 c9 02	 or	 ecx, 2
$L83645:

; 601  : 			if (event->dwFlags & MUCC_EF_FONT_UNDERLINE) style |=4;

  0004b	f6 c4 04	 test	 ah, 4
  0004e	74 03		 je	 SHORT $L83646
  00050	83 c9 04	 or	 ecx, 4
$L83646:

; 602  : 			JabberSend(proto, "<m to='%s'><b n='%d' s='%d' f='%d' c='%06X'>%s</b></m>", jid, event->iFont+1, event->iFontSize, style, event->color, msg);

  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	53		 push	 ebx
  00057	ff 76 14	 push	 DWORD PTR [esi+20]
  0005a	40		 inc	 eax
  0005b	51		 push	 ecx
  0005c	ff 76 10	 push	 DWORD PTR [esi+16]
  0005f	50		 push	 eax
  00060	57		 push	 edi
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JKDJ@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMb?5n?$DN?8?$CFd?8?5s?$DN?8?$CFd?8?5f?$DN?8?$CF@ ; `string'
  00066	ff 74 24 2c	 push	 DWORD PTR _proto$[esp+36]
  0006a	e8 00 00 00 00	 call	 _JabberSend

; 603  : 			mir_free(jid);

  0006f	57		 push	 edi
  00070	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00076	83 c4 24	 add	 esp, 36			; 00000024H
$L83643:

; 604  : 		}
; 605  : 		mir_free(msg);

  00079	53		 push	 ebx
  0007a	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
$L83641:
  00082	5e		 pop	 esi

; 606  : 	}
; 607  : 	return 0;

  00083	33 c0		 xor	 eax, eax
  00085	5b		 pop	 ebx

; 608  : }

  00086	c3		 ret	 0
_TlenMUCSendMessage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@FDCN@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMsubject?$DO?$CFs?$DM?1subject?$DO@ ; `string'
;	COMDAT ??_C@_0CF@FDCN@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMsubject?$DO?$CFs?$DM?1subject?$DO@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_0CF@FDCN@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMsubject?$DO?$CFs?$DM?1subject?$DO@ DB '<'
	DB	'm to=''%s''><subject>%s</subject></m>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenMUCSendTopic
_TEXT	SEGMENT
_proto$ = 8
_event$ = 12
_TlenMUCSendTopic PROC NEAR				; COMDAT

; 611  : {

  00000	53		 push	 ebx

; 612  : 	char *msg, *jid;
; 613  : 	if (!proto->jabberOnline) {

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _proto$[esp]
  00005	83 bb 78 01 00
	00 00		 cmp	 DWORD PTR [ebx+376], 0
  0000c	75 05		 jne	 SHORT $L83655

; 614  : 		return 1;

  0000e	6a 01		 push	 1
  00010	58		 pop	 eax
  00011	5b		 pop	 ebx

; 624  : }

  00012	c3		 ret	 0
$L83655:
  00013	56		 push	 esi

; 615  : 	}
; 616  : 	if ((msg = JabberTextEncode(event->pszText))!=NULL) {

  00014	8b 74 24 10	 mov	 esi, DWORD PTR _event$[esp+4]
  00018	57		 push	 edi
  00019	ff 76 2c	 push	 DWORD PTR [esi+44]
  0001c	e8 00 00 00 00	 call	 _JabberTextEncode
  00021	8b f8		 mov	 edi, eax
  00023	59		 pop	 ecx
  00024	85 ff		 test	 edi, edi
  00026	74 2e		 je	 SHORT $L83657

; 617  : 		if ((jid = JabberTextEncode(event->pszID))!=NULL) {

  00028	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002b	e8 00 00 00 00	 call	 _JabberTextEncode
  00030	8b f0		 mov	 esi, eax
  00032	59		 pop	 ecx
  00033	85 f6		 test	 esi, esi
  00035	74 17		 je	 SHORT $L83659

; 618  : 			JabberSend(proto, "<m to='%s'><subject>%s</subject></m>", jid, msg);

  00037	57		 push	 edi
  00038	56		 push	 esi
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FDCN@?$DMm?5to?$DN?8?$CFs?8?$DO?$DMsubject?$DO?$CFs?$DM?1subject?$DO@ ; `string'
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 _JabberSend

; 619  : 			mir_free(jid);

  00044	56		 push	 esi
  00045	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
$L83659:

; 620  : 		}
; 621  : 		mir_free(msg);

  0004e	57		 push	 edi
  0004f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00055	59		 pop	 ecx
$L83657:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 622  : 	}
; 623  : 	return 0;

  00058	33 c0		 xor	 eax, eax
  0005a	5b		 pop	 ebx

; 624  : }

  0005b	c3		 ret	 0
_TlenMUCSendTopic ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DEKK@mim_?$CFd?$AA@			; `string'
PUBLIC	??_C@_0CF@DEDL@?$DMiq?5to?$DN?8c?8?5type?$DN?83?8?5n?$DN?8?$CFs?8?5id?$DN?8?$CF@ ; `string'
PUBLIC	??_C@_0BH@BPKP@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BO@HIHI@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CF@IOLE@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?5n?$DN?8?$CF@ ; `string'
PUBLIC	??_C@_0CE@HIDM@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?5k?$DN?8u@ ; `string'
PUBLIC	??_C@_0BO@LAC@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BP@KCGP@?$DMiq?5to?$DN?8?$CFs?8?5type?$DN?8?$CFd?8?5k?$DN?8?$CFd?8?1?$DO?$AA@ ; `string'
EXTRN	_JabberListAdd:NEAR
;	COMDAT ??_C@_06DEKK@mim_?$CFd?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_06DEKK@mim_?$CFd?$AA@ DB 'mim_%d', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@DEDL@?$DMiq?5to?$DN?8c?8?5type?$DN?83?8?5n?$DN?8?$CFs?8?5id?$DN?8?$CF@
_DATA	SEGMENT
??_C@_0CF@DEDL@?$DMiq?5to?$DN?8c?8?5type?$DN?83?8?5n?$DN?8?$CFs?8?5id?$DN?8?$CF@ DB '<'
	DB	'iq to=''c'' type=''3'' n=''%s'' id=''%s''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@BPKP@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BH@BPKP@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?1?$DO?$AA@ DB '<iq '
	DB	'to=''c'' type=''%d''/>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HIHI@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BO@HIHI@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'iq to=''c'' type=''%d'' p=''%s''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@IOLE@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?5n?$DN?8?$CF@
_DATA	SEGMENT
??_C@_0CF@IOLE@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?5n?$DN?8?$CF@ DB '<'
	DB	'iq to=''c'' type=''%d'' p=''%s'' n=''%d''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CE@HIDM@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?5k?$DN?8u@
_DATA	SEGMENT
??_C@_0CE@HIDM@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?5k?$DN?8u@ DB '<'
	DB	'iq to=''c'' type=''%d'' n=''%s'' k=''u''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@LAC@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BO@LAC@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'iq to=''c'' type=''%d'' n=''%s''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KCGP@?$DMiq?5to?$DN?8?$CFs?8?5type?$DN?8?$CFd?8?5k?$DN?8?$CFd?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BP@KCGP@?$DMiq?5to?$DN?8?$CFs?8?5type?$DN?8?$CFd?8?5k?$DN?8?$CFd?8?1?$DO?$AA@ DB '<'
	DB	'iq to=''%s'' type=''%d'' k=''%d''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenMUCSendQuery
_TEXT	SEGMENT
_proto$ = 8
_type$ = 12
_parent$ = 16
_page$ = 20
_serialId$83672 = -32
_TlenMUCSendQuery PROC NEAR				; COMDAT

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi

; 628  : 	if (!proto->jabberOnline) {

  00007	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000a	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00011	75 08		 jne	 SHORT $L83670

; 629  : 		return 1;

  00013	6a 01		 push	 1
  00015	58		 pop	 eax
  00016	e9 d9 00 00 00	 jmp	 $L83669
$L83670:

; 630  : 	}
; 631  : 	if (type==3) { // find chat room by name

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0001e	83 f8 03	 cmp	 eax, 3
  00021	75 4c		 jne	 SHORT $L83671
  00023	57		 push	 edi

; 632  : 		char serialId[32];
; 633  : 		JABBER_LIST_ITEM *item;
; 634  : 		sprintf(serialId, JABBER_IQID"%d", JabberSerialNext(proto));

  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _JabberSerialNext
  0002a	50		 push	 eax
  0002b	8d 45 e0	 lea	 eax, DWORD PTR _serialId$83672[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06DEKK@mim_?$CFd?$AA@ ; `string'
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 635  : 		item = JabberListAdd(proto, LIST_SEARCH, serialId);

  0003a	8d 45 e0	 lea	 eax, DWORD PTR _serialId$83672[ebp]
  0003d	50		 push	 eax
  0003e	6a 04		 push	 4
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _JabberListAdd

; 636  : 		item->roomName = mir_strdup(parent);

  00046	ff 75 10	 push	 DWORD PTR _parent$[ebp]
  00049	8b f8		 mov	 edi, eax
  0004b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00051	89 47 54	 mov	 DWORD PTR [edi+84], eax

; 637  : 		JabberSend(proto, "<iq to='c' type='3' n='%s' id='%s'/>", parent, serialId);

  00054	8d 45 e0	 lea	 eax, DWORD PTR _serialId$83672[ebp]
  00057	50		 push	 eax
  00058	ff 75 10	 push	 DWORD PTR _parent$[ebp]
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@DEDL@?$DMiq?5to?$DN?8c?8?5type?$DN?83?8?5n?$DN?8?$CFs?8?5id?$DN?8?$CF@ ; `string'
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _JabberSend
  00066	83 c4 30	 add	 esp, 48			; 00000030H
  00069	5f		 pop	 edi

; 638  : 	} else {

  0006a	e9 83 00 00 00	 jmp	 $L83695
$L83671:

; 639  : 		if (parent==NULL) {

  0006f	8b 55 10	 mov	 edx, DWORD PTR _parent$[ebp]
  00072	85 d2		 test	 edx, edx
  00074	75 11		 jne	 SHORT $L83678

; 640  : 			JabberSend(proto, "<iq to='c' type='%d'/>", type);

  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@BPKP@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?1?$DO?$AA@ ; `string'
  0007c	56		 push	 esi
  0007d	e8 00 00 00 00	 call	 _JabberSend
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 641  : 		} else { // 1 - groups, 2 - chat rooms, 7 - user nicks, 8 - user rooms

  00085	eb 6b		 jmp	 SHORT $L83695
$L83678:

; 642  : 			if (type==1 || (type==2 && page==0) || type==7 || type==8) {

  00087	83 f8 01	 cmp	 eax, 1
  0008a	74 56		 je	 SHORT $L83682
  0008c	8b 4d 14	 mov	 ecx, DWORD PTR _page$[ebp]
  0008f	83 f8 02	 cmp	 eax, 2
  00092	75 04		 jne	 SHORT $L83683
  00094	85 c9		 test	 ecx, ecx
  00096	74 4a		 je	 SHORT $L83682
$L83683:
  00098	83 f8 07	 cmp	 eax, 7
  0009b	74 45		 je	 SHORT $L83682
  0009d	83 f8 08	 cmp	 eax, 8
  000a0	74 40		 je	 SHORT $L83682

; 644  : 			} else if (type==2) {

  000a2	83 f8 02	 cmp	 eax, 2
  000a5	75 0a		 jne	 SHORT $L83686

; 645  : 				JabberSend(proto, "<iq to='c' type='%d' p='%s' n='%d'/>", type, parent, page);

  000a7	51		 push	 ecx
  000a8	52		 push	 edx
  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@IOLE@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?5n?$DN?8?$CF@ ; `string'

; 646  : 			} else if (type==6) {

  000af	eb 26		 jmp	 SHORT $L84326
$L83686:
  000b1	83 f8 06	 cmp	 eax, 6
  000b4	75 14		 jne	 SHORT $L83689

; 647  : 				if (page) {

  000b6	85 c9		 test	 ecx, ecx

; 648  : 					JabberSend(proto, "<iq to='c' type='%d' n='%s' k='u'/>", type, parent);

  000b8	52		 push	 edx
  000b9	50		 push	 eax
  000ba	74 07		 je	 SHORT $L83690
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HIDM@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?5k?$DN?8u@ ; `string'

; 649  : 				} else {

  000c1	eb 26		 jmp	 SHORT $L84325
$L83690:

; 650  : 					JabberSend(proto, "<iq to='c' type='%d' n='%s'/>", type, parent);

  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LAC@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5n?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'

; 651  : 				}
; 652  : 			} else if (type==4) { // list of users, admins etc.

  000c8	eb 1f		 jmp	 SHORT $L84325
$L83689:
  000ca	83 f8 04	 cmp	 eax, 4
  000cd	75 23		 jne	 SHORT $L83695

; 653  : 				JabberSend(proto, "<iq to='%s' type='%d' k='%d'/>", parent, type, page);

  000cf	51		 push	 ecx
  000d0	50		 push	 eax
  000d1	52		 push	 edx
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KCGP@?$DMiq?5to?$DN?8?$CFs?8?5type?$DN?8?$CFd?8?5k?$DN?8?$CFd?8?1?$DO?$AA@ ; `string'
$L84326:
  000d7	56		 push	 esi
  000d8	e8 00 00 00 00	 call	 _JabberSend
  000dd	83 c4 14	 add	 esp, 20			; 00000014H
  000e0	eb 10		 jmp	 SHORT $L83695
$L83682:

; 643  : 				JabberSend(proto, "<iq to='c' type='%d' p='%s'/>", type, parent);

  000e2	52		 push	 edx
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HIHI@?$DMiq?5to?$DN?8c?8?5type?$DN?8?$CFd?8?5p?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
$L84325:
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 _JabberSend
  000ef	83 c4 10	 add	 esp, 16			; 00000010H
$L83695:

; 654  : 			}
; 655  : 		}
; 656  : 	}
; 657  : 	return 0;

  000f2	33 c0		 xor	 eax, eax
$L83669:
  000f4	5e		 pop	 esi

; 658  : }

  000f5	c9		 leave
  000f6	c3		 ret	 0
_TlenMUCSendQuery ENDP
_TEXT	ENDS
PUBLIC	??_C@_05DLON@hello?$AA@				; `string'
PUBLIC	??_C@_0P@HJGC@MUCC?1NewWindow?$AA@		; `string'
EXTRN	_JabberListExist:NEAR
;	COMDAT ??_C@_05DLON@hello?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_05DLON@hello?$AA@ DB 'hello', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@HJGC@MUCC?1NewWindow?$AA@
_DATA	SEGMENT
??_C@_0P@HJGC@MUCC?1NewWindow?$AA@ DB 'MUCC/NewWindow', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenMUCCreateWindow
_TEXT	SEGMENT
_proto$ = 8
_roomID$ = 12
_roomName$ = 16
_roomFlags$ = 20
_nick$ = 24
_iqId$ = 28
_item$ = 8
_mucw$ = -40
_TlenMUCCreateWindow PROC NEAR				; COMDAT

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 662  : 	JABBER_LIST_ITEM *item;
; 663  : 	MUCCWINDOW mucw;
; 664  : 	if (!proto->jabberOnline || roomID==NULL) {

  00007	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000a	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00011	0f 84 e0 00 00
	00		 je	 $L83714
  00017	83 7d 0c 00	 cmp	 DWORD PTR _roomID$[ebp], 0
  0001b	0f 84 d6 00 00
	00		 je	 $L83714

; 666  : 	}
; 667  : 	if (JabberListExist(proto, LIST_CHATROOM, roomID)) {

  00021	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  00024	6a 01		 push	 1
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 _JabberListExist
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	85 c0		 test	 eax, eax

; 668  : 		return 0;

  00031	0f 85 bc 00 00
	00		 jne	 $L83725
  00037	53		 push	 ebx
  00038	57		 push	 edi

; 669  : 	}
; 670  : 	item = JabberListAdd(proto, LIST_CHATROOM, roomID);

  00039	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  0003c	6a 01		 push	 1
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _JabberListAdd

; 671  : 	if (roomName!=NULL) {

  00044	8b 5d 10	 mov	 ebx, DWORD PTR _roomName$[ebp]
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	8b f8		 mov	 edi, eax
  0004c	85 db		 test	 ebx, ebx
  0004e	89 7d 08	 mov	 DWORD PTR _item$[ebp], edi
  00051	74 0b		 je	 SHORT $L83717

; 672  : 		item->roomName = mir_strdup(roomName);

  00053	53		 push	 ebx
  00054	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0005a	59		 pop	 ecx
  0005b	89 47 54	 mov	 DWORD PTR [edi+84], eax
$L83717:

; 673  : 	}
; 674  : 	if (nick!=NULL) {

  0005e	8b 7d 18	 mov	 edi, DWORD PTR _nick$[ebp]
  00061	85 ff		 test	 edi, edi
  00063	74 0e		 je	 SHORT $L83719

; 675  : 		item->nick = mir_strdup(nick);

  00065	57		 push	 edi
  00066	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0006c	59		 pop	 ecx
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _item$[ebp]
  00070	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$L83719:

; 676  : 	}
; 677  : 	mucw.cbSize = sizeof(MUCCWINDOW);
; 678  : 	mucw.iType = MUCC_WINDOW_CHATROOM;
; 679  : 	mucw.pszModule = proto->iface.m_szModuleName;

  00073	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00076	c7 45 d8 28 00
	00 00		 mov	 DWORD PTR _mucw$[ebp], 40 ; 00000028H
  0007d	89 45 e4	 mov	 DWORD PTR _mucw$[ebp+12], eax

; 680  : 	mucw.pszModuleName = proto->iface.m_szProtoName;

  00080	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00083	89 45 e8	 mov	 DWORD PTR _mucw$[ebp+16], eax

; 681  : 	mucw.pszID = roomID;

  00086	8b 45 0c	 mov	 eax, DWORD PTR _roomID$[ebp]
  00089	89 45 ec	 mov	 DWORD PTR _mucw$[ebp+20], eax

; 682  : 	mucw.pszName = roomName;
; 683  : 	mucw.pszNick = nick;
; 684  : 	mucw.dwFlags = roomFlags;

  0008c	8b 45 14	 mov	 eax, DWORD PTR _roomFlags$[ebp]
  0008f	89 45 e0	 mov	 DWORD PTR _mucw$[ebp+8], eax

; 685  : 	mucw.pszStatusbarText = "hello";
; 686  : 	CallService(MS_MUCC_NEW_WINDOW, 0, (LPARAM) &mucw);

  00092	8d 45 d8	 lea	 eax, DWORD PTR _mucw$[ebp]
  00095	50		 push	 eax
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0009b	6a 00		 push	 0
  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@HJGC@MUCC?1NewWindow?$AA@ ; `string'
  000a2	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _mucw$[ebp+4], 1
  000a9	89 5d f0	 mov	 DWORD PTR _mucw$[ebp+24], ebx
  000ac	89 7d f8	 mov	 DWORD PTR _mucw$[ebp+32], edi
  000af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mucw$[ebp+36], OFFSET FLAT:??_C@_05DLON@hello?$AA@ ; `string'
  000b6	ff 50 24	 call	 DWORD PTR [eax+36]
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 687  : 	if (iqId != NULL) {

  000bc	83 7d 1c 00	 cmp	 DWORD PTR _iqId$[ebp], 0
  000c0	5f		 pop	 edi
  000c1	5b		 pop	 ebx
  000c2	74 2f		 je	 SHORT $L83725

; 688  : 		item = JabberListGetItemPtr(proto, LIST_INVITATIONS, iqId);

  000c4	ff 75 1c	 push	 DWORD PTR _iqId$[ebp]
  000c7	6a 03		 push	 3
  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 689  : 		if (item !=NULL) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0f		 je	 SHORT $L83727

; 690  : 			TlenMUCSendInvitation(proto, roomID, item->nick);

  000d6	ff 70 0c	 push	 DWORD PTR [eax+12]
  000d9	ff 75 0c	 push	 DWORD PTR _roomID$[ebp]
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 _TlenMUCSendInvitation
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83727:

; 691  : 		}
; 692  : 		JabberListRemove(proto, LIST_INVITATIONS, iqId);

  000e5	ff 75 1c	 push	 DWORD PTR _iqId$[ebp]
  000e8	6a 03		 push	 3
  000ea	56		 push	 esi
  000eb	e8 00 00 00 00	 call	 _JabberListRemove
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83725:

; 693  : 	}
; 694  : 	return 0;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 03		 jmp	 SHORT $L83709
$L83714:

; 665  : 		return 1;

  000f7	6a 01		 push	 1
  000f9	58		 pop	 eax
$L83709:
  000fa	5e		 pop	 esi

; 695  : }

  000fb	c9		 leave
  000fc	c3		 ret	 0
_TlenMUCCreateWindow ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultChatGroups
PUBLIC	??_C@_01JME@l?$AA@				; `string'
PUBLIC	??_C@_01FOFA@p?$AA@				; `string'
PUBLIC	??_C@_00A@?$AA@					; `string'
PUBLIC	??_C@_01JAP@i?$AA@				; `string'
PUBLIC	??_C@_01ECJ@3?$AA@				; `string'
PUBLIC	??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@		; `string'
EXTRN	_JabberXmlGetChild:NEAR
;	COMDAT ??_C@_00A@?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??_C@_01JME@l?$AA@
_DATA	SEGMENT
??_C@_01JME@l?$AA@ DB 'l', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT
??_C@_01FOFA@p?$AA@ DB 'p', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT
??_C@_01JAP@i?$AA@ DB 'i', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT
??_C@_01ECJ@3?$AA@ DB '3', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@
_DATA	SEGMENT
??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ DB 'MUCC/QueryResult', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultChatGroups
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_p$ = -8
_n$ = -4
_i$ = 12
_j$ = 8
_queryResult$ = -44
_TlenIqResultChatGroups PROC NEAR			; COMDAT

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 718  : 	XmlNode *lNode, *itemNode;
; 719  : 	char *p, *n, *id, *f;
; 720  : 	int i, j;
; 721  : 	MUCCQUERYRESULT queryResult;
; 722  : 
; 723  : 	if ((lNode=JabberXmlGetChild(iqNode, "l")) == NULL) return;

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JME@l?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00015	8b f0		 mov	 esi, eax
  00017	33 db		 xor	 ebx, ebx
  00019	59		 pop	 ecx
  0001a	3b f3		 cmp	 esi, ebx
  0001c	59		 pop	 ecx
  0001d	0f 84 4a 01 00
	00		 je	 $L83753

; 724  : 	p = JabberXmlGetAttrValue(iqNode, "p");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  00028	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  0002b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00030	59		 pop	 ecx

; 725  : 	if (p==NULL) {

  00031	3b c3		 cmp	 eax, ebx
  00033	59		 pop	 ecx
  00034	75 05		 jne	 SHORT $L83768

; 726  : 		p="";

  00036	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L83768:

; 727  : 	}
; 728  : 	p = JabberTextDecode(p);

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _JabberTextDecode

; 729  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 730  : 	queryResult.iType = MUCC_EVENT_QUERY_GROUPS;
; 731  : 	queryResult.pszModule = proto->iface.m_szModuleName;

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _proto$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  00047	c7 45 d4 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  0004e	c7 45 d8 20 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 288 ; 00000120H
  00055	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 732  : 	queryResult.pszParent = p;

  00058	89 45 e0	 mov	 DWORD PTR _queryResult$[ebp+12], eax
  0005b	89 4d dc	 mov	 DWORD PTR _queryResult$[ebp+8], ecx

; 733  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * lNode->numChild);

  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00064	c1 e0 03	 shl	 eax, 3
  00067	50		 push	 eax
  00068	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0006e	89 45 e8	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 734  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * lNode->numChild);

  00071	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00074	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00077	c1 e0 03	 shl	 eax, 3
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	ff 75 e8	 push	 DWORD PTR _queryResult$[ebp+20]
  0007f	e8 00 00 00 00	 call	 _memset
  00084	83 c4 14	 add	 esp, 20			; 00000014H

; 735  : 	for (i=j=0; i<lNode->numChild; i++) {

  00087	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0008a	89 5d 08	 mov	 DWORD PTR _j$[ebp], ebx
  0008d	89 5d 0c	 mov	 DWORD PTR _i$[ebp], ebx
  00090	0f 8e aa 00 00
	00		 jle	 $L83775
  00096	57		 push	 edi
$L83773:

; 736  : 		itemNode = lNode->child[i];

  00097	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]

; 737  : 		if (!strcmp(itemNode->name, "i")) {

  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000a2	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  000a5	ff 77 04	 push	 DWORD PTR [edi+4]
  000a8	e8 00 00 00 00	 call	 _strcmp
  000ad	59		 pop	 ecx
  000ae	85 c0		 test	 eax, eax
  000b0	59		 pop	 ecx
  000b1	75 7b		 jne	 SHORT $L83774

; 738  : 			queryResult.pItems[j].iCount = 0;

  000b3	8b 45 e8	 mov	 eax, DWORD PTR _queryResult$[ebp+20]

; 739  : 			if ((f = JabberXmlGetAttrValue(itemNode, "f")) != NULL) {

  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  000bb	57		 push	 edi
  000bc	83 64 03 10 00	 and	 DWORD PTR [ebx+eax+16], 0
  000c1	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000c6	59		 pop	 ecx
  000c7	85 c0		 test	 eax, eax
  000c9	59		 pop	 ecx
  000ca	74 19		 je	 SHORT $L83779

; 740  : 				queryResult.pItems[j].iCount = !strcmp(f, "3");

  000cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01ECJ@3?$AA@ ; `string'
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _strcmp
  000d7	59		 pop	 ecx
  000d8	f7 d8		 neg	 eax
  000da	59		 pop	 ecx
  000db	8b 4d e8	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  000de	1b c0		 sbb	 eax, eax
  000e0	40		 inc	 eax
  000e1	89 44 0b 10	 mov	 DWORD PTR [ebx+ecx+16], eax
$L83779:

; 741  : 			}
; 742  : 			n = JabberXmlGetAttrValue(itemNode, "n");

  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  000ea	57		 push	 edi
  000eb	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 743  : 			id = JabberXmlGetAttrValue(itemNode, "i");

  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000f5	57		 push	 edi
  000f6	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
  000f9	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 744  : 			if (n != NULL && id != NULL) {

  00101	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00105	74 27		 je	 SHORT $L83774
  00107	85 c0		 test	 eax, eax
  00109	74 23		 je	 SHORT $L83774

; 745  : 				queryResult.pItems[j].pszID =  JabberTextDecode(id);

  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _JabberTextDecode
  00111	8b 4d e8	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 746  : 				queryResult.pItems[j].pszName = JabberTextDecode(n);

  00114	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00117	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  0011a	e8 00 00 00 00	 call	 _JabberTextDecode

; 747  : 				j++;

  0011f	ff 45 08	 inc	 DWORD PTR _j$[ebp]
  00122	59		 pop	 ecx
  00123	59		 pop	 ecx
  00124	83 c3 18	 add	 ebx, 24			; 00000018H
  00127	8b 4d e8	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  0012a	89 44 0b ec	 mov	 DWORD PTR [ebx+ecx-20], eax
$L83774:
  0012e	ff 45 0c	 inc	 DWORD PTR _i$[ebp]
  00131	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  00134	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00137	0f 8c 5a ff ff
	ff		 jl	 $L83773
  0013d	33 db		 xor	 ebx, ebx
  0013f	5f		 pop	 edi
$L83775:

; 748  : 			}
; 749  : 		}
; 750  : 	}
; 751  : 	queryResult.iItemsNum = j;

  00140	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  00143	89 45 e4	 mov	 DWORD PTR _queryResult$[ebp+16], eax

; 752  : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  00146	8d 45 d4	 lea	 eax, DWORD PTR _queryResult$[ebp]
  00149	50		 push	 eax
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0014f	53		 push	 ebx
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  00155	ff 50 24	 call	 DWORD PTR [eax+36]

; 753  : 	TlenMUCFreeQueryResult(&queryResult);

  00158	8d 45 d4	 lea	 eax, DWORD PTR _queryResult$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult

; 754  : 	mir_free(p);

  00161	ff 75 f8	 push	 DWORD PTR _p$[ebp]
  00164	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0016a	83 c4 14	 add	 esp, 20			; 00000014H
$L83753:
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx

; 755  : }

  0016f	c9		 leave
  00170	c3		 ret	 0
_TlenIqResultChatGroups ENDP
_TEXT	ENDS
;	COMDAT _TlenMUCFreeQueryResult
_TEXT	SEGMENT
_result$ = 8
_TlenMUCFreeQueryResult PROC NEAR			; COMDAT

; 698  : {	int i;

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 699  : 	for (i=0; i<result->iItemsNum; i++) {

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _result$[esp+4]
  00006	33 db		 xor	 ebx, ebx
  00008	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  0000b	7e 58		 jle	 SHORT $L83735
  0000d	57		 push	 edi
  0000e	33 ff		 xor	 edi, edi
$L83733:

; 700  : 		if (result->pItems[i].pszID != NULL) {

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	8b 04 38	 mov	 eax, DWORD PTR [eax+edi]
  00016	85 c0		 test	 eax, eax
  00018	74 08		 je	 SHORT $L83737

; 701  : 			mir_free((char *) result->pItems[i].pszID);

  0001a	50		 push	 eax
  0001b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00021	59		 pop	 ecx
$L83737:

; 702  : 		}
; 703  : 		if (result->pItems[i].pszName != NULL) {

  00022	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00025	8b 44 38 04	 mov	 eax, DWORD PTR [eax+edi+4]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $L83740

; 704  : 			mir_free((char *) result->pItems[i].pszName);

  0002d	50		 push	 eax
  0002e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00034	59		 pop	 ecx
$L83740:

; 705  : 		}
; 706  : 		if (result->pItems[i].pszNick != NULL) {

  00035	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00038	8b 44 38 08	 mov	 eax, DWORD PTR [eax+edi+8]
  0003c	85 c0		 test	 eax, eax
  0003e	74 08		 je	 SHORT $L83743

; 707  : 			mir_free((char *) result->pItems[i].pszNick);

  00040	50		 push	 eax
  00041	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00047	59		 pop	 ecx
$L83743:

; 708  : 		}
; 709  : 		if (result->pItems[i].pszText != NULL) {

  00048	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004b	8b 44 38 0c	 mov	 eax, DWORD PTR [eax+edi+12]
  0004f	85 c0		 test	 eax, eax
  00051	74 08		 je	 SHORT $L83734

; 710  : 			mir_free((char *) result->pItems[i].pszText);

  00053	50		 push	 eax
  00054	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0005a	59		 pop	 ecx
$L83734:
  0005b	43		 inc	 ebx
  0005c	83 c7 18	 add	 edi, 24			; 00000018H
  0005f	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00062	7c ac		 jl	 SHORT $L83733
  00064	5f		 pop	 edi
$L83735:

; 711  : 		}
; 712  : 	}
; 713  : 	mir_free((MUCCQUERYITEM *)result->pItems);

  00065	ff 76 14	 push	 DWORD PTR [esi+20]
  00068	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 714  : }

  00071	c3		 ret	 0
_TlenMUCFreeQueryResult ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultChatRooms
PUBLIC	??_C@_01PLJA@0?$AA@				; `string'
PUBLIC	??_C@_01KOI@x?$AA@				; `string'
;	COMDAT ??_C@_01PLJA@0?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_01PLJA@0?$AA@ DB '0', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOI@x?$AA@
_DATA	SEGMENT
??_C@_01KOI@x?$AA@ DB 'x', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultChatRooms
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_itemNode$ = 12
_c$ = -16
_n$ = -12
_x$ = -20
_p$ = -8
_i$ = 8
_j$ = -4
_queryResult$ = -56
_TlenIqResultChatRooms PROC NEAR			; COMDAT

; 758  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	57		 push	 edi

; 759  : 	XmlNode *lNode, *itemNode;
; 760  : 	char *id, *c, *n, *x, *p, *px, *pn;
; 761  : 	int i, j;
; 762  : 	MUCCQUERYRESULT queryResult;
; 763  : 
; 764  : 	if ((lNode=JabberXmlGetChild(iqNode, "l")) == NULL) return;

  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JME@l?$AA@ ; `string'
  0000c	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  0000f	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00014	8b f8		 mov	 edi, eax
  00016	59		 pop	 ecx
  00017	85 ff		 test	 edi, edi
  00019	59		 pop	 ecx
  0001a	0f 84 a5 01 00
	00		 je	 $L83790

; 765  : 	if ((p = JabberXmlGetAttrValue(iqNode, "p")) == NULL) return;

  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  00025	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00028	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0002d	59		 pop	 ecx
  0002e	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  00031	85 c0		 test	 eax, eax
  00033	59		 pop	 ecx
  00034	0f 84 8b 01 00
	00		 je	 $L83790
  0003a	53		 push	 ebx
  0003b	56		 push	 esi

; 766  : 	pn = JabberXmlGetAttrValue(lNode, "n");

  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  00041	57		 push	 edi
  00042	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00047	8b f0		 mov	 esi, eax
  00049	59		 pop	 ecx

; 767  : 	if (pn == NULL) pn = "0";

  0004a	85 f6		 test	 esi, esi
  0004c	59		 pop	 ecx
  0004d	75 05		 jne	 SHORT $L83808
  0004f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_01PLJA@0?$AA@ ; `string'
$L83808:

; 768  : 	px = JabberXmlGetAttrValue(lNode, "x");

  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0005f	8b d8		 mov	 ebx, eax
  00061	59		 pop	 ecx

; 769  : 	if (px == NULL) px = "0";

  00062	85 db		 test	 ebx, ebx
  00064	59		 pop	 ecx
  00065	75 05		 jne	 SHORT $L83812
  00067	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_01PLJA@0?$AA@ ; `string'
$L83812:

; 770  : 	p = JabberTextDecode(p);

  0006c	ff 75 f8	 push	 DWORD PTR _p$[ebp]
  0006f	e8 00 00 00 00	 call	 _JabberTextDecode

; 771  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 772  : 	queryResult.iType = MUCC_EVENT_QUERY_ROOMS;
; 773  : 	queryResult.pszModule = proto->iface.m_szModuleName;

  00074	8b 4d 08	 mov	 ecx, DWORD PTR _proto$[ebp]
  00077	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  0007a	c7 45 c8 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  00081	c7 45 cc 21 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 289 ; 00000121H
  00088	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 774  : 	queryResult.pszParent = p;

  0008b	89 45 d4	 mov	 DWORD PTR _queryResult$[ebp+12], eax
  0008e	89 4d d0	 mov	 DWORD PTR _queryResult$[ebp+8], ecx

; 775  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * lNode->numChild);

  00091	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00094	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00097	c1 e0 03	 shl	 eax, 3
  0009a	50		 push	 eax
  0009b	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  000a1	89 45 dc	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 776  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * lNode->numChild);

  000a4	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000a7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000aa	c1 e0 03	 shl	 eax, 3
  000ad	50		 push	 eax
  000ae	6a 00		 push	 0
  000b0	ff 75 dc	 push	 DWORD PTR _queryResult$[ebp+20]
  000b3	e8 00 00 00 00	 call	 _memset

; 777  : 	queryResult.iPage = atoi(pn);

  000b8	56		 push	 esi
  000b9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__atoi
  000bf	ff d6		 call	 esi

; 778  : 	queryResult.iLastPage = atoi(px)&2?1:0;

  000c1	53		 push	 ebx
  000c2	89 45 e4	 mov	 DWORD PTR _queryResult$[ebp+28], eax
  000c5	ff d6		 call	 esi
  000c7	d1 e8		 shr	 eax, 1
  000c9	83 e0 01	 and	 eax, 1

; 779  : 	for (i=j=0; i<lNode->numChild; i++) {

  000cc	33 db		 xor	 ebx, ebx
  000ce	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d1	89 45 e8	 mov	 DWORD PTR _queryResult$[ebp+32], eax
  000d4	39 5f 14	 cmp	 DWORD PTR [edi+20], ebx
  000d7	89 5d fc	 mov	 DWORD PTR _j$[ebp], ebx
  000da	89 5d 08	 mov	 DWORD PTR _i$[ebp], ebx
  000dd	0f 8e b2 00 00
	00		 jle	 $L83818
$L83816:

; 780  : 		itemNode = lNode->child[i];

  000e3	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]

; 781  : 		if (!strcmp(itemNode->name, "i")) {

  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000ee	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000f1	89 45 0c	 mov	 DWORD PTR _itemNode$[ebp], eax
  000f4	ff 70 04	 push	 DWORD PTR [eax+4]
  000f7	e8 00 00 00 00	 call	 _strcmp
  000fc	59		 pop	 ecx
  000fd	85 c0		 test	 eax, eax
  000ff	59		 pop	 ecx
  00100	0f 85 80 00 00
	00		 jne	 $L83817

; 782  : 			n = JabberXmlGetAttrValue(itemNode, "n");

  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  0010b	ff 75 0c	 push	 DWORD PTR _itemNode$[ebp]
  0010e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 783  : 			c = JabberXmlGetAttrValue(itemNode, "c");

  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  00118	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax
  0011b	ff 75 0c	 push	 DWORD PTR _itemNode$[ebp]
  0011e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 784  : 			x = JabberXmlGetAttrValue(itemNode, "x");

  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  00128	89 45 f0	 mov	 DWORD PTR _c$[ebp], eax
  0012b	ff 75 0c	 push	 DWORD PTR _itemNode$[ebp]
  0012e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 785  : 			if ((id=JabberXmlGetAttrValue(itemNode, "i")) != NULL) {

  00133	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00138	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax
  0013b	ff 75 0c	 push	 DWORD PTR _itemNode$[ebp]
  0013e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00143	83 c4 20	 add	 esp, 32			; 00000020H
  00146	85 c0		 test	 eax, eax
  00148	74 3c		 je	 SHORT $L83817

; 786  : 				queryResult.pItems[j].pszID =  JabberTextDecode(id);

  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _JabberTextDecode
  00150	8b 4d dc	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 787  : 				queryResult.pItems[j].pszName = JabberTextDecode(n);

  00153	ff 75 f4	 push	 DWORD PTR _n$[ebp]
  00156	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  00159	e8 00 00 00 00	 call	 _JabberTextDecode
  0015e	8b 4d dc	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 788  : 				queryResult.pItems[j].iCount = atoi(c);

  00161	ff 75 f0	 push	 DWORD PTR _c$[ebp]
  00164	89 44 0b 04	 mov	 DWORD PTR [ebx+ecx+4], eax
  00168	ff d6		 call	 esi
  0016a	8b 4d dc	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 789  : 				queryResult.pItems[j].dwFlags = atoi(x);

  0016d	ff 75 ec	 push	 DWORD PTR _x$[ebp]
  00170	89 44 0b 10	 mov	 DWORD PTR [ebx+ecx+16], eax
  00174	ff d6		 call	 esi
  00176	8b 4d dc	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  00179	83 c4 10	 add	 esp, 16			; 00000010H

; 790  : 				j++;

  0017c	ff 45 fc	 inc	 DWORD PTR _j$[ebp]
  0017f	89 44 0b 14	 mov	 DWORD PTR [ebx+ecx+20], eax
  00183	83 c3 18	 add	 ebx, 24			; 00000018H
$L83817:
  00186	ff 45 08	 inc	 DWORD PTR _i$[ebp]
  00189	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0018c	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  0018f	0f 8c 4e ff ff
	ff		 jl	 $L83816
$L83818:

; 791  : 			}
; 792  : 		}
; 793  : 	}
; 794  : 	queryResult.iItemsNum = j;

  00195	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00198	89 45 d8	 mov	 DWORD PTR _queryResult$[ebp+16], eax

; 795  : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  0019b	8d 45 c8	 lea	 eax, DWORD PTR _queryResult$[ebp]
  0019e	50		 push	 eax
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001a4	6a 00		 push	 0
  001a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  001ab	ff 50 24	 call	 DWORD PTR [eax+36]

; 796  : 	TlenMUCFreeQueryResult(&queryResult);

  001ae	8d 45 c8	 lea	 eax, DWORD PTR _queryResult$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult

; 797  : 	mir_free(p);

  001b7	ff 75 f8	 push	 DWORD PTR _p$[ebp]
  001ba	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001c0	83 c4 14	 add	 esp, 20			; 00000014H
  001c3	5e		 pop	 esi
  001c4	5b		 pop	 ebx
$L83790:
  001c5	5f		 pop	 edi

; 798  : }

  001c6	c9		 leave
  001c7	c3		 ret	 0
_TlenIqResultChatRooms ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultUserRooms
;	COMDAT _TlenIqResultUserRooms
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_n$ = -4
_i$ = 12
_j$ = 8
_queryResult$ = -44
_TlenIqResultUserRooms PROC NEAR			; COMDAT

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 801  : 	XmlNode *lNode, *itemNode;
; 802  : 	char *id, *n;
; 803  : 	int i, j;
; 804  : 	MUCCQUERYRESULT queryResult;
; 805  : 	if ((lNode=JabberXmlGetChild(iqNode, "l")) == NULL) return;

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JME@l?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00015	8b f0		 mov	 esi, eax
  00017	33 ff		 xor	 edi, edi
  00019	59		 pop	 ecx
  0001a	3b f7		 cmp	 esi, edi
  0001c	59		 pop	 ecx
  0001d	0f 84 e9 00 00
	00		 je	 $L83827

; 806  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 807  : 	queryResult.iType = MUCC_EVENT_QUERY_USER_ROOMS;
; 808  : 	queryResult.pszModule = proto->iface.m_szModuleName;

  00023	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00026	c7 45 d4 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  0002d	c7 45 d8 22 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 290 ; 00000122H
  00034	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00037	89 45 dc	 mov	 DWORD PTR _queryResult$[ebp+8], eax

; 809  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * lNode->numChild);

  0003a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00040	c1 e0 03	 shl	 eax, 3
  00043	50		 push	 eax
  00044	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0004a	89 45 e8	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 810  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * lNode->numChild);

  0004d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00050	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00053	c1 e0 03	 shl	 eax, 3
  00056	50		 push	 eax
  00057	57		 push	 edi
  00058	ff 75 e8	 push	 DWORD PTR _queryResult$[ebp+20]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 10	 add	 esp, 16			; 00000010H

; 811  : 	for (i=j=0; i<lNode->numChild; i++) {

  00063	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00066	89 7d 08	 mov	 DWORD PTR _j$[ebp], edi
  00069	89 7d 0c	 mov	 DWORD PTR _i$[ebp], edi
  0006c	7e 7a		 jle	 SHORT $L83842
  0006e	53		 push	 ebx
  0006f	89 7d f8	 mov	 DWORD PTR -8+[ebp], edi
  00072	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
$L83840:

; 812  : 		itemNode = lNode->child[i];

  00077	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]

; 813  : 		if (!strcmp(itemNode->name, "i")) {

  0007d	53		 push	 ebx
  0007e	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  00081	ff 77 04	 push	 DWORD PTR [edi+4]
  00084	e8 00 00 00 00	 call	 _strcmp
  00089	59		 pop	 ecx
  0008a	85 c0		 test	 eax, eax
  0008c	59		 pop	 ecx
  0008d	75 4b		 jne	 SHORT $L83841

; 814  : 			n = JabberXmlGetAttrValue(itemNode, "n");

  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 815  : 			id = JabberXmlGetAttrValue(itemNode, "i");

  0009a	53		 push	 ebx
  0009b	57		 push	 edi
  0009c	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
  0009f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 816  : 			if (n != NULL && id != NULL) {

  000a7	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  000ab	74 2d		 je	 SHORT $L83841
  000ad	85 c0		 test	 eax, eax
  000af	74 29		 je	 SHORT $L83841

; 817  : 				queryResult.pItems[j].pszID =  JabberTextDecode(id);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _JabberTextDecode
  000b7	8b 4d e8	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  000ba	8b 7d f8	 mov	 edi, DWORD PTR -8+[ebp]

; 818  : 				queryResult.pItems[j].pszName = JabberTextDecode(n);

  000bd	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  000c0	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax
  000c3	e8 00 00 00 00	 call	 _JabberTextDecode

; 819  : 				j++;

  000c8	ff 45 08	 inc	 DWORD PTR _j$[ebp]
  000cb	59		 pop	 ecx
  000cc	59		 pop	 ecx
  000cd	83 c7 18	 add	 edi, 24			; 00000018H
  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  000d3	89 7d f8	 mov	 DWORD PTR -8+[ebp], edi
  000d6	89 44 0f ec	 mov	 DWORD PTR [edi+ecx-20], eax
$L83841:
  000da	ff 45 0c	 inc	 DWORD PTR _i$[ebp]
  000dd	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  000e0	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  000e3	7c 92		 jl	 SHORT $L83840
  000e5	33 ff		 xor	 edi, edi
  000e7	5b		 pop	 ebx
$L83842:

; 820  : 			}
; 821  : 		}
; 822  : 	}
; 823  : 	queryResult.iItemsNum = j;

  000e8	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  000eb	89 45 e4	 mov	 DWORD PTR _queryResult$[ebp+16], eax

; 824  : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  000ee	8d 45 d4	 lea	 eax, DWORD PTR _queryResult$[ebp]
  000f1	50		 push	 eax
  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000f7	57		 push	 edi
  000f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  000fd	ff 50 24	 call	 DWORD PTR [eax+36]

; 825  : 	TlenMUCFreeQueryResult(&queryResult);

  00100	8d 45 d4	 lea	 eax, DWORD PTR _queryResult$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult
  00109	83 c4 10	 add	 esp, 16			; 00000010H
$L83827:
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi

; 826  : }

  0010e	c9		 leave
  0010f	c3		 ret	 0
_TlenIqResultUserRooms ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultUserNicks
;	COMDAT _TlenIqResultUserNicks
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_i$ = 12
_j$ = 8
_queryResult$ = -36
_TlenIqResultUserNicks PROC NEAR			; COMDAT

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 829  : 	XmlNode *lNode, *itemNode;
; 830  : 	char *n;
; 831  : 	int i, j;
; 832  : 	MUCCQUERYRESULT queryResult;
; 833  : 	if ((lNode=JabberXmlGetChild(iqNode, "l")) == NULL) return;

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JME@l?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00015	8b f0		 mov	 esi, eax
  00017	33 ff		 xor	 edi, edi
  00019	59		 pop	 ecx
  0001a	3b f7		 cmp	 esi, edi
  0001c	59		 pop	 ecx
  0001d	0f 84 c2 00 00
	00		 je	 $L83852

; 834  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 835  : 	queryResult.iType = MUCC_EVENT_QUERY_USER_NICKS;
; 836  : 	queryResult.pszModule = proto->iface.m_szModuleName;

  00023	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00026	c7 45 dc 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  0002d	c7 45 e0 23 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 291 ; 00000123H
  00034	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00037	89 45 e4	 mov	 DWORD PTR _queryResult$[ebp+8], eax

; 837  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * lNode->numChild);

  0003a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00040	c1 e0 03	 shl	 eax, 3
  00043	50		 push	 eax
  00044	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0004a	89 45 f0	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 838  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * lNode->numChild);

  0004d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00050	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00053	c1 e0 03	 shl	 eax, 3
  00056	50		 push	 eax
  00057	57		 push	 edi
  00058	ff 75 f0	 push	 DWORD PTR _queryResult$[ebp+20]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 10	 add	 esp, 16			; 00000010H

; 839  : 	for (i=j=0; i<lNode->numChild; i++) {

  00063	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00066	89 7d 08	 mov	 DWORD PTR _j$[ebp], edi
  00069	89 7d 0c	 mov	 DWORD PTR _i$[ebp], edi
  0006c	7e 53		 jle	 SHORT $L83866
  0006e	53		 push	 ebx
$L83864:

; 840  : 		itemNode = lNode->child[i];

  0006f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]

; 841  : 		if (!strcmp(itemNode->name, "i")) {

  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  0007a	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
  0007d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00080	e8 00 00 00 00	 call	 _strcmp
  00085	59		 pop	 ecx
  00086	85 c0		 test	 eax, eax
  00088	59		 pop	 ecx
  00089	75 28		 jne	 SHORT $L83865

; 842  : 			n = JabberXmlGetAttrValue(itemNode, "n");

  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  00090	53		 push	 ebx
  00091	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 843  : 			queryResult.pItems[j].pszID =  NULL;//JabberTextDecode(n);

  00096	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 844  : 			queryResult.pItems[j].pszName = JabberTextDecode(n);

  00099	50		 push	 eax
  0009a	83 24 0f 00	 and	 DWORD PTR [edi+ecx], 0
  0009e	e8 00 00 00 00	 call	 _JabberTextDecode
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 845  : 			j++;

  000a9	ff 45 08	 inc	 DWORD PTR _j$[ebp]
  000ac	89 44 0f 04	 mov	 DWORD PTR [edi+ecx+4], eax
  000b0	83 c7 18	 add	 edi, 24			; 00000018H
$L83865:
  000b3	ff 45 0c	 inc	 DWORD PTR _i$[ebp]
  000b6	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  000bc	7c b1		 jl	 SHORT $L83864
  000be	33 ff		 xor	 edi, edi
  000c0	5b		 pop	 ebx
$L83866:

; 846  : 		}
; 847  : 	}
; 848  : 	queryResult.iItemsNum = j;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  000c4	89 45 ec	 mov	 DWORD PTR _queryResult$[ebp+16], eax

; 849  : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  000c7	8d 45 dc	 lea	 eax, DWORD PTR _queryResult$[ebp]
  000ca	50		 push	 eax
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d0	57		 push	 edi
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  000d6	ff 50 24	 call	 DWORD PTR [eax+36]

; 850  : 	TlenMUCFreeQueryResult(&queryResult);

  000d9	8d 45 dc	 lea	 eax, DWORD PTR _queryResult$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L83852:
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi

; 851  : }

  000e7	c9		 leave
  000e8	c3		 ret	 0
_TlenIqResultUserNicks ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultChatRoomUsers
PUBLIC	??_C@_04GLLG@from?$AA@				; `string'
PUBLIC	??_C@_01FNLH@a?$AA@				; `string'
PUBLIC	??_C@_01LHO@r?$AA@				; `string'
PUBLIC	??_C@_01PHOL@e?$AA@				; `string'
;	COMDAT ??_C@_04GLLG@from?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_04GLLG@from?$AA@ DB 'from', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT
??_C@_01FNLH@a?$AA@ DB 'a', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT
??_C@_01LHO@r?$AA@ DB 'r', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT
??_C@_01PHOL@e?$AA@ DB 'e', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultChatRoomUsers
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_i$ = 12
_j$ = 8
_queryResult$ = -36
_TlenIqResultChatRoomUsers PROC NEAR			; COMDAT

; 853  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 854  : 	XmlNode *lNode, *itemNode;
; 855  : 	char *id, *n;
; 856  : 	int i, j;
; 857  : 	MUCCQUERYRESULT queryResult;
; 858  : 	if ((lNode=JabberXmlGetChild(iqNode, "l")) == NULL) return;

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JME@l?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00015	8b f0		 mov	 esi, eax
  00017	33 db		 xor	 ebx, ebx
  00019	59		 pop	 ecx
  0001a	3b f3		 cmp	 esi, ebx
  0001c	59		 pop	 ecx
  0001d	0f 84 86 01 00
	00		 je	 $L83874

; 859  : 	if ((id=JabberXmlGetAttrValue(iqNode, "from")) == NULL) return;

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00028	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  0002b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00030	59		 pop	 ecx
  00031	3b c3		 cmp	 eax, ebx
  00033	59		 pop	 ecx
  00034	0f 84 6f 01 00
	00		 je	 $L83874

; 860  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 861  : 	queryResult.iType = MUCC_EVENT_QUERY_USERS;
; 862  : 	queryResult.pszModule = proto->iface.m_szModuleName;

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _proto$[ebp]
  0003d	c7 45 dc 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  00044	c7 45 e0 31 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 305 ; 00000131H

; 863  : 	queryResult.pszParent = id;

  0004b	89 45 e8	 mov	 DWORD PTR _queryResult$[ebp+12], eax
  0004e	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00051	89 4d e4	 mov	 DWORD PTR _queryResult$[ebp+8], ecx

; 864  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * lNode->numChild);

  00054	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00057	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005a	c1 e0 03	 shl	 eax, 3
  0005d	50		 push	 eax
  0005e	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00064	89 45 f0	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 865  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * lNode->numChild);

  00067	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0006d	c1 e0 03	 shl	 eax, 3
  00070	50		 push	 eax
  00071	53		 push	 ebx
  00072	ff 75 f0	 push	 DWORD PTR _queryResult$[ebp+20]
  00075	e8 00 00 00 00	 call	 _memset
  0007a	83 c4 10	 add	 esp, 16			; 00000010H

; 866  : 	for (i=j=0; i<lNode->numChild; i++) {

  0007d	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00080	89 5d 08	 mov	 DWORD PTR _j$[ebp], ebx
  00083	89 5d 0c	 mov	 DWORD PTR _i$[ebp], ebx
  00086	0f 8e f9 00 00
	00		 jle	 $L83892
  0008c	57		 push	 edi
$L83890:

; 867  : 		itemNode = lNode->child[i];

  0008d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]

; 868  : 		if (!strcmp(itemNode->name, "i")) {

  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00098	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  0009b	ff 77 04	 push	 DWORD PTR [edi+4]
  0009e	e8 00 00 00 00	 call	 _strcmp
  000a3	59		 pop	 ecx
  000a4	85 c0		 test	 eax, eax
  000a6	59		 pop	 ecx
  000a7	0f 85 c6 00 00
	00		 jne	 $L83891

; 869  : 			id = JabberXmlGetAttrValue(itemNode, "i");

  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000b2	57		 push	 edi
  000b3	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000b8	59		 pop	 ecx

; 870  : 			if (id != NULL) {

  000b9	85 c0		 test	 eax, eax
  000bb	59		 pop	 ecx
  000bc	0f 84 b1 00 00
	00		 je	 $L83891

; 871  : 				queryResult.pItems[j].pszID =  JabberTextDecode(id);

  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _JabberTextDecode
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]

; 872  : 				n = JabberXmlGetAttrValue(itemNode, "n");

  000cb	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  000d2	57		 push	 edi
  000d3	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
  000d6	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000db	59		 pop	 ecx

; 873  : 				if (n!=NULL) {

  000dc	85 c0		 test	 eax, eax
  000de	59		 pop	 ecx
  000df	74 0e		 je	 SHORT $L83897

; 874  : 					queryResult.pItems[j].pszName = JabberTextDecode(n);

  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _JabberTextDecode
  000e7	59		 pop	 ecx
  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  000eb	89 44 0b 04	 mov	 DWORD PTR [ebx+ecx+4], eax
$L83897:

; 875  : 				}
; 876  : 				n = JabberXmlGetAttrValue(itemNode, "a");

  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000fa	59		 pop	 ecx

; 877  : 				if (n!=NULL) {

  000fb	85 c0		 test	 eax, eax
  000fd	59		 pop	 ecx
  000fe	74 0e		 je	 SHORT $L83900

; 878  : 					queryResult.pItems[j].pszNick = JabberTextDecode(n);

  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 _JabberTextDecode
  00106	59		 pop	 ecx
  00107	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  0010a	89 44 0b 08	 mov	 DWORD PTR [ebx+ecx+8], eax
$L83900:

; 879  : 				}
; 880  : 				n = JabberXmlGetAttrValue(itemNode, "r");

  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LHO@r?$AA@ ; `string'
  00113	57		 push	 edi
  00114	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00119	59		 pop	 ecx

; 881  : 				if (n!=NULL) {

  0011a	85 c0		 test	 eax, eax
  0011c	59		 pop	 ecx
  0011d	74 0e		 je	 SHORT $L83903

; 882  : 					queryResult.pItems[j].pszText = JabberTextDecode(n);

  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _JabberTextDecode
  00125	59		 pop	 ecx
  00126	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  00129	89 44 0b 0c	 mov	 DWORD PTR [ebx+ecx+12], eax
$L83903:

; 883  : 				}
; 884  : 				n = JabberXmlGetAttrValue(itemNode, "e");

  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  00132	57		 push	 edi
  00133	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00138	59		 pop	 ecx

; 885  : 				if (n!=NULL) {

  00139	85 c0		 test	 eax, eax
  0013b	59		 pop	 ecx
  0013c	74 0f		 je	 SHORT $L83906

; 886  : 					queryResult.pItems[j].iCount = atoi(n);

  0013e	50		 push	 eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00145	59		 pop	 ecx
  00146	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  00149	89 44 0b 10	 mov	 DWORD PTR [ebx+ecx+16], eax
$L83906:

; 887  : 				}
; 888  : 				n = JabberXmlGetAttrValue(itemNode, "s");

  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  00152	57		 push	 edi
  00153	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00158	59		 pop	 ecx

; 889  : 				if (n!=NULL) {

  00159	85 c0		 test	 eax, eax
  0015b	59		 pop	 ecx
  0015c	74 0f		 je	 SHORT $L83908

; 890  : 					queryResult.pItems[j].dwFlags = atoi(n);

  0015e	50		 push	 eax
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00165	59		 pop	 ecx
  00166	8b 4d f0	 mov	 ecx, DWORD PTR _queryResult$[ebp+20]
  00169	89 44 0b 14	 mov	 DWORD PTR [ebx+ecx+20], eax
$L83908:

; 891  : 				}
; 892  : 				j++;

  0016d	ff 45 08	 inc	 DWORD PTR _j$[ebp]
  00170	83 c3 18	 add	 ebx, 24			; 00000018H
$L83891:
  00173	ff 45 0c	 inc	 DWORD PTR _i$[ebp]
  00176	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  00179	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0017c	0f 8c 0b ff ff
	ff		 jl	 $L83890
  00182	33 db		 xor	 ebx, ebx
  00184	5f		 pop	 edi
$L83892:

; 893  : 			}
; 894  : 		}
; 895  : 	}
; 896  : 	queryResult.iItemsNum = j;

  00185	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  00188	89 45 ec	 mov	 DWORD PTR _queryResult$[ebp+16], eax

; 897  : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  0018b	8d 45 dc	 lea	 eax, DWORD PTR _queryResult$[ebp]
  0018e	50		 push	 eax
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00194	53		 push	 ebx
  00195	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  0019a	ff 50 24	 call	 DWORD PTR [eax+36]

; 898  : 	TlenMUCFreeQueryResult(&queryResult);

  0019d	8d 45 dc	 lea	 eax, DWORD PTR _queryResult$[ebp]
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult
  001a6	83 c4 10	 add	 esp, 16			; 00000010H
$L83874:
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx

; 899  : }

  001ab	c9		 leave
  001ac	c3		 ret	 0
_TlenIqResultChatRoomUsers ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultRoomSearch
PUBLIC	??_C@_02IBHF@id?$AA@				; `string'
;	COMDAT ??_C@_02IBHF@id?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_02IBHF@id?$AA@ DB 'id', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultRoomSearch
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_iqId$ = -4
_mucce$83921 = -64
_TlenIqResultRoomSearch PROC NEAR			; COMDAT

; 902  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 903  : 	char *iqId, *id;
; 904  : 	JABBER_LIST_ITEM *item;
; 905  : 	iqId=JabberXmlGetAttrValue(iqNode, "id");

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 906  : 	item=JabberListGetItemPtr(proto, LIST_SEARCH, iqId);

  00015	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  00018	50		 push	 eax
  00019	6a 04		 push	 4
  0001b	57		 push	 edi
  0001c	89 45 fc	 mov	 DWORD PTR _iqId$[ebp], eax
  0001f	e8 00 00 00 00	 call	 _JabberListGetItemPtr

; 907  : 	if ((id=JabberXmlGetAttrValue(iqNode, "i")) != NULL) {

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00029	8b d8		 mov	 ebx, eax
  0002b	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  0002e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00033	83 c4 1c	 add	 esp, 28			; 0000001cH
  00036	85 c0		 test	 eax, eax
  00038	74 57		 je	 SHORT $L83920
  0003a	56		 push	 esi

; 908  : 		MUCCEVENT mucce;
; 909  : 		id = JabberTextDecode(id);

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _JabberTextDecode
  00041	8b f0		 mov	 esi, eax

; 910  : 		mucce.cbSize = sizeof(MUCCEVENT);
; 911  : 		mucce.iType = MUCC_EVENT_JOIN;
; 912  : 		mucce.pszModule = proto->iface.m_szModuleName;

  00043	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 913  : 		mucce.pszID = id;
; 914  : 		mucce.pszName = id;
; 915  : 		if (item!=NULL) {

  00046	85 db		 test	 ebx, ebx
  00048	59		 pop	 ecx
  00049	c7 45 c0 3c 00
	00 00		 mov	 DWORD PTR _mucce$83921[ebp], 60 ; 0000003cH
  00050	c7 45 c4 80 00
	00 00		 mov	 DWORD PTR _mucce$83921[ebp+4], 128 ; 00000080H
  00057	89 45 d8	 mov	 DWORD PTR _mucce$83921[ebp+24], eax
  0005a	89 75 dc	 mov	 DWORD PTR _mucce$83921[ebp+28], esi
  0005d	89 75 e0	 mov	 DWORD PTR _mucce$83921[ebp+32], esi
  00060	74 06		 je	 SHORT $L83924

; 916  : 			mucce.pszName = item->roomName;

  00062	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00065	89 45 e0	 mov	 DWORD PTR _mucce$83921[ebp+32], eax
$L83924:

; 917  : 		}
; 918  : 		mucce.pszNick = NULL;

  00068	83 65 e8 00	 and	 DWORD PTR _mucce$83921[ebp+40], 0

; 919  : 		mucce.dwFlags = MUCC_EF_ROOM_NICKNAMES;
; 920  : 		CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  0006c	8d 45 c0	 lea	 eax, DWORD PTR _mucce$83921[ebp]
  0006f	50		 push	 eax
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  0007c	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _mucce$83921[ebp+8], 2
  00083	ff 50 24	 call	 DWORD PTR [eax+36]

; 921  : 		mir_free(id);

  00086	56		 push	 esi
  00087	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0008d	83 c4 10	 add	 esp, 16			; 00000010H
  00090	5e		 pop	 esi
$L83920:

; 922  : 	}
; 923  : 	JabberListRemove(proto, LIST_SEARCH, iqId);

  00091	ff 75 fc	 push	 DWORD PTR _iqId$[ebp]
  00094	6a 04		 push	 4
  00096	57		 push	 edi
  00097	e8 00 00 00 00	 call	 _JabberListRemove
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	5f		 pop	 edi
  000a0	5b		 pop	 ebx

; 924  : }

  000a1	c9		 leave
  000a2	c3		 ret	 0
_TlenIqResultRoomSearch ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultRoomInfo
PUBLIC	??_C@_02BIOC@cn?$AA@				; `string'
;	COMDAT ??_C@_02BIOC@cn?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_muc.c
_DATA	SEGMENT
??_C@_02BIOC@cn?$AA@ DB 'cn', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultRoomInfo
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_id$ = 12
_mucce$83940 = -60
_TlenIqResultRoomInfo PROC NEAR				; COMDAT

; 927  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi

; 928  : 	char *id, *name, *group, *flags;
; 929  : 	if ((id=JabberXmlGetAttrValue(iqNode, "from")) != NULL) {

  00007	8b 75 0c	 mov	 esi, DWORD PTR _iqNode$[ebp]
  0000a	57		 push	 edi
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00016	59		 pop	 ecx
  00017	89 45 0c	 mov	 DWORD PTR _id$[ebp], eax
  0001a	85 c0		 test	 eax, eax
  0001c	59		 pop	 ecx
  0001d	0f 84 8a 00 00
	00		 je	 $L83939

; 930  : 		if ((name=JabberXmlGetAttrValue(iqNode, "n")) != NULL) {

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0002e	8b f8		 mov	 edi, eax
  00030	59		 pop	 ecx
  00031	85 ff		 test	 edi, edi
  00033	59		 pop	 ecx
  00034	74 77		 je	 SHORT $L83939
  00036	53		 push	 ebx

; 931  : 			MUCCEVENT mucce;
; 932  : 			group = JabberXmlGetAttrValue(iqNode, "cn");

  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BIOC@cn?$AA@ ; `string'
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 933  : 			flags = JabberXmlGetAttrValue(iqNode, "x");

  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 934  : 			id = JabberTextDecode(id);

  0004d	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  00050	8b d8		 mov	 ebx, eax
  00052	e8 00 00 00 00	 call	 _JabberTextDecode

; 935  : 			name = JabberTextDecode(name);

  00057	57		 push	 edi
  00058	8b f0		 mov	 esi, eax
  0005a	e8 00 00 00 00	 call	 _JabberTextDecode
  0005f	8b f8		 mov	 edi, eax

; 936  : 			mucce.cbSize = sizeof(MUCCEVENT);
; 937  : 			mucce.iType = MUCC_EVENT_ROOM_INFO;
; 938  : 			mucce.pszModule = proto->iface.m_szModuleName;

  00061	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]

; 939  : 			mucce.pszID = id;
; 940  : 			mucce.pszName = name;
; 941  : 			mucce.dwFlags = atoi(flags);

  00064	53		 push	 ebx
  00065	c7 45 c4 3c 00
	00 00		 mov	 DWORD PTR _mucce$83940[ebp], 60 ; 0000003cH
  0006c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0006f	c7 45 c8 06 00
	00 00		 mov	 DWORD PTR _mucce$83940[ebp+4], 6
  00076	89 45 dc	 mov	 DWORD PTR _mucce$83940[ebp+24], eax
  00079	89 75 e0	 mov	 DWORD PTR _mucce$83940[ebp+28], esi
  0007c	89 7d e4	 mov	 DWORD PTR _mucce$83940[ebp+32], edi
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00085	89 45 cc	 mov	 DWORD PTR _mucce$83940[ebp+8], eax

; 942  : 			CallService(MS_MUCC_EVENT, 0, (LPARAM) &mucce);

  00088	8d 45 c4	 lea	 eax, DWORD PTR _mucce$83940[ebp]
  0008b	50		 push	 eax
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00091	6a 00		 push	 0
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HOEC@MUCC?1Event?$AA@ ; `string'
  00098	ff 50 24	 call	 DWORD PTR [eax+36]

; 943  : 			mir_free(id);

  0009b	56		 push	 esi
  0009c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 944  : 			mir_free(name);

  000a2	57		 push	 edi
  000a3	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000a9	83 c4 30	 add	 esp, 48			; 00000030H
  000ac	5b		 pop	 ebx
$L83939:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi

; 945  : 		}
; 946  : 	}
; 947  : }

  000af	c9		 leave
  000b0	c3		 ret	 0
_TlenIqResultRoomInfo ENDP
_TEXT	ENDS
EXTRN	_JabberForkThread:NEAR
;	COMDAT _TlenMUCQueryContacts
_TEXT	SEGMENT
_proto$ = 8
_roomId$ = 12
_TlenMUCQueryContacts PROC NEAR				; COMDAT

; 1008 : static int TlenMUCQueryContacts(TlenProtocol *proto, const char *roomId) {

  00000	56		 push	 esi

; 1009 :     
; 1010 :     MUCSENDQUERYTHREADDATA *threadData = (MUCSENDQUERYTHREADDATA *)mir_alloc(sizeof(MUCSENDQUERYTHREADDATA));

  00001	6a 08		 push	 8
  00003	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 1011 :     threadData->proto = proto;
; 1012 :     threadData->roomId = mir_strdup(roomId);

  00009	ff 74 24 10	 push	 DWORD PTR _roomId$[esp+4]
  0000d	8b f0		 mov	 esi, eax
  0000f	8b 44 24 10	 mov	 eax, DWORD PTR _proto$[esp+8]
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 1013 : 	JabberForkThread(TlenMUCCSendQueryResultThread, 0, (void *)threadData);

  0001b	56		 push	 esi
  0001c	6a 00		 push	 0
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:_TlenMUCCSendQueryResultThread
  00023	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00026	e8 00 00 00 00	 call	 _JabberForkThread
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 1014 : 	return 1;

  0002e	6a 01		 push	 1
  00030	58		 pop	 eax
  00031	5e		 pop	 esi

; 1015 : }

  00032	c3		 ret	 0
_TlenMUCQueryContacts ENDP
_TEXT	ENDS
PUBLIC	??_C@_03HCJC@jid?$AA@				; `string'
PUBLIC	??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@		; `string'
PUBLIC	??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@	; `string'
PUBLIC	??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ ; `string'
PUBLIC	??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@	; `string'
PUBLIC	??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@	; `string'
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ DB 'DB/Contact/FindFirst', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT
??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ DB 'Proto/GetContactBasePr'
	DB	'oto', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT
??_C@_03HCJC@jid?$AA@ DB 'jid', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@
_DATA	SEGMENT
??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@ DB 'b73@tlen.pl', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT
??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ DB 'DB/Contact/FindNext', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@
_DATA	SEGMENT
??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ DB 'CList/GetContactDisp'
	DB	'layName', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenMUCCSendQueryResultThread
_TEXT	SEGMENT
_dbv$84361 = -48
_cgs$84362 = -24
_cgs$84370 = -36
_dbv$84378 = -48
_cgs$84379 = -36
_cgs$84387 = -24
_ptr$ = 8
_hContact$ = 8
_queryResult$ = -84
_dbv$ = -12
_TlenMUCCSendQueryResultThread PROC NEAR		; COMDAT

; 956  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 957  : 	HANDLE hContact;
; 958  : 	MUCCQUERYRESULT queryResult;
; 959  : 	DBVARIANT dbv;
; 960  :     MUCSENDQUERYTHREADDATA* threadData = (MUCSENDQUERYTHREADDATA*)ptr;
; 961  : 	queryResult.cbSize = sizeof (MUCCQUERYRESULT);
; 962  : 	queryResult.iType = MUCC_EVENT_QUERY_CONTACTS;
; 963  : 	queryResult.pszModule = threadData->proto->iface.m_szModuleName;

  00008	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000b	c7 45 ac 24 00
	00 00		 mov	 DWORD PTR _queryResult$[ebp], 36 ; 00000024H
  00012	c7 45 b0 30 01
	00 00		 mov	 DWORD PTR _queryResult$[ebp+4], 304 ; 00000130H
  00019	57		 push	 edi
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]

; 964  : 	queryResult.pszParent = threadData->roomId;
; 965  : 	queryResult.iItemsNum = 0;

  0001c	33 ff		 xor	 edi, edi

; 966  : 	hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDFIRST, 0, 0);

  0001e	57		 push	 edi
  0001f	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ ; `string'
  00024	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00027	57		 push	 edi
  00028	89 45 b4	 mov	 DWORD PTR _queryResult$[ebp+8], eax
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	89 45 b8	 mov	 DWORD PTR _queryResult$[ebp+12], eax
  00031	89 7d bc	 mov	 DWORD PTR _queryResult$[ebp+16], edi
  00034	53		 push	 ebx
$L84399:
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0003a	ff 50 24	 call	 DWORD PTR [eax+36]
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 967  : 	while (hContact != NULL) {

  00040	3b c7		 cmp	 eax, edi
  00042	89 45 08	 mov	 DWORD PTR _hContact$[ebp], eax
  00045	0f 84 d0 00 00
	00		 je	 $L83963

; 968  : 		char *str = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);

  0004b	57		 push	 edi
  0004c	50		 push	 eax
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  00057	ff 50 24	 call	 DWORD PTR [eax+36]
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 969  : 		if(str!=NULL && !strcmp(str, threadData->proto->iface.m_szModuleName)) {

  0005d	3b c7		 cmp	 eax, edi
  0005f	0f 84 a8 00 00
	00		 je	 $L84374
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _strcmp
  00070	59		 pop	 ecx
  00071	85 c0		 test	 eax, eax
  00073	59		 pop	 ecx
  00074	0f 85 93 00 00
	00		 jne	 $L84374

; 970  : 			if (!DBGetContactSettingByte(hContact, threadData->proto->iface.m_szModuleName, "bChat", FALSE)) {

  0007a	8b 06		 mov	 eax, DWORD PTR [esi]
  0007c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84362[ebp+4], OFFSET FLAT:??_C@_05LMFM@bChat?$AA@ ; `string'
  00083	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00086	89 45 e8	 mov	 DWORD PTR _cgs$84362[ebp], eax
  00089	8d 45 d0	 lea	 eax, DWORD PTR _dbv$84361[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _cgs$84362[ebp+8], eax
  0008f	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84362[ebp]
  00092	50		 push	 eax
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00098	ff 75 08	 push	 DWORD PTR _hContact$[ebp]
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000a0	ff 50 24	 call	 DWORD PTR [eax+36]
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	85 c0		 test	 eax, eax
  000a8	75 08		 jne	 SHORT $L84396
  000aa	0f b6 45 d4	 movzx	 eax, BYTE PTR _dbv$84361[ebp+4]
  000ae	3b c7		 cmp	 eax, edi
  000b0	75 5b		 jne	 SHORT $L84374
$L84396:

; 971  : 				if (!DBGetContactSetting(hContact, threadData->proto->iface.m_szModuleName, "jid", &dbv)) {

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]
  000b4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _cgs$84370[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  000bb	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000be	89 45 dc	 mov	 DWORD PTR _cgs$84370[ebp], eax
  000c1	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  000c4	89 45 e4	 mov	 DWORD PTR _cgs$84370[ebp+8], eax
  000c7	8d 45 dc	 lea	 eax, DWORD PTR _cgs$84370[ebp]
  000ca	50		 push	 eax
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d0	ff 75 08	 push	 DWORD PTR _hContact$[ebp]
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000d8	ff 50 24	 call	 DWORD PTR [eax+36]
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH
  000de	85 c0		 test	 eax, eax
  000e0	75 2b		 jne	 SHORT $L84374

; 972  : 					if (strcmp(dbv.pszVal, "b73@tlen.pl")) {

  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@ ; `string'
  000e7	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  000ea	e8 00 00 00 00	 call	 _strcmp
  000ef	59		 pop	 ecx
  000f0	85 c0		 test	 eax, eax
  000f2	59		 pop	 ecx
  000f3	74 03		 je	 SHORT $L83973

; 973  : 						queryResult.iItemsNum++;

  000f5	ff 45 bc	 inc	 DWORD PTR _queryResult$[ebp+16]
$L83973:

; 974  : 					}
; 975  : 					DBFreeVariant(&dbv);

  000f8	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  000fb	50		 push	 eax
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00101	57		 push	 edi
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00107	ff 50 24	 call	 DWORD PTR [eax+36]
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84374:

; 976  : 				}
; 977  : 			}
; 978  : 		}
; 979  : 		hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDNEXT, (WPARAM) hContact, 0);

  0010d	57		 push	 edi
  0010e	ff 75 08	 push	 DWORD PTR _hContact$[ebp]
  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ ; `string'
  00116	e9 1a ff ff ff	 jmp	 $L84399
$L83963:

; 980  : 	}
; 981  : 	queryResult.pItems = mir_alloc(sizeof(MUCCQUERYITEM) * queryResult.iItemsNum);

  0011b	8b 45 bc	 mov	 eax, DWORD PTR _queryResult$[ebp+16]
  0011e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00121	c1 e0 03	 shl	 eax, 3
  00124	50		 push	 eax
  00125	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0012b	89 45 c0	 mov	 DWORD PTR _queryResult$[ebp+20], eax

; 982  : 	memset(queryResult.pItems, 0, sizeof(MUCCQUERYITEM) * queryResult.iItemsNum);

  0012e	8b 45 bc	 mov	 eax, DWORD PTR _queryResult$[ebp+16]
  00131	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00134	c1 e0 03	 shl	 eax, 3
  00137	50		 push	 eax
  00138	57		 push	 edi
  00139	ff 75 c0	 push	 DWORD PTR _queryResult$[ebp+20]
  0013c	e8 00 00 00 00	 call	 _memset

; 983  : 	queryResult.iItemsNum = 0;
; 984  : 	hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDFIRST, 0, 0);

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00146	57		 push	 edi
  00147	57		 push	 edi
  00148	53		 push	 ebx
  00149	89 7d bc	 mov	 DWORD PTR _queryResult$[ebp+16], edi
  0014c	ff 50 24	 call	 DWORD PTR [eax+36]
  0014f	83 c4 1c	 add	 esp, 28			; 0000001cH
$L84400:
  00152	8b d8		 mov	 ebx, eax

; 985  : 	while (hContact != NULL) {

  00154	3b df		 cmp	 ebx, edi
  00156	0f 84 14 01 00
	00		 je	 $L83984

; 986  : 		char *baseProto = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00161	57		 push	 edi
  00162	53		 push	 ebx
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  00168	ff 50 24	 call	 DWORD PTR [eax+36]
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 987  : 		if(baseProto!=NULL && !strcmp(baseProto, threadData->proto->iface.m_szModuleName)) {

  0016e	3b c7		 cmp	 eax, edi
  00170	0f 84 e3 00 00
	00		 je	 $L84391
  00176	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00178	ff 71 1c	 push	 DWORD PTR [ecx+28]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _strcmp
  00181	59		 pop	 ecx
  00182	85 c0		 test	 eax, eax
  00184	59		 pop	 ecx
  00185	0f 85 ce 00 00
	00		 jne	 $L84391

; 988  : 			if (!DBGetContactSettingByte(hContact, threadData->proto->iface.m_szModuleName, "bChat", FALSE)) {

  0018b	8b 06		 mov	 eax, DWORD PTR [esi]
  0018d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _cgs$84379[ebp+4], OFFSET FLAT:??_C@_05LMFM@bChat?$AA@ ; `string'
  00194	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00197	89 45 dc	 mov	 DWORD PTR _cgs$84379[ebp], eax
  0019a	8d 45 d0	 lea	 eax, DWORD PTR _dbv$84378[ebp]
  0019d	89 45 e4	 mov	 DWORD PTR _cgs$84379[ebp+8], eax
  001a0	8d 45 dc	 lea	 eax, DWORD PTR _cgs$84379[ebp]
  001a3	50		 push	 eax
  001a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001a9	53		 push	 ebx
  001aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  001af	ff 50 24	 call	 DWORD PTR [eax+36]
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b5	85 c0		 test	 eax, eax
  001b7	75 0c		 jne	 SHORT $L84397
  001b9	0f b6 45 d4	 movzx	 eax, BYTE PTR _dbv$84378[ebp+4]
  001bd	3b c7		 cmp	 eax, edi
  001bf	0f 85 94 00 00
	00		 jne	 $L84391
$L84397:

; 989  : 				if (!DBGetContactSetting(hContact, threadData->proto->iface.m_szModuleName, "jid", &dbv)) {

  001c5	8b 06		 mov	 eax, DWORD PTR [esi]
  001c7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$84387[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  001ce	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  001d1	89 45 e8	 mov	 DWORD PTR _cgs$84387[ebp], eax
  001d4	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  001d7	89 45 f0	 mov	 DWORD PTR _cgs$84387[ebp+8], eax
  001da	8d 45 e8	 lea	 eax, DWORD PTR _cgs$84387[ebp]
  001dd	50		 push	 eax
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001e3	53		 push	 ebx
  001e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  001e9	ff 50 24	 call	 DWORD PTR [eax+36]
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ef	85 c0		 test	 eax, eax
  001f1	75 66		 jne	 SHORT $L84391

; 990  : 					if (strcmp(dbv.pszVal, "b73@tlen.pl")) {

  001f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@ ; `string'
  001f8	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  001fb	e8 00 00 00 00	 call	 _strcmp
  00200	59		 pop	 ecx
  00201	85 c0		 test	 eax, eax
  00203	59		 pop	 ecx
  00204	74 3e		 je	 SHORT $L83992

; 991  : 						queryResult.pItems[queryResult.iItemsNum].pszID = mir_strdup(dbv.pszVal);

  00206	ff 75 f8	 push	 DWORD PTR _dbv$[ebp+4]
  00209	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0020f	8b 4d bc	 mov	 ecx, DWORD PTR _queryResult$[ebp+16]
  00212	8b 55 c0	 mov	 edx, DWORD PTR _queryResult$[ebp+20]

; 992  : 						queryResult.pItems[queryResult.iItemsNum].pszName = mir_strdup((char *) CallService(MS_CLIST_GETCONTACTDISPLAYNAME, (WPARAM) hContact, 0));

  00215	57		 push	 edi
  00216	53		 push	 ebx
  00217	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0021a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@DJCK@CList?1GetContactDisplayName?$AA@ ; `string'
  0021f	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax
  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00227	ff 50 24	 call	 DWORD PTR [eax+36]
  0022a	50		 push	 eax
  0022b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00231	8b 4d bc	 mov	 ecx, DWORD PTR _queryResult$[ebp+16]
  00234	8b 55 c0	 mov	 edx, DWORD PTR _queryResult$[ebp+20]
  00237	83 c4 14	 add	 esp, 20			; 00000014H
  0023a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0023d	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 993  : 						queryResult.iItemsNum++;

  00241	ff 45 bc	 inc	 DWORD PTR _queryResult$[ebp+16]
$L83992:

; 994  : 					}
; 995  : 					DBFreeVariant(&dbv);

  00244	8d 45 f4	 lea	 eax, DWORD PTR _dbv$[ebp]
  00247	50		 push	 eax
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0024d	57		 push	 edi
  0024e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00253	ff 50 24	 call	 DWORD PTR [eax+36]
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84391:

; 996  : 				}
; 997  : 			}
; 998  : 		}
; 999  : 		hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDNEXT, (WPARAM) hContact, 0);

  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0025e	57		 push	 edi
  0025f	53		 push	 ebx
  00260	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ ; `string'
  00265	ff 50 24	 call	 DWORD PTR [eax+36]
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	e9 e2 fe ff ff	 jmp	 $L84400
$L83984:

; 1000 : 	}
; 1001 : 	CallService(MS_MUCC_QUERY_RESULT, 0, (LPARAM) &queryResult);

  00270	8d 45 ac	 lea	 eax, DWORD PTR _queryResult$[ebp]
  00273	50		 push	 eax
  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00279	57		 push	 edi
  0027a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@BIFE@MUCC?1QueryResult?$AA@ ; `string'
  0027f	ff 50 24	 call	 DWORD PTR [eax+36]

; 1002 : 	TlenMUCFreeQueryResult(&queryResult);

  00282	8d 45 ac	 lea	 eax, DWORD PTR _queryResult$[ebp]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 _TlenMUCFreeQueryResult

; 1003 : 	mir_free(threadData->roomId);

  0028b	ff 76 04	 push	 DWORD PTR [esi+4]
  0028e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1004 :     mir_free(threadData);

  00294	56		 push	 esi
  00295	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0029b	83 c4 18	 add	 esp, 24			; 00000018H
  0029e	5f		 pop	 edi
  0029f	5e		 pop	 esi
  002a0	5b		 pop	 ebx

; 1005 : }

  002a1	c9		 leave
  002a2	c3		 ret	 0
_TlenMUCCSendQueryResultThread ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCMenuHandleMUC
;	COMDAT _TlenMUCMenuHandleMUC
_TEXT	SEGMENT
_ptr$ = 8
_TlenMUCMenuHandleMUC PROC NEAR				; COMDAT

; 1019 : {

  00000	56		 push	 esi

; 1020 : 	TlenProtocol *proto = (TlenProtocol *)ptr;
; 1021 : 	if (!proto->jabberOnline) {

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ptr$[esp]
  00005	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  0000c	75 05		 jne	 SHORT $L84017

; 1022 : 		return 1;

  0000e	6a 01		 push	 1
  00010	58		 pop	 eax
  00011	5e		 pop	 esi

; 1039 : }

  00012	c3		 ret	 0
$L84017:

; 1023 : 	}
; 1024 : 	JabberSend(proto, "<p to='c' tp='c' id='"JABBER_IQID"%d'/>", JabberSerialNext(proto));

  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _JabberSerialNext
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@HLEI@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8mim_?$CFd?8?1?$DO?$AA@ ; `string'
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _JabberSend
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 1025 : 	/*
; 1026 : 	MUCCEVENT *mucce;
; 1027 : 	mucce = (MUCCEVENT *) mir_alloc (sizeof(MUCCEVENT));
; 1028 : 	mucce->cbSize = sizeof(MUCCEVENT);
; 1029 : 	mucce->iType = MUCC_EVENT_JOIN;
; 1030 : 	mucce->dwFlags = 0;
; 1031 : 	mucce->pszModule = iface.m_szModuleName;
; 1032 : 	mucce->pszID = NULL;
; 1033 : 	mucce->pszName = NULL;
; 1034 : 	mucce->pszNick = NULL;
; 1035 : 	CallService(MS_MUCC_EVENT, 0, (LPARAM) mucce);
; 1036 : 	mir_free(mucce);
; 1037 : 	*/
; 1038 : 	return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	5e		 pop	 esi

; 1039 : }

  0002b	c3		 ret	 0
_TlenMUCMenuHandleMUC ENDP
_TEXT	ENDS
PUBLIC	_TlenMUCMenuHandleChats
;	COMDAT _TlenMUCMenuHandleChats
_TEXT	SEGMENT
_ptr$ = 8
_mucw$ = -40
_TlenMUCMenuHandleChats PROC NEAR			; COMDAT

; 1042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 1043 : 	MUCCWINDOW mucw;
; 1044 : 	TlenProtocol *proto = (TlenProtocol *)ptr;
; 1045 : 	if (!proto->jabberOnline) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00009	83 b8 78 01 00
	00 00		 cmp	 DWORD PTR [eax+376], 0
  00010	75 05		 jne	 SHORT $L84028

; 1046 : 		return 1;

  00012	6a 01		 push	 1
  00014	58		 pop	 eax

; 1054 : }

  00015	c9		 leave
  00016	c3		 ret	 0
$L84028:

; 1047 : 	}
; 1048 : 	mucw.cbSize = sizeof(MUCCWINDOW);
; 1049 : 	mucw.iType = MUCC_WINDOW_CHATLIST;
; 1050 : 	mucw.pszModule = proto->iface.m_szModuleName;

  00017	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]

; 1051 : 	mucw.pszModuleName = proto->iface.m_szProtoName;

  0001a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001d	89 45 e8	 mov	 DWORD PTR _mucw$[ebp+16], eax

; 1052 : 	CallService(MS_MUCC_NEW_WINDOW, 0, (LPARAM) &mucw);

  00020	8d 45 d8	 lea	 eax, DWORD PTR _mucw$[ebp]
  00023	50		 push	 eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00029	6a 00		 push	 0
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@HJGC@MUCC?1NewWindow?$AA@ ; `string'
  00030	c7 45 d8 28 00
	00 00		 mov	 DWORD PTR _mucw$[ebp], 40 ; 00000028H
  00037	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _mucw$[ebp+4], 2
  0003e	89 4d e4	 mov	 DWORD PTR _mucw$[ebp+12], ecx
  00041	ff 50 24	 call	 DWORD PTR [eax+36]
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1053 : 	return 0;

  00047	33 c0		 xor	 eax, eax

; 1054 : }

  00049	c9		 leave
  0004a	c3		 ret	 0
_TlenMUCMenuHandleChats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@FHGJ@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	_TlenMUCContactMenuHandleMUC
;	COMDAT ??_C@_0BL@FHGJ@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8?$CFs?8?1?$DO?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BL@FHGJ@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'p to=''c'' tp=''c'' id=''%s''/>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenMUCContactMenuHandleMUC
_TEXT	SEGMENT
_ptr$ = 8
_wParam$ = 12
_dbv$ = -24
_serialId$84048 = -56
_cgs$84409 = -12
_TlenMUCContactMenuHandleMUC PROC NEAR			; COMDAT

; 1057 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi

; 1058 : 	HANDLE hContact;
; 1059 : 	DBVARIANT dbv;
; 1060 : 	JABBER_LIST_ITEM *item;
; 1061 : 	TlenProtocol *proto = (TlenProtocol *)ptr;
; 1062 : 	if (!proto->jabberOnline) {

  00007	8b 75 08	 mov	 esi, DWORD PTR _ptr$[ebp]
  0000a	83 be 78 01 00
	00 00		 cmp	 DWORD PTR [esi+376], 0
  00011	75 08		 jne	 SHORT $L84043

; 1063 : 		return 1;

  00013	6a 01		 push	 1
  00015	58		 pop	 eax
  00016	e9 91 00 00 00	 jmp	 $L84037
$L84043:

; 1064 : 	}
; 1065 : 	if ((hContact=(HANDLE) wParam)!=NULL && proto->jabberOnline) {

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _wParam$[ebp], 0
  0001f	0f 84 85 00 00
	00		 je	 $L84413

; 1066 : 		if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00025	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84409[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0002f	89 45 f4	 mov	 DWORD PTR _cgs$84409[ebp], eax
  00032	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00035	89 45 fc	 mov	 DWORD PTR _cgs$84409[ebp+8], eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84409[ebp]
  0003b	50		 push	 eax
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00041	ff 75 0c	 push	 DWORD PTR _wParam$[ebp]
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00049	ff 50 24	 call	 DWORD PTR [eax+36]
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	85 c0		 test	 eax, eax
  00051	75 57		 jne	 SHORT $L84413
  00053	57		 push	 edi

; 1067 : 			char serialId[32];
; 1068 : 			sprintf(serialId, JABBER_IQID"%d", JabberSerialNext(proto));

  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _JabberSerialNext
  0005a	50		 push	 eax
  0005b	8d 45 c8	 lea	 eax, DWORD PTR _serialId$84048[ebp]
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06DEKK@mim_?$CFd?$AA@ ; `string'
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 1069 : 			item = JabberListAdd(proto, LIST_INVITATIONS, serialId);

  0006a	8d 45 c8	 lea	 eax, DWORD PTR _serialId$84048[ebp]
  0006d	50		 push	 eax
  0006e	6a 03		 push	 3
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 _JabberListAdd

; 1070 : 			item->nick = mir_strdup(dbv.pszVal);

  00076	ff 75 ec	 push	 DWORD PTR _dbv$[ebp+4]
  00079	8b f8		 mov	 edi, eax
  0007b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00081	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 1071 : 			JabberSend(proto, "<p to='c' tp='c' id='%s'/>", serialId);

  00084	8d 45 c8	 lea	 eax, DWORD PTR _serialId$84048[ebp]
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FHGJ@?$DMp?5to?$DN?8c?8?5tp?$DN?8c?8?5id?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 _JabberSend

; 1072 : 			DBFreeVariant(&dbv);

  00093	8d 45 e8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00096	50		 push	 eax
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0009c	6a 00		 push	 0
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000a3	ff 50 24	 call	 DWORD PTR [eax+36]
  000a6	83 c4 38	 add	 esp, 56			; 00000038H
  000a9	5f		 pop	 edi
$L84413:

; 1073 : 		}
; 1074 : 	}
; 1075 : 	return 0;

  000aa	33 c0		 xor	 eax, eax
$L84037:
  000ac	5e		 pop	 esi

; 1076 : }

  000ad	c9		 leave
  000ae	c3		 ret	 0
_TlenMUCContactMenuHandleMUC ENDP
_TEXT	ENDS
END
