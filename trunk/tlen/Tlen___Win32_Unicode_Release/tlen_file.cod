	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_file.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@NLKJ@Thread?5started?3?5type?$DNfile_receiv@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CMPD@Entering?5file?5receive?5loop?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@OFJJ@Connection?5failed?5?9?5receiving?5as@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@PODA@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?87?8?5a?$DN?8?$CFs?8?5p?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMNC@Waiting?5for?5the?5file?5to?5be?5recei@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NFGI@Finish?5all?5files?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@ENML@Thread?5ended?3?5type?$DNfile_receive?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PCFE@?2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CLDE@Saving?5to?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@HIOC@Change?5to?5FT_RECEIVING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JKLG@Receiving?5data?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@LBDP@File?5received?0?5advancing?5to?5the?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@EBIB@Thread?5started?3?5type?$DNtlen_file_s@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@OLME@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?86?8?5a?$DN?8?$CFs?8?5p?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@JFMN@Waiting?5for?5the?5file?5to?5be?5sent?4@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@IMLC@ft?9?$DOs?5is?5NULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IPEE@Sending?5as?5client?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@CNGK@Entering?5send?5loop?5for?5this?5file@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CO@DACA@Closing?5connection?5for?5this?5file@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0ED@MCPA@Cannot?5allocate?5port?5to?5bind?5for@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@NAKP@Finish?5successfully?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@FGGL@Finish?5with?5errors?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PODG@Thread?5ended?3?5type?$DNfile_send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CBAI@FT_INITIALIZING?3?5recv?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@OHDI@FT_INITIALIZING?3?5recv?5type?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@BCNE@Requested?5file?5?$CI?$CD?$CFd?$CJ?5is?5invalid?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@ONAN@Sending?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HDBK@File?5cannot?5be?5opened?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OBPO@Sending?5file?5data?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DHKG@File?5sent?0?5advancing?5to?5the?5next@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GNJA@freeing?5ft?5struct?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IFC@f?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JGFL@1?5File?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KBMI@?$CFd?5Files?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@EIHO@sending?5chainrecv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GDOL@?$DMf?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01EOC@6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOHF@7?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KPCI@8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _Netlib_CloseHandle
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileReceiveThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileReceivingConnection
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileReceiveParse
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileSendingThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileSendingConnection
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileSendParse
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileCancelAll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenFileCreateFT
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessF
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_TlenFileCancelAll
PUBLIC	??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BC@GNJA@freeing?5ft?5struct?$AA@		; `string'
PUBLIC	??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@		; `string'
EXTRN	__imp__SetEvent@4:NEAR
EXTRN	_JabberListRemoveByIndex:NEAR
EXTRN	_JabberListFindNext:NEAR
EXTRN	_JabberListGetItemPtrFromIndex:NEAR
EXTRN	_TlenP2PFreeFileTransfer:NEAR
EXTRN	_JabberLog:NEAR
EXTRN	_pluginLink:DWORD
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_netlib.h
_DATA	SEGMENT
??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ DB 'Netlib/CloseHandle', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ DB 'Closing ft->s = %'
	DB	'd', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GNJA@freeing?5ft?5struct?$AA@
_DATA	SEGMENT
??_C@_0BC@GNJA@freeing?5ft?5struct?$AA@ DB 'freeing ft struct', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenFileCancelAll
_TEXT	SEGMENT
_proto$ = 8
_TlenFileCancelAll PROC NEAR				; COMDAT

; 523  : {

  00000	53		 push	 ebx

; 524  : 	JABBER_LIST_ITEM *item;
; 525  : 	HANDLE hEvent;
; 526  : 	int i = 0;
; 527  : 
; 528  : 	while ((i=JabberListFindNext(proto, LIST_FILE, 0)) >=0 ) {

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _proto$[esp]
  00005	55		 push	 ebp
  00006	33 ed		 xor	 ebp, ebp
  00008	57		 push	 edi
  00009	55		 push	 ebp
  0000a	6a 02		 push	 2
  0000c	53		 push	 ebx
  0000d	e8 00 00 00 00	 call	 _JabberListFindNext
  00012	8b f8		 mov	 edi, eax
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	3b fd		 cmp	 edi, ebp
  00019	0f 8c 97 00 00
	00		 jl	 $L83480
  0001f	56		 push	 esi
$L83479:

; 529  : 		if ((item=JabberListGetItemPtrFromIndex(proto, i)) != NULL) {

  00020	57		 push	 edi
  00021	53		 push	 ebx
  00022	e8 00 00 00 00	 call	 _JabberListGetItemPtrFromIndex
  00027	59		 pop	 ecx
  00028	3b c5		 cmp	 eax, ebp
  0002a	59		 pop	 ecx
  0002b	74 72		 je	 SHORT $L83492

; 530  : 			TLEN_FILE_TRANSFER *ft = item->ft;

  0002d	8b 70 58	 mov	 esi, DWORD PTR [eax+88]

; 531  : 			JabberListRemoveByIndex(proto, i);

  00030	57		 push	 edi
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 _JabberListRemoveByIndex
  00037	59		 pop	 ecx

; 532  : 			if (ft != NULL) {

  00038	3b f5		 cmp	 esi, ebp
  0003a	59		 pop	 ecx
  0003b	74 62		 je	 SHORT $L83492

; 533  : 				if (ft->s) {

  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	3b c5		 cmp	 eax, ebp
  00042	74 42		 je	 SHORT $L83486

; 534  : 					//ProtoBroadcastAck(iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);
; 535  : 					JabberLog(ft->proto, "Closing ft->s = %d", ft->s);

  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@DINM@Closing?5ft?9?$DOs?5?$DN?5?$CFd?$AA@ ; `string'
  0004a	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00050	e8 00 00 00 00	 call	 _JabberLog

; 536  : 					ft->state = FT_ERROR;
; 537  : 					Netlib_CloseHandle(ft->s);

  00055	55		 push	 ebp
  00056	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
  0005d	ff 76 04	 push	 DWORD PTR [esi+4]
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  0006a	ff 50 24	 call	 DWORD PTR [eax+36]

; 538  : 					ft->s = NULL;
; 539  : 					if (ft->hFileEvent != NULL) {

  0006d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00070	83 c4 18	 add	 esp, 24			; 00000018H
  00073	3b c5		 cmp	 eax, ebp
  00075	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00078	74 25		 je	 SHORT $L83492

; 540  : 						hEvent = ft->hFileEvent;
; 541  : 						ft->hFileEvent = NULL;
; 542  : 						SetEvent(hEvent);

  0007a	50		 push	 eax
  0007b	89 6e 3c	 mov	 DWORD PTR [esi+60], ebp
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 543  : 					}
; 544  : 				} else {

  00084	eb 19		 jmp	 SHORT $L83492
$L83486:

; 545  : 					JabberLog(ft->proto, "freeing ft struct");

  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@GNJA@freeing?5ft?5struct?$AA@ ; `string'
  0008b	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00091	e8 00 00 00 00	 call	 _JabberLog

; 546  : 					TlenP2PFreeFileTransfer(ft);

  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83492:
  0009f	55		 push	 ebp
  000a0	6a 02		 push	 2
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 _JabberListFindNext
  000a8	8b f8		 mov	 edi, eax
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	3b fd		 cmp	 edi, ebp
  000af	0f 8d 6b ff ff
	ff		 jge	 $L83479
  000b5	5e		 pop	 esi
$L83480:
  000b6	5f		 pop	 edi
  000b7	5d		 pop	 ebp

; 547  : 				}
; 548  : 			}
; 549  : 		}
; 550  : 	}
; 551  : 	return 0;

  000b8	33 c0		 xor	 eax, eax
  000ba	5b		 pop	 ebx

; 552  : }

  000bb	c3		 ret	 0
_TlenFileCancelAll ENDP
_TEXT	ENDS
PUBLIC	_TlenFileCreateFT
EXTRN	_mmi:BYTE
EXTRN	_memset:NEAR
;	COMDAT _TlenFileCreateFT
_TEXT	SEGMENT
_proto$ = 8
_jid$ = 12
_TlenFileCreateFT PROC NEAR				; COMDAT

; 554  : TLEN_FILE_TRANSFER *TlenFileCreateFT(TlenProtocol *proto, const char *jid) {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 555  : 	TLEN_FILE_TRANSFER *ft;
; 556  :     ft = (TLEN_FILE_TRANSFER *) mir_alloc(sizeof(TLEN_FILE_TRANSFER));

  00002	bf 80 02 00 00	 mov	 edi, 640		; 00000280H
  00007	57		 push	 edi
  00008	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0000e	8b f0		 mov	 esi, eax

; 557  :     memset(ft, 0, sizeof(TLEN_FILE_TRANSFER));

  00010	57		 push	 edi
  00011	6a 00		 push	 0
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _memset

; 558  :     ft->proto = proto;

  00019	8b 44 24 1c	 mov	 eax, DWORD PTR _proto$[esp+20]

; 559  :     ft->jid = mir_strdup(jid);

  0001d	ff 74 24 20	 push	 DWORD PTR _jid$[esp+20]
  00021	89 86 7c 02 00
	00		 mov	 DWORD PTR [esi+636], eax
  00027	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 560  : 	return ft;

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 561  : }

  00037	c3		 ret	 0
_TlenFileCreateFT ENDP
_TEXT	ENDS
PUBLIC	_TlenProcessF
PUBLIC	??_C@_01IFC@f?$AA@				; `string'
PUBLIC	??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@		; `string'
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_01PHOL@e?$AA@				; `string'
PUBLIC	??_C@_01FBAH@1?$AA@				; `string'
PUBLIC	??_C@_01JAP@i?$AA@				; `string'
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	??_C@_01FMOK@n?$AA@				; `string'
PUBLIC	??_C@_06JGFL@1?5File?$AA@			; `string'
PUBLIC	??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@	; `string'
PUBLIC	??_C@_08KBMI@?$CFd?5Files?$AA@			; `string'
PUBLIC	??_C@_09KKHM@?1RecvFile?$AA@			; `string'
PUBLIC	??_C@_0BC@EIHO@sending?5chainrecv?$AA@		; `string'
PUBLIC	??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@		; `string'
PUBLIC	??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BC@GDOL@?$DMf?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_01ECJ@3?$AA@				; `string'
PUBLIC	??_C@_01FBMM@4?$AA@				; `string'
PUBLIC	??_C@_01PLFL@5?$AA@				; `string'
PUBLIC	??_C@_01EOC@6?$AA@				; `string'
PUBLIC	??_C@_01FNLH@a?$AA@				; `string'
PUBLIC	??_C@_01FOFA@p?$AA@				; `string'
PUBLIC	??_C@_01KOHF@7?$AA@				; `string'
PUBLIC	??_C@_01KPCI@8?$AA@				; `string'
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	__imp__atoi:NEAR
EXTRN	_JabberListRemove:NEAR
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_JabberListGetItemPtr:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcmp:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__strchr:NEAR
EXTRN	__imp__strncpy:NEAR
EXTRN	__imp___snprintf:NEAR
EXTRN	_JabberSend:NEAR
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	__imp__time:NEAR
EXTRN	_JabberTextDecode:NEAR
EXTRN	_JabberForkThread:NEAR
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IFC@f?$AA@
_DATA	SEGMENT
??_C@_01IFC@f?$AA@ DB 'f', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT
??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ DB '%s@%s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT
??_C@_01PHOL@e?$AA@ DB 'e', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT
??_C@_01FBAH@1?$AA@ DB '1', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT
??_C@_01JAP@i?$AA@ DB 'i', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT
??_C@_01FMOK@n?$AA@ DB 'n', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JGFL@1?5File?$AA@
_DATA	SEGMENT
??_C@_06JGFL@1?5File?$AA@ DB '1 File', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT
??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ DB 'LangPack/TranslateStrin'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KBMI@?$CFd?5Files?$AA@
_DATA	SEGMENT
??_C@_08KBMI@?$CFd?5Files?$AA@ DB '%d Files', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
_DATA	SEGMENT
??_C@_09KKHM@?1RecvFile?$AA@ DB '/RecvFile', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@EIHO@sending?5chainrecv?$AA@
_DATA	SEGMENT
??_C@_0BC@EIHO@sending?5chainrecv?$AA@ DB 'sending chainrecv', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT
??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ DB 'Proto/ChainRecv', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'f i=''%s'' e=''4'' t=''%s''/>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GDOL@?$DMf?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BC@GDOL@?$DMf?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ DB '<f e=''4'''
	DB	' t=''%s''/>', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT
??_C@_01ECJ@3?$AA@ DB '3', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT
??_C@_01FBMM@4?$AA@ DB '4', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT
??_C@_01PLFL@5?$AA@ DB '5', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01EOC@6?$AA@
_DATA	SEGMENT
??_C@_01EOC@6?$AA@ DB '6', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT
??_C@_01FNLH@a?$AA@ DB 'a', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT
??_C@_01FOFA@p?$AA@ DB 'p', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOHF@7?$AA@
_DATA	SEGMENT
??_C@_01KOHF@7?$AA@ DB '7', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KPCI@8?$AA@
_DATA	SEGMENT
??_C@_01KPCI@8?$AA@ DB '8', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenProcessF
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_ccs$ = -60
_pre$ = -44
_from$ = 12
_p$ = 12
_jid$ = -188
_szFilename$ = -448
_item$ = 8
_ack$83817 = -28
_ack$83824 = -28
_TlenProcessF PROC NEAR					; COMDAT

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 568  : 	TLEN_FILE_TRANSFER *ft;
; 569  : 	CCSDATA ccs;
; 570  : 	PROTORECVEVENT pre;
; 571  : 	char *szBlob, *from, *p, *e;
; 572  : 	char jid[128], szFilename[MAX_PATH];
; 573  : 	int numFiles;
; 574  : 	JABBER_LIST_ITEM *item;
; 575  : 
; 576  : //	if (!node->name || strcmp(node->name, "f")) return;
; 577  : 	if (info == NULL) return;

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  0000e	57		 push	 edi
  0000f	85 f6		 test	 esi, esi
  00011	0f 84 60 06 00
	00		 je	 $L83823

; 578  : 
; 579  : 	if ((from=JabberXmlGetAttrValue(node, "f")) != NULL) {

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _node$[ebp]
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  0001f	53		 push	 ebx
  00020	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00025	8b f8		 mov	 edi, eax
  00027	59		 pop	 ecx
  00028	85 ff		 test	 edi, edi
  0002a	59		 pop	 ecx
  0002b	89 7d 0c	 mov	 DWORD PTR _from$[ebp], edi
  0002e	0f 84 43 06 00
	00		 je	 $L83823

; 580  : 
; 581  : 		if (strchr(from, '@') == NULL) {

  00034	6a 40		 push	 64			; 00000040H
  00036	57		 push	 edi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  0003d	59		 pop	 ecx
  0003e	85 c0		 test	 eax, eax
  00040	59		 pop	 ecx
  00041	75 24		 jne	 SHORT $L83527

; 582  : 			_snprintf(jid, sizeof(jid), "%s@%s", from, info->server);

  00043	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  00049	50		 push	 eax
  0004a	57		 push	 edi
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  00050	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  00056	68 80 00 00 00	 push	 128			; 00000080H
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  00062	83 c4 14	 add	 esp, 20			; 00000014H

; 583  : 		} else {

  00065	eb 1b		 jmp	 SHORT $L83529
$L83527:

; 584  : 			_snprintf(jid, sizeof(jid), "%s", from);

  00067	57		 push	 edi
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@ ; `string'
  0006d	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  00073	68 80 00 00 00	 push	 128			; 00000080H
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
$L83529:

; 585  : 		}
; 586  : 		if ((e=JabberXmlGetAttrValue(node, "e")) != NULL) {

  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  00087	53		 push	 ebx
  00088	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0008d	8b f8		 mov	 edi, eax
  0008f	59		 pop	 ecx
  00090	85 ff		 test	 edi, edi
  00092	59		 pop	 ecx
  00093	0f 84 de 05 00
	00		 je	 $L83823

; 587  : 
; 588  : 			if (!strcmp(e, "1")) {

  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  0009e	57		 push	 edi
  0009f	e8 00 00 00 00	 call	 _strcmp
  000a4	59		 pop	 ecx
  000a5	85 c0		 test	 eax, eax
  000a7	59		 pop	 ecx
  000a8	0f 85 de 01 00
	00		 jne	 $L83534

; 589  : 				// FILE_RECV : e='1' : File transfer request
; 590  :                 ft = TlenFileCreateFT(info->proto, jid);

  000ae	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  000b4	8d be 20 0f 00
	00		 lea	 edi, DWORD PTR [esi+3872]
  000ba	50		 push	 eax
  000bb	ff 37		 push	 DWORD PTR [edi]
  000bd	e8 00 00 00 00	 call	 _TlenFileCreateFT
  000c2	8b f0		 mov	 esi, eax

; 591  : 				ft->hContact = JabberHContactFromJID(info->proto, jid);

  000c4	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  000ca	50		 push	 eax
  000cb	ff 37		 push	 DWORD PTR [edi]
  000cd	e8 00 00 00 00	 call	 _JabberHContactFromJID

; 592  : 
; 593  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL)

  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000d7	53		 push	 ebx
  000d8	89 06		 mov	 DWORD PTR [esi], eax
  000da	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000df	33 ff		 xor	 edi, edi
  000e1	83 c4 18	 add	 esp, 24			; 00000018H
  000e4	3b c7		 cmp	 eax, edi
  000e6	74 0b		 je	 SHORT $L83537

; 594  : 					ft->iqId = mir_strdup(p);

  000e8	50		 push	 eax
  000e9	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  000ef	59		 pop	 ecx
  000f0	89 46 18	 mov	 DWORD PTR [esi+24], eax
$L83537:

; 595  : 
; 596  : 				szFilename[0] = '\0';

  000f3	80 a5 40 fe ff
	ff 00		 and	 BYTE PTR _szFilename$[ebp], 0

; 597  : 				if ((p=JabberXmlGetAttrValue(node, "c")) != NULL) {

  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  000ff	53		 push	 ebx
  00100	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00105	59		 pop	 ecx
  00106	3b c7		 cmp	 eax, edi
  00108	59		 pop	 ecx
  00109	0f 84 98 00 00
	00		 je	 $L83552

; 598  : 					numFiles = atoi(p);

  0010f	50		 push	 eax
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 599  : 					if (numFiles == 1) {

  00116	83 f8 01	 cmp	 eax, 1
  00119	59		 pop	 ecx
  0011a	75 5c		 jne	 SHORT $L83828

; 600  : 						if ((p=JabberXmlGetAttrValue(node, "n")) != NULL) {

  0011c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  00121	53		 push	 ebx
  00122	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00127	59		 pop	 ecx
  00128	3b c7		 cmp	 eax, edi
  0012a	59		 pop	 ecx
  0012b	74 26		 je	 SHORT $L83544

; 601  : 							p = JabberTextDecode(p);

  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _JabberTextDecode
  00133	8b d8		 mov	 ebx, eax

; 602  : 							strncpy(szFilename, p, sizeof(szFilename));

  00135	c7 04 24 04 01
	00 00		 mov	 DWORD PTR [esp], 260	; 00000104H
  0013c	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  00142	53		 push	 ebx
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 603  : 							mir_free(p);

  0014a	53		 push	 ebx
  0014b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 604  : 						} else {

  00151	eb 51		 jmp	 SHORT $L83829
$L83544:

; 605  : 							strcpy(szFilename, Translate("1 File"));

  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00158	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JGFL@1?5File?$AA@ ; `string'
  0015d	57		 push	 edi
  0015e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00163	ff 50 24	 call	 DWORD PTR [eax+36]
  00166	50		 push	 eax
  00167	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _strcpy
  00173	83 c4 14	 add	 esp, 20			; 00000014H

; 606  : 						}
; 607  : 					}
; 608  : 					else if (numFiles > 1) {

  00176	eb 2f		 jmp	 SHORT $L83552
$L83828:
  00178	7e 2d		 jle	 SHORT $L83552

; 609  : 						_snprintf(szFilename, sizeof(szFilename), Translate("%d Files"), numFiles);

  0017a	50		 push	 eax
  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00180	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08KBMI@?$CFd?5Files?$AA@ ; `string'
  00185	57		 push	 edi
  00186	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  0018b	ff 50 24	 call	 DWORD PTR [eax+36]
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00191	50		 push	 eax
  00192	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  00198	68 04 01 00 00	 push	 260			; 00000104H
  0019d	50		 push	 eax
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf
$L83829:
  001a4	83 c4 10	 add	 esp, 16			; 00000010H
$L83552:

; 610  : 					}
; 611  : 				}
; 612  : 
; 613  : 				if (szFilename[0]!='\0' && ft->iqId!=NULL) {

  001a7	80 bd 40 fe ff
	ff 00		 cmp	 BYTE PTR _szFilename$[ebp], 0
  001ae	0f 84 9f 00 00
	00		 je	 $L83557
  001b4	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  001b7	0f 84 96 00 00
	00		 je	 $L83557

; 614  : 					// blob is DWORD(*ft), ASCIIZ(filenames), ASCIIZ(description)
; 615  : 					szBlob = (char *) mir_alloc(sizeof(DWORD) + strlen(szFilename) + 2);

  001bd	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _strlen
  001c9	83 c0 06	 add	 eax, 6
  001cc	50		 push	 eax
  001cd	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  001d3	8b f8		 mov	 edi, eax

; 616  : 					*((PDWORD) szBlob) = (DWORD) ft;
; 617  : 					strcpy(szBlob + sizeof(DWORD), szFilename);

  001d5	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  001db	50		 push	 eax
  001dc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  001df	89 37		 mov	 DWORD PTR [edi], esi
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _strcpy

; 618  : 					szBlob[sizeof(DWORD) + strlen(szFilename) + 1] = '\0';

  001e7	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _szFilename$[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 _strlen
  001f3	80 64 38 05 00	 and	 BYTE PTR [eax+edi+5], 0

; 619  : 					pre.flags = 0;

  001f8	33 db		 xor	 ebx, ebx

; 620  : 					pre.timestamp = time(NULL);

  001fa	53		 push	 ebx
  001fb	89 5d d4	 mov	 DWORD PTR _pre$[ebp], ebx
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
  00204	89 45 d8	 mov	 DWORD PTR _pre$[ebp+4], eax

; 621  : 					pre.szMessage = szBlob;

  00207	89 7d dc	 mov	 DWORD PTR _pre$[ebp+8], edi

; 622  : 					pre.lParam = 0;

  0020a	89 5d e0	 mov	 DWORD PTR _pre$[ebp+12], ebx

; 623  : 					ccs.szProtoService = PSR_FILE;

  0020d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_09KKHM@?1RecvFile?$AA@ ; `string'

; 624  : 					ccs.hContact = ft->hContact;

  00214	8b 06		 mov	 eax, DWORD PTR [esi]

; 625  : 					ccs.wParam = 0;
; 626  : 					ccs.lParam = (LPARAM) &pre;
; 627  : 					JabberLog(ft->proto, "sending chainrecv");

  00216	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@EIHO@sending?5chainrecv?$AA@ ; `string'
  0021b	89 45 c4	 mov	 DWORD PTR _ccs$[ebp], eax
  0021e	8d 45 d4	 lea	 eax, DWORD PTR _pre$[ebp]
  00221	89 5d cc	 mov	 DWORD PTR _ccs$[ebp+8], ebx
  00224	89 45 d0	 mov	 DWORD PTR _ccs$[ebp+12], eax
  00227	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0022d	e8 00 00 00 00	 call	 _JabberLog

; 628  : 					CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  00232	8d 45 c4	 lea	 eax, DWORD PTR _ccs$[ebp]
  00235	50		 push	 eax
  00236	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0023b	53		 push	 ebx
  0023c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  00241	ff 50 24	 call	 DWORD PTR [eax+36]

; 629  : 					mir_free(szBlob);

  00244	57		 push	 edi
  00245	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0024b	83 c4 30	 add	 esp, 48			; 00000030H

; 630  : 				}
; 631  : 				else {

  0024e	e9 24 04 00 00	 jmp	 $L83823
$L83557:

; 632  : 					// malformed <f/> request, reject
; 633  : 					if (ft->iqId)

  00253	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 634  : 						JabberSend(ft->proto, "<f i='%s' e='4' t='%s'/>", ft->iqId, from);

  00256	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  00259	3b c7		 cmp	 eax, edi
  0025b	74 16		 je	 SHORT $L83571
  0025d	50		 push	 eax
  0025e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@LDJC@?$DMf?5i?$DN?8?$CFs?8?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00263	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00269	e8 00 00 00 00	 call	 _JabberSend
  0026e	83 c4 10	 add	 esp, 16			; 00000010H

; 635  : 					else

  00271	eb 13		 jmp	 SHORT $L83573
$L83571:

; 636  : 						JabberSend(ft->proto, "<f e='4' t='%s'/>", from);

  00273	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@GDOL@?$DMf?5e?$DN?84?8?5t?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00278	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0027e	e8 00 00 00 00	 call	 _JabberSend
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83573:

; 637  : 					TlenP2PFreeFileTransfer(ft);

  00286	56		 push	 esi

; 638  : 				}
; 639  : 			}
; 640  : 			else if (!strcmp(e, "3")) {

  00287	e9 9b 00 00 00	 jmp	 $L83831
$L83534:
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01ECJ@3?$AA@ ; `string'
  00291	57		 push	 edi
  00292	e8 00 00 00 00	 call	 _strcmp
  00297	59		 pop	 ecx
  00298	85 c0		 test	 eax, eax
  0029a	59		 pop	 ecx
  0029b	0f 85 a5 00 00
	00		 jne	 $L83576

; 641  : 				// FILE_RECV : e='3' : invalid transfer error
; 642  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  002a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  002a6	53		 push	 ebx
  002a7	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  002ac	59		 pop	 ecx
  002ad	89 45 0c	 mov	 DWORD PTR _p$[ebp], eax
  002b0	85 c0		 test	 eax, eax
  002b2	59		 pop	 ecx
  002b3	0f 84 be 03 00
	00		 je	 $L83823

; 643  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  002b9	50		 push	 eax
  002ba	6a 02		 push	 2
  002bc	5b		 pop	 ebx
  002bd	53		 push	 ebx
  002be	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  002c4	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  002c9	8b f8		 mov	 edi, eax
  002cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ce	85 ff		 test	 edi, edi
  002d0	0f 84 a1 03 00
	00		 je	 $L83823

; 644  : 						if (item->ft != NULL) {

  002d6	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  002d9	85 c0		 test	 eax, eax
  002db	74 55		 je	 SHORT $L83583

; 645  : 							HANDLE  hEvent = item->ft->hFileEvent;

  002dd	8b 70 3c	 mov	 esi, DWORD PTR [eax+60]

; 646  : 							item->ft->hFileEvent = NULL;

  002e0	83 60 3c 00	 and	 DWORD PTR [eax+60], 0

; 647  : 							item->ft->state = FT_ERROR;

  002e4	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  002e7	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4

; 648  : 							if (item->ft->s != NULL) {

  002ee	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  002f1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002f4	85 c9		 test	 ecx, ecx
  002f6	74 2e		 je	 SHORT $L83587

; 649  : 								Netlib_CloseHandle(item->ft->s);

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002fd	6a 00		 push	 0
  002ff	51		 push	 ecx
  00300	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00305	ff 50 24	 call	 DWORD PTR [eax+36]

; 650  : 								item->ft->s = NULL;

  00308	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  0030b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030e	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 651  : 								if (hEvent != NULL) {

  00312	85 f6		 test	 esi, esi
  00314	0f 84 5d 03 00
	00		 je	 $L83823

; 652  : 									SetEvent(hEvent);

  0031a	56		 push	 esi
$L83832:
  0031b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 653  : 								}
; 654  : 							} else {

  00321	e9 51 03 00 00	 jmp	 $L83823
$L83587:

; 655  : 								TlenP2PFreeFileTransfer(item->ft);

  00326	50		 push	 eax
$L83831:
  00327	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  0032c	59		 pop	 ecx

; 656  : 							}
; 657  : 						} else {

  0032d	e9 45 03 00 00	 jmp	 $L83823
$L83583:

; 658  : 							JabberListRemove(info->proto, LIST_FILE, p);

  00332	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  00335	53		 push	 ebx
  00336	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0033c	e8 00 00 00 00	 call	 _JabberListRemove

; 659  : 						}
; 660  : 					}
; 661  : 				}
; 662  : 			}
; 663  : 			else if (!strcmp(e, "4")) {

  00341	e9 2e 03 00 00	 jmp	 $L83830
$L83576:
  00346	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBMM@4?$AA@ ; `string'
  0034b	57		 push	 edi
  0034c	e8 00 00 00 00	 call	 _strcmp
  00351	59		 pop	 ecx
  00352	85 c0		 test	 eax, eax
  00354	59		 pop	 ecx
  00355	0f 85 b3 00 00
	00		 jne	 $L83594

; 664  : 				// FILE_SEND : e='4' : File sending request was denied by the remote client
; 665  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  0035b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00360	53		 push	 ebx
  00361	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00366	59		 pop	 ecx
  00367	89 45 0c	 mov	 DWORD PTR _p$[ebp], eax
  0036a	85 c0		 test	 eax, eax
  0036c	59		 pop	 ecx
  0036d	0f 84 04 03 00
	00		 je	 $L83823

; 666  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  00373	50		 push	 eax
  00374	6a 02		 push	 2
  00376	5b		 pop	 ebx
  00377	53		 push	 ebx
  00378	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0037e	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00383	83 c4 0c	 add	 esp, 12			; 0000000cH
  00386	89 45 08	 mov	 DWORD PTR _item$[ebp], eax
  00389	85 c0		 test	 eax, eax
  0038b	0f 84 e6 02 00
	00		 je	 $L83823

; 667  : 						if (!strcmp(item->ft->jid, jid)) {

  00391	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00394	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _jid$[ebp]
  0039a	51		 push	 ecx
  0039b	ff 70 10	 push	 DWORD PTR [eax+16]
  0039e	e8 00 00 00 00	 call	 _strcmp
  003a3	59		 pop	 ecx
  003a4	85 c0		 test	 eax, eax
  003a6	59		 pop	 ecx
  003a7	0f 85 ca 02 00
	00		 jne	 $L83823

; 668  : 							ProtoBroadcastAck(info->proto->iface.m_szModuleName, item->ft->hContact, ACKTYPE_FILE, ACKRESULT_DENIED, item->ft, 0);

  003ad	6a 06		 push	 6
  003af	8d 7d e8	 lea	 edi, DWORD PTR _ack$83817[ebp+4]
  003b2	59		 pop	 ecx
  003b3	f3 ab		 rep stosd
  003b5	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  003bb	83 65 fc 00	 and	 DWORD PTR _ack$83817[ebp+24], 0
  003bf	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83817[ebp], 28 ; 0000001cH
  003c6	89 5d f0	 mov	 DWORD PTR _ack$83817[ebp+12], ebx
  003c9	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003cc	c7 45 f4 6b 00
	00 00		 mov	 DWORD PTR _ack$83817[ebp+16], 107 ; 0000006bH
  003d3	89 45 e8	 mov	 DWORD PTR _ack$83817[ebp+4], eax
  003d6	8b 45 08	 mov	 eax, DWORD PTR _item$[ebp]
  003d9	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  003dc	89 45 f8	 mov	 DWORD PTR _ack$83817[ebp+20], eax
  003df	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e1	8d 45 e4	 lea	 eax, DWORD PTR _ack$83817[ebp]
  003e4	50		 push	 eax
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003ea	6a 00		 push	 0
  003ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  003f1	89 4d ec	 mov	 DWORD PTR _ack$83817[ebp+8], ecx
  003f4	ff 50 24	 call	 DWORD PTR [eax+36]

; 669  : 							JabberListRemove(info->proto, LIST_FILE, p);

  003f7	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  003fa	53		 push	 ebx
  003fb	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00401	e8 00 00 00 00	 call	 _JabberListRemove
  00406	83 c4 18	 add	 esp, 24			; 00000018H

; 670  : 						}
; 671  : 					}
; 672  : 				}
; 673  : 			}
; 674  : 			else if (!strcmp(e, "5")) {

  00409	e9 69 02 00 00	 jmp	 $L83823
$L83594:
  0040e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PLFL@5?$AA@ ; `string'
  00413	57		 push	 edi
  00414	e8 00 00 00 00	 call	 _strcmp
  00419	59		 pop	 ecx
  0041a	85 c0		 test	 eax, eax
  0041c	59		 pop	 ecx
  0041d	75 5f		 jne	 SHORT $L83602

; 675  : 				// FILE_SEND : e='5' : File sending request was accepted
; 676  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  0041f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00424	53		 push	 ebx
  00425	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0042a	59		 pop	 ecx
  0042b	85 c0		 test	 eax, eax
  0042d	59		 pop	 ecx
  0042e	0f 84 43 02 00
	00		 je	 $L83823

; 677  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  00434	50		 push	 eax
  00435	6a 02		 push	 2
  00437	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0043d	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00442	8b f0		 mov	 esi, eax
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH
  00447	85 f6		 test	 esi, esi
  00449	0f 84 28 02 00
	00		 je	 $L83823

; 678  : 						if (!strcmp(item->ft->jid, jid))

  0044f	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  00455	50		 push	 eax
  00456	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00459	ff 70 10	 push	 DWORD PTR [eax+16]
  0045c	e8 00 00 00 00	 call	 _strcmp
  00461	59		 pop	 ecx
  00462	85 c0		 test	 eax, eax
  00464	59		 pop	 ecx
  00465	0f 85 0c 02 00
	00		 jne	 $L83823

; 679  : 							JabberForkThread((void (__cdecl *)(void*))TlenFileSendingThread, 0, item->ft);

  0046b	ff 76 58	 push	 DWORD PTR [esi+88]
  0046e	50		 push	 eax
  0046f	68 00 00 00 00	 push	 OFFSET FLAT:_TlenFileSendingThread
  00474	e8 00 00 00 00	 call	 _JabberForkThread

; 680  : 					}
; 681  : 				}
; 682  : 			}
; 683  : 			else if (!strcmp(e, "6")) {

  00479	e9 f6 01 00 00	 jmp	 $L83830
$L83602:
  0047e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EOC@6?$AA@ ; `string'
  00483	57		 push	 edi
  00484	e8 00 00 00 00	 call	 _strcmp
  00489	59		 pop	 ecx
  0048a	85 c0		 test	 eax, eax
  0048c	59		 pop	 ecx
  0048d	0f 85 8e 00 00
	00		 jne	 $L83612

; 684  : 				// FILE_RECV : e='6' : IP and port information to connect to get file
; 685  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  00493	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00498	53		 push	 ebx
  00499	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0049e	59		 pop	 ecx
  0049f	85 c0		 test	 eax, eax
  004a1	59		 pop	 ecx
  004a2	0f 84 cf 01 00
	00		 je	 $L83823

; 686  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  004a8	50		 push	 eax
  004a9	6a 02		 push	 2
  004ab	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  004b1	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  004b6	8b f0		 mov	 esi, eax
  004b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  004bb	85 f6		 test	 esi, esi
  004bd	0f 84 b4 01 00
	00		 je	 $L83823

; 687  : 						if ((p=JabberXmlGetAttrValue(node, "a")) != NULL) {

  004c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  004c8	53		 push	 ebx
  004c9	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  004ce	59		 pop	 ecx
  004cf	85 c0		 test	 eax, eax
  004d1	59		 pop	 ecx
  004d2	0f 84 9f 01 00
	00		 je	 $L83823

; 688  : 							item->ft->hostName = mir_strdup(p);

  004d8	50		 push	 eax
  004d9	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  004df	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 689  : 							if ((p=JabberXmlGetAttrValue(node, "p")) != NULL) {

  004e2	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  004e9	53		 push	 ebx
  004ea	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  004ed	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  004f2	59		 pop	 ecx
  004f3	85 c0		 test	 eax, eax
  004f5	59		 pop	 ecx
  004f6	0f 84 7b 01 00
	00		 je	 $L83823

; 690  : 								item->ft->wPort = atoi(p);

  004fc	50		 push	 eax
  004fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00503	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00506	66 89 41 24	 mov	 WORD PTR [ecx+36], ax

; 691  : 								JabberForkThread((void (__cdecl *)(void*))TlenFileReceiveThread, 0, item->ft);

  0050a	ff 76 58	 push	 DWORD PTR [esi+88]
  0050d	6a 00		 push	 0
  0050f	68 00 00 00 00	 push	 OFFSET FLAT:_TlenFileReceiveThread
  00514	e8 00 00 00 00	 call	 _JabberForkThread
  00519	83 c4 10	 add	 esp, 16			; 00000010H

; 692  : 							}
; 693  : 						}
; 694  : 					}
; 695  : 				}
; 696  : 			}
; 697  : 			else if (!strcmp(e, "7")) {

  0051c	e9 56 01 00 00	 jmp	 $L83823
$L83612:
  00521	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOHF@7?$AA@ ; `string'
  00526	57		 push	 edi
  00527	e8 00 00 00 00	 call	 _strcmp
  0052c	59		 pop	 ecx
  0052d	85 c0		 test	 eax, eax
  0052f	59		 pop	 ecx
  00530	0f 85 a1 00 00
	00		 jne	 $L83627

; 698  : 				// FILE_RECV : e='7' : IP and port information to connect to send file
; 699  : 				// in case the conection to the given server was not successful
; 700  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  00536	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  0053b	53		 push	 ebx
  0053c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00541	59		 pop	 ecx
  00542	85 c0		 test	 eax, eax
  00544	59		 pop	 ecx
  00545	0f 84 2c 01 00
	00		 je	 $L83823

; 701  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  0054b	50		 push	 eax
  0054c	6a 02		 push	 2
  0054e	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00554	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00559	8b f0		 mov	 esi, eax
  0055b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055e	85 f6		 test	 esi, esi
  00560	0f 84 11 01 00
	00		 je	 $L83823

; 702  : 						if ((p=JabberXmlGetAttrValue(node, "a")) != NULL) {

  00566	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  0056b	53		 push	 ebx
  0056c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00571	8b f8		 mov	 edi, eax
  00573	59		 pop	 ecx
  00574	85 ff		 test	 edi, edi
  00576	59		 pop	 ecx
  00577	0f 84 fa 00 00
	00		 je	 $L83823

; 703  : 							if (item->ft->hostName!=NULL) mir_free(item->ft->hostName);

  0057d	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00580	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00583	85 c0		 test	 eax, eax
  00585	74 08		 je	 SHORT $L83636
  00587	50		 push	 eax
  00588	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0058e	59		 pop	 ecx
$L83636:

; 704  : 							item->ft->hostName = mir_strdup(p);

  0058f	57		 push	 edi
  00590	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00596	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 705  : 							if ((p=JabberXmlGetAttrValue(node, "p")) != NULL) {

  00599	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  005a0	53		 push	 ebx
  005a1	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  005a4	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  005a9	59		 pop	 ecx
  005aa	85 c0		 test	 eax, eax
  005ac	59		 pop	 ecx
  005ad	0f 84 c4 00 00
	00		 je	 $L83823

; 706  : 								item->ft->wPort = atoi(p);

  005b3	50		 push	 eax
  005b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  005ba	59		 pop	 ecx
  005bb	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  005be	66 89 41 24	 mov	 WORD PTR [ecx+36], ax

; 707  : 								item->ft->state = FT_SWITCH;

  005c2	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  005c5	c7 40 0c 06 00
	00 00		 mov	 DWORD PTR [eax+12], 6

; 708  : 								SetEvent(item->ft->hFileEvent);

  005cc	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  005cf	ff 70 3c	 push	 DWORD PTR [eax+60]

; 709  : 							}
; 710  : 						}
; 711  : 					}
; 712  : 				}
; 713  : 			}
; 714  : 			else if (!strcmp(e, "8")) {

  005d2	e9 44 fd ff ff	 jmp	 $L83832
$L83627:
  005d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KPCI@8?$AA@ ; `string'
  005dc	57		 push	 edi
  005dd	e8 00 00 00 00	 call	 _strcmp
  005e2	59		 pop	 ecx
  005e3	85 c0		 test	 eax, eax
  005e5	59		 pop	 ecx
  005e6	0f 85 8b 00 00
	00		 jne	 $L83823

; 715  : 				// FILE_RECV : e='8' : transfer error
; 716  : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  005ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  005f1	53		 push	 ebx
  005f2	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  005f7	59		 pop	 ecx
  005f8	85 c0		 test	 eax, eax
  005fa	59		 pop	 ecx
  005fb	74 7a		 je	 SHORT $L83823

; 717  : 					if ((item=JabberListGetItemPtr(info->proto, LIST_FILE, p)) != NULL) {

  005fd	50		 push	 eax
  005fe	6a 02		 push	 2
  00600	5b		 pop	 ebx
  00601	53		 push	 ebx
  00602	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00608	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0060d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00610	85 c0		 test	 eax, eax
  00612	74 63		 je	 SHORT $L83823

; 718  : 						item->ft->state = FT_ERROR;

  00614	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00617	c7 41 0c 04 00
	00 00		 mov	 DWORD PTR [ecx+12], 4

; 719  : 						if (item->ft->hFileEvent != NULL) {

  0061e	8b 50 58	 mov	 edx, DWORD PTR [eax+88]
  00621	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00624	85 c0		 test	 eax, eax
  00626	74 06		 je	 SHORT $L83647

; 720  : 							SetEvent(item->ft->hFileEvent);

  00628	50		 push	 eax

; 721  : 						} else {

  00629	e9 ed fc ff ff	 jmp	 $L83832
$L83647:

; 722  : 							ProtoBroadcastAck(info->proto->iface.m_szModuleName, item->ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, item->ft, 0);

  0062e	6a 06		 push	 6
  00630	33 c0		 xor	 eax, eax
  00632	59		 pop	 ecx
  00633	8d 7d e8	 lea	 edi, DWORD PTR _ack$83824[ebp+4]
  00636	f3 ab		 rep stosd
  00638	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0063e	83 65 fc 00	 and	 DWORD PTR _ack$83824[ebp+24], 0
  00642	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83824[ebp], 28 ; 0000001cH
  00649	89 5d f0	 mov	 DWORD PTR _ack$83824[ebp+12], ebx
  0064c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0064f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ack$83824[ebp+16], 1
  00656	89 45 e8	 mov	 DWORD PTR _ack$83824[ebp+4], eax
  00659	8b 02		 mov	 eax, DWORD PTR [edx]
  0065b	89 45 ec	 mov	 DWORD PTR _ack$83824[ebp+8], eax
  0065e	8d 45 e4	 lea	 eax, DWORD PTR _ack$83824[ebp]
  00661	50		 push	 eax
  00662	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00667	6a 00		 push	 0
  00669	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0066e	89 55 f8	 mov	 DWORD PTR _ack$83824[ebp+20], edx
  00671	ff 50 24	 call	 DWORD PTR [eax+36]
$L83830:
  00674	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83823:
  00677	5f		 pop	 edi
  00678	5e		 pop	 esi
  00679	5b		 pop	 ebx

; 723  : 						}
; 724  : 					}
; 725  : 				}
; 726  : 			}
; 727  : 		}
; 728  : 	}
; 729  : }

  0067a	c9		 leave
  0067b	c3		 ret	 0
_TlenProcessF ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@NLKJ@Thread?5started?3?5type?$DNfile_receiv@ ; `string'
PUBLIC	??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@	; `string'
PUBLIC	??_C@_0BL@CMPD@Entering?5file?5receive?5loop?$AA@ ; `string'
PUBLIC	??_C@_0CI@OFJJ@Connection?5failed?5?9?5receiving?5as@ ; `string'
PUBLIC	??_C@_0CH@PODA@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?87?8?5a?$DN?8?$CFs?8?5p?$DN@ ; `string'
PUBLIC	??_C@_0CH@MMNC@Waiting?5for?5the?5file?5to?5be?5recei@ ; `string'
PUBLIC	??_C@_0BB@NFGI@Finish?5all?5files?$AA@		; `string'
PUBLIC	??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CM@ENML@Thread?5ended?3?5type?$DNfile_receive?5@ ; `string'
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	_TlenP2PEstablishOutgoingConnection:NEAR
EXTRN	_TlenP2PListen:NEAR
EXTRN	__imp__CreateEventW@16:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	_JabberNickFromJID:NEAR
;	COMDAT ??_C@_0DI@NLKJ@Thread?5started?3?5type?$DNfile_receiv@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0DI@NLKJ@Thread?5started?3?5type?$DNfile_receiv@ DB 'Thread started'
	DB	': type=file_receive server=''%s'' port=''%d''', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@
_DATA	SEGMENT
??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@ DB 'Netlib/OpenConnection', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CMPD@Entering?5file?5receive?5loop?$AA@
_DATA	SEGMENT
??_C@_0BL@CMPD@Entering?5file?5receive?5loop?$AA@ DB 'Entering file recei'
	DB	've loop', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@OFJJ@Connection?5failed?5?9?5receiving?5as@
_DATA	SEGMENT
??_C@_0CI@OFJJ@Connection?5failed?5?9?5receiving?5as@ DB 'Connection fail'
	DB	'ed - receiving as server', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@PODA@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?87?8?5a?$DN?8?$CFs?8?5p?$DN@
_DATA	SEGMENT
??_C@_0CH@PODA@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?87?8?5a?$DN?8?$CFs?8?5p?$DN@ DB '<'
	DB	'f t=''%s'' i=''%s'' e=''7'' a=''%s'' p=''%d''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMNC@Waiting?5for?5the?5file?5to?5be?5recei@
_DATA	SEGMENT
??_C@_0CH@MMNC@Waiting?5for?5the?5file?5to?5be?5recei@ DB 'Waiting for th'
	DB	'e file to be received...', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NFGI@Finish?5all?5files?$AA@
_DATA	SEGMENT
??_C@_0BB@NFGI@Finish?5all?5files?$AA@ DB 'Finish all files', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@ DB '<'
	DB	'f t=''%s'' i=''%s'' e=''8''/>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CM@ENML@Thread?5ended?3?5type?$DNfile_receive?5@
_DATA	SEGMENT
??_C@_0CM@ENML@Thread?5ended?3?5type?$DNfile_receive?5@ DB 'Thread ended:'
	DB	' type=file_receive server=''%s''', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenFileReceiveThread
_TEXT	SEGMENT
_ft$ = 8
_nloc$ = -28
_s$ = -4
_nick$83229 = 8
_ack$83837 = -56
_ack$83849 = -56
_ack$83855 = -56
_TlenFileReceiveThread PROC NEAR			; COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 38   : 	NETLIBOPENCONNECTION nloc;
; 39   : 	JABBER_SOCKET s;
; 40   : 	JabberLog(ft->proto, "Thread started: type=file_receive server='%s' port='%d'", ft->hostName, ft->wPort);

  00008	8b 75 08	 mov	 esi, DWORD PTR _ft$[ebp]
  0000b	57		 push	 edi
  0000c	0f b7 46 24	 movzx	 eax, WORD PTR [esi+36]
  00010	50		 push	 eax
  00011	ff 76 20	 push	 DWORD PTR [esi+32]
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@NLKJ@Thread?5started?3?5type?$DNfile_receiv@ ; `string'
  00019	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0001f	e8 00 00 00 00	 call	 _JabberLog

; 41   : 	ft->mode = FT_RECV;
; 42   : 	nloc.cbSize = NETLIBOPENCONNECTION_V1_SIZE;//sizeof(NETLIBOPENCONNECTION);
; 43   : 	nloc.szHost = ft->hostName;

  00024	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 44   : 	nloc.wPort = ft->wPort;
; 45   : 	nloc.flags = 0;
; 46   : 	ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_CONNECTING, ft, 0);

  00027	6a 06		 push	 6
  00029	89 45 e8	 mov	 DWORD PTR _nloc$[ebp+4], eax
  0002c	66 8b 46 24	 mov	 ax, WORD PTR [esi+36]
  00030	66 89 45 ec	 mov	 WORD PTR _nloc$[ebp+8], ax
  00034	59		 pop	 ecx
  00035	33 c0		 xor	 eax, eax
  00037	8d 7d cc	 lea	 edi, DWORD PTR _ack$83837[ebp+4]
  0003a	f3 ab		 rep stosd
  0003c	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00042	33 db		 xor	 ebx, ebx
  00044	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00047	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _nloc$[ebp], 16 ; 00000010H
  0004e	89 5d f0	 mov	 DWORD PTR _nloc$[ebp+12], ebx
  00051	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00054	89 45 cc	 mov	 DWORD PTR _ack$83837[ebp+4], eax
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	89 45 d0	 mov	 DWORD PTR _ack$83837[ebp+8], eax
  0005c	8d 45 c8	 lea	 eax, DWORD PTR _ack$83837[ebp]
  0005f	50		 push	 eax
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00065	53		 push	 ebx
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0006b	c7 45 c8 1c 00
	00 00		 mov	 DWORD PTR _ack$83837[ebp], 28 ; 0000001cH
  00072	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _ack$83837[ebp+12], 2
  00079	c7 45 d8 64 00
	00 00		 mov	 DWORD PTR _ack$83837[ebp+16], 100 ; 00000064H
  00080	89 75 dc	 mov	 DWORD PTR _ack$83837[ebp+20], esi
  00083	89 5d e0	 mov	 DWORD PTR _ack$83837[ebp+24], ebx
  00086	ff 50 24	 call	 DWORD PTR [eax+36]

; 47   : 	s = (HANDLE) CallService(MS_NETLIB_OPENCONNECTION, (WPARAM) ft->proto->hNetlibUser, (LPARAM) &nloc);

  00089	8d 45 e4	 lea	 eax, DWORD PTR _nloc$[ebp]
  0008c	50		 push	 eax
  0008d	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00093	ff b0 c0 00 00
	00		 push	 DWORD PTR [eax+192]
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@ ; `string'
  000a3	ff 50 24	 call	 DWORD PTR [eax+36]
  000a6	8b f8		 mov	 edi, eax
  000a8	83 c4 28	 add	 esp, 40			; 00000028H

; 48   : 	if (s != NULL) {

  000ab	3b fb		 cmp	 edi, ebx
  000ad	74 53		 je	 SHORT $L83217

; 49   : 		ft->s = s;
; 50   : 		JabberLog(ft->proto, "Entering file receive loop");

  000af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@CMPD@Entering?5file?5receive?5loop?$AA@ ; `string'
  000b4	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000b7	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  000bd	e8 00 00 00 00	 call	 _JabberLog

; 51   : 		TlenP2PEstablishOutgoingConnection(ft, TRUE);

  000c2	6a 01		 push	 1
  000c4	56		 push	 esi
  000c5	e8 00 00 00 00	 call	 _TlenP2PEstablishOutgoingConnection
  000ca	83 c4 10	 add	 esp, 16			; 00000010H
$L83860:

; 52   : 		while (ft->state!=FT_DONE && ft->state!=FT_ERROR) {

  000cd	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d0	83 f8 03	 cmp	 eax, 3
  000d3	74 0e		 je	 SHORT $L83221
  000d5	83 f8 04	 cmp	 eax, 4
  000d8	74 09		 je	 SHORT $L83221

; 53   : 			TlenFileReceiveParse(ft);

  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _TlenFileReceiveParse
  000e0	59		 pop	 ecx
  000e1	eb ea		 jmp	 SHORT $L83860
$L83221:

; 54   : 		}
; 55   : 		if (ft->s) {

  000e3	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  000e6	74 12		 je	 SHORT $L83841

; 56   : 			Netlib_CloseHandle(s);

  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000ed	53		 push	 ebx
  000ee	57		 push	 edi
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  000f4	ff 50 24	 call	 DWORD PTR [eax+36]
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83841:

; 57   : 		}
; 58   : 		ft->s = NULL;

  000fa	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 59   : 	} else {

  000fd	e9 c6 00 00 00	 jmp	 $L83236
$L83217:

; 60   : 		ft->pfnNewConnectionV2 = TlenFileReceivingConnection;
; 61   : 		JabberLog(ft->proto, "Connection failed - receiving as server");

  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OFJJ@Connection?5failed?5?9?5receiving?5as@ ; `string'
  00107	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET FLAT:_TlenFileReceivingConnection
  0010e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00114	e8 00 00 00 00	 call	 _JabberLog

; 62   : 		s = TlenP2PListen(ft);

  00119	56		 push	 esi
  0011a	e8 00 00 00 00	 call	 _TlenP2PListen
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : 		if (s != NULL) {

  00122	3b c3		 cmp	 eax, ebx
  00124	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax
  00127	0f 84 94 00 00
	00		 je	 $L83227

; 64   : 			HANDLE hEvent;
; 65   : 			char *nick;
; 66   : 			ft->s = s;
; 67   : 			hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  0012d	53		 push	 ebx
  0012e	53		 push	 ebx
  0012f	53		 push	 ebx
  00130	53		 push	 ebx
  00131	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16

; 68   : 			ft->hFileEvent = hEvent;
; 69   : 			ft->currentFile = 0;
; 70   : 			ft->state = FT_CONNECTING;
; 71   : 			nick = JabberNickFromJID(ft->jid);

  0013a	ff 76 10	 push	 DWORD PTR [esi+16]
  0013d	8b f8		 mov	 edi, eax
  0013f	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  00142	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  00145	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00148	e8 00 00 00 00	 call	 _JabberNickFromJID

; 72   : 			JabberSend(ft->proto, "<f t='%s' i='%s' e='7' a='%s' p='%d'/>", nick, ft->iqId, ft->localName, ft->wLocalPort);

  0014d	0f b7 4e 2c	 movzx	 ecx, WORD PTR [esi+44]
  00151	51		 push	 ecx
  00152	89 45 08	 mov	 DWORD PTR _nick$83229[ebp], eax
  00155	ff 76 28	 push	 DWORD PTR [esi+40]
  00158	ff 76 18	 push	 DWORD PTR [esi+24]
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@PODA@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?87?8?5a?$DN?8?$CFs?8?5p?$DN@ ; `string'
  00161	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00167	e8 00 00 00 00	 call	 _JabberSend

; 73   : 			mir_free(nick);

  0016c	ff 75 08	 push	 DWORD PTR _nick$83229[ebp]
  0016f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 74   : 			JabberLog(ft->proto, "Waiting for the file to be received...");

  00175	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@MMNC@Waiting?5for?5the?5file?5to?5be?5recei@ ; `string'
  0017a	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00180	e8 00 00 00 00	 call	 _JabberLog
  00185	83 c4 28	 add	 esp, 40			; 00000028H

; 75   : 			WaitForSingleObject(hEvent, INFINITE);

  00188	6a ff		 push	 -1
  0018a	57		 push	 edi
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 76   : 			ft->hFileEvent = NULL;
; 77   : 			CloseHandle(hEvent);

  00191	57		 push	 edi
  00192	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 78   : 			JabberLog(ft->proto, "Finish all files");

  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@NFGI@Finish?5all?5files?$AA@ ; `string'
  001a0	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001a6	e8 00 00 00 00	 call	 _JabberLog

; 79   : 			Netlib_CloseHandle(s);

  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001b0	53		 push	 ebx
  001b1	ff 75 fc	 push	 DWORD PTR _s$[ebp]
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  001b9	ff 50 24	 call	 DWORD PTR [eax+36]
  001bc	83 c4 14	 add	 esp, 20			; 00000014H

; 80   : 		} else {

  001bf	eb 07		 jmp	 SHORT $L83236
$L83227:

; 81   : 			ft->state = FT_ERROR;

  001c1	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$L83236:

; 82   : 		}
; 83   : 	}
; 84   : 	JabberListRemove(ft->proto, LIST_FILE, ft->iqId);

  001c8	ff 76 18	 push	 DWORD PTR [esi+24]
  001cb	6a 02		 push	 2
  001cd	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001d3	e8 00 00 00 00	 call	 _JabberListRemove
  001d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   : 	if (ft->state==FT_DONE)

  001db	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3
  001df	75 49		 jne	 SHORT $L83237

; 86   : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  001e1	6a 06		 push	 6
  001e3	33 c0		 xor	 eax, eax
  001e5	59		 pop	 ecx
  001e6	8d 7d cc	 lea	 edi, DWORD PTR _ack$83849[ebp+4]
  001e9	f3 ab		 rep stosd
  001eb	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  001f1	c7 45 c8 1c 00
	00 00		 mov	 DWORD PTR _ack$83849[ebp], 28 ; 0000001cH
  001f8	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _ack$83849[ebp+12], 2
  001ff	89 5d d8	 mov	 DWORD PTR _ack$83849[ebp+16], ebx
  00202	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00205	89 75 dc	 mov	 DWORD PTR _ack$83849[ebp+20], esi
  00208	89 45 cc	 mov	 DWORD PTR _ack$83849[ebp+4], eax
  0020b	8b 06		 mov	 eax, DWORD PTR [esi]
  0020d	89 45 d0	 mov	 DWORD PTR _ack$83849[ebp+8], eax
  00210	8d 45 c8	 lea	 eax, DWORD PTR _ack$83849[ebp]
  00213	50		 push	 eax
  00214	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00219	53		 push	 ebx
  0021a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0021f	89 5d e0	 mov	 DWORD PTR _ack$83849[ebp+24], ebx
  00222	ff 50 24	 call	 DWORD PTR [eax+36]
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   : 	else {

  00228	eb 70		 jmp	 SHORT $L83854
$L83237:

; 88   : 		char *nick;
; 89   : 		nick = JabberNickFromJID(ft->jid);

  0022a	ff 76 10	 push	 DWORD PTR [esi+16]
  0022d	e8 00 00 00 00	 call	 _JabberNickFromJID

; 90   : 		JabberSend(ft->proto, "<f t='%s' i='%s' e='8'/>", nick, ft->iqId);

  00232	ff 76 18	 push	 DWORD PTR [esi+24]
  00235	8b f8		 mov	 edi, eax
  00237	57		 push	 edi
  00238	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@ ; `string'
  0023d	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00243	e8 00 00 00 00	 call	 _JabberSend

; 91   : 		mir_free(nick);

  00248	57		 push	 edi
  00249	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 92   : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  0024f	6a 06		 push	 6
  00251	33 c0		 xor	 eax, eax
  00253	59		 pop	 ecx
  00254	8d 7d cc	 lea	 edi, DWORD PTR _ack$83855[ebp+4]
  00257	f3 ab		 rep stosd
  00259	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  0025f	c7 45 c8 1c 00
	00 00		 mov	 DWORD PTR _ack$83855[ebp], 28 ; 0000001cH
  00266	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _ack$83855[ebp+12], 2
  0026d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _ack$83855[ebp+16], 1
  00274	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00277	89 75 dc	 mov	 DWORD PTR _ack$83855[ebp+20], esi
  0027a	89 45 cc	 mov	 DWORD PTR _ack$83855[ebp+4], eax
  0027d	8b 06		 mov	 eax, DWORD PTR [esi]
  0027f	89 45 d0	 mov	 DWORD PTR _ack$83855[ebp+8], eax
  00282	8d 45 c8	 lea	 eax, DWORD PTR _ack$83855[ebp]
  00285	50		 push	 eax
  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0028b	53		 push	 ebx
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00291	89 5d e0	 mov	 DWORD PTR _ack$83855[ebp+24], ebx
  00294	ff 50 24	 call	 DWORD PTR [eax+36]
  00297	83 c4 24	 add	 esp, 36			; 00000024H
$L83854:

; 93   : 	}
; 94   : 
; 95   : 	JabberLog(ft->proto, "Thread ended: type=file_receive server='%s'", ft->hostName);

  0029a	ff 76 20	 push	 DWORD PTR [esi+32]
  0029d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@ENML@Thread?5ended?3?5type?$DNfile_receive?5@ ; `string'
  002a2	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  002a8	e8 00 00 00 00	 call	 _JabberLog

; 96   : 	TlenP2PFreeFileTransfer(ft);

  002ad	56		 push	 esi
  002ae	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  002b3	83 c4 10	 add	 esp, 16			; 00000010H
  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	5b		 pop	 ebx

; 97   : }

  002b9	c9		 leave
  002ba	c3		 ret	 0
_TlenFileReceiveThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@ ; `string'
PUBLIC	??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@ ; `string'
PUBLIC	??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@ ; `string'
EXTRN	_TlenP2PEstablishIncomingConnection:NEAR
;	COMDAT ??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_netlib.h
_DATA	SEGMENT
??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@ DB 'S'
	DB	'et ft->s to %d (saving %d)', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@
_DATA	SEGMENT
??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@ DB 'Entering send l'
	DB	'oop for this file connection... (ft->s is hConnection)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@
_DATA	SEGMENT
??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@ DB 'Closing connecti'
	DB	'on for this file transfer... (ft->s is now hBind)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@ DB 'ft->s is resto'
	DB	'red to %d', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenFileReceivingConnection
_TEXT	SEGMENT
_hConnection$ = 8
_pExtra$ = 16
_slisten$ = 8
_ack$83865 = -28
_ack$83871 = -28
_TlenFileReceivingConnection PROC NEAR			; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 101  : 	JABBER_SOCKET slisten;
; 102  : 	TLEN_FILE_TRANSFER *ft;
; 103  : 
; 104  :     TlenProtocol *proto = (TlenProtocol *)pExtra;
; 105  :     ft = TlenP2PEstablishIncomingConnection(proto, hConnection, LIST_FILE, TRUE);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _hConnection$[ebp]
  0000a	56		 push	 esi
  0000b	6a 01		 push	 1
  0000d	6a 02		 push	 2
  0000f	53		 push	 ebx
  00010	ff 75 10	 push	 DWORD PTR _pExtra$[ebp]
  00013	e8 00 00 00 00	 call	 _TlenP2PEstablishIncomingConnection
  00018	8b f0		 mov	 esi, eax
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 106  : 	if (ft != NULL) {

  0001d	85 f6		 test	 esi, esi
  0001f	0f 84 23 01 00
	00		 je	 $L83254

; 107  : 		slisten = ft->s;

  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 108  : 		ft->s = hConnection;

  00028	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 109  : 		JabberLog(ft->proto, "Set ft->s to %d (saving %d)", hConnection, slisten);

  0002b	50		 push	 eax
  0002c	53		 push	 ebx
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@ ; `string'
  00032	89 45 08	 mov	 DWORD PTR _slisten$[ebp], eax
  00035	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0003b	e8 00 00 00 00	 call	 _JabberLog

; 110  : 		JabberLog(ft->proto, "Entering send loop for this file connection... (ft->s is hConnection)");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@ ; `string'
  00045	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0004b	e8 00 00 00 00	 call	 _JabberLog
  00050	83 c4 18	 add	 esp, 24			; 00000018H
$L83883:

; 111  : 		while (ft->state!=FT_DONE && ft->state!=FT_ERROR) {

  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	83 f8 03	 cmp	 eax, 3
  00059	74 0e		 je	 SHORT $L83259
  0005b	83 f8 04	 cmp	 eax, 4
  0005e	74 09		 je	 SHORT $L83259

; 112  : 			TlenFileReceiveParse(ft);

  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _TlenFileReceiveParse
  00066	59		 pop	 ecx
  00067	eb ea		 jmp	 SHORT $L83883
$L83259:

; 113  : 		}
; 114  : 		if (ft->state==FT_DONE)

  00069	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3
  0006d	57		 push	 edi

; 115  : 			ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  0006e	6a 06		 push	 6
  00070	59		 pop	 ecx
  00071	75 38		 jne	 SHORT $L83260
  00073	33 c0		 xor	 eax, eax
  00075	8d 7d e8	 lea	 edi, DWORD PTR _ack$83865[ebp+4]
  00078	f3 ab		 rep stosd
  0007a	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00080	8d 4d e4	 lea	 ecx, DWORD PTR _ack$83865[ebp]
  00083	51		 push	 ecx
  00084	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83865[ebp], 28 ; 0000001cH
  0008b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0008e	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _ack$83865[ebp+12], 2
  00095	89 45 e8	 mov	 DWORD PTR _ack$83865[ebp+4], eax
  00098	8b 06		 mov	 eax, DWORD PTR [esi]
  0009a	89 45 ec	 mov	 DWORD PTR _ack$83865[ebp+8], eax
  0009d	33 c0		 xor	 eax, eax
  0009f	89 45 f4	 mov	 DWORD PTR _ack$83865[ebp+16], eax
  000a2	89 75 f8	 mov	 DWORD PTR _ack$83865[ebp+20], esi
  000a5	89 45 fc	 mov	 DWORD PTR _ack$83865[ebp+24], eax
  000a8	50		 push	 eax

; 116  : 		else

  000a9	eb 3a		 jmp	 SHORT $L83884
$L83260:

; 117  : 			ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  000ab	33 c0		 xor	 eax, eax
  000ad	8d 7d e8	 lea	 edi, DWORD PTR _ack$83871[ebp+4]
  000b0	f3 ab		 rep stosd
  000b2	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  000b8	83 65 fc 00	 and	 DWORD PTR _ack$83871[ebp+24], 0
  000bc	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83871[ebp], 28 ; 0000001cH
  000c3	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _ack$83871[ebp+12], 2
  000ca	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000cd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ack$83871[ebp+16], 1
  000d4	89 45 e8	 mov	 DWORD PTR _ack$83871[ebp+4], eax
  000d7	8b 06		 mov	 eax, DWORD PTR [esi]
  000d9	89 45 ec	 mov	 DWORD PTR _ack$83871[ebp+8], eax
  000dc	8d 45 e4	 lea	 eax, DWORD PTR _ack$83871[ebp]
  000df	50		 push	 eax
  000e0	89 75 f8	 mov	 DWORD PTR _ack$83871[ebp+20], esi
  000e3	6a 00		 push	 0
$L83884:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  000ef	ff 50 24	 call	 DWORD PTR [eax+36]
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : 		JabberLog(ft->proto, "Closing connection for this file transfer... (ft->s is now hBind)");

  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@ ; `string'
  000fa	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00100	e8 00 00 00 00	 call	 _JabberLog

; 119  : 		ft->s = slisten;

  00105	8b 45 08	 mov	 eax, DWORD PTR _slisten$[ebp]

; 120  : 		JabberLog(ft->proto, "ft->s is restored to %d", ft->s);

  00108	50		 push	 eax
  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@ ; `string'
  0010e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00114	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00117	e8 00 00 00 00	 call	 _JabberLog
  0011c	83 c4 14	 add	 esp, 20			; 00000014H

; 121  : 		if (ft->s != hConnection) {

  0011f	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  00122	5f		 pop	 edi
  00123	74 13		 je	 SHORT $L83875

; 122  : 			Netlib_CloseHandle(hConnection);

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0012a	6a 00		 push	 0
  0012c	53		 push	 ebx
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00132	ff 50 24	 call	 DWORD PTR [eax+36]
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83875:

; 123  : 		}
; 124  : 		if (ft->hFileEvent != NULL)

  00138	8b 76 3c	 mov	 esi, DWORD PTR [esi+60]
  0013b	85 f6		 test	 esi, esi
  0013d	74 1c		 je	 SHORT $L83878

; 125  : 			SetEvent(ft->hFileEvent);

  0013f	56		 push	 esi
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 126  : 	} else {

  00146	eb 13		 jmp	 SHORT $L83878
$L83254:

; 127  : 		Netlib_CloseHandle(hConnection);

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0014d	6a 00		 push	 0
  0014f	53		 push	 ebx
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00155	ff 50 24	 call	 DWORD PTR [eax+36]
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83878:
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx

; 128  : 	}
; 129  : }

  0015d	c9		 leave
  0015e	c3		 ret	 0
_TlenFileReceivingConnection ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@	; `string'
PUBLIC	??_C@_01PCFE@?2?$AA@				; `string'
PUBLIC	??_C@_0BE@CLDE@Saving?5to?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BH@HIOC@Change?5to?5FT_RECEIVING?$AA@	; `string'
PUBLIC	??_C@_0BC@JKLG@Receiving?5data?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0CN@LBDP@File?5received?0?5advancing?5to?5the?5@ ; `string'
EXTRN	_TlenP2PPacketCreate:NEAR
EXTRN	_TlenP2PPacketFree:NEAR
EXTRN	_TlenP2PPacketSetType:NEAR
EXTRN	_TlenP2PPacketPackDword:NEAR
EXTRN	_TlenP2PPacketSend:NEAR
EXTRN	_TlenP2PPacketReceive:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strcat:NEAR
EXTRN	__imp___close:NEAR
EXTRN	__imp___open:NEAR
EXTRN	__imp___write:NEAR
;	COMDAT ??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@ DB 'Change to FT_INITIALI'
	DB	'ZING', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PCFE@?2?$AA@
_DATA	SEGMENT
??_C@_01PCFE@?2?$AA@ DB '\', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CLDE@Saving?5to?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@
_DATA	SEGMENT
??_C@_0BE@CLDE@Saving?5to?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ DB 'Saving t'
	DB	'o [%s] [%d]', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@HIOC@Change?5to?5FT_RECEIVING?$AA@
_DATA	SEGMENT
??_C@_0BH@HIOC@Change?5to?5FT_RECEIVING?$AA@ DB 'Change to FT_RECEIVING', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JKLG@Receiving?5data?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BC@JKLG@Receiving?5data?4?4?4?$AA@ DB 'Receiving data...', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@ DB 'Finishing this file..'
	DB	'.', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@LBDP@File?5received?0?5advancing?5to?5the?5@
_DATA	SEGMENT
??_C@_0CN@LBDP@File?5received?0?5advancing?5to?5the?5@ DB 'File received,'
	DB	' advancing to the next file...', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenFileReceiveParse
_TEXT	SEGMENT
_ft$ = 8
_i$ = -4
_p$ = 8
_rpacket$ = -8
_pfts$83314 = -116
_ack$83888 = -36
_ack$83894 = -64
_TlenFileReceiveParse PROC NEAR				; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 133  : 	int i;
; 134  : 	char *p;
; 135  : 	TLEN_FILE_PACKET *rpacket, *packet;
; 136  : 
; 137  : 	rpacket = NULL;
; 138  : 	if (ft->state == FT_CONNECTING) {

  00008	8b 75 08	 mov	 esi, DWORD PTR _ft$[ebp]
  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00011	3b c7		 cmp	 eax, edi
  00013	0f 85 12 01 00
	00		 jne	 $L83276

; 139  : 		rpacket = TlenP2PPacketReceive(ft->s);

  00019	ff 76 04	 push	 DWORD PTR [esi+4]
  0001c	e8 00 00 00 00	 call	 _TlenP2PPacketReceive

; 140  : 		if (rpacket != NULL) {

  00021	3b c7		 cmp	 eax, edi
  00023	59		 pop	 ecx
  00024	89 45 f8	 mov	 DWORD PTR _rpacket$[ebp], eax
  00027	0f 84 f2 00 00
	00		 je	 $L83305

; 141  : 			p = rpacket->packet;
; 142  : 			if (rpacket->type == TLEN_FILE_PACKET_FILE_LIST) { // list of files (length & name)

  0002d	83 78 08 32	 cmp	 DWORD PTR [eax+8], 50	; 00000032H
  00031	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00034	0f 85 d7 00 00
	00		 jne	 $L83297

; 143  : 				ft->fileCount = (int)(*((DWORD*)p));

  0003a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0003c	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 144  : 				ft->files = (char **) mir_alloc(sizeof(char *) * ft->fileCount);

  0003f	c1 e0 02	 shl	 eax, 2
  00042	50		 push	 eax
  00043	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00049	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 145  : 				ft->filesSize = (long *) mir_alloc(sizeof(long) * ft->fileCount);

  0004c	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0004f	c1 e0 02	 shl	 eax, 2
  00052	50		 push	 eax
  00053	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00059	59		 pop	 ecx

; 146  : 				ft->currentFile = 0;
; 147  : 				ft->allFileTotalSize = 0;
; 148  : 				ft->allFileReceivedBytes = 0;
; 149  : 				p += sizeof(DWORD);

  0005a	83 c3 04	 add	 ebx, 4

; 150  : 				for (i=0;i<ft->fileCount;i++) {

  0005d	39 7e 40	 cmp	 DWORD PTR [esi+64], edi
  00060	59		 pop	 ecx
  00061	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00064	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00067	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
  0006a	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  0006d	89 5d 08	 mov	 DWORD PTR _p$[ebp], ebx
  00070	89 7d fc	 mov	 DWORD PTR _i$[ebp], edi
  00073	7e 54		 jle	 SHORT $L83289
  00075	bb 00 01 00 00	 mov	 ebx, 256		; 00000100H
$L83287:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]

; 151  : 					ft->filesSize[i] = (long)(*((DWORD*)p));

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00080	8b f8		 mov	 edi, eax
  00082	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00085	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 152  : 					ft->allFileTotalSize += ft->filesSize[i];
; 153  : 					p += sizeof(DWORD);

  00087	83 45 08 04	 add	 DWORD PTR _p$[ebp], 4
  0008b	c1 e7 02	 shl	 edi, 2

; 154  : 					ft->files[i] = (char *)mir_alloc(256);

  0008e	53		 push	 ebx
  0008f	89 0c 38	 mov	 DWORD PTR [eax+edi], ecx
  00092	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00095	8b 04 38	 mov	 eax, DWORD PTR [eax+edi]
  00098	01 46 4c	 add	 DWORD PTR [esi+76], eax
  0009b	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  000a1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]

; 155  : 					memcpy(ft->files[i], p, 256);

  000a4	53		 push	 ebx
  000a5	ff 75 08	 push	 DWORD PTR _p$[ebp]
  000a8	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax
  000ab	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000ae	ff 34 07	 push	 DWORD PTR [edi+eax]
  000b1	e8 00 00 00 00	 call	 _memcpy

; 156  : 					p += 256;

  000b6	01 5d 08	 add	 DWORD PTR _p$[ebp], ebx
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
  000bc	ff 45 fc	 inc	 DWORD PTR _i$[ebp]
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c2	3b 46 40	 cmp	 eax, DWORD PTR [esi+64]
  000c5	7c b3		 jl	 SHORT $L83287

; 150  : 				for (i=0;i<ft->fileCount;i++) {

  000c7	33 ff		 xor	 edi, edi
$L83289:

; 157  : 				}
; 158  : 				if ((packet=TlenP2PPacketCreate(3*sizeof(DWORD))) == NULL) {

  000c9	6a 0c		 push	 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _TlenP2PPacketCreate
  000d0	8b d8		 mov	 ebx, eax
  000d2	59		 pop	 ecx
  000d3	3b df		 cmp	 ebx, edi
  000d5	75 09		 jne	 SHORT $L83296

; 159  : 					ft->state = FT_ERROR;

  000d7	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4

; 160  : 				}
; 161  : 				else {

  000de	eb 31		 jmp	 SHORT $L83297
$L83296:

; 162  : 					TlenP2PPacketSetType(packet, TLEN_FILE_PACKET_FILE_LIST_ACK);

  000e0	6a 33		 push	 51			; 00000033H
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 _TlenP2PPacketSetType

; 163  : 					TlenP2PPacketSend(ft->s, packet);

  000e8	53		 push	 ebx
  000e9	ff 76 04	 push	 DWORD PTR [esi+4]
  000ec	e8 00 00 00 00	 call	 _TlenP2PPacketSend

; 164  : 					TlenP2PPacketFree(packet);

  000f1	53		 push	 ebx
  000f2	e8 00 00 00 00	 call	 _TlenP2PPacketFree

; 165  : 					ft->state = FT_INITIALIZING;
; 166  : 					JabberLog(ft->proto, "Change to FT_INITIALIZING");

  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@ ; `string'
  000fc	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  00103	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00109	e8 00 00 00 00	 call	 _JabberLog
  0010e	83 c4 1c	 add	 esp, 28			; 0000001cH
$L83297:

; 167  : 				}
; 168  : 			}
; 169  : 			TlenP2PPacketFree(rpacket);

  00111	ff 75 f8	 push	 DWORD PTR _rpacket$[ebp]
  00114	e8 00 00 00 00	 call	 _TlenP2PPacketFree
  00119	59		 pop	 ecx

; 170  : 		}
; 171  : 		else {

  0011a	e9 e8 02 00 00	 jmp	 $L83321
$L83305:

; 172  : 			ft->state = FT_ERROR;

  0011f	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4

; 173  : 		}
; 174  : 	}
; 175  : 	else if (ft->state == FT_INITIALIZING) {

  00126	e9 dc 02 00 00	 jmp	 $L83321
$L83276:
  0012b	83 f8 01	 cmp	 eax, 1
  0012e	0f 85 f5 00 00
	00		 jne	 $L83301

; 176  : 		char *fullFileName;
; 177  : 		if ((packet=TlenP2PPacketCreate(3*sizeof(DWORD))) != NULL) {

  00134	6a 0c		 push	 12			; 0000000cH
  00136	e8 00 00 00 00	 call	 _TlenP2PPacketCreate
  0013b	8b d8		 mov	 ebx, eax
  0013d	59		 pop	 ecx
  0013e	3b df		 cmp	 ebx, edi
  00140	74 dd		 je	 SHORT $L83305

; 178  : 			TlenP2PPacketSetType(packet, TLEN_FILE_PACKET_FILE_REQUEST); // file request

  00142	6a 34		 push	 52			; 00000034H
  00144	53		 push	 ebx
  00145	e8 00 00 00 00	 call	 _TlenP2PPacketSetType

; 179  : 			TlenP2PPacketPackDword(packet, ft->currentFile);

  0014a	ff 76 58	 push	 DWORD PTR [esi+88]
  0014d	53		 push	 ebx
  0014e	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 180  : 			TlenP2PPacketPackDword(packet, 0);

  00153	57		 push	 edi
  00154	53		 push	 ebx
  00155	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 181  : 			TlenP2PPacketPackDword(packet, 0);

  0015a	57		 push	 edi
  0015b	53		 push	 ebx
  0015c	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 182  : 			TlenP2PPacketSend(ft->s, packet);

  00161	53		 push	 ebx
  00162	ff 76 04	 push	 DWORD PTR [esi+4]
  00165	e8 00 00 00 00	 call	 _TlenP2PPacketSend

; 183  : 			TlenP2PPacketFree(packet);

  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _TlenP2PPacketFree

; 184  : 
; 185  : 			fullFileName = (char *) mir_alloc(strlen(ft->szSavePath) + strlen(ft->files[ft->currentFile]) + 2);

  00170	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00173	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00176	ff 34 81	 push	 DWORD PTR [ecx+eax*4]
  00179	e8 00 00 00 00	 call	 _strlen
  0017e	ff 76 30	 push	 DWORD PTR [esi+48]
  00181	8b d8		 mov	 ebx, eax
  00183	e8 00 00 00 00	 call	 _strlen
  00188	8d 44 03 02	 lea	 eax, DWORD PTR [ebx+eax+2]
  0018c	50		 push	 eax
  0018d	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 186  : 			strcpy(fullFileName, ft->szSavePath);

  00193	ff 76 30	 push	 DWORD PTR [esi+48]
  00196	8b d8		 mov	 ebx, eax
  00198	53		 push	 ebx
  00199	e8 00 00 00 00	 call	 _strcpy
  0019e	83 c4 40	 add	 esp, 64			; 00000040H

; 187  : 			if (fullFileName[strlen(fullFileName)-1] != '\\')

  001a1	53		 push	 ebx
  001a2	e8 00 00 00 00	 call	 _strlen
  001a7	80 7c 18 ff 5c	 cmp	 BYTE PTR [eax+ebx-1], 92 ; 0000005cH
  001ac	59		 pop	 ecx
  001ad	74 0d		 je	 SHORT $L83307

; 188  : 				strcat(fullFileName, "\\");

  001af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PCFE@?2?$AA@ ; `string'
  001b4	53		 push	 ebx
  001b5	e8 00 00 00 00	 call	 _strcat
  001ba	59		 pop	 ecx
  001bb	59		 pop	 ecx
$L83307:

; 189  : 			strcat(fullFileName, ft->files[ft->currentFile]);

  001bc	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  001bf	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001c2	ff 34 81	 push	 DWORD PTR [ecx+eax*4]
  001c5	53		 push	 ebx
  001c6	e8 00 00 00 00	 call	 _strcat

; 190  : 			ft->fileId = _open(fullFileName, _O_BINARY|_O_WRONLY|_O_CREAT|_O_TRUNC, _S_IREAD|_S_IWRITE);

  001cb	68 80 01 00 00	 push	 384			; 00000180H
  001d0	68 01 83 00 00	 push	 33537			; 00008301H
  001d5	53		 push	 ebx
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___open

; 191  : 			ft->fileReceivedBytes = 0;
; 192  : 			ft->fileTotalSize = ft->filesSize[ft->currentFile];

  001dc	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  001df	89 46 14	 mov	 DWORD PTR [esi+20], eax
  001e2	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  001e5	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  001e8	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ed	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 193  : 			JabberLog(ft->proto, "Saving to [%s] [%d]", fullFileName, ft->filesSize[ft->currentFile]);

  001f0	ff 30		 push	 DWORD PTR [eax]
  001f2	53		 push	 ebx
  001f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLDE@Saving?5to?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ ; `string'
  001f8	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001fe	e8 00 00 00 00	 call	 _JabberLog

; 194  : 			mir_free(fullFileName);

  00203	53		 push	 ebx
  00204	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 195  : 			ft->state = FT_RECEIVING;
; 196  : 			JabberLog(ft->proto, "Change to FT_RECEIVING");

  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HIOC@Change?5to?5FT_RECEIVING?$AA@ ; `string'
  0020f	c7 46 0c 02 00
	00 00		 mov	 DWORD PTR [esi+12], 2
  00216	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0021c	e8 00 00 00 00	 call	 _JabberLog
  00221	83 c4 30	 add	 esp, 48			; 00000030H

; 197  : 		}
; 198  : 		else {
; 199  : 			ft->state = FT_ERROR;
; 200  : 		}
; 201  : 	}
; 202  : 	else if (ft->state == FT_RECEIVING) {

  00224	e9 de 01 00 00	 jmp	 $L83321
$L83301:
  00229	83 f8 02	 cmp	 eax, 2
  0022c	0f 85 d5 01 00
	00		 jne	 $L83321

; 203  : 		PROTOFILETRANSFERSTATUS pfts;
; 204  : 		memset(&pfts, 0, sizeof(PROTOFILETRANSFERSTATUS));

  00232	6a 34		 push	 52			; 00000034H
  00234	8d 45 8c	 lea	 eax, DWORD PTR _pfts$83314[ebp]
  00237	5b		 pop	 ebx
  00238	53		 push	 ebx
  00239	57		 push	 edi
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _memset

; 205  : 		pfts.cbSize = sizeof(PROTOFILETRANSFERSTATUS);
; 206  : 		pfts.hContact = ft->hContact;
; 207  : 		pfts.sending = FALSE;
; 208  : 		pfts.files = ft->files;
; 209  : 		pfts.totalFiles = ft->fileCount;

  00240	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00243	8b 06		 mov	 eax, DWORD PTR [esi]

; 210  : 		pfts.currentFileNumber = ft->currentFile;
; 211  : 		pfts.totalBytes = ft->allFileTotalSize;

  00245	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  00248	89 4d 9c	 mov	 DWORD PTR _pfts$83314[ebp+16], ecx
  0024b	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0024e	89 45 90	 mov	 DWORD PTR _pfts$83314[ebp+4], eax
  00251	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00254	89 4d a0	 mov	 DWORD PTR _pfts$83314[ebp+20], ecx

; 212  : 		pfts.workingDir = NULL;
; 213  : 		pfts.currentFile = ft->files[ft->currentFile];

  00257	c1 e1 02	 shl	 ecx, 2
  0025a	89 5d 8c	 mov	 DWORD PTR _pfts$83314[ebp], ebx
  0025d	89 7d 94	 mov	 DWORD PTR _pfts$83314[ebp+8], edi
  00260	89 45 98	 mov	 DWORD PTR _pfts$83314[ebp+12], eax
  00263	89 55 a4	 mov	 DWORD PTR _pfts$83314[ebp+24], edx
  00266	89 7d ac	 mov	 DWORD PTR _pfts$83314[ebp+32], edi
  00269	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0026c	89 45 b0	 mov	 DWORD PTR _pfts$83314[ebp+36], eax

; 214  : 		pfts.currentFileSize = ft->filesSize[ft->currentFile];

  0026f	8b 46 48	 mov	 eax, DWORD PTR [esi+72]

; 215  : 		pfts.currentFileTime = 0;
; 216  : 		JabberLog(ft->proto, "Receiving data...");

  00272	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@JKLG@Receiving?5data?4?4?4?$AA@ ; `string'
  00277	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0027a	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00280	89 45 b4	 mov	 DWORD PTR _pfts$83314[ebp+40], eax
  00283	89 7d bc	 mov	 DWORD PTR _pfts$83314[ebp+48], edi
  00286	e8 00 00 00 00	 call	 _JabberLog
  0028b	83 c4 14	 add	 esp, 20			; 00000014H

; 217  : 		while (ft->state == FT_RECEIVING) {

  0028e	83 7e 0c 02	 cmp	 DWORD PTR [esi+12], 2
  00292	0f 85 6f 01 00
	00		 jne	 $L83321

; 218  : 			rpacket = TlenP2PPacketReceive(ft->s);

  00298	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
$L83320:
  0029d	ff 76 04	 push	 DWORD PTR [esi+4]
  002a0	e8 00 00 00 00	 call	 _TlenP2PPacketReceive
  002a5	8b d0		 mov	 edx, eax
  002a7	59		 pop	 ecx

; 219  : 			if (rpacket != NULL) {

  002a8	3b d7		 cmp	 edx, edi
  002aa	89 55 f8	 mov	 DWORD PTR _rpacket$[ebp], edx
  002ad	0f 84 43 01 00
	00		 je	 $L83323

; 220  : 				p = rpacket->packet;
; 221  : 				if (rpacket->type == TLEN_FILE_PACKET_FILE_DATA) { // file data

  002b3	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  002b6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002b9	83 f9 35	 cmp	 ecx, 53			; 00000035H
  002bc	0f 85 89 00 00
	00		 jne	 $L83324

; 222  : 					int writeSize;
; 223  : 					writeSize = rpacket->len - 2 * sizeof(DWORD) ; // skip file offset

  002c2	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]

; 224  : 					if (_write(ft->fileId, p + 2 * sizeof(DWORD), writeSize) != writeSize) {

  002c5	83 c0 08	 add	 eax, 8
  002c8	83 ef 08	 sub	 edi, 8
  002cb	57		 push	 edi
  002cc	50		 push	 eax
  002cd	ff 76 14	 push	 DWORD PTR [esi+20]
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___write
  002d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d9	3b c7		 cmp	 eax, edi
  002db	74 0c		 je	 SHORT $L83328

; 225  : 						ft->state = FT_ERROR;

  002dd	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4

; 226  : 					}
; 227  : 					else {

  002e4	e9 00 01 00 00	 jmp	 $L83902
$L83328:

; 228  : 						ft->fileReceivedBytes += writeSize;

  002e9	01 7e 34	 add	 DWORD PTR [esi+52], edi

; 229  : 						ft->allFileReceivedBytes += writeSize;

  002ec	01 7e 50	 add	 DWORD PTR [esi+80], edi
  002ef	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  002f2	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]

; 230  : 						pfts.totalProgress = ft->allFileReceivedBytes;
; 231  : 						pfts.currentFileProgress = ft->fileReceivedBytes;
; 232  : 						ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_DATA, ft, (LPARAM) &pfts);

  002f5	6a 06		 push	 6
  002f7	89 4d a8	 mov	 DWORD PTR _pfts$83314[ebp+28], ecx
  002fa	89 45 b8	 mov	 DWORD PTR _pfts$83314[ebp+44], eax
  002fd	59		 pop	 ecx
  002fe	33 c0		 xor	 eax, eax
  00300	8d 7d e0	 lea	 edi, DWORD PTR _ack$83888[ebp+4]
  00303	f3 ab		 rep stosd
  00305	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  0030b	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83888[ebp], 28 ; 0000001cH
  00312	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ack$83888[ebp+12], 2
  00319	c7 45 ec 68 00
	00 00		 mov	 DWORD PTR _ack$83888[ebp+16], 104 ; 00000068H
  00320	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00323	89 75 f0	 mov	 DWORD PTR _ack$83888[ebp+20], esi
  00326	89 45 e0	 mov	 DWORD PTR _ack$83888[ebp+4], eax
  00329	8b 06		 mov	 eax, DWORD PTR [esi]
  0032b	89 45 e4	 mov	 DWORD PTR _ack$83888[ebp+8], eax
  0032e	8d 45 8c	 lea	 eax, DWORD PTR _pfts$83314[ebp]
  00331	89 45 f4	 mov	 DWORD PTR _ack$83888[ebp+24], eax
  00334	8d 45 dc	 lea	 eax, DWORD PTR _ack$83888[ebp]
  00337	50		 push	 eax
  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0033d	6a 00		 push	 0
  0033f	53		 push	 ebx
  00340	ff 50 24	 call	 DWORD PTR [eax+36]
  00343	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  : 					}
; 234  : 				}
; 235  : 				else if (rpacket->type == TLEN_FILE_PACKET_END_OF_FILE) { // end of file

  00346	e9 9e 00 00 00	 jmp	 $L83902
$L83324:
  0034b	83 f9 37	 cmp	 ecx, 55			; 00000037H
  0034e	0f 85 97 00 00
	00		 jne	 $L83893

; 236  : 					_close(ft->fileId);

  00354	ff 76 14	 push	 DWORD PTR [esi+20]
  00357	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___close

; 237  : 					JabberLog(ft->proto, "Finishing this file...");

  0035d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@ ; `string'
  00364	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0036a	e8 00 00 00 00	 call	 _JabberLog

; 238  : 					if (ft->currentFile >= ft->fileCount-1) {

  0036f	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00372	59		 pop	 ecx
  00373	59		 pop	 ecx
  00374	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00377	49		 dec	 ecx
  00378	3b c1		 cmp	 eax, ecx
  0037a	7c 09		 jl	 SHORT $L83334

; 239  : 						ft->state = FT_DONE;

  0037c	c7 46 0c 03 00
	00 00		 mov	 DWORD PTR [esi+12], 3

; 240  : 					}
; 241  : 					else {

  00383	eb 66		 jmp	 SHORT $L83893
$L83334:

; 242  : 						ft->currentFile++;
; 243  : 						ft->state = FT_INITIALIZING;
; 244  : 						JabberLog(ft->proto, "File received, advancing to the next file...");

  00385	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@LBDP@File?5received?0?5advancing?5to?5the?5@ ; `string'
  0038a	40		 inc	 eax
  0038b	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00391	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00394	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  0039b	e8 00 00 00 00	 call	 _JabberLog

; 245  : 						ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_NEXTFILE, ft, 0);

  003a0	6a 06		 push	 6
  003a2	33 c0		 xor	 eax, eax
  003a4	59		 pop	 ecx
  003a5	8d 7d c4	 lea	 edi, DWORD PTR _ack$83894[ebp+4]
  003a8	f3 ab		 rep stosd
  003aa	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  003b0	83 65 d8 00	 and	 DWORD PTR _ack$83894[ebp+24], 0
  003b4	c7 45 c0 1c 00
	00 00		 mov	 DWORD PTR _ack$83894[ebp], 28 ; 0000001cH
  003bb	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _ack$83894[ebp+12], 2
  003c2	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003c5	c7 45 d0 69 00
	00 00		 mov	 DWORD PTR _ack$83894[ebp+16], 105 ; 00000069H
  003cc	89 45 c4	 mov	 DWORD PTR _ack$83894[ebp+4], eax
  003cf	8b 06		 mov	 eax, DWORD PTR [esi]
  003d1	89 45 c8	 mov	 DWORD PTR _ack$83894[ebp+8], eax
  003d4	8d 45 c0	 lea	 eax, DWORD PTR _ack$83894[ebp]
  003d7	50		 push	 eax
  003d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003dd	6a 00		 push	 0
  003df	53		 push	 ebx
  003e0	89 75 d4	 mov	 DWORD PTR _ack$83894[ebp+20], esi
  003e3	ff 50 24	 call	 DWORD PTR [eax+36]
  003e6	83 c4 14	 add	 esp, 20			; 00000014H
$L83902:
  003e9	33 ff		 xor	 edi, edi
$L83893:

; 246  : 					}
; 247  : 				}
; 248  : 				TlenP2PPacketFree(rpacket);

  003eb	ff 75 f8	 push	 DWORD PTR _rpacket$[ebp]
  003ee	e8 00 00 00 00	 call	 _TlenP2PPacketFree
  003f3	59		 pop	 ecx

; 249  : 			}
; 250  : 			else {

  003f4	eb 07		 jmp	 SHORT $L83337
$L83323:

; 251  : 				ft->state = FT_ERROR;

  003f6	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$L83337:

; 217  : 		while (ft->state == FT_RECEIVING) {

  003fd	83 7e 0c 02	 cmp	 DWORD PTR [esi+12], 2
  00401	0f 84 96 fe ff
	ff		 je	 $L83320
$L83321:
  00407	5f		 pop	 edi
  00408	5e		 pop	 esi
  00409	5b		 pop	 ebx

; 252  : 			}
; 253  : 		}
; 254  : 	}
; 255  : }

  0040a	c9		 leave
  0040b	c3		 ret	 0
_TlenFileReceiveParse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@EBIB@Thread?5started?3?5type?$DNtlen_file_s@ ; `string'
PUBLIC	??_C@_0CH@OLME@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?86?8?5a?$DN?8?$CFs?8?5p?$DN@ ; `string'
PUBLIC	??_C@_0CD@JFMN@Waiting?5for?5the?5file?5to?5be?5sent?4@ ; `string'
PUBLIC	??_C@_0O@IMLC@ft?9?$DOs?5is?5NULL?$AA@		; `string'
PUBLIC	??_C@_0BF@IPEE@Sending?5as?5client?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0CP@CNGK@Entering?5send?5loop?5for?5this?5file@ ; `string'
PUBLIC	??_C@_0CO@DACA@Closing?5connection?5for?5this?5file@ ; `string'
PUBLIC	??_C@_0ED@MCPA@Cannot?5allocate?5port?5to?5bind?5for@ ; `string'
PUBLIC	??_C@_0BE@NAKP@Finish?5successfully?$AA@	; `string'
PUBLIC	??_C@_0BD@FGGL@Finish?5with?5errors?$AA@	; `string'
PUBLIC	??_C@_0BN@PODG@Thread?5ended?3?5type?$DNfile_send?$AA@ ; `string'
;	COMDAT ??_C@_0CE@EBIB@Thread?5started?3?5type?$DNtlen_file_s@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0CE@EBIB@Thread?5started?3?5type?$DNtlen_file_s@ DB 'Thread started'
	DB	': type=tlen_file_send', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@OLME@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?86?8?5a?$DN?8?$CFs?8?5p?$DN@
_DATA	SEGMENT
??_C@_0CH@OLME@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?86?8?5a?$DN?8?$CFs?8?5p?$DN@ DB '<'
	DB	'f t=''%s'' i=''%s'' e=''6'' a=''%s'' p=''%d''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CD@JFMN@Waiting?5for?5the?5file?5to?5be?5sent?4@
_DATA	SEGMENT
??_C@_0CD@JFMN@Waiting?5for?5the?5file?5to?5be?5sent?4@ DB 'Waiting for t'
	DB	'he file to be sent...', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@IMLC@ft?9?$DOs?5is?5NULL?$AA@
_DATA	SEGMENT
??_C@_0O@IMLC@ft?9?$DOs?5is?5NULL?$AA@ DB 'ft->s is NULL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IPEE@Sending?5as?5client?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BF@IPEE@Sending?5as?5client?4?4?4?$AA@ DB 'Sending as client...', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CP@CNGK@Entering?5send?5loop?5for?5this?5file@
_DATA	SEGMENT
??_C@_0CP@CNGK@Entering?5send?5loop?5for?5this?5file@ DB 'Entering send l'
	DB	'oop for this file connection...', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CO@DACA@Closing?5connection?5for?5this?5file@
_DATA	SEGMENT
??_C@_0CO@DACA@Closing?5connection?5for?5this?5file@ DB 'Closing connecti'
	DB	'on for this file transfer... ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0ED@MCPA@Cannot?5allocate?5port?5to?5bind?5for@
_DATA	SEGMENT
??_C@_0ED@MCPA@Cannot?5allocate?5port?5to?5bind?5for@ DB 'Cannot allocate'
	DB	' port to bind for file server thread, thread ended.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@NAKP@Finish?5successfully?$AA@
_DATA	SEGMENT
??_C@_0BE@NAKP@Finish?5successfully?$AA@ DB 'Finish successfully', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@FGGL@Finish?5with?5errors?$AA@
_DATA	SEGMENT
??_C@_0BD@FGGL@Finish?5with?5errors?$AA@ DB 'Finish with errors', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PODG@Thread?5ended?3?5type?$DNfile_send?$AA@
_DATA	SEGMENT
??_C@_0BN@PODG@Thread?5ended?3?5type?$DNfile_send?$AA@ DB 'Thread ended: '
	DB	'type=file_send', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenFileSendingThread
_TEXT	SEGMENT
_ft$ = 8
_s$ = 8
_nick$ = -4
_nloc$83357 = -28
_s$83358 = 8
_ack$83907 = -32
_ack$83916 = -60
_ack$83922 = -60
_ack$83928 = -60
_ack$83937 = -60
_ack$83943 = -60
_ack$83949 = -60
_TlenFileSendingThread PROC NEAR			; COMDAT

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 260  : 	JABBER_SOCKET s = NULL;
; 261  : 	HANDLE hEvent;
; 262  : 	char *nick;
; 263  : 
; 264  : 	JabberLog(ft->proto, "Thread started: type=tlen_file_send");

  00008	8b 75 08	 mov	 esi, DWORD PTR _ft$[ebp]
  0000b	57		 push	 edi
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@EBIB@Thread?5started?3?5type?$DNtlen_file_s@ ; `string'
  00011	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00017	e8 00 00 00 00	 call	 _JabberLog

; 265  : 	ft->mode = FT_SEND;
; 266  : 	ft->pfnNewConnectionV2 = TlenFileSendingConnection;
; 267  : 	s = TlenP2PListen(ft);

  0001c	56		 push	 esi
  0001d	c7 46 1c 01 00
	00 00		 mov	 DWORD PTR [esi+28], 1
  00024	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET FLAT:_TlenFileSendingConnection
  0002b	e8 00 00 00 00	 call	 _TlenP2PListen

; 268  : 	if (s != NULL) {

  00030	33 db		 xor	 ebx, ebx
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	3b c3		 cmp	 eax, ebx
  00037	89 45 08	 mov	 DWORD PTR _s$[ebp], eax
  0003a	0f 84 7d 02 00
	00		 je	 $L83348

; 269  : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_CONNECTING, ft, 0);

  00040	6a 06		 push	 6
  00042	33 c0		 xor	 eax, eax
  00044	59		 pop	 ecx
  00045	8d 7d e4	 lea	 edi, DWORD PTR _ack$83907[ebp+4]
  00048	f3 ab		 rep stosd
  0004a	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00050	c7 45 e0 1c 00
	00 00		 mov	 DWORD PTR _ack$83907[ebp], 28 ; 0000001cH
  00057	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR _ack$83907[ebp+12], 2
  0005e	c7 45 f0 64 00
	00 00		 mov	 DWORD PTR _ack$83907[ebp+16], 100 ; 00000064H
  00065	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00068	89 75 f4	 mov	 DWORD PTR _ack$83907[ebp+20], esi
  0006b	89 45 e4	 mov	 DWORD PTR _ack$83907[ebp+4], eax
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	89 45 e8	 mov	 DWORD PTR _ack$83907[ebp+8], eax
  00073	8d 45 e0	 lea	 eax, DWORD PTR _ack$83907[ebp]
  00076	50		 push	 eax
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0007c	53		 push	 ebx
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00082	89 5d f8	 mov	 DWORD PTR _ack$83907[ebp+24], ebx
  00085	ff 50 24	 call	 DWORD PTR [eax+36]

; 270  : 		ft->s = s;

  00088	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 271  : 		//JabberLog("ft->s = %d", s);
; 272  : 		//JabberLog("fileCount = %d", ft->fileCount);
; 273  : 
; 274  : 		hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00091	53		 push	 ebx
  00092	53		 push	 ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16

; 275  : 		ft->hFileEvent = hEvent;
; 276  : 		ft->currentFile = 0;
; 277  : 		ft->state = FT_CONNECTING;
; 278  : 
; 279  : 		nick = JabberNickFromJID(ft->jid);

  0009b	ff 76 10	 push	 DWORD PTR [esi+16]
  0009e	8b f8		 mov	 edi, eax
  000a0	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000a3	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  000a6	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  000a9	e8 00 00 00 00	 call	 _JabberNickFromJID

; 280  : 		JabberSend(ft->proto, "<f t='%s' i='%s' e='6' a='%s' p='%d'/>", nick, ft->iqId, ft->localName, ft->wLocalPort);

  000ae	0f b7 4e 2c	 movzx	 ecx, WORD PTR [esi+44]
  000b2	51		 push	 ecx
  000b3	89 45 fc	 mov	 DWORD PTR _nick$[ebp], eax
  000b6	ff 76 28	 push	 DWORD PTR [esi+40]
  000b9	ff 76 18	 push	 DWORD PTR [esi+24]
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@OLME@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?86?8?5a?$DN?8?$CFs?8?5p?$DN@ ; `string'
  000c2	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  000c8	e8 00 00 00 00	 call	 _JabberSend

; 281  : 		mir_free(nick);

  000cd	ff 75 fc	 push	 DWORD PTR _nick$[ebp]
  000d0	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 282  : 		JabberLog(ft->proto, "Waiting for the file to be sent...");

  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JFMN@Waiting?5for?5the?5file?5to?5be?5sent?4@ ; `string'
  000db	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  000e1	e8 00 00 00 00	 call	 _JabberLog
  000e6	83 c4 28	 add	 esp, 40			; 00000028H

; 283  : 		WaitForSingleObject(hEvent, INFINITE);

  000e9	6a ff		 push	 -1
  000eb	57		 push	 edi
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 284  : 		ft->hFileEvent = NULL;
; 285  : 		CloseHandle(hEvent);

  000f2	57		 push	 edi
  000f3	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 286  : 		JabberLog(ft->proto, "Finish all files");

  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@NFGI@Finish?5all?5files?$AA@ ; `string'
  00101	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00107	e8 00 00 00 00	 call	 _JabberLog

; 287  : 		Netlib_CloseHandle(s);

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00111	53		 push	 ebx
  00112	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  0011a	ff 50 24	 call	 DWORD PTR [eax+36]

; 288  : 		ft->s = NULL;
; 289  : 		JabberLog(ft->proto, "ft->s is NULL");

  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IMLC@ft?9?$DOs?5is?5NULL?$AA@ ; `string'
  00122	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00125	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0012b	e8 00 00 00 00	 call	 _JabberLog
  00130	83 c4 1c	 add	 esp, 28			; 0000001cH

; 290  : 
; 291  : 		if (ft->state == FT_SWITCH) {

  00133	83 7e 0c 06	 cmp	 DWORD PTR [esi+12], 6
  00137	0f 85 99 01 00
	00		 jne	 $L83373

; 292  : 			NETLIBOPENCONNECTION nloc;
; 293  : 			JABBER_SOCKET s;
; 294  : 			JabberLog(ft->proto, "Sending as client...");

  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IPEE@Sending?5as?5client?4?4?4?$AA@ ; `string'
  00142	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00148	e8 00 00 00 00	 call	 _JabberLog

; 295  : 			ft->state = FT_CONNECTING;
; 296  : 			nloc.cbSize = NETLIBOPENCONNECTION_V1_SIZE;//sizeof(NETLIBOPENCONNECTION);
; 297  : 			nloc.szHost = ft->hostName;

  0014d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00150	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00153	89 45 e8	 mov	 DWORD PTR _nloc$83357[ebp+4], eax

; 298  : 			nloc.wPort = ft->wPort;

  00156	66 8b 46 24	 mov	 ax, WORD PTR [esi+36]
  0015a	66 89 45 ec	 mov	 WORD PTR _nloc$83357[ebp+8], ax

; 299  : 			nloc.flags = 0;
; 300  : 			s = (HANDLE) CallService(MS_NETLIB_OPENCONNECTION, (WPARAM) ft->proto->hNetlibUser, (LPARAM) &nloc);

  0015e	8d 45 e4	 lea	 eax, DWORD PTR _nloc$83357[ebp]
  00161	50		 push	 eax
  00162	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00168	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _nloc$83357[ebp], 16 ; 00000010H
  0016f	89 5d f0	 mov	 DWORD PTR _nloc$83357[ebp+12], ebx
  00172	ff b0 c0 00 00
	00		 push	 DWORD PTR [eax+192]
  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0017d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JEKK@Netlib?1OpenConnection?$AA@ ; `string'
  00182	ff 50 24	 call	 DWORD PTR [eax+36]
  00185	83 c4 14	 add	 esp, 20			; 00000014H

; 301  : 			if (s != NULL) {

  00188	3b c3		 cmp	 eax, ebx
  0018a	89 45 08	 mov	 DWORD PTR _s$83358[ebp], eax
  0018d	0f 84 3c 01 00
	00		 je	 $L83364

; 302  : 				ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_CONNECTING, ft, 0);

  00193	6a 06		 push	 6
  00195	33 c0		 xor	 eax, eax
  00197	59		 pop	 ecx
  00198	8d 7d c8	 lea	 edi, DWORD PTR _ack$83916[ebp+4]
  0019b	f3 ab		 rep stosd
  0019d	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  001a3	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83916[ebp], 28 ; 0000001cH
  001aa	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83916[ebp+12], 2
  001b1	c7 45 d4 64 00
	00 00		 mov	 DWORD PTR _ack$83916[ebp+16], 100 ; 00000064H
  001b8	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  001bb	89 75 d8	 mov	 DWORD PTR _ack$83916[ebp+20], esi
  001be	89 45 c8	 mov	 DWORD PTR _ack$83916[ebp+4], eax
  001c1	8b 06		 mov	 eax, DWORD PTR [esi]
  001c3	89 45 cc	 mov	 DWORD PTR _ack$83916[ebp+8], eax
  001c6	8d 45 c4	 lea	 eax, DWORD PTR _ack$83916[ebp]
  001c9	50		 push	 eax
  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001cf	53		 push	 ebx
  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  001d5	89 5d dc	 mov	 DWORD PTR _ack$83916[ebp+24], ebx
  001d8	ff 50 24	 call	 DWORD PTR [eax+36]

; 303  : 				ft->s = s;

  001db	8b 45 08	 mov	 eax, DWORD PTR _s$83358[ebp]

; 304  : 				TlenP2PEstablishOutgoingConnection(ft, TRUE);

  001de	6a 01		 push	 1
  001e0	56		 push	 esi
  001e1	89 46 04	 mov	 DWORD PTR [esi+4], eax
  001e4	e8 00 00 00 00	 call	 _TlenP2PEstablishOutgoingConnection

; 305  : 				JabberLog(ft->proto, "Entering send loop for this file connection...");

  001e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@CNGK@Entering?5send?5loop?5for?5this?5file@ ; `string'
  001ee	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001f4	e8 00 00 00 00	 call	 _JabberLog
  001f9	83 c4 1c	 add	 esp, 28			; 0000001cH
$L83955:

; 306  : 				while (ft->state!=FT_DONE && ft->state!=FT_ERROR) {

  001fc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ff	83 f8 03	 cmp	 eax, 3
  00202	74 0e		 je	 SHORT $L83368
  00204	83 f8 04	 cmp	 eax, 4
  00207	74 09		 je	 SHORT $L83368

; 307  : 					TlenFileSendParse(ft);

  00209	56		 push	 esi
  0020a	e8 00 00 00 00	 call	 _TlenFileSendParse
  0020f	59		 pop	 ecx
  00210	eb ea		 jmp	 SHORT $L83955
$L83368:

; 308  : 				}
; 309  : 				if (ft->state==FT_DONE)

  00212	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3

; 310  : 					ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  00216	6a 06		 push	 6
  00218	59		 pop	 ecx
  00219	75 34		 jne	 SHORT $L83369
  0021b	33 c0		 xor	 eax, eax
  0021d	8d 7d c8	 lea	 edi, DWORD PTR _ack$83922[ebp+4]
  00220	f3 ab		 rep stosd
  00222	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00228	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83922[ebp], 28 ; 0000001cH
  0022f	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83922[ebp+12], 2
  00236	89 5d d4	 mov	 DWORD PTR _ack$83922[ebp+16], ebx
  00239	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0023c	89 75 d8	 mov	 DWORD PTR _ack$83922[ebp+20], esi
  0023f	89 45 c8	 mov	 DWORD PTR _ack$83922[ebp+4], eax
  00242	8b 06		 mov	 eax, DWORD PTR [esi]
  00244	89 45 cc	 mov	 DWORD PTR _ack$83922[ebp+8], eax
  00247	89 5d dc	 mov	 DWORD PTR _ack$83922[ebp+24], ebx
  0024a	8d 45 c4	 lea	 eax, DWORD PTR _ack$83922[ebp]

; 311  : 				else

  0024d	eb 36		 jmp	 SHORT $L83956
$L83369:

; 312  : 					ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  0024f	33 c0		 xor	 eax, eax
  00251	8d 7d c8	 lea	 edi, DWORD PTR _ack$83928[ebp+4]
  00254	f3 ab		 rep stosd
  00256	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  0025c	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83928[ebp], 28 ; 0000001cH
  00263	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83928[ebp+12], 2
  0026a	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _ack$83928[ebp+16], 1
  00271	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00274	89 75 d8	 mov	 DWORD PTR _ack$83928[ebp+20], esi
  00277	89 45 c8	 mov	 DWORD PTR _ack$83928[ebp+4], eax
  0027a	8b 06		 mov	 eax, DWORD PTR [esi]
  0027c	89 45 cc	 mov	 DWORD PTR _ack$83928[ebp+8], eax
  0027f	89 5d dc	 mov	 DWORD PTR _ack$83928[ebp+24], ebx
  00282	8d 45 c4	 lea	 eax, DWORD PTR _ack$83928[ebp]
$L83956:
  00285	50		 push	 eax
  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0028b	53		 push	 ebx
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00291	ff 50 24	 call	 DWORD PTR [eax+36]
  00294	83 c4 0c	 add	 esp, 12			; 0000000cH

; 313  : 				JabberLog(ft->proto, "Closing connection for this file transfer... ");

  00297	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@DACA@Closing?5connection?5for?5this?5file@ ; `string'
  0029c	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  002a2	e8 00 00 00 00	 call	 _JabberLog

; 314  : 				Netlib_CloseHandle(s);

  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002ac	53		 push	 ebx
  002ad	ff 75 08	 push	 DWORD PTR _s$83358[ebp]
  002b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  002b5	ff 50 24	 call	 DWORD PTR [eax+36]
  002b8	83 c4 14	 add	 esp, 20			; 00000014H

; 315  : 			} else {

  002bb	eb 19		 jmp	 SHORT $L83373
$L83348:

; 316  : 				ft->state = FT_ERROR;
; 317  : 			}
; 318  : 		}
; 319  : 	} else {
; 320  : 		JabberLog(ft->proto, "Cannot allocate port to bind for file server thread, thread ended.");

  002bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@MCPA@Cannot?5allocate?5port?5to?5bind?5for@ ; `string'
  002c2	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  002c8	e8 00 00 00 00	 call	 _JabberLog
  002cd	59		 pop	 ecx
  002ce	59		 pop	 ecx
$L83364:

; 321  : 		ft->state = FT_ERROR;

  002cf	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$L83373:

; 322  : 	}
; 323  : 	JabberListRemove(ft->proto, LIST_FILE, ft->iqId);

  002d6	ff 76 18	 push	 DWORD PTR [esi+24]
  002d9	6a 02		 push	 2
  002db	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  002e1	e8 00 00 00 00	 call	 _JabberListRemove

; 324  : 	switch (ft->state) {

  002e6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ec	83 e8 03	 sub	 eax, 3
  002ef	0f 84 da 00 00
	00		 je	 $L83379
  002f5	48		 dec	 eax
  002f6	48		 dec	 eax
  002f7	0f 84 85 00 00
	00		 je	 $L83381

; 332  : 	default: // FT_ERROR:
; 333  : 		nick = JabberNickFromJID(ft->jid);

  002fd	ff 76 10	 push	 DWORD PTR [esi+16]
  00300	e8 00 00 00 00	 call	 _JabberNickFromJID

; 334  : 		JabberSend(ft->proto, "<f t='%s' i='%s' e='8'/>", nick, ft->iqId);

  00305	ff 76 18	 push	 DWORD PTR [esi+24]
  00308	8b f8		 mov	 edi, eax
  0030a	57		 push	 edi
  0030b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EFIH@?$DMf?5t?$DN?8?$CFs?8?5i?$DN?8?$CFs?8?5e?$DN?88?8?1?$DO?$AA@ ; `string'
  00310	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00316	e8 00 00 00 00	 call	 _JabberSend

; 335  : 		mir_free(nick);

  0031b	57		 push	 edi
  0031c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 336  : 		JabberLog(ft->proto, "Finish with errors");

  00322	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@FGGL@Finish?5with?5errors?$AA@ ; `string'
  00327	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0032d	e8 00 00 00 00	 call	 _JabberLog

; 337  : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  00332	6a 06		 push	 6
  00334	33 c0		 xor	 eax, eax
  00336	59		 pop	 ecx
  00337	8d 7d c8	 lea	 edi, DWORD PTR _ack$83949[ebp+4]
  0033a	f3 ab		 rep stosd
  0033c	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00342	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83949[ebp], 28 ; 0000001cH
  00349	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83949[ebp+12], 2
  00350	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _ack$83949[ebp+16], 1
  00357	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0035a	89 75 d8	 mov	 DWORD PTR _ack$83949[ebp+20], esi
  0035d	89 45 c8	 mov	 DWORD PTR _ack$83949[ebp+4], eax
  00360	8b 06		 mov	 eax, DWORD PTR [esi]
  00362	89 45 cc	 mov	 DWORD PTR _ack$83949[ebp+8], eax
  00365	8d 45 c4	 lea	 eax, DWORD PTR _ack$83949[ebp]
  00368	50		 push	 eax
  00369	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0036e	53		 push	 ebx
  0036f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00374	89 5d dc	 mov	 DWORD PTR _ack$83949[ebp+24], ebx
  00377	ff 50 24	 call	 DWORD PTR [eax+36]
  0037a	83 c4 2c	 add	 esp, 44			; 0000002cH

; 338  : 		break;

  0037d	e9 a4 00 00 00	 jmp	 $L83936
$L83381:

; 328  : 		break;
; 329  : 	case FT_DENIED:
; 330  : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_DENIED, ft, 0);

  00382	6a 06		 push	 6
  00384	33 c0		 xor	 eax, eax
  00386	59		 pop	 ecx
  00387	8d 7d c8	 lea	 edi, DWORD PTR _ack$83943[ebp+4]
  0038a	f3 ab		 rep stosd
  0038c	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00392	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83943[ebp], 28 ; 0000001cH
  00399	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83943[ebp+12], 2
  003a0	c7 45 d4 6b 00
	00 00		 mov	 DWORD PTR _ack$83943[ebp+16], 107 ; 0000006bH
  003a7	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003aa	89 75 d8	 mov	 DWORD PTR _ack$83943[ebp+20], esi
  003ad	89 45 c8	 mov	 DWORD PTR _ack$83943[ebp+4], eax
  003b0	8b 06		 mov	 eax, DWORD PTR [esi]
  003b2	89 45 cc	 mov	 DWORD PTR _ack$83943[ebp+8], eax
  003b5	8d 45 c4	 lea	 eax, DWORD PTR _ack$83943[ebp]
  003b8	50		 push	 eax
  003b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003be	53		 push	 ebx
  003bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  003c4	89 5d dc	 mov	 DWORD PTR _ack$83943[ebp+24], ebx
  003c7	ff 50 24	 call	 DWORD PTR [eax+36]
  003ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 331  : 		break;

  003cd	eb 57		 jmp	 SHORT $L83936
$L83379:

; 325  : 	case FT_DONE:
; 326  : 		JabberLog(ft->proto, "Finish successfully");

  003cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@NAKP@Finish?5successfully?$AA@ ; `string'
  003d4	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  003da	e8 00 00 00 00	 call	 _JabberLog

; 327  : 		ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  003df	6a 06		 push	 6
  003e1	33 c0		 xor	 eax, eax
  003e3	59		 pop	 ecx
  003e4	8d 7d c8	 lea	 edi, DWORD PTR _ack$83937[ebp+4]
  003e7	f3 ab		 rep stosd
  003e9	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  003ef	c7 45 c4 1c 00
	00 00		 mov	 DWORD PTR _ack$83937[ebp], 28 ; 0000001cH
  003f6	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _ack$83937[ebp+12], 2
  003fd	89 5d d4	 mov	 DWORD PTR _ack$83937[ebp+16], ebx
  00400	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00403	89 75 d8	 mov	 DWORD PTR _ack$83937[ebp+20], esi
  00406	89 45 c8	 mov	 DWORD PTR _ack$83937[ebp+4], eax
  00409	8b 06		 mov	 eax, DWORD PTR [esi]
  0040b	89 45 cc	 mov	 DWORD PTR _ack$83937[ebp+8], eax
  0040e	8d 45 c4	 lea	 eax, DWORD PTR _ack$83937[ebp]
  00411	50		 push	 eax
  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00417	53		 push	 ebx
  00418	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0041d	89 5d dc	 mov	 DWORD PTR _ack$83937[ebp+24], ebx
  00420	ff 50 24	 call	 DWORD PTR [eax+36]
  00423	83 c4 14	 add	 esp, 20			; 00000014H
$L83936:

; 339  : 	}
; 340  : 	JabberLog(ft->proto, "Thread ended: type=file_send");

  00426	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PODG@Thread?5ended?3?5type?$DNfile_send?$AA@ ; `string'
  0042b	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00431	e8 00 00 00 00	 call	 _JabberLog

; 341  : 	TlenP2PFreeFileTransfer(ft);

  00436	56		 push	 esi
  00437	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  0043c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0043f	5f		 pop	 edi
  00440	5e		 pop	 esi
  00441	5b		 pop	 ebx

; 342  : }

  00442	c9		 leave
  00443	c3		 ret	 0
_TlenFileSendingThread ENDP
_TEXT	ENDS
;	COMDAT _TlenFileSendingConnection
_TEXT	SEGMENT
_hConnection$ = 8
_pExtra$ = 16
_slisten$ = 8
_ack$83960 = -28
_ack$83966 = -28
_TlenFileSendingConnection PROC NEAR			; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 346  : 	JABBER_SOCKET slisten;
; 347  : 	TLEN_FILE_TRANSFER *ft;
; 348  : 	TlenProtocol *proto = (TlenProtocol *)pExtra;
; 349  : 
; 350  : 	ft = TlenP2PEstablishIncomingConnection(proto, hConnection, LIST_FILE, TRUE);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _hConnection$[ebp]
  0000a	56		 push	 esi
  0000b	6a 01		 push	 1
  0000d	6a 02		 push	 2
  0000f	53		 push	 ebx
  00010	ff 75 10	 push	 DWORD PTR _pExtra$[ebp]
  00013	e8 00 00 00 00	 call	 _TlenP2PEstablishIncomingConnection
  00018	8b f0		 mov	 esi, eax
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 	if (ft != NULL) {

  0001d	85 f6		 test	 esi, esi
  0001f	0f 84 23 01 00
	00		 je	 $L83397

; 352  : 		slisten = ft->s;

  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 353  : 		ft->s = hConnection;

  00028	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 354  : 		JabberLog(ft->proto, "Set ft->s to %d (saving %d)", hConnection, slisten);

  0002b	50		 push	 eax
  0002c	53		 push	 ebx
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NHEE@Set?5ft?9?$DOs?5to?5?$CFd?5?$CIsaving?5?$CFd?$CJ?$AA@ ; `string'
  00032	89 45 08	 mov	 DWORD PTR _slisten$[ebp], eax
  00035	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0003b	e8 00 00 00 00	 call	 _JabberLog

; 355  : 
; 356  : 		JabberLog(ft->proto, "Entering send loop for this file connection... (ft->s is hConnection)");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@JOAE@Entering?5send?5loop?5for?5this?5file@ ; `string'
  00045	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0004b	e8 00 00 00 00	 call	 _JabberLog
  00050	83 c4 18	 add	 esp, 24			; 00000018H
$L83979:

; 357  : 		while (ft->state!=FT_DONE && ft->state!=FT_ERROR) {

  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	83 f8 03	 cmp	 eax, 3
  00059	74 0e		 je	 SHORT $L83400
  0005b	83 f8 04	 cmp	 eax, 4
  0005e	74 09		 je	 SHORT $L83400

; 358  : 			TlenFileSendParse(ft);

  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _TlenFileSendParse
  00066	59		 pop	 ecx
  00067	eb ea		 jmp	 SHORT $L83979
$L83400:

; 359  : 		}
; 360  : 		if (ft->state==FT_DONE)

  00069	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3
  0006d	57		 push	 edi

; 361  : 			ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  0006e	6a 06		 push	 6
  00070	59		 pop	 ecx
  00071	75 38		 jne	 SHORT $L83401
  00073	33 c0		 xor	 eax, eax
  00075	8d 7d e8	 lea	 edi, DWORD PTR _ack$83960[ebp+4]
  00078	f3 ab		 rep stosd
  0007a	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00080	8d 4d e4	 lea	 ecx, DWORD PTR _ack$83960[ebp]
  00083	51		 push	 ecx
  00084	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83960[ebp], 28 ; 0000001cH
  0008b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0008e	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _ack$83960[ebp+12], 2
  00095	89 45 e8	 mov	 DWORD PTR _ack$83960[ebp+4], eax
  00098	8b 06		 mov	 eax, DWORD PTR [esi]
  0009a	89 45 ec	 mov	 DWORD PTR _ack$83960[ebp+8], eax
  0009d	33 c0		 xor	 eax, eax
  0009f	89 45 f4	 mov	 DWORD PTR _ack$83960[ebp+16], eax
  000a2	89 75 f8	 mov	 DWORD PTR _ack$83960[ebp+20], esi
  000a5	89 45 fc	 mov	 DWORD PTR _ack$83960[ebp+24], eax
  000a8	50		 push	 eax

; 362  : 		else

  000a9	eb 3a		 jmp	 SHORT $L83980
$L83401:

; 363  : 			ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  000ab	33 c0		 xor	 eax, eax
  000ad	8d 7d e8	 lea	 edi, DWORD PTR _ack$83966[ebp+4]
  000b0	f3 ab		 rep stosd
  000b2	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  000b8	83 65 fc 00	 and	 DWORD PTR _ack$83966[ebp+24], 0
  000bc	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83966[ebp], 28 ; 0000001cH
  000c3	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _ack$83966[ebp+12], 2
  000ca	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000cd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ack$83966[ebp+16], 1
  000d4	89 45 e8	 mov	 DWORD PTR _ack$83966[ebp+4], eax
  000d7	8b 06		 mov	 eax, DWORD PTR [esi]
  000d9	89 45 ec	 mov	 DWORD PTR _ack$83966[ebp+8], eax
  000dc	8d 45 e4	 lea	 eax, DWORD PTR _ack$83966[ebp]
  000df	50		 push	 eax
  000e0	89 75 f8	 mov	 DWORD PTR _ack$83966[ebp+20], esi
  000e3	6a 00		 push	 0
$L83980:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  000ef	ff 50 24	 call	 DWORD PTR [eax+36]
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 		JabberLog(ft->proto, "Closing connection for this file transfer... (ft->s is now hBind)");

  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@KHJJ@Closing?5connection?5for?5this?5file@ ; `string'
  000fa	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00100	e8 00 00 00 00	 call	 _JabberLog

; 365  : 		ft->s = slisten;

  00105	8b 45 08	 mov	 eax, DWORD PTR _slisten$[ebp]

; 366  : 		JabberLog(ft->proto, "ft->s is restored to %d", ft->s);

  00108	50		 push	 eax
  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CBPP@ft?9?$DOs?5is?5restored?5to?5?$CFd?$AA@ ; `string'
  0010e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00114	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00117	e8 00 00 00 00	 call	 _JabberLog
  0011c	83 c4 14	 add	 esp, 20			; 00000014H

; 367  : 		if (ft->s != hConnection) {

  0011f	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  00122	5f		 pop	 edi
  00123	74 13		 je	 SHORT $L83972

; 368  : 			Netlib_CloseHandle(hConnection);

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0012a	6a 00		 push	 0
  0012c	53		 push	 ebx
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00132	ff 50 24	 call	 DWORD PTR [eax+36]
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83972:

; 369  : 		}
; 370  : 		if (ft->hFileEvent != NULL)

  00138	8b 76 3c	 mov	 esi, DWORD PTR [esi+60]
  0013b	85 f6		 test	 esi, esi
  0013d	74 1c		 je	 SHORT $L83975

; 371  : 			SetEvent(ft->hFileEvent);

  0013f	56		 push	 esi
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 372  : 	} else {

  00146	eb 13		 jmp	 SHORT $L83975
$L83397:

; 373  : 		Netlib_CloseHandle(hConnection);

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0014d	6a 00		 push	 0
  0014f	53		 push	 ebx
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00155	ff 50 24	 call	 DWORD PTR [eax+36]
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83975:
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx

; 374  : 	}
; 375  : }

  0015d	c9		 leave
  0015e	c3		 ret	 0
_TlenFileSendingConnection ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@CBAI@FT_INITIALIZING?3?5recv?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@OHDI@FT_INITIALIZING?3?5recv?5type?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CN@BCNE@Requested?5file?5?$CI?$CD?$CFd?$CJ?5is?5invalid?5@ ; `string'
PUBLIC	??_C@_0BC@ONAN@Sending?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BG@HDBK@File?5cannot?5be?5opened?$AA@	; `string'
PUBLIC	??_C@_0BF@OBPO@Sending?5file?5data?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0CJ@DHKG@File?5sent?0?5advancing?5to?5the?5next@ ; `string'
EXTRN	__imp__SleepEx@8:NEAR
EXTRN	_TlenP2PPacketSetLen:NEAR
EXTRN	_TlenP2PPacketPackBuffer:NEAR
EXTRN	__imp__strrchr:NEAR
EXTRN	__imp___read:NEAR
;	COMDAT ??_C@_0BJ@CBAI@FT_INITIALIZING?3?5recv?5?$CFd?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BJ@CBAI@FT_INITIALIZING?3?5recv?5?$CFd?$AA@ DB 'FT_INITIALIZING: r'
	DB	'ecv %d', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@OHDI@FT_INITIALIZING?3?5recv?5type?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@OHDI@FT_INITIALIZING?3?5recv?5type?5?$CFd?$AA@ DB 'FT_INITIALIZ'
	DB	'ING: recv type %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@BCNE@Requested?5file?5?$CI?$CD?$CFd?$CJ?5is?5invalid?5@
_DATA	SEGMENT
??_C@_0CN@BCNE@Requested?5file?5?$CI?$CD?$CFd?$CJ?5is?5invalid?5@ DB 'Req'
	DB	'uested file (#%d) is invalid (must be %d)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@ONAN@Sending?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@
_DATA	SEGMENT
??_C@_0BC@ONAN@Sending?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ DB 'Sending [%s'
	DB	'] [%d]', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HDBK@File?5cannot?5be?5opened?$AA@
_DATA	SEGMENT
??_C@_0BG@HDBK@File?5cannot?5be?5opened?$AA@ DB 'File cannot be opened', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OBPO@Sending?5file?5data?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BF@OBPO@Sending?5file?5data?4?4?4?$AA@ DB 'Sending file data...', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DHKG@File?5sent?0?5advancing?5to?5the?5next@
_DATA	SEGMENT
??_C@_0CJ@DHKG@File?5sent?0?5advancing?5to?5the?5next@ DB 'File sent, adv'
	DB	'ancing to the next file...', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenFileSendParse
_TEXT	SEGMENT
_ack$83985 = -36
_ack$83991 = -36
_ft$ = 8
_currentFile$ = -40
_fileBuffer$ = -4
_rpacket$ = -8
_packet$ = 8
_filename$83419 = -348
_pfts$83441 = -92
_TlenFileSendParse PROC NEAR				; COMDAT

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 379  : 	int i;
; 380  : 	char *p, *t;
; 381  : 	int currentFile, numRead;
; 382  : 	char *fileBuffer;
; 383  : 	TLEN_FILE_PACKET *rpacket, *packet;
; 384  : 
; 385  : 
; 386  : 	if (ft->state == FT_CONNECTING) {

  0000b	8b 75 08	 mov	 esi, DWORD PTR _ft$[ebp]
  0000e	57		 push	 edi
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00012	85 c0		 test	 eax, eax
  00014	0f 85 fa 00 00
	00		 jne	 $L83418

; 387  : 		char filename[256];	// Must be 256 (0x100)
; 388  : 		if ((packet=TlenP2PPacketCreate(sizeof(DWORD)+(ft->fileCount*(sizeof(filename)+sizeof(DWORD))))) != NULL) {

  0001a	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0001d	6a 04		 push	 4
  0001f	69 c0 04 01 00
	00		 imul	 eax, 260		; 00000104H
  00025	5b		 pop	 ebx
  00026	03 c3		 add	 eax, ebx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _TlenP2PPacketCreate
  0002e	8b f8		 mov	 edi, eax
  00030	59		 pop	 ecx
  00031	85 ff		 test	 edi, edi
  00033	89 7d 08	 mov	 DWORD PTR _packet$[ebp], edi
  00036	0f 84 d0 00 00
	00		 je	 $L83423

; 389  : 			// Must pause a bit, sending these two packets back to back
; 390  : 			// will break the session because the receiver cannot take it :)
; 391  : 			SleepEx(1000, TRUE);

  0003c	6a 01		 push	 1
  0003e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8

; 392  : 			TlenP2PPacketSetLen(packet, 0); // Reuse packet

  00049	33 db		 xor	 ebx, ebx
  0004b	53		 push	 ebx
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 _TlenP2PPacketSetLen

; 393  : 			TlenP2PPacketSetType(packet, TLEN_FILE_PACKET_FILE_LIST);

  00052	6a 32		 push	 50			; 00000032H
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 _TlenP2PPacketSetType

; 394  : 			TlenP2PPacketPackDword(packet, (DWORD) ft->fileCount);

  0005a	ff 76 40	 push	 DWORD PTR [esi+64]
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword
  00063	83 c4 18	 add	 esp, 24			; 00000018H

; 395  : 			for (i=0; i<ft->fileCount; i++) {

  00066	39 5e 40	 cmp	 DWORD PTR [esi+64], ebx
  00069	7e 6f		 jle	 SHORT $L83427

; 401  : 				if ((t=strrchr(ft->files[i], '\\')) != NULL)

  0006b	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
$L83425:

; 396  : //					struct _stat statbuf;
; 397  : //					_stat(ft->files[i], &statbuf);
; 398  : //					TlenP2PPacketPackDword(packet, statbuf.st_size);
; 399  : 				TlenP2PPacketPackDword(packet, ft->filesSize[i]);

  00070	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00073	ff 34 98	 push	 DWORD PTR [eax+ebx*4]
  00076	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  00079	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 400  : 				memset(filename, 0, sizeof(filename));

  0007e	57		 push	 edi
  0007f	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _filename$83419[ebp]
  00085	6a 00		 push	 0
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memset

; 401  : 				if ((t=strrchr(ft->files[i], '\\')) != NULL)

  0008d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00090	6a 5c		 push	 92			; 0000005cH
  00092	ff 34 98	 push	 DWORD PTR [eax+ebx*4]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrchr
  0009b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009e	85 c0		 test	 eax, eax
  000a0	74 03		 je	 SHORT $L83429

; 402  : 					t++;

  000a2	40		 inc	 eax

; 403  : 				else

  000a3	eb 06		 jmp	 SHORT $L83430
$L83429:

; 404  : 					t = ft->files[i];

  000a5	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000a8	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
$L83430:

; 405  : 				_snprintf(filename, sizeof(filename)-1, t);

  000ab	50		 push	 eax
  000ac	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _filename$83419[ebp]
  000b2	68 ff 00 00 00	 push	 255			; 000000ffH
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 406  : 				TlenP2PPacketPackBuffer(packet, filename, sizeof(filename));

  000be	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _filename$83419[ebp]
  000c4	57		 push	 edi
  000c5	50		 push	 eax
  000c6	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  000c9	e8 00 00 00 00	 call	 _TlenP2PPacketPackBuffer
  000ce	83 c4 18	 add	 esp, 24			; 00000018H
  000d1	43		 inc	 ebx
  000d2	3b 5e 40	 cmp	 ebx, DWORD PTR [esi+64]
  000d5	7c 99		 jl	 SHORT $L83425

; 395  : 			for (i=0; i<ft->fileCount; i++) {

  000d7	8b 7d 08	 mov	 edi, DWORD PTR _packet$[ebp]
$L83427:

; 407  : 			}
; 408  : 			TlenP2PPacketSend(ft->s, packet);

  000da	57		 push	 edi
  000db	ff 76 04	 push	 DWORD PTR [esi+4]
  000de	e8 00 00 00 00	 call	 _TlenP2PPacketSend

; 409  : 			TlenP2PPacketFree(packet);

  000e3	57		 push	 edi
  000e4	e8 00 00 00 00	 call	 _TlenP2PPacketFree

; 410  : 
; 411  : 			ft->allFileReceivedBytes = 0;

  000e9	83 66 50 00	 and	 DWORD PTR [esi+80], 0

; 412  : 			ft->state = FT_INITIALIZING;
; 413  : 			JabberLog(ft->proto, "Change to FT_INITIALIZING");

  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NHDK@Change?5to?5FT_INITIALIZING?$AA@ ; `string'
  000f2	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  000f8	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  000ff	e8 00 00 00 00	 call	 _JabberLog
  00104	83 c4 14	 add	 esp, 20			; 00000014H

; 414  : 		}
; 415  : 		else {

  00107	e9 35 03 00 00	 jmp	 $L83470
$L83423:

; 416  : 			ft->state = FT_ERROR;

  0010c	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 417  : 		}
; 418  : 	}
; 419  : 	else if (ft->state == FT_INITIALIZING) {	// FT_INITIALIZING

  0010f	e9 2d 03 00 00	 jmp	 $L83470
$L83418:
  00114	83 f8 01	 cmp	 eax, 1
  00117	0f 85 24 03 00
	00		 jne	 $L83470

; 420  : 		rpacket = TlenP2PPacketReceive(ft->s);

  0011d	ff 76 04	 push	 DWORD PTR [esi+4]
  00120	e8 00 00 00 00	 call	 _TlenP2PPacketReceive
  00125	8b f8		 mov	 edi, eax

; 421  :         JabberLog(ft->proto, "FT_INITIALIZING: recv %d", rpacket);

  00127	57		 push	 edi
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CBAI@FT_INITIALIZING?3?5recv?5?$CFd?$AA@ ; `string'
  0012d	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00133	89 7d f8	 mov	 DWORD PTR _rpacket$[ebp], edi
  00136	e8 00 00 00 00	 call	 _JabberLog
  0013b	83 c4 10	 add	 esp, 16			; 00000010H

; 422  : 		if (rpacket == NULL) {

  0013e	85 ff		 test	 edi, edi

; 423  : 			ft->state = FT_ERROR;
; 424  : 			return;

  00140	0f 84 f4 02 00
	00		 je	 $L83440

; 425  : 		}
; 426  :         JabberLog(ft->proto, "FT_INITIALIZING: recv type %d", rpacket->type);

  00146	ff 77 08	 push	 DWORD PTR [edi+8]
  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@OHDI@FT_INITIALIZING?3?5recv?5type?5?$CFd?$AA@ ; `string'
  0014e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00154	e8 00 00 00 00	 call	 _JabberLog

; 427  : 		p = rpacket->packet;
; 428  : 		// TYPE: TLEN_FILE_PACKET_FILE_LIST_ACK	will be ignored
; 429  : 		// LEN: 0
; 430  : 		if (rpacket->type == TLEN_FILE_PACKET_FILE_LIST_ACK) {

  00159	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015f	83 f8 33	 cmp	 eax, 51			; 00000033H
  00162	0f 84 d9 02 00
	00		 je	 $L83470

; 431  : 
; 432  : 		}
; 433  : 		// Then the receiver will request each file
; 434  : 		// TYPE: TLEN_FILE_PACKET_REQUEST
; 435  : 		// LEN:
; 436  : 		// (DWORD) file number
; 437  : 		// (DWORD) 0
; 438  : 		// (DWORD) 0
; 439  : 		else if (rpacket->type == TLEN_FILE_PACKET_FILE_REQUEST) {

  00168	6a 34		 push	 52			; 00000034H
  0016a	5b		 pop	 ebx
  0016b	3b c3		 cmp	 eax, ebx
  0016d	0f 85 c7 02 00
	00		 jne	 $L83440
  00173	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 440  : 			PROTOFILETRANSFERSTATUS pfts;
; 441  : 			//struct _stat statbuf;
; 442  : 
; 443  : 			currentFile = *((DWORD*)p);
; 444  : 			if (currentFile != ft->currentFile) {

  00176	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00179	8b 00		 mov	 eax, DWORD PTR [eax]
  0017b	3b c1		 cmp	 eax, ecx
  0017d	89 45 d8	 mov	 DWORD PTR _currentFile$[ebp], eax
  00180	74 21		 je	 SHORT $L83443

; 445  : 				JabberLog(ft->proto, "Requested file (#%d) is invalid (must be %d)", currentFile, ft->currentFile);

  00182	51		 push	 ecx
  00183	50		 push	 eax
  00184	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@BCNE@Requested?5file?5?$CI?$CD?$CFd?$CJ?5is?5invalid?5@ ; `string'
  00189	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  0018f	e8 00 00 00 00	 call	 _JabberLog
  00194	83 c4 10	 add	 esp, 16			; 00000010H

; 446  : 				ft->state = FT_ERROR;

  00197	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4

; 447  : 			}
; 448  : 			else {

  0019e	e9 8e 02 00 00	 jmp	 $L83456
$L83443:

; 449  : 			//	_stat(ft->files[currentFile], &statbuf);	// file size in statbuf.st_size
; 450  : 				JabberLog(ft->proto, "Sending [%s] [%d]", ft->files[currentFile], ft->filesSize[currentFile]);

  001a3	8b f8		 mov	 edi, eax
  001a5	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  001a8	c1 e7 02	 shl	 edi, 2
  001ab	ff 34 38	 push	 DWORD PTR [eax+edi]
  001ae	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001b1	ff 34 07	 push	 DWORD PTR [edi+eax]
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@ONAN@Sending?5?$FL?$CFs?$FN?5?$FL?$CFd?$FN?$AA@ ; `string'
  001b9	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001bf	e8 00 00 00 00	 call	 _JabberLog

; 451  : 				if ((ft->fileId=_open(ft->files[currentFile], _O_BINARY|_O_RDONLY)) < 0) {

  001c4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001c7	68 00 80 00 00	 push	 32768			; 00008000H
  001cc	ff 34 07	 push	 DWORD PTR [edi+eax]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___open
  001d5	33 ff		 xor	 edi, edi
  001d7	83 c4 18	 add	 esp, 24			; 00000018H
  001da	3b c7		 cmp	 eax, edi
  001dc	89 46 14	 mov	 DWORD PTR [esi+20], eax
  001df	7d 14		 jge	 SHORT $L83447

; 452  : 					JabberLog(ft->proto, "File cannot be opened");

  001e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HDBK@File?5cannot?5be?5opened?$AA@ ; `string'
  001e6	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001ec	e8 00 00 00 00	 call	 _JabberLog
  001f1	59		 pop	 ecx
  001f2	59		 pop	 ecx

; 453  : 					ft->state = FT_ERROR;
; 454  : 				}
; 455  : 				else  {

  001f3	eb 61		 jmp	 SHORT $L84001
$L83447:

; 456  : 					memset(&pfts, 0, sizeof(PROTOFILETRANSFERSTATUS));

  001f5	53		 push	 ebx
  001f6	8d 45 a4	 lea	 eax, DWORD PTR _pfts$83441[ebp]
  001f9	57		 push	 edi
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 _memset

; 457  : 					pfts.cbSize = sizeof(PROTOFILETRANSFERSTATUS);
; 458  : 					pfts.hContact = ft->hContact;
; 459  : 					pfts.sending = TRUE;
; 460  : 					pfts.files = ft->files;
; 461  : 					pfts.totalFiles = ft->fileCount;

  00200	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00203	8b 06		 mov	 eax, DWORD PTR [esi]

; 462  : 					pfts.currentFileNumber = ft->currentFile;
; 463  : 					pfts.totalBytes = ft->allFileTotalSize;

  00205	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  00208	89 4d b4	 mov	 DWORD PTR _pfts$83441[ebp+16], ecx
  0020b	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0020e	89 45 a8	 mov	 DWORD PTR _pfts$83441[ebp+4], eax
  00211	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00214	89 4d b8	 mov	 DWORD PTR _pfts$83441[ebp+20], ecx

; 464  : 					pfts.workingDir = NULL;
; 465  : 					pfts.currentFile = ft->files[ft->currentFile];

  00217	c1 e1 02	 shl	 ecx, 2
  0021a	89 5d a4	 mov	 DWORD PTR _pfts$83441[ebp], ebx
  0021d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _pfts$83441[ebp+8], 1
  00224	89 45 b0	 mov	 DWORD PTR _pfts$83441[ebp+12], eax
  00227	89 55 bc	 mov	 DWORD PTR _pfts$83441[ebp+24], edx
  0022a	89 7d c4	 mov	 DWORD PTR _pfts$83441[ebp+32], edi
  0022d	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00230	89 45 c8	 mov	 DWORD PTR _pfts$83441[ebp+36], eax

; 466  : 					pfts.currentFileSize = ft->filesSize[ft->currentFile]; //statbuf.st_size;

  00233	8b 46 48	 mov	 eax, DWORD PTR [esi+72]

; 467  : 					pfts.currentFileTime = 0;
; 468  : 					ft->fileReceivedBytes = 0;
; 469  : 					if ((packet = TlenP2PPacketCreate(2*sizeof(DWORD)+2048)) == NULL) {

  00236	68 08 08 00 00	 push	 2056			; 00000808H
  0023b	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0023e	89 7d d4	 mov	 DWORD PTR _pfts$83441[ebp+48], edi
  00241	89 45 cc	 mov	 DWORD PTR _pfts$83441[ebp+40], eax
  00244	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00247	e8 00 00 00 00	 call	 _TlenP2PPacketCreate
  0024c	83 c4 10	 add	 esp, 16			; 00000010H
  0024f	3b c7		 cmp	 eax, edi
  00251	89 45 08	 mov	 DWORD PTR _packet$[ebp], eax
  00254	75 0c		 jne	 SHORT $L83455
$L84001:

; 470  : 						ft->state = FT_ERROR;

  00256	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4

; 471  : 					}
; 472  : 					else {

  0025d	e9 cc 01 00 00	 jmp	 $L83999
$L83455:

; 473  : 						TlenP2PPacketSetType(packet, TLEN_FILE_PACKET_FILE_DATA);

  00262	6a 35		 push	 53			; 00000035H
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 _TlenP2PPacketSetType

; 474  : 						fileBuffer = (char *) mir_alloc(2048);

  0026a	bb 00 08 00 00	 mov	 ebx, 2048		; 00000800H
  0026f	53		 push	 ebx
  00270	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 475  : 						JabberLog(ft->proto, "Sending file data...");

  00276	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@OBPO@Sending?5file?5data?4?4?4?$AA@ ; `string'
  0027b	89 45 fc	 mov	 DWORD PTR _fileBuffer$[ebp], eax
  0027e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00284	e8 00 00 00 00	 call	 _JabberLog

; 476  : 						while ((numRead=_read(ft->fileId, fileBuffer, 2048)) > 0) {

  00289	53		 push	 ebx
  0028a	ff 75 fc	 push	 DWORD PTR _fileBuffer$[ebp]
  0028d	ff 76 14	 push	 DWORD PTR [esi+20]
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___read
  00296	83 c4 20	 add	 esp, 32			; 00000020H
$L84000:
  00299	8b f8		 mov	 edi, eax
  0029b	85 ff		 test	 edi, edi
  0029d	0f 8e b7 00 00
	00		 jle	 $L83461

; 477  : 							TlenP2PPacketSetLen(packet, 0); // Reuse packet

  002a3	6a 00		 push	 0
  002a5	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  002a8	e8 00 00 00 00	 call	 _TlenP2PPacketSetLen

; 478  : 							TlenP2PPacketPackDword(packet, (DWORD) ft->fileReceivedBytes);

  002ad	ff 76 34	 push	 DWORD PTR [esi+52]
  002b0	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  002b3	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 479  : 							TlenP2PPacketPackDword(packet, 0);

  002b8	6a 00		 push	 0
  002ba	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  002bd	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 480  : 							TlenP2PPacketPackBuffer(packet, fileBuffer, numRead);

  002c2	57		 push	 edi
  002c3	ff 75 fc	 push	 DWORD PTR _fileBuffer$[ebp]
  002c6	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  002c9	e8 00 00 00 00	 call	 _TlenP2PPacketPackBuffer

; 481  : 							if (TlenP2PPacketSend(ft->s, packet)) {

  002ce	ff 75 08	 push	 DWORD PTR _packet$[ebp]
  002d1	ff 76 04	 push	 DWORD PTR [esi+4]
  002d4	e8 00 00 00 00	 call	 _TlenP2PPacketSend
  002d9	83 c4 2c	 add	 esp, 44			; 0000002cH
  002dc	85 c0		 test	 eax, eax
  002de	74 73		 je	 SHORT $L83463

; 482  : 								ft->fileReceivedBytes += numRead;

  002e0	01 7e 34	 add	 DWORD PTR [esi+52], edi

; 483  : 								ft->allFileReceivedBytes += numRead;

  002e3	01 7e 50	 add	 DWORD PTR [esi+80], edi
  002e6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  002e9	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]

; 484  : 								pfts.totalProgress = ft->allFileReceivedBytes;
; 485  : 								pfts.currentFileProgress = ft->fileReceivedBytes;
; 486  : 								ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_DATA, ft, (LPARAM) &pfts);

  002ec	6a 06		 push	 6
  002ee	89 4d c0	 mov	 DWORD PTR _pfts$83441[ebp+28], ecx
  002f1	89 45 d0	 mov	 DWORD PTR _pfts$83441[ebp+44], eax
  002f4	59		 pop	 ecx
  002f5	33 c0		 xor	 eax, eax
  002f7	8d 7d e0	 lea	 edi, DWORD PTR _ack$83985[ebp+4]
  002fa	f3 ab		 rep stosd
  002fc	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  00302	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83985[ebp], 28 ; 0000001cH
  00309	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ack$83985[ebp+12], 2
  00310	c7 45 ec 68 00
	00 00		 mov	 DWORD PTR _ack$83985[ebp+16], 104 ; 00000068H
  00317	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0031a	89 75 f0	 mov	 DWORD PTR _ack$83985[ebp+20], esi
  0031d	89 45 e0	 mov	 DWORD PTR _ack$83985[ebp+4], eax
  00320	8b 06		 mov	 eax, DWORD PTR [esi]
  00322	89 45 e4	 mov	 DWORD PTR _ack$83985[ebp+8], eax
  00325	8d 45 a4	 lea	 eax, DWORD PTR _pfts$83441[ebp]
  00328	89 45 f4	 mov	 DWORD PTR _ack$83985[ebp+24], eax
  0032b	8d 45 dc	 lea	 eax, DWORD PTR _ack$83985[ebp]
  0032e	50		 push	 eax
  0032f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00334	6a 00		 push	 0
  00336	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0033b	ff 50 24	 call	 DWORD PTR [eax+36]
  0033e	53		 push	 ebx
  0033f	ff 75 fc	 push	 DWORD PTR _fileBuffer$[ebp]
  00342	ff 76 14	 push	 DWORD PTR [esi+20]
  00345	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___read
  0034b	83 c4 18	 add	 esp, 24			; 00000018H
  0034e	e9 46 ff ff ff	 jmp	 $L84000
$L83463:

; 487  : 							}
; 488  : 							else {
; 489  : 								ft->state = FT_ERROR;

  00353	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$L83461:

; 490  : 								break;
; 491  : 							}
; 492  : 						}
; 493  : 						mir_free(fileBuffer);

  0035a	ff 75 fc	 push	 DWORD PTR _fileBuffer$[ebp]
  0035d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 494  : 						_close(ft->fileId);

  00363	ff 76 14	 push	 DWORD PTR [esi+20]
  00366	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___close

; 495  : 						if (ft->state != FT_ERROR) {

  0036c	83 7e 0c 04	 cmp	 DWORD PTR [esi+12], 4
  00370	59		 pop	 ecx
  00371	59		 pop	 ecx
  00372	74 7c		 je	 SHORT $L83990

; 496  : 							if (ft->currentFile >= ft->fileCount-1)

  00374	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00377	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0037a	49		 dec	 ecx
  0037b	3b c1		 cmp	 eax, ecx
  0037d	7c 09		 jl	 SHORT $L83467

; 497  : 								ft->state = FT_DONE;

  0037f	c7 46 0c 03 00
	00 00		 mov	 DWORD PTR [esi+12], 3

; 498  : 							else {

  00386	eb 68		 jmp	 SHORT $L83990
$L83467:

; 499  : 								ft->currentFile++;
; 500  : 								ft->state = FT_INITIALIZING;
; 501  : 								JabberLog(ft->proto, "File sent, advancing to the next file...");

  00388	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@DHKG@File?5sent?0?5advancing?5to?5the?5next@ ; `string'
  0038d	40		 inc	 eax
  0038e	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00394	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00397	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  0039e	e8 00 00 00 00	 call	 _JabberLog

; 502  : 								ProtoBroadcastAck(ft->proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_NEXTFILE, ft, 0);

  003a3	6a 06		 push	 6
  003a5	33 c0		 xor	 eax, eax
  003a7	59		 pop	 ecx
  003a8	8d 7d e0	 lea	 edi, DWORD PTR _ack$83991[ebp+4]
  003ab	f3 ab		 rep stosd
  003ad	8b 86 7c 02 00
	00		 mov	 eax, DWORD PTR [esi+636]
  003b3	83 65 f4 00	 and	 DWORD PTR _ack$83991[ebp+24], 0
  003b7	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83991[ebp], 28 ; 0000001cH
  003be	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ack$83991[ebp+12], 2
  003c5	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003c8	c7 45 ec 69 00
	00 00		 mov	 DWORD PTR _ack$83991[ebp+16], 105 ; 00000069H
  003cf	89 45 e0	 mov	 DWORD PTR _ack$83991[ebp+4], eax
  003d2	8b 06		 mov	 eax, DWORD PTR [esi]
  003d4	89 45 e4	 mov	 DWORD PTR _ack$83991[ebp+8], eax
  003d7	8d 45 dc	 lea	 eax, DWORD PTR _ack$83991[ebp]
  003da	50		 push	 eax
  003db	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003e0	6a 00		 push	 0
  003e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  003e7	89 75 f0	 mov	 DWORD PTR _ack$83991[ebp+20], esi
  003ea	ff 50 24	 call	 DWORD PTR [eax+36]
  003ed	83 c4 14	 add	 esp, 20			; 00000014H
$L83990:

; 503  : 							}
; 504  : 						}
; 505  : 						JabberLog(ft->proto, "Finishing this file...");

  003f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@NICG@Finishing?5this?5file?4?4?4?$AA@ ; `string'
  003f5	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  003fb	e8 00 00 00 00	 call	 _JabberLog

; 506  : 						TlenP2PPacketSetLen(packet, 0); // Reuse packet

  00400	8b 7d 08	 mov	 edi, DWORD PTR _packet$[ebp]
  00403	6a 00		 push	 0
  00405	57		 push	 edi
  00406	e8 00 00 00 00	 call	 _TlenP2PPacketSetLen

; 507  : 						TlenP2PPacketSetType(packet, TLEN_FILE_PACKET_END_OF_FILE);

  0040b	6a 37		 push	 55			; 00000037H
  0040d	57		 push	 edi
  0040e	e8 00 00 00 00	 call	 _TlenP2PPacketSetType

; 508  : 						TlenP2PPacketPackDword(packet, currentFile);

  00413	ff 75 d8	 push	 DWORD PTR _currentFile$[ebp]
  00416	57		 push	 edi
  00417	e8 00 00 00 00	 call	 _TlenP2PPacketPackDword

; 509  : 						TlenP2PPacketSend(ft->s, packet);

  0041c	57		 push	 edi
  0041d	ff 76 04	 push	 DWORD PTR [esi+4]
  00420	e8 00 00 00 00	 call	 _TlenP2PPacketSend

; 510  : 						TlenP2PPacketFree(packet);

  00425	57		 push	 edi
  00426	e8 00 00 00 00	 call	 _TlenP2PPacketFree
  0042b	83 c4 2c	 add	 esp, 44			; 0000002cH
$L83999:
  0042e	8b 7d f8	 mov	 edi, DWORD PTR _rpacket$[ebp]
$L83456:

; 511  : 					}
; 512  : 				}
; 513  : 			}
; 514  : 			TlenP2PPacketFree(rpacket);

  00431	57		 push	 edi
  00432	e8 00 00 00 00	 call	 _TlenP2PPacketFree
  00437	59		 pop	 ecx

; 515  : 		}
; 516  : 		else {

  00438	eb 07		 jmp	 SHORT $L83470
$L83440:

; 517  : 			ft->state = FT_ERROR;

  0043a	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$L83470:
  00441	5f		 pop	 edi
  00442	5e		 pop	 esi
  00443	5b		 pop	 ebx

; 518  : 		}
; 519  : 	}
; 520  : }

  00444	c9		 leave
  00445	c3		 ret	 0
_TlenFileSendParse ENDP
_TEXT	ENDS
END
