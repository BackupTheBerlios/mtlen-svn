	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\crypto\aes.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _aes_gen_tables
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_set_key
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_encrypt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_decrypt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_cbc_encrypt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_cbc_decrypt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _aes_self_test
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
_BSS	SEGMENT
_?ft_init@?1??aes_set_key@@9@9 DD 01H DUP (?)
_?kt_init@?1??aes_set_key@@9@9 DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
__aes_src DB	'_aes_src', 00H
CONST	ENDS
PUBLIC	_aes_set_key
_BSS	SEGMENT
_FSb	DB	0100H DUP (?)
_RT0	DD	0100H DUP (?)
_RT1	DD	0100H DUP (?)
_RT2	DD	0100H DUP (?)
_RT3	DD	0100H DUP (?)
_RCON	DD	0aH DUP (?)
_KT0	DD	0100H DUP (?)
_KT1	DD	0100H DUP (?)
_KT2	DD	0100H DUP (?)
_KT3	DD	0100H DUP (?)
_BSS	ENDS
;	COMDAT _aes_set_key
_TEXT	SEGMENT
_ctx$ = 8
_key$ = 12
_keysize$ = 16
_i$ = 8
_aes_set_key PROC NEAR					; COMDAT

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 465  :     int i;
; 466  :     uint32 *RK, *SK;
; 467  :     static int ft_init = 0;
; 468  :     static int kt_init = 0;
; 469  : 
; 470  :     if( ft_init == 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _?ft_init@?1??aes_set_key@@9@9, 0
  0000a	75 0f		 jne	 SHORT $L406

; 471  :     {
; 472  :         aes_gen_tables();

  0000c	e8 00 00 00 00	 call	 _aes_gen_tables

; 473  : 
; 474  :         ft_init = 1;

  00011	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _?ft_init@?1??aes_set_key@@9@9, 1
$L406:

; 475  :     }
; 476  : 
; 477  :     switch( keysize )
; 478  :     {

  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _keysize$[ebp]
  0001e	8b c1		 mov	 eax, ecx
  00020	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00025	74 2c		 je	 SHORT $L411
  00027	83 e8 40	 sub	 eax, 64			; 00000040H
  0002a	74 18		 je	 SHORT $L412
  0002c	83 e8 40	 sub	 eax, 64			; 00000040H
  0002f	0f 85 91 04 00
	00		 jne	 $L398

; 481  :         case 256: ctx->nr = 14; break;

  00035	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  00038	c7 82 00 02 00
	00 0e 00 00 00	 mov	 DWORD PTR [edx+512], 14	; 0000000eH
  00042	eb 1f		 jmp	 SHORT $L408
$L412:

; 480  :         case 192: ctx->nr = 12; break;

  00044	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00047	c7 80 00 02 00
	00 0c 00 00 00	 mov	 DWORD PTR [eax+512], 12	; 0000000cH
  00051	eb 0d		 jmp	 SHORT $L1093
$L411:

; 479  :         case 128: ctx->nr = 10; break;

  00053	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00056	c7 80 00 02 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+512], 10	; 0000000aH
$L1093:
  00060	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
$L408:
  00063	53		 push	 ebx
  00064	56		 push	 esi
  00065	57		 push	 edi

; 482  :         default : return;
; 483  :     }
; 484  : 
; 485  :     RK = ctx->erk;
; 486  : 
; 487  :     for( i = 0; i < (keysize >> 5); i++ )

  00066	6a 04		 push	 4
  00068	c1 f9 05	 sar	 ecx, 5
  0006b	85 c9		 test	 ecx, ecx
  0006d	8b c2		 mov	 eax, edx
  0006f	5e		 pop	 esi
  00070	7e 34		 jle	 SHORT $L417
  00072	8b 7d 0c	 mov	 edi, DWORD PTR _key$[ebp]
  00075	89 55 10	 mov	 DWORD PTR 16+[ebp], edx
  00078	83 c7 02	 add	 edi, 2
  0007b	89 4d 0c	 mov	 DWORD PTR 12+[ebp], ecx
$L415:

; 488  :     {
; 489  :         GET_UINT32_BE( RK[i], key, i << 2 );

  0007e	0f b6 1f	 movzx	 ebx, BYTE PTR [edi]
  00081	33 c9		 xor	 ecx, ecx
  00083	8a 6f fe	 mov	 ch, BYTE PTR [edi-2]
  00086	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]
  00089	c1 e1 08	 shl	 ecx, 8
  0008c	0b cb		 or	 ecx, ebx
  0008e	0f b6 5f 01	 movzx	 ebx, BYTE PTR [edi+1]
  00092	c1 e1 08	 shl	 ecx, 8
  00095	0b cb		 or	 ecx, ebx
  00097	8b 5d 10	 mov	 ebx, DWORD PTR 16+[ebp]
  0009a	01 75 10	 add	 DWORD PTR 16+[ebp], esi
  0009d	03 fe		 add	 edi, esi
  0009f	ff 4d 0c	 dec	 DWORD PTR 12+[ebp]
  000a2	89 0b		 mov	 DWORD PTR [ebx], ecx
  000a4	75 d8		 jne	 SHORT $L415
$L417:

; 490  :     }
; 491  : 
; 492  :     /*
; 493  :      * setup encryption round keys
; 494  :      */
; 495  :     switch( ctx->nr )
; 496  :     {

  000a6	8b 8a 00 02 00
	00		 mov	 ecx, DWORD PTR [edx+512]
  000ac	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  000af	0f 84 92 01 00
	00		 je	 $L426
  000b5	49		 dec	 ecx
  000b6	49		 dec	 ecx
  000b7	0f 84 f4 00 00
	00		 je	 $L434
  000bd	49		 dec	 ecx
  000be	49		 dec	 ecx
  000bf	0f 85 fd 01 00
	00		 jne	 $L429

; 530  : 
; 531  :     case 14:
; 532  : 
; 533  :         for( i = 0; i < 7; i++, RK += 8 )

  000c5	c7 45 10 00 00
	00 00		 mov	 DWORD PTR 16+[ebp], OFFSET FLAT:_RCON
$L443:

; 534  :         {
; 535  :             RK[8]  = RK[0] ^ RCON[i] ^
; 536  :                 ( FSb[ (uint8) ( RK[7] >> 16 ) ] << 24 ) ^
; 537  :                 ( FSb[ (uint8) ( RK[7] >>  8 ) ] << 16 ) ^
; 538  :                 ( FSb[ (uint8) ( RK[7]       ) ] <<  8 ) ^
; 539  :                 ( FSb[ (uint8) ( RK[7] >> 24 ) ]       );

  000cc	8b 58 1c	 mov	 ebx, DWORD PTR [eax+28]
  000cf	33 d2		 xor	 edx, edx
  000d1	8b cb		 mov	 ecx, ebx

; 540  : 
; 541  :             RK[9]  = RK[1] ^ RK[8];
; 542  :             RK[10] = RK[2] ^ RK[9];
; 543  :             RK[11] = RK[3] ^ RK[10];

  000d3	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  000d6	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000d9	0f b6 c9	 movzx	 ecx, cl
  000dc	8a b1 00 00 00
	00		 mov	 dh, BYTE PTR _FSb[ecx]
  000e2	8b cb		 mov	 ecx, ebx
  000e4	c1 e9 08	 shr	 ecx, 8
  000e7	0f b6 c9	 movzx	 ecx, cl
  000ea	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  000f1	33 d1		 xor	 edx, ecx
  000f3	0f b6 cb	 movzx	 ecx, bl
  000f6	c1 e2 08	 shl	 edx, 8
  000f9	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00100	33 d1		 xor	 edx, ecx
  00102	8b cb		 mov	 ecx, ebx
  00104	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00107	c1 e2 08	 shl	 edx, 8
  0010a	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00111	33 d1		 xor	 edx, ecx
  00113	8b 4d 10	 mov	 ecx, DWORD PTR 16+[ebp]
  00116	01 75 10	 add	 DWORD PTR 16+[ebp], esi
  00119	33 11		 xor	 edx, DWORD PTR [ecx]
  0011b	8b ca		 mov	 ecx, edx
  0011d	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
  00120	33 08		 xor	 ecx, DWORD PTR [eax]
  00122	89 55 0c	 mov	 DWORD PTR 12+[ebp], edx
  00125	89 0a		 mov	 DWORD PTR [edx], ecx
  00127	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0012a	33 d1		 xor	 edx, ecx
  0012c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0012f	33 ca		 xor	 ecx, edx
  00131	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00134	33 f9		 xor	 edi, ecx
  00136	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 544  : 
; 545  :             RK[12] = RK[4] ^
; 546  :                 ( FSb[ (uint8) ( RK[11] >> 24 ) ] << 24 ) ^
; 547  :                 ( FSb[ (uint8) ( RK[11] >> 16 ) ] << 16 ) ^
; 548  :                 ( FSb[ (uint8) ( RK[11] >>  8 ) ] <<  8 ) ^
; 549  :                 ( FSb[ (uint8) ( RK[11]       ) ]       );

  00139	8b cf		 mov	 ecx, edi
  0013b	33 d2		 xor	 edx, edx
  0013d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00140	89 78 2c	 mov	 DWORD PTR [eax+44], edi
  00143	8a b1 00 00 00
	00		 mov	 dh, BYTE PTR _FSb[ecx]
  00149	8b cf		 mov	 ecx, edi
  0014b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0014e	0f b6 c9	 movzx	 ecx, cl
  00151	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00158	33 d1		 xor	 edx, ecx
  0015a	8b cf		 mov	 ecx, edi
  0015c	c1 e9 08	 shr	 ecx, 8
  0015f	0f b6 c9	 movzx	 ecx, cl
  00162	c1 e2 08	 shl	 edx, 8
  00165	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  0016c	33 d1		 xor	 edx, ecx
  0016e	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00172	c1 e2 08	 shl	 edx, 8
  00175	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  0017c	33 ca		 xor	 ecx, edx

; 550  : 
; 551  :             RK[13] = RK[5] ^ RK[12];

  0017e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00181	33 48 10	 xor	 ecx, DWORD PTR [eax+16]
  00184	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00187	33 d1		 xor	 edx, ecx

; 552  :             RK[14] = RK[6] ^ RK[13];

  00189	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0018c	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0018f	33 ca		 xor	 ecx, edx
  00191	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 553  :             RK[15] = RK[7] ^ RK[14];

  00194	33 cb		 xor	 ecx, ebx
  00196	81 7d 10 1c 00
	00 00		 cmp	 DWORD PTR 16+[ebp], OFFSET FLAT:_RCON+28
  0019d	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  001a0	8b 45 0c	 mov	 eax, DWORD PTR 12+[ebp]
  001a3	0f 8c 23 ff ff
	ff		 jl	 $L443
$L1094:

; 554  :         }
; 555  :         break;

  001a9	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  001ac	e9 11 01 00 00	 jmp	 $L429
$L434:

; 510  :         }
; 511  :         break;
; 512  : 
; 513  :     case 12:
; 514  : 
; 515  :         for( i = 0; i < 8; i++, RK += 6 )

  001b1	c7 45 10 00 00
	00 00		 mov	 DWORD PTR 16+[ebp], OFFSET FLAT:_RCON
$L435:

; 516  :         {
; 517  :             RK[6]  = RK[0] ^ RCON[i] ^
; 518  :                 ( FSb[ (uint8) ( RK[5] >> 16 ) ] << 24 ) ^
; 519  :                 ( FSb[ (uint8) ( RK[5] >>  8 ) ] << 16 ) ^
; 520  :                 ( FSb[ (uint8) ( RK[5]       ) ] <<  8 ) ^
; 521  :                 ( FSb[ (uint8) ( RK[5] >> 24 ) ]       );

  001b8	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  001bb	33 d2		 xor	 edx, edx
  001bd	8b cf		 mov	 ecx, edi
  001bf	8d 58 18	 lea	 ebx, DWORD PTR [eax+24]
  001c2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001c5	0f b6 c9	 movzx	 ecx, cl
  001c8	8a b1 00 00 00
	00		 mov	 dh, BYTE PTR _FSb[ecx]
  001ce	8b cf		 mov	 ecx, edi
  001d0	c1 e9 08	 shr	 ecx, 8
  001d3	0f b6 c9	 movzx	 ecx, cl
  001d6	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  001dd	33 d1		 xor	 edx, ecx
  001df	0f b6 48 14	 movzx	 ecx, BYTE PTR [eax+20]
  001e3	c1 e2 08	 shl	 edx, 8
  001e6	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  001ed	33 d1		 xor	 edx, ecx
  001ef	8b cf		 mov	 ecx, edi
  001f1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001f4	c1 e2 08	 shl	 edx, 8
  001f7	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  001fe	33 d1		 xor	 edx, ecx
  00200	8b 4d 10	 mov	 ecx, DWORD PTR 16+[ebp]
  00203	01 75 10	 add	 DWORD PTR 16+[ebp], esi
  00206	33 11		 xor	 edx, DWORD PTR [ecx]
  00208	8b ca		 mov	 ecx, edx

; 522  : 
; 523  :             RK[7]  = RK[1] ^ RK[6];

  0020a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0020d	33 08		 xor	 ecx, DWORD PTR [eax]
  0020f	89 0b		 mov	 DWORD PTR [ebx], ecx
  00211	33 d1		 xor	 edx, ecx

; 524  :             RK[8]  = RK[2] ^ RK[7];

  00213	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00216	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00219	33 ca		 xor	 ecx, edx

; 525  :             RK[9]  = RK[3] ^ RK[8];

  0021b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0021e	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00221	33 d1		 xor	 edx, ecx

; 526  :             RK[10] = RK[4] ^ RK[9];

  00223	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00226	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00229	33 ca		 xor	 ecx, edx
  0022b	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 527  :             RK[11] = RK[5] ^ RK[10];

  0022e	33 cf		 xor	 ecx, edi
  00230	81 7d 10 20 00
	00 00		 cmp	 DWORD PTR 16+[ebp], OFFSET FLAT:_RCON+32
  00237	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  0023a	8b c3		 mov	 eax, ebx
  0023c	0f 8c 76 ff ff
	ff		 jl	 $L435

; 528  :         }
; 529  :         break;

  00242	e9 62 ff ff ff	 jmp	 $L1094
$L426:

; 497  :     case 10:
; 498  : 
; 499  :         for( i = 0; i < 10; i++, RK += 4 )

  00247	c7 45 08 00 00
	00 00		 mov	 DWORD PTR 8+[ebp], OFFSET FLAT:_RCON
$L427:

; 500  :         {
; 501  :             RK[4]  = RK[0] ^ RCON[i] ^
; 502  :                 ( FSb[ (uint8) ( RK[3] >> 16 ) ] << 24 ) ^
; 503  :                 ( FSb[ (uint8) ( RK[3] >>  8 ) ] << 16 ) ^
; 504  :                 ( FSb[ (uint8) ( RK[3]       ) ] <<  8 ) ^
; 505  :                 ( FSb[ (uint8) ( RK[3] >> 24 ) ]       );

  0024e	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00251	33 db		 xor	 ebx, ebx
  00253	8b cf		 mov	 ecx, edi
  00255	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00258	0f b6 c9	 movzx	 ecx, cl
  0025b	8a b9 00 00 00
	00		 mov	 bh, BYTE PTR _FSb[ecx]
  00261	8b cf		 mov	 ecx, edi
  00263	c1 e9 08	 shr	 ecx, 8
  00266	0f b6 c9	 movzx	 ecx, cl
  00269	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00270	33 d9		 xor	 ebx, ecx
  00272	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00276	c1 e3 08	 shl	 ebx, 8
  00279	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00280	33 d9		 xor	 ebx, ecx
  00282	8b cf		 mov	 ecx, edi
  00284	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00287	c1 e3 08	 shl	 ebx, 8
  0028a	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00291	33 d9		 xor	 ebx, ecx
  00293	8b 4d 08	 mov	 ecx, DWORD PTR 8+[ebp]
  00296	01 75 08	 add	 DWORD PTR 8+[ebp], esi
  00299	33 19		 xor	 ebx, DWORD PTR [ecx]
  0029b	8b cb		 mov	 ecx, ebx

; 506  : 
; 507  :             RK[5]  = RK[1] ^ RK[4];

  0029d	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  002a0	33 08		 xor	 ecx, DWORD PTR [eax]
  002a2	83 c0 10	 add	 eax, 16			; 00000010H
  002a5	89 08		 mov	 DWORD PTR [eax], ecx
  002a7	33 d9		 xor	 ebx, ecx

; 508  :             RK[6]  = RK[2] ^ RK[5];

  002a9	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  002ac	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  002af	33 cb		 xor	 ecx, ebx

; 509  :             RK[7]  = RK[3] ^ RK[6];

  002b1	33 f9		 xor	 edi, ecx
  002b3	81 7d 08 28 00
	00 00		 cmp	 DWORD PTR 8+[ebp], OFFSET FLAT:_RCON+40
  002ba	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  002bd	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  002c0	7c 8c		 jl	 SHORT $L427
$L429:

; 556  : 
; 557  :     default:
; 558  : 
; 559  :         break;
; 560  :     }
; 561  : 
; 562  :     /*
; 563  :      * setup decryption round keys
; 564  :      */
; 565  :     if( kt_init == 0 )

  002c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _?kt_init@?1??aes_set_key@@9@9, 0
  002c9	75 5b		 jne	 SHORT $L1092

; 566  :     {
; 567  :         for( i = 0; i < 256; i++ )

  002cb	83 65 08 00	 and	 DWORD PTR _i$[ebp], 0
$L456:

; 568  :         {
; 569  :             KT0[i] = RT0[ FSb[i] ];

  002cf	8b 7d 08	 mov	 edi, DWORD PTR _i$[ebp]
  002d2	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[edi]
  002d9	c1 e1 02	 shl	 ecx, 2
  002dc	c1 e7 02	 shl	 edi, 2
  002df	8b 99 00 00 00
	00		 mov	 ebx, DWORD PTR _RT0[ecx]
  002e5	ff 45 08	 inc	 DWORD PTR _i$[ebp]
  002e8	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  002ef	89 9f 00 00 00
	00		 mov	 DWORD PTR _KT0[edi], ebx

; 570  :             KT1[i] = RT1[ FSb[i] ];

  002f5	8b 99 00 00 00
	00		 mov	 ebx, DWORD PTR _RT1[ecx]
  002fb	89 9f 00 00 00
	00		 mov	 DWORD PTR _KT1[edi], ebx

; 571  :             KT2[i] = RT2[ FSb[i] ];

  00301	8b 99 00 00 00
	00		 mov	 ebx, DWORD PTR _RT2[ecx]

; 572  :             KT3[i] = RT3[ FSb[i] ];

  00307	8b 89 00 00 00
	00		 mov	 ecx, DWORD PTR _RT3[ecx]
  0030d	89 9f 00 00 00
	00		 mov	 DWORD PTR _KT2[edi], ebx
  00313	89 8f 00 00 00
	00		 mov	 DWORD PTR _KT3[edi], ecx
  00319	7c b4		 jl	 SHORT $L456

; 573  :         }
; 574  : 
; 575  :         kt_init = 1;

  0031b	6a 01		 push	 1
  0031d	5f		 pop	 edi
  0031e	89 3d 00 00 00
	00		 mov	 DWORD PTR _?kt_init@?1??aes_set_key@@9@9, edi
  00324	eb 03		 jmp	 SHORT $L455
$L1092:
  00326	6a 01		 push	 1
  00328	5f		 pop	 edi
$L455:

; 576  :     }
; 577  : 
; 578  :     SK = ctx->drk;
; 579  : 
; 580  :     *SK++ = *RK++;

  00329	8b 18		 mov	 ebx, DWORD PTR [eax]
  0032b	8d 8a 00 01 00
	00		 lea	 ecx, DWORD PTR [edx+256]
  00331	03 c6		 add	 eax, esi

; 581  :     *SK++ = *RK++;
; 582  :     *SK++ = *RK++;
; 583  :     *SK++ = *RK++;
; 584  : 
; 585  :     for( i = 1; i < ctx->nr; i++ )

  00333	89 7d 08	 mov	 DWORD PTR _i$[ebp], edi
  00336	89 19		 mov	 DWORD PTR [ecx], ebx
  00338	03 ce		 add	 ecx, esi
  0033a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0033c	03 c6		 add	 eax, esi
  0033e	89 19		 mov	 DWORD PTR [ecx], ebx
  00340	03 ce		 add	 ecx, esi
  00342	8b 18		 mov	 ebx, DWORD PTR [eax]
  00344	03 c6		 add	 eax, esi
  00346	89 19		 mov	 DWORD PTR [ecx], ebx
  00348	03 ce		 add	 ecx, esi
  0034a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0034c	03 c6		 add	 eax, esi
  0034e	89 19		 mov	 DWORD PTR [ecx], ebx
  00350	03 ce		 add	 ecx, esi
  00352	39 ba 00 02 00
	00		 cmp	 DWORD PTR [edx+512], edi
  00358	0f 8e 46 01 00
	00		 jle	 $L461
$L459:

; 586  :     {
; 587  :         RK -= 8;
; 588  : 
; 589  :         *SK++ = KT0[ (uint8) ( *RK >> 24 ) ] ^
; 590  :                 KT1[ (uint8) ( *RK >> 16 ) ] ^
; 591  :                 KT2[ (uint8) ( *RK >>  8 ) ] ^
; 592  :                 KT3[ (uint8) ( *RK       ) ]; RK++;

  0035e	8b 78 e0	 mov	 edi, DWORD PTR [eax-32]
  00361	83 e8 20	 sub	 eax, 32			; 00000020H
  00364	8b df		 mov	 ebx, edi
  00366	89 7d 10	 mov	 DWORD PTR 16+[ebp], edi
  00369	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0036c	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  0036f	8b df		 mov	 ebx, edi
  00371	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00374	0f b6 fb	 movzx	 edi, bl
  00377	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  0037a	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR _KT0[ebx*4]
  00381	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT1[edi*4]
  00388	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  0038b	8b 5d 10	 mov	 ebx, DWORD PTR 16+[ebp]
  0038e	c1 eb 08	 shr	 ebx, 8
  00391	0f b6 fb	 movzx	 edi, bl
  00394	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  00397	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT2[edi*4]
  0039e	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  003a1	03 c6		 add	 eax, esi
  003a3	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT3[edi*4]
  003aa	89 19		 mov	 DWORD PTR [ecx], ebx

; 593  : 
; 594  :         *SK++ = KT0[ (uint8) ( *RK >> 24 ) ] ^
; 595  :                 KT1[ (uint8) ( *RK >> 16 ) ] ^
; 596  :                 KT2[ (uint8) ( *RK >>  8 ) ] ^
; 597  :                 KT3[ (uint8) ( *RK       ) ]; RK++;

  003ac	8b 38		 mov	 edi, DWORD PTR [eax]
  003ae	8b df		 mov	 ebx, edi
  003b0	89 7d 10	 mov	 DWORD PTR 16+[ebp], edi
  003b3	c1 eb 18	 shr	 ebx, 24			; 00000018H
  003b6	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  003b9	8b df		 mov	 ebx, edi
  003bb	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003be	0f b6 fb	 movzx	 edi, bl
  003c1	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  003c4	03 ce		 add	 ecx, esi
  003c6	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR _KT0[ebx*4]
  003cd	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT1[edi*4]
  003d4	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  003d7	8b 5d 10	 mov	 ebx, DWORD PTR 16+[ebp]
  003da	c1 eb 08	 shr	 ebx, 8
  003dd	0f b6 fb	 movzx	 edi, bl
  003e0	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  003e3	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT2[edi*4]
  003ea	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  003ed	03 c6		 add	 eax, esi
  003ef	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT3[edi*4]
  003f6	89 19		 mov	 DWORD PTR [ecx], ebx

; 598  : 
; 599  :         *SK++ = KT0[ (uint8) ( *RK >> 24 ) ] ^
; 600  :                 KT1[ (uint8) ( *RK >> 16 ) ] ^
; 601  :                 KT2[ (uint8) ( *RK >>  8 ) ] ^
; 602  :                 KT3[ (uint8) ( *RK       ) ]; RK++;

  003f8	8b 38		 mov	 edi, DWORD PTR [eax]
  003fa	8b df		 mov	 ebx, edi
  003fc	89 7d 10	 mov	 DWORD PTR 16+[ebp], edi
  003ff	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00402	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  00405	8b df		 mov	 ebx, edi
  00407	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0040a	0f b6 fb	 movzx	 edi, bl
  0040d	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  00410	03 ce		 add	 ecx, esi
  00412	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR _KT0[ebx*4]
  00419	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT1[edi*4]
  00420	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  00423	8b 5d 10	 mov	 ebx, DWORD PTR 16+[ebp]
  00426	c1 eb 08	 shr	 ebx, 8
  00429	0f b6 fb	 movzx	 edi, bl
  0042c	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  0042f	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT2[edi*4]
  00436	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00439	03 c6		 add	 eax, esi
  0043b	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT3[edi*4]
  00442	89 19		 mov	 DWORD PTR [ecx], ebx

; 603  : 
; 604  :         *SK++ = KT0[ (uint8) ( *RK >> 24 ) ] ^
; 605  :                 KT1[ (uint8) ( *RK >> 16 ) ] ^
; 606  :                 KT2[ (uint8) ( *RK >>  8 ) ] ^
; 607  :                 KT3[ (uint8) ( *RK       ) ]; RK++;

  00444	8b 38		 mov	 edi, DWORD PTR [eax]
  00446	8b df		 mov	 ebx, edi
  00448	89 7d 10	 mov	 DWORD PTR 16+[ebp], edi
  0044b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0044e	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  00451	8b df		 mov	 ebx, edi
  00453	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00456	0f b6 fb	 movzx	 edi, bl
  00459	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  0045c	03 ce		 add	 ecx, esi
  0045e	8b 1c 9d 00 00
	00 00		 mov	 ebx, DWORD PTR _KT0[ebx*4]
  00465	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT1[edi*4]
  0046c	89 5d 0c	 mov	 DWORD PTR 12+[ebp], ebx
  0046f	8b 5d 10	 mov	 ebx, DWORD PTR 16+[ebp]
  00472	c1 eb 08	 shr	 ebx, 8
  00475	0f b6 fb	 movzx	 edi, bl
  00478	8b 5d 0c	 mov	 ebx, DWORD PTR 12+[ebp]
  0047b	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT2[edi*4]
  00482	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00485	03 c6		 add	 eax, esi
  00487	33 1c bd 00 00
	00 00		 xor	 ebx, DWORD PTR _KT3[edi*4]
  0048e	89 19		 mov	 DWORD PTR [ecx], ebx
  00490	03 ce		 add	 ecx, esi
  00492	ff 45 08	 inc	 DWORD PTR _i$[ebp]
  00495	8b 7d 08	 mov	 edi, DWORD PTR _i$[ebp]
  00498	3b ba 00 02 00
	00		 cmp	 edi, DWORD PTR [edx+512]
  0049e	0f 8c ba fe ff
	ff		 jl	 $L459
$L461:

; 608  :     }
; 609  : 
; 610  :     RK -= 8;
; 611  : 
; 612  :     *SK++ = *RK++;

  004a4	8b 50 e0	 mov	 edx, DWORD PTR [eax-32]
  004a7	83 e8 20	 sub	 eax, 32			; 00000020H
  004aa	03 c6		 add	 eax, esi
  004ac	89 11		 mov	 DWORD PTR [ecx], edx
  004ae	03 ce		 add	 ecx, esi
  004b0	5f		 pop	 edi

; 613  :     *SK++ = *RK++;

  004b1	8b 10		 mov	 edx, DWORD PTR [eax]
  004b3	89 11		 mov	 DWORD PTR [ecx], edx

; 614  :     *SK++ = *RK++;

  004b5	8b 14 30	 mov	 edx, DWORD PTR [eax+esi]
  004b8	03 ce		 add	 ecx, esi
  004ba	03 c6		 add	 eax, esi
  004bc	5e		 pop	 esi
  004bd	5b		 pop	 ebx
  004be	89 11		 mov	 DWORD PTR [ecx], edx

; 615  :     *SK++ = *RK++;

  004c0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004c3	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$L398:

; 616  : }

  004c6	5d		 pop	 ebp
  004c7	c3		 ret	 0
_aes_set_key ENDP
_TEXT	ENDS
_BSS	SEGMENT
_FT0	DD	0100H DUP (?)
_FT1	DD	0100H DUP (?)
_FT2	DD	0100H DUP (?)
_FT3	DD	0100H DUP (?)
_RSb	DB	0100H DUP (?)
_BSS	ENDS
;	COMDAT _aes_gen_tables
_TEXT	SEGMENT
_pow$ = -520
_log$ = -264
_aes_gen_tables PROC NEAR				; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 107  :     int i;
; 108  :     uint8 x, y;
; 109  :     uint8 pow[256];
; 110  :     uint8 log[256];
; 111  : 
; 112  :     /*
; 113  :      * compute pow and log tables over GF(2^8)
; 114  :      */
; 115  :     for( i = 0, x = 1; i < 256; i++, x ^= XTIME( x ) )

  0000c	33 c0		 xor	 eax, eax
  0000e	b1 01		 mov	 cl, 1
$L367:

; 116  :     {
; 117  :         pow[i] = x;
; 118  :         log[x] = i;

  00010	0f b6 d1	 movzx	 edx, cl
  00013	88 8c 05 f8 fd
	ff ff		 mov	 BYTE PTR _pow$[ebp+eax], cl
  0001a	8a d9		 mov	 bl, cl
  0001c	88 84 15 f8 fe
	ff ff		 mov	 BYTE PTR _log$[ebp+edx], al
  00023	8a d1		 mov	 dl, cl
  00025	80 e2 80	 and	 dl, 128			; 00000080H
  00028	40		 inc	 eax
  00029	f6 da		 neg	 dl
  0002b	1a d2		 sbb	 dl, dl
  0002d	83 e2 1b	 and	 edx, 27			; 0000001bH
  00030	d0 e3		 shl	 bl, 1
  00032	32 d3		 xor	 dl, bl
  00034	32 ca		 xor	 cl, dl
  00036	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0003b	7c d3		 jl	 SHORT $L367

; 119  :     }
; 120  : 
; 121  :     /*
; 122  :      * calculate the round constants
; 123  :      */
; 124  :     for( i = 0, x = 1; i < 10; i++, x = XTIME( x ) )

  0003d	b1 01		 mov	 cl, 1
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_RCON
$L370:

; 125  :     {
; 126  :         RCON[i] = (uint32) x << 24;

  00044	0f b6 d1	 movzx	 edx, cl
  00047	c1 e2 18	 shl	 edx, 24			; 00000018H
  0004a	89 10		 mov	 DWORD PTR [eax], edx
  0004c	8a d1		 mov	 dl, cl
  0004e	80 e2 80	 and	 dl, 128			; 00000080H
  00051	83 c0 04	 add	 eax, 4
  00054	f6 da		 neg	 dl
  00056	1a d2		 sbb	 dl, dl
  00058	83 e2 1b	 and	 edx, 27			; 0000001bH
  0005b	d0 e1		 shl	 cl, 1
  0005d	32 ca		 xor	 cl, dl
  0005f	3d 28 00 00 00	 cmp	 eax, OFFSET FLAT:_RCON+40
  00064	7c de		 jl	 SHORT $L370

; 127  :     }
; 128  : 
; 129  :     /*
; 130  :      * generate the forward and reverse S-boxes
; 131  :      */
; 132  :     FSb[0x00] = 0x63;
; 133  :     RSb[0x63] = 0x00;

  00066	80 25 63 00 00
	00 00		 and	 BYTE PTR _RSb+99, 0
  0006d	c6 05 00 00 00
	00 63		 mov	 BYTE PTR _FSb, 99	; 00000063H

; 134  : 
; 135  :     for( i = 1; i < 256; i++ )

  00074	33 d2		 xor	 edx, edx
$L374:

; 136  :     {
; 137  :         x = pow[255 - log[i]];

  00076	0f b6 84 15 f9
	fe ff ff	 movzx	 eax, BYTE PTR _log$[ebp+edx+1]
  0007e	8d 8d f7 fe ff
	ff		 lea	 ecx, DWORD PTR _pow$[ebp+255]
  00084	2b c8		 sub	 ecx, eax
  00086	8a 19		 mov	 bl, BYTE PTR [ecx]

; 138  : 
; 139  :         y  = x; y = ( y << 1 ) | ( y >> 7 );

  00088	8a c3		 mov	 al, bl
  0008a	8a cb		 mov	 cl, bl
  0008c	c0 e8 07	 shr	 al, 7
  0008f	d0 e1		 shl	 cl, 1
  00091	0a c1		 or	 al, cl

; 140  :         x ^= y; y = ( y << 1 ) | ( y >> 7 );

  00093	8a c8		 mov	 cl, al
  00095	32 d8		 xor	 bl, al
  00097	c0 e9 07	 shr	 cl, 7
  0009a	d0 e0		 shl	 al, 1
  0009c	0a c8		 or	 cl, al

; 141  :         x ^= y; y = ( y << 1 ) | ( y >> 7 );

  0009e	8a c1		 mov	 al, cl
  000a0	32 d9		 xor	 bl, cl
  000a2	c0 e8 07	 shr	 al, 7
  000a5	d0 e1		 shl	 cl, 1
  000a7	0a c1		 or	 al, cl

; 142  :         x ^= y; y = ( y << 1 ) | ( y >> 7 );

  000a9	8a c8		 mov	 cl, al
  000ab	32 d8		 xor	 bl, al
  000ad	c0 e9 07	 shr	 cl, 7
  000b0	d0 e0		 shl	 al, 1
  000b2	0a c8		 or	 cl, al

; 143  :         x ^= y ^ 0x63;
; 144  : 
; 145  :         FSb[i] = x;
; 146  :         RSb[x] = i;
; 147  :     }
; 148  : 
; 149  :     /*
; 150  :      * generate the forward and reverse tables
; 151  :      */
; 152  :     for( i = 0; i < 256; i++ )

  000b4	32 cb		 xor	 cl, bl
  000b6	80 f1 63	 xor	 cl, 99			; 00000063H
  000b9	0f b6 c1	 movzx	 eax, cl
  000bc	88 8a 01 00 00
	00		 mov	 BYTE PTR _FSb[edx+1], cl
  000c2	42		 inc	 edx
  000c3	88 90 00 00 00
	00		 mov	 BYTE PTR _RSb[eax], dl
  000c9	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000cc	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000d1	7c a3		 jl	 SHORT $L374
  000d3	33 f6		 xor	 esi, esi
$L377:

; 153  :     {
; 154  :         x = FSb[i]; y = XTIME( x );

  000d5	8a 8e 00 00 00
	00		 mov	 cl, BYTE PTR _FSb[esi]

; 155  : 
; 156  :         FT0[i] =   (uint32) ( x ^ y ) ^
; 157  :                  ( (uint32) x <<  8 ) ^
; 158  :                  ( (uint32) x << 16 ) ^
; 159  :                  ( (uint32) y << 24 );
; 160  : 
; 161  :         FT0[i] &= 0xFFFFFFFF;
; 162  : 
; 163  :         FT1[i] = ROTR8( FT0[i] );
; 164  :         FT2[i] = ROTR8( FT1[i] );
; 165  :         FT3[i] = ROTR8( FT2[i] );
; 166  : 
; 167  :         y = RSb[i];

  000db	8a 9e 00 00 00
	00		 mov	 bl, BYTE PTR _RSb[esi]
  000e1	8a c1		 mov	 al, cl
  000e3	8a d1		 mov	 dl, cl
  000e5	24 80		 and	 al, 128			; 00000080H
  000e7	f6 d8		 neg	 al
  000e9	1a c0		 sbb	 al, al
  000eb	83 e0 1b	 and	 eax, 27			; 0000001bH
  000ee	d0 e2		 shl	 dl, 1
  000f0	32 c2		 xor	 al, dl
  000f2	0f b6 d0	 movzx	 edx, al
  000f5	0f b6 c9	 movzx	 ecx, cl
  000f8	8b c2		 mov	 eax, edx
  000fa	c1 e0 08	 shl	 eax, 8
  000fd	33 c1		 xor	 eax, ecx
  000ff	c1 e0 08	 shl	 eax, 8
  00102	33 c1		 xor	 eax, ecx
  00104	c1 e0 08	 shl	 eax, 8
  00107	33 c2		 xor	 eax, edx
  00109	33 c1		 xor	 eax, ecx
  0010b	8b ce		 mov	 ecx, esi
  0010d	c1 e1 02	 shl	 ecx, 2
  00110	8b d0		 mov	 edx, eax
  00112	89 81 00 00 00
	00		 mov	 DWORD PTR _FT0[ecx], eax
  00118	c1 e2 18	 shl	 edx, 24			; 00000018H
  0011b	c1 e8 08	 shr	 eax, 8
  0011e	0b d0		 or	 edx, eax
  00120	8b c2		 mov	 eax, edx
  00122	89 91 00 00 00
	00		 mov	 DWORD PTR _FT1[ecx], edx
  00128	c1 e0 18	 shl	 eax, 24			; 00000018H
  0012b	c1 ea 08	 shr	 edx, 8
  0012e	0b c2		 or	 eax, edx
  00130	8b d0		 mov	 edx, eax
  00132	89 81 00 00 00
	00		 mov	 DWORD PTR _FT2[ecx], eax
  00138	c1 e2 18	 shl	 edx, 24			; 00000018H
  0013b	c1 e8 08	 shr	 eax, 8
  0013e	0b d0		 or	 edx, eax

; 168  : 
; 169  :         RT0[i] = ( (uint32) MUL( 0x0B, y )       ) ^
; 170  :                  ( (uint32) MUL( 0x0D, y ) <<  8 ) ^
; 171  :                  ( (uint32) MUL( 0x09, y ) << 16 ) ^
; 172  :                  ( (uint32) MUL( 0x0E, y ) << 24 );

  00140	84 db		 test	 bl, bl
  00142	89 91 00 00 00
	00		 mov	 DWORD PTR _FT3[ecx], edx
  00148	74 29		 je	 SHORT $L1096
  0014a	0f b6 95 03 ff
	ff ff		 movzx	 edx, BYTE PTR _log$[ebp+11]
  00151	0f b6 c3	 movzx	 eax, bl
  00154	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00159	0f b6 84 05 f8
	fe ff ff	 movzx	 eax, BYTE PTR _log$[ebp+eax]
  00161	03 c2		 add	 eax, edx
  00163	99		 cdq
  00164	f7 ff		 idiv	 edi
  00166	0f b6 84 15 f8
	fd ff ff	 movzx	 eax, BYTE PTR _pow$[ebp+edx]
  0016e	89 45 fc	 mov	 DWORD PTR -4+[ebp], eax
  00171	eb 04		 jmp	 SHORT $L1097
$L1096:
  00173	83 65 fc 00	 and	 DWORD PTR -4+[ebp], 0
$L1097:
  00177	84 db		 test	 bl, bl
  00179	74 29		 je	 SHORT $L1098
  0017b	0f b6 95 05 ff
	ff ff		 movzx	 edx, BYTE PTR _log$[ebp+13]
  00182	0f b6 c3	 movzx	 eax, bl
  00185	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0018a	0f b6 84 05 f8
	fe ff ff	 movzx	 eax, BYTE PTR _log$[ebp+eax]
  00192	03 c2		 add	 eax, edx
  00194	99		 cdq
  00195	f7 ff		 idiv	 edi
  00197	0f b6 84 15 f8
	fd ff ff	 movzx	 eax, BYTE PTR _pow$[ebp+edx]
  0019f	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  001a2	eb 04		 jmp	 SHORT $L1099
$L1098:
  001a4	83 65 f8 00	 and	 DWORD PTR -8+[ebp], 0
$L1099:
  001a8	84 db		 test	 bl, bl
  001aa	74 26		 je	 SHORT $L1100
  001ac	0f b6 95 01 ff
	ff ff		 movzx	 edx, BYTE PTR _log$[ebp+9]
  001b3	0f b6 c3	 movzx	 eax, bl
  001b6	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  001bb	0f b6 84 05 f8
	fe ff ff	 movzx	 eax, BYTE PTR _log$[ebp+eax]
  001c3	03 c2		 add	 eax, edx
  001c5	99		 cdq
  001c6	f7 ff		 idiv	 edi
  001c8	0f b6 bc 15 f8
	fd ff ff	 movzx	 edi, BYTE PTR _pow$[ebp+edx]
  001d0	eb 02		 jmp	 SHORT $L1101
$L1100:
  001d2	33 ff		 xor	 edi, edi
$L1101:
  001d4	84 db		 test	 bl, bl
  001d6	74 26		 je	 SHORT $L1102
  001d8	0f b6 95 06 ff
	ff ff		 movzx	 edx, BYTE PTR _log$[ebp+14]
  001df	0f b6 c3	 movzx	 eax, bl
  001e2	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  001e7	0f b6 84 05 f8
	fe ff ff	 movzx	 eax, BYTE PTR _log$[ebp+eax]
  001ef	03 c2		 add	 eax, edx
  001f1	99		 cdq
  001f2	f7 fb		 idiv	 ebx
  001f4	0f b6 94 15 f8
	fd ff ff	 movzx	 edx, BYTE PTR _pow$[ebp+edx]
  001fc	eb 02		 jmp	 SHORT $L1103
$L1102:
  001fe	33 d2		 xor	 edx, edx
$L1103:
  00200	c1 e2 08	 shl	 edx, 8
  00203	33 d7		 xor	 edx, edi
  00205	c1 e2 08	 shl	 edx, 8
  00208	33 55 f8	 xor	 edx, DWORD PTR -8+[ebp]
  0020b	c1 e2 08	 shl	 edx, 8
  0020e	33 55 fc	 xor	 edx, DWORD PTR -4+[ebp]

; 173  : 
; 174  :         RT0[i] &= 0xFFFFFFFF;
; 175  : 
; 176  :         RT1[i] = ROTR8( RT0[i] );

  00211	8b c2		 mov	 eax, edx
  00213	89 91 00 00 00
	00		 mov	 DWORD PTR _RT0[ecx], edx
  00219	c1 e0 18	 shl	 eax, 24			; 00000018H
  0021c	c1 ea 08	 shr	 edx, 8
  0021f	0b c2		 or	 eax, edx

; 177  :         RT2[i] = ROTR8( RT1[i] );

  00221	8b d0		 mov	 edx, eax
  00223	89 81 00 00 00
	00		 mov	 DWORD PTR _RT1[ecx], eax
  00229	c1 e2 18	 shl	 edx, 24			; 00000018H
  0022c	c1 e8 08	 shr	 eax, 8
  0022f	0b d0		 or	 edx, eax

; 178  :         RT3[i] = ROTR8( RT2[i] );

  00231	8b c2		 mov	 eax, edx
  00233	89 91 00 00 00
	00		 mov	 DWORD PTR _RT2[ecx], edx
  00239	c1 e0 18	 shl	 eax, 24			; 00000018H
  0023c	c1 ea 08	 shr	 edx, 8
  0023f	0b c2		 or	 eax, edx
  00241	46		 inc	 esi
  00242	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  00248	89 81 00 00 00
	00		 mov	 DWORD PTR _RT3[ecx], eax
  0024e	0f 8c 81 fe ff
	ff		 jl	 $L377
  00254	5f		 pop	 edi
  00255	5e		 pop	 esi
  00256	5b		 pop	 ebx

; 179  :     }
; 180  : }

  00257	c9		 leave
  00258	c3		 ret	 0
_aes_gen_tables ENDP
_TEXT	ENDS
PUBLIC	_aes_encrypt
;	COMDAT _aes_encrypt
_TEXT	SEGMENT
_ctx$ = 8
_input$ = 12
_output$ = 16
_X0$ = 12
_X1$ = 8
_X2$ = -8
_Y0$ = -16
_Y1$ = -12
_Y2$ = -4
_aes_encrypt PROC NEAR					; COMDAT

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 625  :     uint32 *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;
; 626  : 
; 627  :     RK = ctx->erk;
; 628  : 
; 629  :     GET_UINT32_BE( X0, input,  0 ); X0 ^= RK[0];

  00006	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	8a 28		 mov	 ch, BYTE PTR [eax]
  0000f	57		 push	 edi
  00010	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00013	8b 7d 08	 mov	 edi, DWORD PTR _ctx$[ebp]
  00016	0f b6 50 02	 movzx	 edx, BYTE PTR [eax+2]
  0001a	c1 e1 08	 shl	 ecx, 8
  0001d	0b ca		 or	 ecx, edx
  0001f	0f b6 50 03	 movzx	 edx, BYTE PTR [eax+3]
  00023	c1 e1 08	 shl	 ecx, 8
  00026	0b ca		 or	 ecx, edx
  00028	33 0f		 xor	 ecx, DWORD PTR [edi]

; 630  :     GET_UINT32_BE( X1, input,  4 ); X1 ^= RK[1];

  0002a	0f b6 50 06	 movzx	 edx, BYTE PTR [eax+6]
  0002e	89 4d 0c	 mov	 DWORD PTR _X0$[ebp], ecx
  00031	33 c9		 xor	 ecx, ecx
  00033	8a 68 04	 mov	 ch, BYTE PTR [eax+4]
  00036	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00039	c1 e1 08	 shl	 ecx, 8
  0003c	0b ca		 or	 ecx, edx
  0003e	0f b6 50 07	 movzx	 edx, BYTE PTR [eax+7]
  00042	c1 e1 08	 shl	 ecx, 8
  00045	0b ca		 or	 ecx, edx
  00047	33 4f 04	 xor	 ecx, DWORD PTR [edi+4]

; 631  :     GET_UINT32_BE( X2, input,  8 ); X2 ^= RK[2];

  0004a	0f b6 50 0a	 movzx	 edx, BYTE PTR [eax+10]
  0004e	89 4d 08	 mov	 DWORD PTR _X1$[ebp], ecx
  00051	33 c9		 xor	 ecx, ecx
  00053	8a 68 08	 mov	 ch, BYTE PTR [eax+8]

; 632  :     GET_UINT32_BE( X3, input, 12 ); X3 ^= RK[3];
; 633  : 
; 634  : #define AES_FROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)             \
; 635  : {                                                       \
; 636  :     RK += 4;                                            \
; 637  :                                                         \
; 638  :     X0 = RK[0] ^ FT0[ (uint8) ( Y0 >> 24 ) ] ^          \
; 639  :                  FT1[ (uint8) ( Y1 >> 16 ) ] ^          \
; 640  :                  FT2[ (uint8) ( Y2 >>  8 ) ] ^          \
; 641  :                  FT3[ (uint8) ( Y3       ) ];           \
; 642  :                                                         \
; 643  :     X1 = RK[1] ^ FT0[ (uint8) ( Y1 >> 24 ) ] ^          \
; 644  :                  FT1[ (uint8) ( Y2 >> 16 ) ] ^          \
; 645  :                  FT2[ (uint8) ( Y3 >>  8 ) ] ^          \
; 646  :                  FT3[ (uint8) ( Y0       ) ];           \
; 647  :                                                         \
; 648  :     X2 = RK[2] ^ FT0[ (uint8) ( Y2 >> 24 ) ] ^          \
; 649  :                  FT1[ (uint8) ( Y3 >> 16 ) ] ^          \
; 650  :                  FT2[ (uint8) ( Y0 >>  8 ) ] ^          \
; 651  :                  FT3[ (uint8) ( Y1       ) ];           \
; 652  :                                                         \
; 653  :     X3 = RK[3] ^ FT0[ (uint8) ( Y3 >> 24 ) ] ^          \
; 654  :                  FT1[ (uint8) ( Y0 >> 16 ) ] ^          \
; 655  :                  FT2[ (uint8) ( Y1 >>  8 ) ] ^          \
; 656  :                  FT3[ (uint8) ( Y2       ) ];           \
; 657  : }
; 658  : 
; 659  :     AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00056	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00059	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  0005c	c1 e1 08	 shl	 ecx, 8
  0005f	0b ca		 or	 ecx, edx
  00061	0f b6 50 0b	 movzx	 edx, BYTE PTR [eax+11]
  00065	c1 e1 08	 shl	 ecx, 8
  00068	0b ca		 or	 ecx, edx
  0006a	33 4f 08	 xor	 ecx, DWORD PTR [edi+8]
  0006d	0f b6 50 0e	 movzx	 edx, BYTE PTR [eax+14]
  00071	89 4d f8	 mov	 DWORD PTR _X2$[ebp], ecx
  00074	33 c9		 xor	 ecx, ecx
  00076	8a 68 0c	 mov	 ch, BYTE PTR [eax+12]
  00079	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  0007c	c1 e1 08	 shl	 ecx, 8
  0007f	0b ca		 or	 ecx, edx
  00081	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00084	0f b6 40 0f	 movzx	 eax, BYTE PTR [eax+15]
  00088	c1 ea 08	 shr	 edx, 8
  0008b	0f b6 d2	 movzx	 edx, dl
  0008e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00091	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00098	0f b6 f3	 movzx	 esi, bl
  0009b	c1 e1 08	 shl	 ecx, 8
  0009e	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  000a5	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  000a8	0b c8		 or	 ecx, eax
  000aa	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  000ad	33 4f 0c	 xor	 ecx, DWORD PTR [edi+12]
  000b0	c1 ee 18	 shr	 esi, 24			; 00000018H
  000b3	8b d9		 mov	 ebx, ecx
  000b5	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  000bc	0f b6 f1	 movzx	 esi, cl
  000bf	c1 eb 08	 shr	 ebx, 8
  000c2	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  000c9	0f b6 f3	 movzx	 esi, bl
  000cc	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  000cf	33 10		 xor	 edx, DWORD PTR [eax]
  000d1	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  000d8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000db	0f b6 db	 movzx	 ebx, bl
  000de	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  000e5	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  000e8	c1 eb 18	 shr	 ebx, 24			; 00000018H
  000eb	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  000f2	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  000f6	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  000fd	8b d9		 mov	 ebx, ecx
  000ff	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00102	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00105	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  00108	0f b6 f3	 movzx	 esi, bl
  0010b	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  0010e	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00115	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00118	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0011b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00122	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00125	c1 eb 08	 shr	 ebx, 8
  00128	0f b6 db	 movzx	 ebx, bl
  0012b	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]

; 660  :     AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00132	83 c0 10	 add	 eax, 16			; 00000010H
  00135	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT2[ebx*4]
  0013c	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  00140	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00147	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  0014a	c1 eb 08	 shr	 ebx, 8
  0014d	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  00150	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00153	0f b6 f3	 movzx	 esi, bl
  00156	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00159	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00160	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00163	0f b6 f3	 movzx	 esi, bl
  00166	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00169	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[esi*4]
  00170	0f b6 75 f8	 movzx	 esi, BYTE PTR _X2$[ebp]
  00174	c1 eb 08	 shr	 ebx, 8
  00177	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[esi*4]
  0017e	0f b6 f3	 movzx	 esi, bl
  00181	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00184	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00187	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0018e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00191	0f b6 db	 movzx	 ebx, bl
  00194	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  0019b	8b da		 mov	 ebx, edx
  0019d	c1 eb 18	 shr	 ebx, 24			; 00000018H
  001a0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  001a7	0f b6 d9	 movzx	 ebx, cl
  001aa	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  001b1	8b d9		 mov	 ebx, ecx
  001b3	c1 eb 08	 shr	 ebx, 8
  001b6	33 30		 xor	 esi, DWORD PTR [eax]
  001b8	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  001bb	0f b6 f3	 movzx	 esi, bl
  001be	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  001c1	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  001c8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001cb	0f b6 db	 movzx	 ebx, bl
  001ce	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  001d5	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  001d8	c1 eb 18	 shr	 ebx, 24			; 00000018H
  001db	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  001de	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  001e5	0f b6 da	 movzx	 ebx, dl
  001e8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  001ef	8b d9		 mov	 ebx, ecx
  001f1	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001f4	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  001f7	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001fa	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  001fd	0f b6 f3	 movzx	 esi, bl
  00200	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00203	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  0020a	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00211	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00214	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  0021b	8b da		 mov	 ebx, edx
  0021d	c1 eb 08	 shr	 ebx, 8
  00220	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  00223	0f b6 f3	 movzx	 esi, bl
  00226	0f b6 5d f4	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  0022a	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00231	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  00234	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00237	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  0023e	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00241	c1 eb 08	 shr	 ebx, 8
  00244	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00247	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  0024a	0f b6 f3	 movzx	 esi, bl
  0024d	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00254	c1 ea 10	 shr	 edx, 16			; 00000010H
  00257	0f b6 d2	 movzx	 edx, dl

; 661  :     AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  0025a	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  0025d	83 c0 10	 add	 eax, 16			; 00000010H
  00260	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  00267	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  0026b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0026e	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  00275	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00278	c1 ea 08	 shr	 edx, 8
  0027b	0f b6 d2	 movzx	 edx, dl
  0027e	0f b6 f3	 movzx	 esi, bl
  00281	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00288	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  0028b	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00292	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  00295	c1 ee 18	 shr	 esi, 24			; 00000018H
  00298	8b d9		 mov	 ebx, ecx
  0029a	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  002a1	0f b6 f1	 movzx	 esi, cl
  002a4	c1 eb 08	 shr	 ebx, 8
  002a7	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  002ae	0f b6 f3	 movzx	 esi, bl
  002b1	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  002b4	33 10		 xor	 edx, DWORD PTR [eax]
  002b6	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]

; 662  :     AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  002bd	83 c0 10	 add	 eax, 16			; 00000010H
  002c0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  002c3	0f b6 db	 movzx	 ebx, bl
  002c6	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  002cd	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  002d1	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  002d4	8b 75 08	 mov	 esi, DWORD PTR _X1$[ebp]
  002d7	c1 ee 18	 shr	 esi, 24			; 00000018H
  002da	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT0[esi*4]
  002e1	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  002e4	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  002e7	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  002ee	8b d9		 mov	 ebx, ecx
  002f0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  002f3	33 70 f4	 xor	 esi, DWORD PTR [eax-12]
  002f6	c1 e9 18	 shr	 ecx, 24			; 00000018H
  002f9	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  002fc	0f b6 f3	 movzx	 esi, bl
  002ff	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  00302	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  00309	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00310	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00313	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  0031a	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  0031d	c1 eb 08	 shr	 ebx, 8
  00320	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  00323	0f b6 f3	 movzx	 esi, bl
  00326	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  0032a	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00331	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  00334	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00337	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  0033e	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00341	c1 eb 08	 shr	 ebx, 8
  00344	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  00347	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  0034a	0f b6 f3	 movzx	 esi, bl
  0034d	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00350	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00357	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0035a	0f b6 f3	 movzx	 esi, bl
  0035d	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00360	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[esi*4]
  00367	0f b6 75 f8	 movzx	 esi, BYTE PTR _X2$[ebp]
  0036b	c1 eb 08	 shr	 ebx, 8
  0036e	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[esi*4]
  00375	0f b6 f3	 movzx	 esi, bl
  00378	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  0037b	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  0037e	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00385	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00388	0f b6 db	 movzx	 ebx, bl
  0038b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  00392	8b da		 mov	 ebx, edx
  00394	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00397	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  0039e	0f b6 d9	 movzx	 ebx, cl
  003a1	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  003a8	8b d9		 mov	 ebx, ecx
  003aa	c1 eb 08	 shr	 ebx, 8
  003ad	33 30		 xor	 esi, DWORD PTR [eax]

; 663  :     AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  003af	83 c0 10	 add	 eax, 16			; 00000010H
  003b2	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  003b5	0f b6 f3	 movzx	 esi, bl
  003b8	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  003bb	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  003c2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003c5	0f b6 db	 movzx	 ebx, bl
  003c8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  003cf	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  003d2	c1 eb 18	 shr	 ebx, 24			; 00000018H
  003d5	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  003d8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  003df	0f b6 da	 movzx	 ebx, dl
  003e2	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  003e9	8b d9		 mov	 ebx, ecx
  003eb	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003ee	33 70 f4	 xor	 esi, DWORD PTR [eax-12]
  003f1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003f4	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  003f7	0f b6 f3	 movzx	 esi, bl
  003fa	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  003fd	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  00404	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  0040b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0040e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00415	8b da		 mov	 ebx, edx
  00417	c1 eb 08	 shr	 ebx, 8
  0041a	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  0041d	0f b6 f3	 movzx	 esi, bl
  00420	0f b6 5d f4	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  00424	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0042b	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  0042e	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00431	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00438	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  0043b	c1 eb 08	 shr	 ebx, 8
  0043e	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  00441	c1 ea 10	 shr	 edx, 16			; 00000010H
  00444	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  00447	0f b6 f3	 movzx	 esi, bl
  0044a	0f b6 d2	 movzx	 edx, dl
  0044d	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00454	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00457	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0045a	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  00461	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  00465	0f b6 f3	 movzx	 esi, bl
  00468	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  0046f	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00472	c1 ea 08	 shr	 edx, 8
  00475	0f b6 d2	 movzx	 edx, dl
  00478	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  0047b	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00482	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00489	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  0048c	c1 ee 18	 shr	 esi, 24			; 00000018H
  0048f	8b d9		 mov	 ebx, ecx
  00491	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  00498	0f b6 f1	 movzx	 esi, cl
  0049b	c1 eb 08	 shr	 ebx, 8
  0049e	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  004a5	0f b6 f3	 movzx	 esi, bl
  004a8	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  004ab	33 10		 xor	 edx, DWORD PTR [eax]
  004ad	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  004b4	c1 eb 10	 shr	 ebx, 16			; 00000010H
  004b7	0f b6 db	 movzx	 ebx, bl
  004ba	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  004c1	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  004c5	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  004c8	8b 75 08	 mov	 esi, DWORD PTR _X1$[ebp]
  004cb	c1 ee 18	 shr	 esi, 24			; 00000018H
  004ce	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT0[esi*4]
  004d5	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  004d8	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  004db	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  004e2	8b d9		 mov	 ebx, ecx
  004e4	c1 eb 10	 shr	 ebx, 16			; 00000010H
  004e7	33 70 04	 xor	 esi, DWORD PTR [eax+4]

; 664  :     AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  004ea	83 c0 10	 add	 eax, 16			; 00000010H
  004ed	c1 e9 18	 shr	 ecx, 24			; 00000018H
  004f0	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  004f3	0f b6 f3	 movzx	 esi, bl
  004f6	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  004f9	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  00500	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00507	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0050a	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00511	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00514	c1 eb 08	 shr	 ebx, 8
  00517	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  0051a	0f b6 f3	 movzx	 esi, bl
  0051d	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  00521	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00528	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  0052b	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  0052e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00535	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00538	c1 eb 08	 shr	 ebx, 8
  0053b	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  0053e	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00541	0f b6 f3	 movzx	 esi, bl
  00544	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00547	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  0054e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00551	0f b6 f3	 movzx	 esi, bl
  00554	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00557	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[esi*4]
  0055e	0f b6 75 f8	 movzx	 esi, BYTE PTR _X2$[ebp]
  00562	c1 eb 08	 shr	 ebx, 8
  00565	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[esi*4]
  0056c	0f b6 f3	 movzx	 esi, bl
  0056f	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00572	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00575	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0057c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0057f	0f b6 db	 movzx	 ebx, bl
  00582	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  00589	8b da		 mov	 ebx, edx
  0058b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0058e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00595	0f b6 d9	 movzx	 ebx, cl
  00598	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  0059f	8b d9		 mov	 ebx, ecx
  005a1	c1 eb 08	 shr	 ebx, 8
  005a4	33 30		 xor	 esi, DWORD PTR [eax]
  005a6	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  005a9	0f b6 f3	 movzx	 esi, bl
  005ac	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  005af	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  005b6	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005b9	0f b6 db	 movzx	 ebx, bl
  005bc	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  005c3	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  005c6	c1 eb 18	 shr	 ebx, 24			; 00000018H
  005c9	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  005cc	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  005d3	0f b6 da	 movzx	 ebx, dl
  005d6	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  005dd	8b d9		 mov	 ebx, ecx
  005df	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005e2	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  005e5	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  005e8	0f b6 f3	 movzx	 esi, bl
  005eb	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  005ee	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  005f5	c1 eb 18	 shr	 ebx, 24			; 00000018H
  005f8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  005ff	8b da		 mov	 ebx, edx
  00601	c1 eb 08	 shr	 ebx, 8
  00604	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  00607	0f b6 f3	 movzx	 esi, bl
  0060a	0f b6 5d f4	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  0060e	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00615	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  00618	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  0061b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00622	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00625	c1 eb 08	 shr	 ebx, 8
  00628	33 70 08	 xor	 esi, DWORD PTR [eax+8]

; 665  :     AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  0062b	83 c0 10	 add	 eax, 16			; 00000010H
  0062e	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00631	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  00634	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  0063b	0f b6 f3	 movzx	 esi, bl
  0063e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00641	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00648	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  0064b	0f b6 d2	 movzx	 edx, dl
  0064e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00651	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  00658	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  0065c	0f b6 f3	 movzx	 esi, bl
  0065f	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  00666	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00669	c1 ea 08	 shr	 edx, 8
  0066c	0f b6 d2	 movzx	 edx, dl
  0066f	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00672	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00679	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00680	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  00683	c1 ee 18	 shr	 esi, 24			; 00000018H
  00686	8b d9		 mov	 ebx, ecx
  00688	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  0068f	0f b6 f1	 movzx	 esi, cl
  00692	c1 eb 08	 shr	 ebx, 8
  00695	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  0069c	0f b6 f3	 movzx	 esi, bl
  0069f	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  006a2	33 10		 xor	 edx, DWORD PTR [eax]
  006a4	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  006ab	c1 eb 10	 shr	 ebx, 16			; 00000010H
  006ae	0f b6 db	 movzx	 ebx, bl
  006b1	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  006b8	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  006bc	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  006bf	8b 75 08	 mov	 esi, DWORD PTR _X1$[ebp]
  006c2	c1 ee 18	 shr	 esi, 24			; 00000018H
  006c5	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT0[esi*4]
  006cc	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  006cf	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  006d2	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  006d9	8b d9		 mov	 ebx, ecx
  006db	c1 eb 10	 shr	 ebx, 16			; 00000010H
  006de	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  006e1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  006e4	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  006e7	0f b6 f3	 movzx	 esi, bl
  006ea	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  006ed	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  006f4	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  006fb	c1 eb 18	 shr	 ebx, 24			; 00000018H
  006fe	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00705	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00708	c1 eb 08	 shr	 ebx, 8
  0070b	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  0070e	0f b6 f3	 movzx	 esi, bl
  00711	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  00715	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0071c	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  0071f	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00722	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00729	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  0072c	c1 eb 08	 shr	 ebx, 8
  0072f	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00732	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00735	0f b6 f3	 movzx	 esi, bl
  00738	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  0073b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00742	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00745	0f b6 f3	 movzx	 esi, bl

; 666  :     AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00748	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  0074b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[esi*4]
  00752	0f b6 75 f8	 movzx	 esi, BYTE PTR _X2$[ebp]
  00756	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[esi*4]
  0075d	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  00760	83 c0 10	 add	 eax, 16			; 00000010H
  00763	c1 eb 08	 shr	 ebx, 8
  00766	0f b6 f3	 movzx	 esi, bl
  00769	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  0076c	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00773	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00776	0f b6 db	 movzx	 ebx, bl
  00779	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  00780	8b da		 mov	 ebx, edx
  00782	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00785	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  0078c	0f b6 d9	 movzx	 ebx, cl
  0078f	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00796	8b d9		 mov	 ebx, ecx
  00798	c1 eb 08	 shr	 ebx, 8
  0079b	33 30		 xor	 esi, DWORD PTR [eax]

; 667  :     AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  0079d	83 c0 10	 add	 eax, 16			; 00000010H
  007a0	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  007a3	0f b6 f3	 movzx	 esi, bl
  007a6	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  007a9	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  007b0	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007b3	0f b6 db	 movzx	 ebx, bl
  007b6	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  007bd	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  007c0	c1 eb 18	 shr	 ebx, 24			; 00000018H
  007c3	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  007c6	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  007cd	0f b6 da	 movzx	 ebx, dl
  007d0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  007d7	8b d9		 mov	 ebx, ecx
  007d9	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007dc	33 70 f4	 xor	 esi, DWORD PTR [eax-12]
  007df	c1 e9 18	 shr	 ecx, 24			; 00000018H
  007e2	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  007e5	0f b6 f3	 movzx	 esi, bl
  007e8	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  007eb	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  007f2	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  007f9	c1 eb 18	 shr	 ebx, 24			; 00000018H
  007fc	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00803	8b da		 mov	 ebx, edx
  00805	c1 eb 08	 shr	 ebx, 8
  00808	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  0080b	0f b6 f3	 movzx	 esi, bl
  0080e	0f b6 5d f4	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  00812	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00819	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  0081c	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  0081f	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00826	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00829	c1 eb 08	 shr	 ebx, 8
  0082c	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  0082f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00832	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  00835	0f b6 f3	 movzx	 esi, bl
  00838	0f b6 d2	 movzx	 edx, dl
  0083b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00842	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00845	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00848	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  0084f	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  00853	0f b6 f3	 movzx	 esi, bl
  00856	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  0085d	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00860	c1 ea 08	 shr	 edx, 8
  00863	0f b6 d2	 movzx	 edx, dl
  00866	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00869	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00870	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00877	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  0087a	c1 ee 18	 shr	 esi, 24			; 00000018H
  0087d	8b d9		 mov	 ebx, ecx
  0087f	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  00886	0f b6 f1	 movzx	 esi, cl
  00889	c1 eb 08	 shr	 ebx, 8
  0088c	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  00893	0f b6 f3	 movzx	 esi, bl
  00896	33 10		 xor	 edx, DWORD PTR [eax]
  00898	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  0089b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0089e	89 55 f0	 mov	 DWORD PTR _Y0$[ebp], edx
  008a1	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]

; 668  : 
; 669  :     if( ctx->nr > 10 )

  008a8	8b bf 00 02 00
	00		 mov	 edi, DWORD PTR [edi+512]
  008ae	0f b6 db	 movzx	 ebx, bl
  008b1	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  008b8	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  008bc	89 75 f4	 mov	 DWORD PTR -12+[ebp], esi
  008bf	8b 75 08	 mov	 esi, DWORD PTR _X1$[ebp]
  008c2	c1 ee 18	 shr	 esi, 24			; 00000018H
  008c5	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT0[esi*4]
  008cc	31 75 f4	 xor	 DWORD PTR -12+[ebp], esi
  008cf	8b 75 f4	 mov	 esi, DWORD PTR -12+[ebp]
  008d2	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  008d9	8b d9		 mov	 ebx, ecx
  008db	c1 eb 10	 shr	 ebx, 16			; 00000010H
  008de	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  008e1	c1 e9 18	 shr	 ecx, 24			; 00000018H
  008e4	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  008e7	0f b6 f3	 movzx	 esi, bl
  008ea	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  008ed	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  008f4	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  008fb	c1 eb 18	 shr	 ebx, 24			; 00000018H
  008fe	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00905	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00908	c1 eb 08	 shr	 ebx, 8
  0090b	89 75 fc	 mov	 DWORD PTR -4+[ebp], esi
  0090e	0f b6 f3	 movzx	 esi, bl
  00911	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  00915	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0091c	31 75 fc	 xor	 DWORD PTR -4+[ebp], esi
  0091f	8b 75 fc	 mov	 esi, DWORD PTR -4+[ebp]
  00922	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00929	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  0092c	c1 eb 08	 shr	 ebx, 8
  0092f	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00932	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00935	0f b6 f3	 movzx	 esi, bl
  00938	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  0093b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[esi*4]
  00942	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00945	0f b6 f3	 movzx	 esi, bl
  00948	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[esi*4]
  0094f	0f b6 75 f8	 movzx	 esi, BYTE PTR _X2$[ebp]
  00953	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[esi*4]
  0095a	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  0095d	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00960	0f 8e e9 01 00
	00		 jle	 $L654

; 670  :     {
; 671  :         AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00966	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00969	83 c0 10	 add	 eax, 16			; 00000010H
  0096c	c1 eb 08	 shr	 ebx, 8
  0096f	0f b6 f3	 movzx	 esi, bl
  00972	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00975	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  0097c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0097f	0f b6 db	 movzx	 ebx, bl
  00982	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  00989	8b da		 mov	 ebx, edx
  0098b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0098e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00995	0f b6 d9	 movzx	 ebx, cl
  00998	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  0099f	8b d9		 mov	 ebx, ecx
  009a1	c1 eb 08	 shr	 ebx, 8
  009a4	33 30		 xor	 esi, DWORD PTR [eax]

; 672  :         AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  009a6	83 c0 10	 add	 eax, 16			; 00000010H
  009a9	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  009ac	0f b6 f3	 movzx	 esi, bl
  009af	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  009b2	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  009b9	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009bc	0f b6 db	 movzx	 ebx, bl
  009bf	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  009c6	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  009c9	c1 eb 18	 shr	 ebx, 24			; 00000018H
  009cc	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  009cf	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  009d6	0f b6 da	 movzx	 ebx, dl
  009d9	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  009e0	8b d9		 mov	 ebx, ecx
  009e2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009e5	33 70 f4	 xor	 esi, DWORD PTR [eax-12]
  009e8	c1 e9 18	 shr	 ecx, 24			; 00000018H
  009eb	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  009ee	0f b6 f3	 movzx	 esi, bl
  009f1	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  009f4	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  009fb	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00a02	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00a05	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00a0c	8b da		 mov	 ebx, edx
  00a0e	c1 eb 08	 shr	 ebx, 8
  00a11	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  00a14	0f b6 f3	 movzx	 esi, bl
  00a17	0f b6 5d f4	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  00a1b	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00a22	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  00a25	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00a28	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00a2f	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00a32	c1 eb 08	 shr	 ebx, 8
  00a35	0f b6 db	 movzx	 ebx, bl
  00a38	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a3b	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[ebx*4]
  00a42	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  00a45	0f b6 d2	 movzx	 edx, dl
  00a48	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00a4b	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  00a4e	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  00a55	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  00a59	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00a5c	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  00a63	8b d6		 mov	 edx, esi
  00a65	c1 ea 08	 shr	 edx, 8
  00a68	0f b6 d2	 movzx	 edx, dl
  00a6b	0f b6 f3	 movzx	 esi, bl
  00a6e	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00a75	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00a78	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00a7f	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  00a82	c1 ee 18	 shr	 esi, 24			; 00000018H
  00a85	8b d9		 mov	 ebx, ecx
  00a87	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  00a8e	0f b6 f1	 movzx	 esi, cl
  00a91	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  00a98	33 10		 xor	 edx, DWORD PTR [eax]
  00a9a	c1 eb 08	 shr	 ebx, 8
  00a9d	89 55 f0	 mov	 DWORD PTR _Y0$[ebp], edx
  00aa0	0f b6 f3	 movzx	 esi, bl
  00aa3	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  00aa6	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00aad	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00ab0	0f b6 db	 movzx	 ebx, bl
  00ab3	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[ebx*4]
  00aba	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00abd	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00ac0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00ac7	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _X0$[ebp]
  00acb	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00ad2	8b d9		 mov	 ebx, ecx
  00ad4	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00ad7	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00ada	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00add	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  00ae0	0f b6 f3	 movzx	 esi, bl
  00ae3	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  00ae6	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00aed	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00af0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[ebx*4]
  00af7	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00afa	c1 eb 08	 shr	 ebx, 8
  00afd	0f b6 db	 movzx	 ebx, bl
  00b00	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT2[ebx*4]
  00b07	0f b6 5d 08	 movzx	 ebx, BYTE PTR _X1$[ebp]
  00b0b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[ebx*4]
  00b12	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00b15	c1 eb 08	 shr	 ebx, 8
  00b18	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00b1b	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00b1e	0f b6 f3	 movzx	 esi, bl
  00b21	8b 1c 8d 00 00
	00 00		 mov	 ebx, DWORD PTR _FT0[ecx*4]
  00b28	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00b2b	33 1c b5 00 00
	00 00		 xor	 ebx, DWORD PTR _FT2[esi*4]
  00b32	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b35	0f b6 c9	 movzx	 ecx, cl
  00b38	33 1c 8d 00 00
	00 00		 xor	 ebx, DWORD PTR _FT1[ecx*4]
  00b3f	0f b6 4d f8	 movzx	 ecx, BYTE PTR _X2$[ebp]
  00b43	33 1c 8d 00 00
	00 00		 xor	 ebx, DWORD PTR _FT3[ecx*4]
  00b4a	33 58 0c	 xor	 ebx, DWORD PTR [eax+12]
  00b4d	8b cb		 mov	 ecx, ebx
$L654:

; 673  :     }
; 674  : 
; 675  :     if( ctx->nr > 12 )

  00b4f	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  00b52	0f 8e e8 01 00
	00		 jle	 $L687

; 676  :     {
; 677  :         AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00b58	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00b5b	83 c0 10	 add	 eax, 16			; 00000010H
  00b5e	c1 eb 08	 shr	 ebx, 8
  00b61	0f b6 f3	 movzx	 esi, bl
  00b64	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00b67	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00b6e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00b71	0f b6 fb	 movzx	 edi, bl
  00b74	8b d9		 mov	 ebx, ecx
  00b76	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[edi*4]
  00b7d	8b fa		 mov	 edi, edx
  00b7f	c1 ef 18	 shr	 edi, 24			; 00000018H
  00b82	c1 eb 08	 shr	 ebx, 8
  00b85	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[edi*4]
  00b8c	0f b6 f9	 movzx	 edi, cl
  00b8f	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[edi*4]
  00b96	33 30		 xor	 esi, DWORD PTR [eax]

; 678  :         AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00b98	83 c0 10	 add	 eax, 16			; 00000010H
  00b9b	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  00b9e	0f b6 f3	 movzx	 esi, bl
  00ba1	8b 5d fc	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00ba4	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00bab	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00bae	0f b6 fb	 movzx	 edi, bl
  00bb1	8b d9		 mov	 ebx, ecx
  00bb3	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[edi*4]
  00bba	8b 7d f4	 mov	 edi, DWORD PTR _Y1$[ebp]
  00bbd	c1 ef 18	 shr	 edi, 24			; 00000018H
  00bc0	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00bc3	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[edi*4]
  00bca	0f b6 fa	 movzx	 edi, dl
  00bcd	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00bd0	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[edi*4]
  00bd7	8b 7d fc	 mov	 edi, DWORD PTR _Y2$[ebp]
  00bda	c1 ef 18	 shr	 edi, 24			; 00000018H
  00bdd	33 70 f4	 xor	 esi, DWORD PTR [eax-12]
  00be0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00be3	89 75 08	 mov	 DWORD PTR _X1$[ebp], esi
  00be6	0f b6 f3	 movzx	 esi, bl
  00be9	8b da		 mov	 ebx, edx
  00beb	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _FT0[ecx*4]
  00bf2	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00bf9	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[edi*4]
  00c00	c1 eb 08	 shr	 ebx, 8
  00c03	0f b6 7d f4	 movzx	 edi, BYTE PTR _Y1$[ebp]
  00c07	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  00c0a	0f b6 f3	 movzx	 esi, bl
  00c0d	8b 5d f4	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00c10	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00c17	31 75 f0	 xor	 DWORD PTR -16+[ebp], esi
  00c1a	8b 75 f0	 mov	 esi, DWORD PTR -16+[ebp]
  00c1d	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[edi*4]
  00c24	c1 eb 08	 shr	 ebx, 8
  00c27	0f b6 fb	 movzx	 edi, bl
  00c2a	c1 ea 10	 shr	 edx, 16			; 00000010H
  00c2d	33 0c bd 00 00
	00 00		 xor	 ecx, DWORD PTR _FT2[edi*4]
  00c34	33 70 f8	 xor	 esi, DWORD PTR [eax-8]
  00c37	0f b6 d2	 movzx	 edx, dl
  00c3a	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00c3d	89 75 f8	 mov	 DWORD PTR _X2$[ebp], esi
  00c40	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT1[edx*4]
  00c47	0f b6 55 fc	 movzx	 edx, BYTE PTR _Y2$[ebp]
  00c4b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00c4e	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _FT3[edx*4]
  00c55	8b d6		 mov	 edx, esi
  00c57	c1 ea 08	 shr	 edx, 8
  00c5a	0f b6 d2	 movzx	 edx, dl
  00c5d	0f b6 f3	 movzx	 esi, bl
  00c60	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _FT2[edx*4]
  00c67	33 48 fc	 xor	 ecx, DWORD PTR [eax-4]
  00c6a	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT1[esi*4]
  00c71	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  00c74	c1 ee 18	 shr	 esi, 24			; 00000018H
  00c77	8b d9		 mov	 ebx, ecx
  00c79	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT0[esi*4]
  00c80	0f b6 f1	 movzx	 esi, cl
  00c83	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _FT3[esi*4]
  00c8a	33 10		 xor	 edx, DWORD PTR [eax]
  00c8c	c1 eb 08	 shr	 ebx, 8
  00c8f	89 55 f0	 mov	 DWORD PTR _Y0$[ebp], edx
  00c92	0f b6 f3	 movzx	 esi, bl
  00c95	8b 5d f8	 mov	 ebx, DWORD PTR _X2$[ebp]
  00c98	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT2[esi*4]
  00c9f	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00ca2	0f b6 fb	 movzx	 edi, bl
  00ca5	8b d9		 mov	 ebx, ecx
  00ca7	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT1[edi*4]
  00cae	8b 7d 08	 mov	 edi, DWORD PTR _X1$[ebp]
  00cb1	c1 ef 18	 shr	 edi, 24			; 00000018H
  00cb4	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00cb7	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[edi*4]
  00cbe	0f b6 7d 0c	 movzx	 edi, BYTE PTR _X0$[ebp]
  00cc2	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00cc5	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[edi*4]
  00ccc	8b 7d f8	 mov	 edi, DWORD PTR _X2$[ebp]
  00ccf	c1 ef 18	 shr	 edi, 24			; 00000018H
  00cd2	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00cd5	89 75 f4	 mov	 DWORD PTR _Y1$[ebp], esi
  00cd8	0f b6 f3	 movzx	 esi, bl
  00cdb	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00cde	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _FT1[esi*4]
  00ce5	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT0[edi*4]
  00cec	c1 eb 08	 shr	 ebx, 8
  00cef	0f b6 fb	 movzx	 edi, bl
  00cf2	8b 5d 08	 mov	 ebx, DWORD PTR _X1$[ebp]
  00cf5	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT2[edi*4]
  00cfc	0f b6 fb	 movzx	 edi, bl
  00cff	c1 eb 08	 shr	 ebx, 8
  00d02	33 34 bd 00 00
	00 00		 xor	 esi, DWORD PTR _FT3[edi*4]
  00d09	8b 3c 8d 00 00
	00 00		 mov	 edi, DWORD PTR _FT0[ecx*4]
  00d10	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00d13	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00d16	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00d19	89 75 fc	 mov	 DWORD PTR _Y2$[ebp], esi
  00d1c	0f b6 f3	 movzx	 esi, bl
  00d1f	0f b6 c9	 movzx	 ecx, cl
  00d22	33 3c b5 00 00
	00 00		 xor	 edi, DWORD PTR _FT2[esi*4]
  00d29	33 3c 8d 00 00
	00 00		 xor	 edi, DWORD PTR _FT1[ecx*4]
  00d30	0f b6 4d f8	 movzx	 ecx, BYTE PTR _X2$[ebp]
  00d34	33 3c 8d 00 00
	00 00		 xor	 edi, DWORD PTR _FT3[ecx*4]
  00d3b	33 78 0c	 xor	 edi, DWORD PTR [eax+12]
  00d3e	8b cf		 mov	 ecx, edi
$L687:

; 679  :     }
; 680  : 
; 681  :     RK += 4;
; 682  : 
; 683  :     X0 = RK[0] ^ ( FSb[ (uint8) ( Y0 >> 24 ) ] << 24 ) ^
; 684  :                  ( FSb[ (uint8) ( Y1 >> 16 ) ] << 16 ) ^
; 685  :                  ( FSb[ (uint8) ( Y2 >>  8 ) ] <<  8 ) ^
; 686  :                  ( FSb[ (uint8) ( Y3       ) ]       );

  00d40	c1 ea 18	 shr	 edx, 24			; 00000018H
  00d43	33 db		 xor	 ebx, ebx
  00d45	83 c0 10	 add	 eax, 16			; 00000010H
  00d48	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _FSb[edx]
  00d4e	8b 55 f4	 mov	 edx, DWORD PTR _Y1$[ebp]
  00d51	c1 ea 10	 shr	 edx, 16			; 00000010H
  00d54	0f b6 d2	 movzx	 edx, dl
  00d57	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00d5e	33 da		 xor	 ebx, edx
  00d60	8b 55 fc	 mov	 edx, DWORD PTR _Y2$[ebp]
  00d63	c1 ea 08	 shr	 edx, 8
  00d66	0f b6 d2	 movzx	 edx, dl
  00d69	c1 e3 08	 shl	 ebx, 8
  00d6c	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00d73	33 da		 xor	 ebx, edx
  00d75	0f b6 d1	 movzx	 edx, cl
  00d78	c1 e3 08	 shl	 ebx, 8
  00d7b	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00d82	33 da		 xor	 ebx, edx

; 687  : 
; 688  :     X1 = RK[1] ^ ( FSb[ (uint8) ( Y1 >> 24 ) ] << 24 ) ^
; 689  :                  ( FSb[ (uint8) ( Y2 >> 16 ) ] << 16 ) ^
; 690  :                  ( FSb[ (uint8) ( Y3 >>  8 ) ] <<  8 ) ^
; 691  :                  ( FSb[ (uint8) ( Y0       ) ]       );

  00d84	8b 55 f4	 mov	 edx, DWORD PTR _Y1$[ebp]
  00d87	33 18		 xor	 ebx, DWORD PTR [eax]
  00d89	c1 ea 18	 shr	 edx, 24			; 00000018H
  00d8c	89 5d 0c	 mov	 DWORD PTR _X0$[ebp], ebx
  00d8f	33 db		 xor	 ebx, ebx
  00d91	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _FSb[edx]
  00d97	8b 55 fc	 mov	 edx, DWORD PTR _Y2$[ebp]
  00d9a	c1 ea 10	 shr	 edx, 16			; 00000010H
  00d9d	0f b6 d2	 movzx	 edx, dl
  00da0	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00da7	33 da		 xor	 ebx, edx
  00da9	8b d1		 mov	 edx, ecx
  00dab	c1 ea 08	 shr	 edx, 8
  00dae	0f b6 d2	 movzx	 edx, dl
  00db1	c1 e3 08	 shl	 ebx, 8
  00db4	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00dbb	33 da		 xor	 ebx, edx
  00dbd	0f b6 55 f0	 movzx	 edx, BYTE PTR _Y0$[ebp]
  00dc1	c1 e3 08	 shl	 ebx, 8
  00dc4	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00dcb	33 da		 xor	 ebx, edx

; 692  : 
; 693  :     X2 = RK[2] ^ ( FSb[ (uint8) ( Y2 >> 24 ) ] << 24 ) ^
; 694  :                  ( FSb[ (uint8) ( Y3 >> 16 ) ] << 16 ) ^
; 695  :                  ( FSb[ (uint8) ( Y0 >>  8 ) ] <<  8 ) ^
; 696  :                  ( FSb[ (uint8) ( Y1       ) ]       );

  00dcd	8b 55 fc	 mov	 edx, DWORD PTR _Y2$[ebp]
  00dd0	33 58 04	 xor	 ebx, DWORD PTR [eax+4]
  00dd3	c1 ea 18	 shr	 edx, 24			; 00000018H
  00dd6	89 5d 08	 mov	 DWORD PTR _X1$[ebp], ebx
  00dd9	33 db		 xor	 ebx, ebx
  00ddb	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _FSb[edx]
  00de1	8b d1		 mov	 edx, ecx
  00de3	c1 ea 10	 shr	 edx, 16			; 00000010H
  00de6	0f b6 d2	 movzx	 edx, dl

; 697  : 
; 698  :     X3 = RK[3] ^ ( FSb[ (uint8) ( Y3 >> 24 ) ] << 24 ) ^
; 699  :                  ( FSb[ (uint8) ( Y0 >> 16 ) ] << 16 ) ^
; 700  :                  ( FSb[ (uint8) ( Y1 >>  8 ) ] <<  8 ) ^
; 701  :                  ( FSb[ (uint8) ( Y2       ) ]       );

  00de9	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00dec	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00df3	33 da		 xor	 ebx, edx
  00df5	8b 55 f0	 mov	 edx, DWORD PTR _Y0$[ebp]
  00df8	c1 ea 08	 shr	 edx, 8
  00dfb	0f b6 d2	 movzx	 edx, dl
  00dfe	c1 e3 08	 shl	 ebx, 8
  00e01	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _FSb[edx]
  00e08	33 da		 xor	 ebx, edx
  00e0a	8b 55 f4	 mov	 edx, DWORD PTR _Y1$[ebp]
  00e0d	0f b6 f2	 movzx	 esi, dl
  00e10	c1 e3 08	 shl	 ebx, 8
  00e13	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _FSb[esi]
  00e1a	33 de		 xor	 ebx, esi
  00e1c	33 58 08	 xor	 ebx, DWORD PTR [eax+8]
  00e1f	c1 ea 08	 shr	 edx, 8
  00e22	89 5d f8	 mov	 DWORD PTR _X2$[ebp], ebx
  00e25	33 db		 xor	 ebx, ebx
  00e27	8a b9 00 00 00
	00		 mov	 bh, BYTE PTR _FSb[ecx]
  00e2d	8b 4d f0	 mov	 ecx, DWORD PTR _Y0$[ebp]
  00e30	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e33	0f b6 c9	 movzx	 ecx, cl
  00e36	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00e3d	33 d9		 xor	 ebx, ecx
  00e3f	0f b6 ca	 movzx	 ecx, dl
  00e42	c1 e3 08	 shl	 ebx, 8
  00e45	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00e4c	33 d9		 xor	 ebx, ecx
  00e4e	0f b6 4d fc	 movzx	 ecx, BYTE PTR _Y2$[ebp]
  00e52	c1 e3 08	 shl	 ebx, 8
  00e55	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _FSb[ecx]
  00e5c	33 d9		 xor	 ebx, ecx
  00e5e	33 58 0c	 xor	 ebx, DWORD PTR [eax+12]

; 702  : 
; 703  :     PUT_UINT32_BE( X0, output,  0 );

  00e61	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  00e64	8b 45 10	 mov	 eax, DWORD PTR _output$[ebp]
  00e67	5f		 pop	 edi
  00e68	8b cb		 mov	 ecx, ebx
  00e6a	8b da		 mov	 ebx, edx
  00e6c	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00e6f	88 18		 mov	 BYTE PTR [eax], bl
  00e71	8b da		 mov	 ebx, edx
  00e73	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00e76	88 58 01	 mov	 BYTE PTR [eax+1], bl
  00e79	8b da		 mov	 ebx, edx
  00e7b	c1 eb 08	 shr	 ebx, 8
  00e7e	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 704  :     PUT_UINT32_BE( X1, output,  4 );

  00e81	8b 55 08	 mov	 edx, DWORD PTR _X1$[ebp]
  00e84	88 58 02	 mov	 BYTE PTR [eax+2], bl
  00e87	8b da		 mov	 ebx, edx
  00e89	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00e8c	88 58 04	 mov	 BYTE PTR [eax+4], bl
  00e8f	8b da		 mov	 ebx, edx
  00e91	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00e94	88 58 05	 mov	 BYTE PTR [eax+5], bl
  00e97	8b da		 mov	 ebx, edx
  00e99	c1 eb 08	 shr	 ebx, 8
  00e9c	88 50 07	 mov	 BYTE PTR [eax+7], dl

; 705  :     PUT_UINT32_BE( X2, output,  8 );

  00e9f	8b 55 f8	 mov	 edx, DWORD PTR _X2$[ebp]
  00ea2	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00ea5	8b da		 mov	 ebx, edx
  00ea7	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00eaa	88 58 08	 mov	 BYTE PTR [eax+8], bl
  00ead	8b da		 mov	 ebx, edx
  00eaf	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00eb2	88 58 09	 mov	 BYTE PTR [eax+9], bl
  00eb5	8b da		 mov	 ebx, edx
  00eb7	88 50 0b	 mov	 BYTE PTR [eax+11], dl

; 706  :     PUT_UINT32_BE( X3, output, 12 );

  00eba	8b d1		 mov	 edx, ecx
  00ebc	c1 ea 18	 shr	 edx, 24			; 00000018H
  00ebf	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00ec2	8b d1		 mov	 edx, ecx
  00ec4	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ec7	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  00eca	8b d1		 mov	 edx, ecx
  00ecc	c1 eb 08	 shr	 ebx, 8
  00ecf	c1 ea 08	 shr	 edx, 8
  00ed2	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00ed5	5e		 pop	 esi
  00ed6	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00ed9	88 48 0f	 mov	 BYTE PTR [eax+15], cl
  00edc	5b		 pop	 ebx

; 707  : }

  00edd	c9		 leave
  00ede	c3		 ret	 0
_aes_encrypt ENDP
_TEXT	ENDS
PUBLIC	_aes_decrypt
;	COMDAT _aes_decrypt
_TEXT	SEGMENT
_ctx$ = 8
_input$ = 12
_output$ = 16
_X0$ = 12
_X1$ = -4
_X2$ = -16
_X3$ = 8
_Y0$ = -12
_Y1$ = -20
_Y2$ = -8
_aes_decrypt PROC NEAR					; COMDAT

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 716  :     uint32 *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;
; 717  : 
; 718  :     RK = ctx->drk;
; 719  : 
; 720  :     GET_UINT32_BE( X0, input,  0 ); X0 ^= RK[0];

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	53		 push	 ebx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  0000f	8a 31		 mov	 dh, BYTE PTR [ecx]
  00011	56		 push	 esi
  00012	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00015	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0001a	0f b6 71 02	 movzx	 esi, BYTE PTR [ecx+2]
  0001e	c1 e2 08	 shl	 edx, 8
  00021	0b d6		 or	 edx, esi

; 721  :     GET_UINT32_BE( X1, input,  4 ); X1 ^= RK[1];
; 722  :     GET_UINT32_BE( X2, input,  8 ); X2 ^= RK[2];
; 723  :     GET_UINT32_BE( X3, input, 12 ); X3 ^= RK[3];

  00023	33 db		 xor	 ebx, ebx
  00025	0f b6 71 03	 movzx	 esi, BYTE PTR [ecx+3]
  00029	c1 e2 08	 shl	 edx, 8
  0002c	0b d6		 or	 edx, esi
  0002e	8a 79 0c	 mov	 bh, BYTE PTR [ecx+12]
  00031	33 10		 xor	 edx, DWORD PTR [eax]
  00033	8a 59 0d	 mov	 bl, BYTE PTR [ecx+13]
  00036	0f b6 71 06	 movzx	 esi, BYTE PTR [ecx+6]
  0003a	89 55 0c	 mov	 DWORD PTR _X0$[ebp], edx
  0003d	33 d2		 xor	 edx, edx
  0003f	8a 71 04	 mov	 dh, BYTE PTR [ecx+4]
  00042	57		 push	 edi
  00043	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]

; 724  : 
; 725  : #define AES_RROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)             \
; 726  : {                                                       \
; 727  :     RK += 4;                                            \
; 728  :                                                         \
; 729  :     X0 = RK[0] ^ RT0[ (uint8) ( Y0 >> 24 ) ] ^          \
; 730  :                  RT1[ (uint8) ( Y3 >> 16 ) ] ^          \
; 731  :                  RT2[ (uint8) ( Y2 >>  8 ) ] ^          \
; 732  :                  RT3[ (uint8) ( Y1       ) ];           \
; 733  :                                                         \
; 734  :     X1 = RK[1] ^ RT0[ (uint8) ( Y1 >> 24 ) ] ^          \
; 735  :                  RT1[ (uint8) ( Y0 >> 16 ) ] ^          \
; 736  :                  RT2[ (uint8) ( Y3 >>  8 ) ] ^          \
; 737  :                  RT3[ (uint8) ( Y2       ) ];           \
; 738  :                                                         \
; 739  :     X2 = RK[2] ^ RT0[ (uint8) ( Y2 >> 24 ) ] ^          \
; 740  :                  RT1[ (uint8) ( Y1 >> 16 ) ] ^          \
; 741  :                  RT2[ (uint8) ( Y0 >>  8 ) ] ^          \
; 742  :                  RT3[ (uint8) ( Y3       ) ];           \
; 743  :                                                         \
; 744  :     X3 = RK[3] ^ RT0[ (uint8) ( Y3 >> 24 ) ] ^          \
; 745  :                  RT1[ (uint8) ( Y2 >> 16 ) ] ^          \
; 746  :                  RT2[ (uint8) ( Y1 >>  8 ) ] ^          \
; 747  :                  RT3[ (uint8) ( Y0       ) ];           \
; 748  : }
; 749  : 
; 750  :     AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00046	6a 10		 push	 16			; 00000010H
  00048	c1 e2 08	 shl	 edx, 8
  0004b	0b d6		 or	 edx, esi
  0004d	5f		 pop	 edi
  0004e	0f b6 71 07	 movzx	 esi, BYTE PTR [ecx+7]
  00052	c1 e2 08	 shl	 edx, 8
  00055	0b d6		 or	 edx, esi
  00057	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  0005a	0f b6 71 0a	 movzx	 esi, BYTE PTR [ecx+10]
  0005e	89 55 fc	 mov	 DWORD PTR _X1$[ebp], edx
  00061	33 d2		 xor	 edx, edx
  00063	8a 71 08	 mov	 dh, BYTE PTR [ecx+8]
  00066	8a 51 09	 mov	 dl, BYTE PTR [ecx+9]
  00069	c1 e2 08	 shl	 edx, 8
  0006c	0b d6		 or	 edx, esi
  0006e	0f b6 71 0b	 movzx	 esi, BYTE PTR [ecx+11]
  00072	c1 e2 08	 shl	 edx, 8
  00075	0b d6		 or	 edx, esi
  00077	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  0007a	33 50 08	 xor	 edx, DWORD PTR [eax+8]
  0007d	c1 e3 08	 shl	 ebx, 8
  00080	89 55 f0	 mov	 DWORD PTR _X2$[ebp], edx
  00083	0f b6 51 0e	 movzx	 edx, BYTE PTR [ecx+14]
  00087	0f b6 49 0f	 movzx	 ecx, BYTE PTR [ecx+15]
  0008b	0b da		 or	 ebx, edx
  0008d	8b 55 f0	 mov	 edx, DWORD PTR _X2$[ebp]
  00090	c1 e3 08	 shl	 ebx, 8
  00093	0b d9		 or	 ebx, ecx
  00095	33 58 0c	 xor	 ebx, DWORD PTR [eax+12]
  00098	03 c7		 add	 eax, edi
  0009a	c1 ea 08	 shr	 edx, 8
  0009d	8b cb		 mov	 ecx, ebx
  0009f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000a2	0f b6 c9	 movzx	 ecx, cl
  000a5	0f b6 d2	 movzx	 edx, dl
  000a8	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT1[ecx*4]
  000af	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  000b6	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  000b9	c1 ea 18	 shr	 edx, 24			; 00000018H
  000bc	c1 ee 18	 shr	 esi, 24			; 00000018H
  000bf	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT0[edx*4]
  000c6	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  000ca	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  000d1	33 08		 xor	 ecx, DWORD PTR [eax]
  000d3	89 4d f4	 mov	 DWORD PTR _Y0$[ebp], ecx
  000d6	8b cb		 mov	 ecx, ebx
  000d8	c1 e9 08	 shr	 ecx, 8
  000db	0f b6 c9	 movzx	 ecx, cl
  000de	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _RT2[ecx*4]
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  000e8	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT0[esi*4]
  000ef	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000f2	0f b6 c9	 movzx	 ecx, cl
  000f5	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _RT1[ecx*4]
  000fc	0f b6 4d f0	 movzx	 ecx, BYTE PTR _X2$[ebp]
  00100	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _RT3[ecx*4]
  00107	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  0010d	8b 75 f0	 mov	 esi, DWORD PTR _X2$[ebp]
  00110	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00113	c1 ee 18	 shr	 esi, 24			; 00000018H
  00116	0f b6 c9	 movzx	 ecx, cl
  00119	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00120	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  0012a	c1 e9 08	 shr	 ecx, 8
  0012d	0f b6 c9	 movzx	 ecx, cl
  00130	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00137	0f b6 cb	 movzx	 ecx, bl
  0013a	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0013d	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00144	8b 4d f0	 mov	 ecx, DWORD PTR _X2$[ebp]
  00147	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0014a	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  0014d	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00150	0f b6 f1	 movzx	 esi, cl
  00153	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ebx*4]
  0015a	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  0015d	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]
  00164	c1 eb 08	 shr	 ebx, 8
  00167	0f b6 f3	 movzx	 esi, bl
  0016a	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[esi*4]
  00171	0f b6 75 0c	 movzx	 esi, BYTE PTR _X0$[ebp]
  00175	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[esi*4]
  0017c	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]

; 751  :     AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  0017f	03 c7		 add	 eax, edi
  00181	8b d9		 mov	 ebx, ecx
  00183	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00186	0f b6 f3	 movzx	 esi, bl
  00189	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  0018c	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  00193	c1 eb 08	 shr	 ebx, 8
  00196	0f b6 db	 movzx	 ebx, bl
  00199	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  001a0	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  001a3	c1 eb 18	 shr	 ebx, 24			; 00000018H
  001a6	89 75 0c	 mov	 DWORD PTR 12+[ebp], esi
  001a9	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  001b0	0f b6 da	 movzx	 ebx, dl
  001b3	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  001ba	8b d9		 mov	 ebx, ecx
  001bc	c1 eb 08	 shr	 ebx, 8
  001bf	33 30		 xor	 esi, DWORD PTR [eax]
  001c1	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  001c4	0f b6 f3	 movzx	 esi, bl
  001c7	8b da		 mov	 ebx, edx
  001c9	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  001d0	c1 eb 18	 shr	 ebx, 24			; 00000018H
  001d3	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  001da	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  001dd	c1 eb 10	 shr	 ebx, 16			; 00000010H
  001e0	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  001e3	0f b6 f3	 movzx	 esi, bl
  001e6	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  001ea	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  001f1	31 75 ec	 xor	 DWORD PTR -20+[ebp], esi
  001f4	8b 75 ec	 mov	 esi, DWORD PTR -20+[ebp]
  001f7	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  001fe	8b da		 mov	 ebx, edx
  00200	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00203	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00206	0f b6 db	 movzx	 ebx, bl
  00209	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  0020c	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  0020f	c1 ee 18	 shr	 esi, 24			; 00000018H
  00212	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00219	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  00220	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  00223	c1 eb 08	 shr	 ebx, 8
  00226	0f b6 db	 movzx	 ebx, bl
  00229	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  0022c	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00233	0f b6 d9	 movzx	 ebx, cl
  00236	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0023d	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00240	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00243	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00246	89 75 f0	 mov	 DWORD PTR _X2$[ebp], esi
  00249	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00250	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00253	0f b6 f3	 movzx	 esi, bl
  00256	c1 ea 08	 shr	 edx, 8
  00259	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]

; 752  :     AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00260	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00263	0f b6 d2	 movzx	 edx, dl
  00266	c1 eb 08	 shr	 ebx, 8
  00269	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  00270	0f b6 55 f4	 movzx	 edx, BYTE PTR _Y0$[ebp]
  00274	0f b6 db	 movzx	 ebx, bl
  00277	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  0027e	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  00281	03 c7		 add	 eax, edi
  00283	8b d1		 mov	 edx, ecx
  00285	c1 ea 10	 shr	 edx, 16			; 00000010H
  00288	0f b6 d2	 movzx	 edx, dl
  0028b	8b 34 95 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[edx*4]
  00292	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  00295	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  0029c	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  0029f	c1 ea 18	 shr	 edx, 24			; 00000018H
  002a2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  002a5	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[edx*4]
  002ac	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  002b0	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[edx*4]
  002b7	8b d1		 mov	 edx, ecx
  002b9	c1 ea 08	 shr	 edx, 8
  002bc	33 30		 xor	 esi, DWORD PTR [eax]
  002be	0f b6 d2	 movzx	 edx, dl
  002c1	89 75 f4	 mov	 DWORD PTR _Y0$[ebp], esi
  002c4	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  002c7	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _RT2[edx*4]
  002ce	c1 ee 18	 shr	 esi, 24			; 00000018H
  002d1	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT0[esi*4]
  002d8	0f b6 f3	 movzx	 esi, bl
  002db	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  002de	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT1[esi*4]
  002e5	0f b6 75 f0	 movzx	 esi, BYTE PTR _X2$[ebp]
  002e9	c1 eb 10	 shr	 ebx, 16			; 00000010H
  002ec	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT3[esi*4]
  002f3	8b 75 f0	 mov	 esi, DWORD PTR _X2$[ebp]
  002f6	c1 ee 18	 shr	 esi, 24			; 00000018H
  002f9	0f b6 db	 movzx	 ebx, bl
  002fc	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00303	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  00306	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  0030d	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00310	c1 eb 08	 shr	 ebx, 8
  00313	0f b6 db	 movzx	 ebx, bl
  00316	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  00319	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00320	0f b6 d9	 movzx	 ebx, cl
  00323	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00326	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0032d	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00330	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00337	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  0033a	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0033d	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00340	0f b6 f3	 movzx	 esi, bl
  00343	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  00346	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]
  0034d	c1 eb 08	 shr	 ebx, 8
  00350	0f b6 f3	 movzx	 esi, bl
  00353	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[esi*4]
  0035a	0f b6 75 0c	 movzx	 esi, BYTE PTR _X0$[ebp]
  0035e	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[esi*4]
  00365	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]

; 753  :     AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00368	03 c7		 add	 eax, edi
  0036a	8b d9		 mov	 ebx, ecx
  0036c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0036f	0f b6 f3	 movzx	 esi, bl
  00372	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00375	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  0037c	c1 eb 08	 shr	 ebx, 8
  0037f	0f b6 db	 movzx	 ebx, bl
  00382	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00389	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  0038c	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0038f	89 75 0c	 mov	 DWORD PTR 12+[ebp], esi
  00392	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00399	0f b6 da	 movzx	 ebx, dl
  0039c	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  003a3	8b d9		 mov	 ebx, ecx
  003a5	c1 eb 08	 shr	 ebx, 8
  003a8	33 30		 xor	 esi, DWORD PTR [eax]
  003aa	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  003ad	0f b6 f3	 movzx	 esi, bl
  003b0	8b da		 mov	 ebx, edx
  003b2	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  003b9	c1 eb 18	 shr	 ebx, 24			; 00000018H
  003bc	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  003c3	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  003c6	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003c9	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  003cc	0f b6 f3	 movzx	 esi, bl
  003cf	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  003d3	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  003da	31 75 ec	 xor	 DWORD PTR -20+[ebp], esi
  003dd	8b 75 ec	 mov	 esi, DWORD PTR -20+[ebp]
  003e0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  003e7	8b da		 mov	 ebx, edx
  003e9	c1 eb 10	 shr	 ebx, 16			; 00000010H
  003ec	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  003ef	0f b6 db	 movzx	 ebx, bl
  003f2	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  003f5	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  003f8	c1 ee 18	 shr	 esi, 24			; 00000018H
  003fb	c1 ea 08	 shr	 edx, 8
  003fe	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00405	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  0040c	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  0040f	c1 eb 08	 shr	 ebx, 8
  00412	0f b6 db	 movzx	 ebx, bl
  00415	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  00418	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  0041f	0f b6 d9	 movzx	 ebx, cl
  00422	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00425	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0042c	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  0042f	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00436	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00439	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0043c	89 75 f0	 mov	 DWORD PTR _X2$[ebp], esi
  0043f	0f b6 f3	 movzx	 esi, bl
  00442	0f b6 d2	 movzx	 edx, dl
  00445	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]

; 754  :     AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  0044c	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  0044f	c1 eb 08	 shr	 ebx, 8
  00452	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  00459	0f b6 55 f4	 movzx	 edx, BYTE PTR _Y0$[ebp]
  0045d	0f b6 db	 movzx	 ebx, bl
  00460	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  00467	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  0046a	03 c7		 add	 eax, edi
  0046c	8b d1		 mov	 edx, ecx
  0046e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00471	0f b6 d2	 movzx	 edx, dl
  00474	8b 34 95 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[edx*4]
  0047b	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  0047e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00485	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00488	c1 ea 18	 shr	 edx, 24			; 00000018H
  0048b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0048e	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[edx*4]
  00495	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  00499	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[edx*4]
  004a0	8b d1		 mov	 edx, ecx
  004a2	c1 ea 08	 shr	 edx, 8
  004a5	33 30		 xor	 esi, DWORD PTR [eax]
  004a7	0f b6 d2	 movzx	 edx, dl
  004aa	89 75 f4	 mov	 DWORD PTR _Y0$[ebp], esi
  004ad	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  004b0	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _RT2[edx*4]
  004b7	c1 ee 18	 shr	 esi, 24			; 00000018H
  004ba	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT0[esi*4]
  004c1	0f b6 f3	 movzx	 esi, bl
  004c4	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT1[esi*4]
  004cb	0f b6 75 f0	 movzx	 esi, BYTE PTR _X2$[ebp]
  004cf	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT3[esi*4]
  004d6	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  004d9	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  004dc	8b 75 f0	 mov	 esi, DWORD PTR _X2$[ebp]
  004df	c1 eb 10	 shr	 ebx, 16			; 00000010H
  004e2	c1 ee 18	 shr	 esi, 24			; 00000018H
  004e5	0f b6 db	 movzx	 ebx, bl
  004e8	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  004ef	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  004f6	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  004f9	c1 eb 08	 shr	 ebx, 8
  004fc	0f b6 db	 movzx	 ebx, bl
  004ff	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  00502	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00509	0f b6 d9	 movzx	 ebx, cl
  0050c	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0050f	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  00516	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00519	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00520	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00523	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00526	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00529	0f b6 f3	 movzx	 esi, bl
  0052c	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  0052f	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]
  00536	c1 eb 08	 shr	 ebx, 8
  00539	0f b6 f3	 movzx	 esi, bl
  0053c	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[esi*4]
  00543	0f b6 75 0c	 movzx	 esi, BYTE PTR _X0$[ebp]
  00547	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[esi*4]
  0054e	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]

; 755  :     AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00551	03 c7		 add	 eax, edi
  00553	8b d9		 mov	 ebx, ecx
  00555	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00558	0f b6 f3	 movzx	 esi, bl
  0055b	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  0055e	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  00565	c1 eb 08	 shr	 ebx, 8
  00568	0f b6 db	 movzx	 ebx, bl
  0056b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00572	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  00575	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00578	89 75 0c	 mov	 DWORD PTR 12+[ebp], esi
  0057b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00582	0f b6 da	 movzx	 ebx, dl
  00585	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0058c	8b d9		 mov	 ebx, ecx
  0058e	c1 eb 08	 shr	 ebx, 8
  00591	33 30		 xor	 esi, DWORD PTR [eax]
  00593	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  00596	0f b6 f3	 movzx	 esi, bl
  00599	8b da		 mov	 ebx, edx
  0059b	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  005a2	c1 eb 18	 shr	 ebx, 24			; 00000018H
  005a5	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  005ac	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  005af	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005b2	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  005b5	0f b6 f3	 movzx	 esi, bl
  005b8	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  005bc	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  005c3	31 75 ec	 xor	 DWORD PTR -20+[ebp], esi
  005c6	8b 75 ec	 mov	 esi, DWORD PTR -20+[ebp]
  005c9	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  005d0	8b da		 mov	 ebx, edx
  005d2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005d5	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  005d8	0f b6 db	 movzx	 ebx, bl
  005db	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  005de	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  005e1	c1 ee 18	 shr	 esi, 24			; 00000018H
  005e4	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  005eb	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  005f2	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  005f5	c1 eb 08	 shr	 ebx, 8
  005f8	0f b6 db	 movzx	 ebx, bl
  005fb	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  005fe	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00605	0f b6 d9	 movzx	 ebx, cl
  00608	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0060f	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00612	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00615	89 75 f0	 mov	 DWORD PTR _X2$[ebp], esi
  00618	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  0061b	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00622	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00625	0f b6 f3	 movzx	 esi, bl
  00628	c1 ea 08	 shr	 edx, 8
  0062b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]

; 756  :     AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00632	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00635	0f b6 d2	 movzx	 edx, dl
  00638	c1 eb 08	 shr	 ebx, 8
  0063b	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  00642	0f b6 55 f4	 movzx	 edx, BYTE PTR _Y0$[ebp]
  00646	0f b6 db	 movzx	 ebx, bl
  00649	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  00650	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  00653	03 c7		 add	 eax, edi
  00655	8b d1		 mov	 edx, ecx
  00657	c1 ea 10	 shr	 edx, 16			; 00000010H
  0065a	0f b6 d2	 movzx	 edx, dl
  0065d	8b 34 95 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[edx*4]
  00664	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  00667	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  0066e	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00671	c1 ea 18	 shr	 edx, 24			; 00000018H
  00674	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00677	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[edx*4]
  0067e	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  00682	33 34 95 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[edx*4]
  00689	8b d1		 mov	 edx, ecx
  0068b	c1 ea 08	 shr	 edx, 8
  0068e	33 30		 xor	 esi, DWORD PTR [eax]
  00690	0f b6 d2	 movzx	 edx, dl
  00693	89 75 f4	 mov	 DWORD PTR _Y0$[ebp], esi
  00696	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  00699	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _RT2[edx*4]
  006a0	c1 ee 18	 shr	 esi, 24			; 00000018H
  006a3	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT0[esi*4]
  006aa	0f b6 f3	 movzx	 esi, bl
  006ad	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  006b0	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT1[esi*4]
  006b7	0f b6 75 f0	 movzx	 esi, BYTE PTR _X2$[ebp]
  006bb	c1 eb 10	 shr	 ebx, 16			; 00000010H
  006be	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT3[esi*4]
  006c5	8b 75 f0	 mov	 esi, DWORD PTR _X2$[ebp]
  006c8	c1 ee 18	 shr	 esi, 24			; 00000018H
  006cb	0f b6 db	 movzx	 ebx, bl
  006ce	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  006d5	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  006d8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  006df	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  006e2	c1 eb 08	 shr	 ebx, 8
  006e5	0f b6 db	 movzx	 ebx, bl
  006e8	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  006eb	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  006f2	0f b6 d9	 movzx	 ebx, cl
  006f5	c1 e9 18	 shr	 ecx, 24			; 00000018H
  006f8	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  006ff	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00702	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00709	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  0070c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0070f	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00712	0f b6 f3	 movzx	 esi, bl
  00715	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  00718	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]
  0071f	c1 eb 08	 shr	 ebx, 8
  00722	0f b6 f3	 movzx	 esi, bl
  00725	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[esi*4]
  0072c	0f b6 75 0c	 movzx	 esi, BYTE PTR _X0$[ebp]
  00730	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[esi*4]
  00737	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]

; 757  :     AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  0073a	03 c7		 add	 eax, edi
  0073c	8b d9		 mov	 ebx, ecx
  0073e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00741	0f b6 f3	 movzx	 esi, bl
  00744	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00747	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  0074e	c1 eb 08	 shr	 ebx, 8
  00751	0f b6 db	 movzx	 ebx, bl
  00754	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  0075b	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  0075e	89 75 0c	 mov	 DWORD PTR 12+[ebp], esi
  00761	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00764	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  0076b	0f b6 da	 movzx	 ebx, dl
  0076e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  00775	8b d9		 mov	 ebx, ecx
  00777	c1 eb 08	 shr	 ebx, 8
  0077a	33 30		 xor	 esi, DWORD PTR [eax]
  0077c	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  0077f	0f b6 f3	 movzx	 esi, bl
  00782	8b da		 mov	 ebx, edx
  00784	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  0078b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0078e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00795	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  00798	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0079b	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  0079e	0f b6 f3	 movzx	 esi, bl
  007a1	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  007a5	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  007ac	31 75 ec	 xor	 DWORD PTR -20+[ebp], esi
  007af	8b 75 ec	 mov	 esi, DWORD PTR -20+[ebp]
  007b2	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  007b9	8b da		 mov	 ebx, edx
  007bb	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007be	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  007c1	0f b6 db	 movzx	 ebx, bl
  007c4	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  007c7	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  007ca	c1 ee 18	 shr	 esi, 24			; 00000018H
  007cd	c1 ea 08	 shr	 edx, 8
  007d0	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  007d7	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  007de	8b 5d f4	 mov	 ebx, DWORD PTR _Y0$[ebp]
  007e1	c1 eb 08	 shr	 ebx, 8
  007e4	0f b6 db	 movzx	 ebx, bl
  007e7	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  007ea	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  007f1	0f b6 d9	 movzx	 ebx, cl
  007f4	c1 e9 18	 shr	 ecx, 24			; 00000018H
  007f7	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  007fe	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00801	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  00808	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  0080b	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0080e	89 75 f0	 mov	 DWORD PTR _X2$[ebp], esi
  00811	0f b6 f3	 movzx	 esi, bl
  00814	0f b6 d2	 movzx	 edx, dl
  00817	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]

; 758  :     AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  0081e	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  00821	c1 eb 08	 shr	 ebx, 8
  00824	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  0082b	0f b6 55 f4	 movzx	 edx, BYTE PTR _Y0$[ebp]
  0082f	0f b6 f3	 movzx	 esi, bl
  00832	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  00839	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  0083c	03 c7		 add	 eax, edi
  0083e	8b d1		 mov	 edx, ecx
  00840	8b d9		 mov	 ebx, ecx
  00842	c1 ea 10	 shr	 edx, 16			; 00000010H
  00845	0f b6 d2	 movzx	 edx, dl
  00848	c1 eb 08	 shr	 ebx, 8
  0084b	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR _RT1[edx*4]
  00852	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT2[esi*4]
  00859	8b 75 0c	 mov	 esi, DWORD PTR _X0$[ebp]
  0085c	c1 ee 18	 shr	 esi, 24			; 00000018H
  0085f	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT0[esi*4]
  00866	0f b6 75 fc	 movzx	 esi, BYTE PTR _X1$[ebp]
  0086a	33 14 b5 00 00
	00 00		 xor	 edx, DWORD PTR _RT3[esi*4]
  00871	0f b6 f3	 movzx	 esi, bl
  00874	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  00877	33 10		 xor	 edx, DWORD PTR [eax]
  00879	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  00880	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00883	89 55 f4	 mov	 DWORD PTR _Y0$[ebp], edx
  00886	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  0088d	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  00890	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00893	89 75 ec	 mov	 DWORD PTR -20+[ebp], esi
  00896	0f b6 f3	 movzx	 esi, bl
  00899	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  008a0	31 75 ec	 xor	 DWORD PTR -20+[ebp], esi
  008a3	0f b6 5d f0	 movzx	 ebx, BYTE PTR _X2$[ebp]
  008a7	8b 75 ec	 mov	 esi, DWORD PTR -20+[ebp]
  008aa	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  008b1	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  008b4	c1 eb 10	 shr	 ebx, 16			; 00000010H
  008b7	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  008ba	0f b6 db	 movzx	 ebx, bl
  008bd	89 75 ec	 mov	 DWORD PTR _Y1$[ebp], esi
  008c0	8b 75 f0	 mov	 esi, DWORD PTR _X2$[ebp]
  008c3	c1 ee 18	 shr	 esi, 24			; 00000018H
  008c6	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  008cd	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  008d4	8b 5d 0c	 mov	 ebx, DWORD PTR _X0$[ebp]
  008d7	c1 eb 08	 shr	 ebx, 8
  008da	0f b6 db	 movzx	 ebx, bl
  008dd	89 75 f8	 mov	 DWORD PTR -8+[ebp], esi
  008e0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  008e7	0f b6 d9	 movzx	 ebx, cl
  008ea	c1 e9 18	 shr	 ecx, 24			; 00000018H
  008ed	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  008f4	8b 5d f0	 mov	 ebx, DWORD PTR _X2$[ebp]
  008f7	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT0[ecx*4]
  008fe	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00901	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00904	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00907	0f b6 f3	 movzx	 esi, bl
  0090a	8b 5d fc	 mov	 ebx, DWORD PTR _X1$[ebp]
  0090d	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT1[esi*4]
  00914	c1 eb 08	 shr	 ebx, 8
  00917	0f b6 f3	 movzx	 esi, bl
  0091a	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[esi*4]
  00921	0f b6 75 0c	 movzx	 esi, BYTE PTR _X0$[ebp]
  00925	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[esi*4]

; 759  : 
; 760  :     if( ctx->nr > 10 )

  0092c	8b 75 08	 mov	 esi, DWORD PTR _ctx$[ebp]
  0092f	8b b6 00 02 00
	00		 mov	 esi, DWORD PTR [esi+512]
  00935	33 48 0c	 xor	 ecx, DWORD PTR [eax+12]
  00938	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0093b	89 75 f0	 mov	 DWORD PTR -16+[ebp], esi
  0093e	0f 8e f7 01 00
	00		 jle	 $L928

; 761  :     {
; 762  :         AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00944	8b d9		 mov	 ebx, ecx
  00946	03 c7		 add	 eax, edi
  00948	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0094b	0f b6 f3	 movzx	 esi, bl
  0094e	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00951	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  00958	c1 eb 08	 shr	 ebx, 8
  0095b	0f b6 db	 movzx	 ebx, bl
  0095e	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00965	8b da		 mov	 ebx, edx
  00967	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0096a	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00971	0f b6 5d ec	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  00975	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00978	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  0097f	8b d9		 mov	 ebx, ecx
  00981	c1 eb 08	 shr	 ebx, 8
  00984	33 30		 xor	 esi, DWORD PTR [eax]
  00986	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  00989	0f b6 f3	 movzx	 esi, bl
  0098c	8b 5d ec	 mov	 ebx, DWORD PTR _Y1$[ebp]
  0098f	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  00996	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00999	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  009a0	8b da		 mov	 ebx, edx
  009a2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009a5	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  009a8	0f b6 f3	 movzx	 esi, bl
  009ab	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  009af	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  009b6	31 75 08	 xor	 DWORD PTR 8+[ebp], esi
  009b9	8b 75 08	 mov	 esi, DWORD PTR 8+[ebp]
  009bc	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  009c3	8b 5d ec	 mov	 ebx, DWORD PTR _Y1$[ebp]
  009c6	c1 eb 10	 shr	 ebx, 16			; 00000010H
  009c9	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  009cc	0f b6 db	 movzx	 ebx, bl
  009cf	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  009d2	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  009d5	c1 ee 18	 shr	 esi, 24			; 00000018H
  009d8	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  009df	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  009e6	8b da		 mov	 ebx, edx
  009e8	c1 eb 08	 shr	 ebx, 8
  009eb	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  009ee	0f b6 f3	 movzx	 esi, bl
  009f1	8b 5d 08	 mov	 ebx, DWORD PTR 8+[ebp]
  009f4	33 1c b5 00 00
	00 00		 xor	 ebx, DWORD PTR _RT2[esi*4]
  009fb	0f b6 f1	 movzx	 esi, cl
  009fe	33 1c b5 00 00
	00 00		 xor	 ebx, DWORD PTR _RT3[esi*4]
  00a05	8b f1		 mov	 esi, ecx
  00a07	8b 4d f8	 mov	 ecx, DWORD PTR _Y2$[ebp]
  00a0a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a0d	c1 ee 18	 shr	 esi, 24			; 00000018H
  00a10	0f b6 c9	 movzx	 ecx, cl
  00a13	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00a1a	33 58 08	 xor	 ebx, DWORD PTR [eax+8]
  00a1d	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00a24	8b 4d ec	 mov	 ecx, DWORD PTR _Y1$[ebp]
  00a27	c1 e9 08	 shr	 ecx, 8
  00a2a	0f b6 c9	 movzx	 ecx, cl
  00a2d	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00a30	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00a37	0f b6 ca	 movzx	 ecx, dl

; 763  :         AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00a3a	8b d3		 mov	 edx, ebx
  00a3c	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00a43	c1 ea 08	 shr	 edx, 8
  00a46	33 70 0c	 xor	 esi, DWORD PTR [eax+12]
  00a49	03 c7		 add	 eax, edi
  00a4b	0f b6 d2	 movzx	 edx, dl
  00a4e	8b ce		 mov	 ecx, esi
  00a50	89 75 08	 mov	 DWORD PTR _X3$[ebp], esi
  00a53	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a56	0f b6 c9	 movzx	 ecx, cl
  00a59	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT1[ecx*4]
  00a60	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  00a67	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  00a6a	c1 ea 18	 shr	 edx, 24			; 00000018H
  00a6d	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT0[edx*4]
  00a74	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  00a78	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  00a7f	33 08		 xor	 ecx, DWORD PTR [eax]
  00a81	8b d1		 mov	 edx, ecx
  00a83	8b ce		 mov	 ecx, esi
  00a85	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  00a88	89 55 f4	 mov	 DWORD PTR _Y0$[ebp], edx
  00a8b	c1 e9 08	 shr	 ecx, 8
  00a8e	0f b6 c9	 movzx	 ecx, cl
  00a91	c1 ee 18	 shr	 esi, 24			; 00000018H
  00a94	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT2[ecx*4]
  00a9b	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT0[esi*4]
  00aa2	8b f1		 mov	 esi, ecx
  00aa4	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00aa7	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00aaa	0f b6 c9	 movzx	 ecx, cl
  00aad	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00ab4	0f b6 cb	 movzx	 ecx, bl
  00ab7	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00abe	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  00ac1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ac4	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00ac7	0f b6 c9	 movzx	 ecx, cl
  00aca	89 75 ec	 mov	 DWORD PTR _Y1$[ebp], esi
  00acd	8b f3		 mov	 esi, ebx
  00acf	c1 ee 18	 shr	 esi, 24			; 00000018H
  00ad2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00ad5	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00adc	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00ae3	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00ae6	c1 e9 08	 shr	 ecx, 8
  00ae9	0f b6 c9	 movzx	 ecx, cl
  00aec	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00af3	0f b6 4d 08	 movzx	 ecx, BYTE PTR _X3$[ebp]
  00af7	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00afe	0f b6 cb	 movzx	 ecx, bl
  00b01	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00b04	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00b07	8b 75 08	 mov	 esi, DWORD PTR _X3$[ebp]
  00b0a	c1 ee 18	 shr	 esi, 24			; 00000018H
  00b0d	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00b14	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00b1b	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  00b1e	c1 e9 08	 shr	 ecx, 8
  00b21	0f b6 c9	 movzx	 ecx, cl
  00b24	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00b2b	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _X0$[ebp]
  00b2f	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00b36	33 70 0c	 xor	 esi, DWORD PTR [eax+12]
  00b39	8b ce		 mov	 ecx, esi
$L928:

; 764  :     }
; 765  : 
; 766  :     if( ctx->nr > 12 )

  00b3b	83 7d f0 0c	 cmp	 DWORD PTR -16+[ebp], 12	; 0000000cH
  00b3f	0f 8e f7 01 00
	00		 jle	 $L961

; 767  :     {
; 768  :         AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );

  00b45	8b d9		 mov	 ebx, ecx
  00b47	03 c7		 add	 eax, edi
  00b49	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00b4c	0f b6 f3	 movzx	 esi, bl
  00b4f	8b 5d f8	 mov	 ebx, DWORD PTR _Y2$[ebp]
  00b52	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  00b59	c1 eb 08	 shr	 ebx, 8
  00b5c	0f b6 db	 movzx	 ebx, bl
  00b5f	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ebx*4]
  00b66	8b da		 mov	 ebx, edx
  00b68	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00b6b	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00b72	0f b6 5d ec	 movzx	 ebx, BYTE PTR _Y1$[ebp]
  00b76	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00b79	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  00b80	8b d9		 mov	 ebx, ecx
  00b82	c1 eb 08	 shr	 ebx, 8
  00b85	33 30		 xor	 esi, DWORD PTR [eax]
  00b87	89 75 0c	 mov	 DWORD PTR _X0$[ebp], esi
  00b8a	0f b6 f3	 movzx	 esi, bl
  00b8d	8b 5d ec	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00b90	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT2[esi*4]
  00b97	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00b9a	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT0[ebx*4]
  00ba1	8b da		 mov	 ebx, edx
  00ba3	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00ba6	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00ba9	0f b6 f3	 movzx	 esi, bl
  00bac	0f b6 5d f8	 movzx	 ebx, BYTE PTR _Y2$[ebp]
  00bb0	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT1[esi*4]
  00bb7	31 75 08	 xor	 DWORD PTR 8+[ebp], esi
  00bba	8b 75 08	 mov	 esi, DWORD PTR 8+[ebp]
  00bbd	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ebx*4]
  00bc4	8b 5d ec	 mov	 ebx, DWORD PTR _Y1$[ebp]
  00bc7	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00bca	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00bcd	0f b6 db	 movzx	 ebx, bl
  00bd0	89 75 fc	 mov	 DWORD PTR _X1$[ebp], esi
  00bd3	8b 75 f8	 mov	 esi, DWORD PTR _Y2$[ebp]
  00bd6	c1 ee 18	 shr	 esi, 24			; 00000018H
  00bd9	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00be0	33 34 9d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ebx*4]
  00be7	8b da		 mov	 ebx, edx
  00be9	c1 eb 08	 shr	 ebx, 8
  00bec	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00bef	0f b6 f3	 movzx	 esi, bl
  00bf2	8b 5d 08	 mov	 ebx, DWORD PTR 8+[ebp]
  00bf5	33 1c b5 00 00
	00 00		 xor	 ebx, DWORD PTR _RT2[esi*4]
  00bfc	0f b6 f1	 movzx	 esi, cl
  00bff	33 1c b5 00 00
	00 00		 xor	 ebx, DWORD PTR _RT3[esi*4]
  00c06	8b f1		 mov	 esi, ecx
  00c08	8b 4d f8	 mov	 ecx, DWORD PTR _Y2$[ebp]
  00c0b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c0e	c1 ee 18	 shr	 esi, 24			; 00000018H
  00c11	0f b6 c9	 movzx	 ecx, cl
  00c14	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00c1b	33 58 08	 xor	 ebx, DWORD PTR [eax+8]
  00c1e	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00c25	8b 4d ec	 mov	 ecx, DWORD PTR _Y1$[ebp]
  00c28	c1 e9 08	 shr	 ecx, 8
  00c2b	0f b6 c9	 movzx	 ecx, cl
  00c2e	89 75 08	 mov	 DWORD PTR 8+[ebp], esi
  00c31	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00c38	0f b6 ca	 movzx	 ecx, dl

; 769  :         AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

  00c3b	8b d3		 mov	 edx, ebx
  00c3d	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00c44	c1 ea 08	 shr	 edx, 8
  00c47	33 70 0c	 xor	 esi, DWORD PTR [eax+12]
  00c4a	03 c7		 add	 eax, edi
  00c4c	0f b6 d2	 movzx	 edx, dl
  00c4f	8b ce		 mov	 ecx, esi
  00c51	89 75 08	 mov	 DWORD PTR _X3$[ebp], esi
  00c54	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c57	0f b6 c9	 movzx	 ecx, cl
  00c5a	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT1[ecx*4]
  00c61	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT2[edx*4]
  00c68	8b 55 0c	 mov	 edx, DWORD PTR _X0$[ebp]
  00c6b	c1 ea 18	 shr	 edx, 24			; 00000018H
  00c6e	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT0[edx*4]
  00c75	0f b6 55 fc	 movzx	 edx, BYTE PTR _X1$[ebp]
  00c79	33 0c 95 00 00
	00 00		 xor	 ecx, DWORD PTR _RT3[edx*4]
  00c80	33 08		 xor	 ecx, DWORD PTR [eax]
  00c82	8b d1		 mov	 edx, ecx
  00c84	8b ce		 mov	 ecx, esi
  00c86	8b 75 fc	 mov	 esi, DWORD PTR _X1$[ebp]
  00c89	89 55 f4	 mov	 DWORD PTR _Y0$[ebp], edx
  00c8c	c1 e9 08	 shr	 ecx, 8
  00c8f	0f b6 c9	 movzx	 ecx, cl
  00c92	c1 ee 18	 shr	 esi, 24			; 00000018H
  00c95	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _RT2[ecx*4]
  00c9c	33 0c b5 00 00
	00 00		 xor	 ecx, DWORD PTR _RT0[esi*4]
  00ca3	8b f1		 mov	 esi, ecx
  00ca5	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00ca8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00cab	0f b6 c9	 movzx	 ecx, cl
  00cae	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00cb5	0f b6 cb	 movzx	 ecx, bl
  00cb8	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00cbf	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  00cc2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00cc5	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  00cc8	0f b6 c9	 movzx	 ecx, cl
  00ccb	89 75 ec	 mov	 DWORD PTR _Y1$[ebp], esi
  00cce	8b f3		 mov	 esi, ebx
  00cd0	c1 ee 18	 shr	 esi, 24			; 00000018H
  00cd3	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00cd6	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00cdd	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00ce4	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00ce7	c1 e9 08	 shr	 ecx, 8
  00cea	0f b6 c9	 movzx	 ecx, cl
  00ced	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00cf4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _X3$[ebp]
  00cf8	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00cff	0f b6 cb	 movzx	 ecx, bl
  00d02	33 70 08	 xor	 esi, DWORD PTR [eax+8]
  00d05	89 75 f8	 mov	 DWORD PTR _Y2$[ebp], esi
  00d08	8b 75 08	 mov	 esi, DWORD PTR _X3$[ebp]
  00d0b	c1 ee 18	 shr	 esi, 24			; 00000018H
  00d0e	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR _RT0[esi*4]
  00d15	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT1[ecx*4]
  00d1c	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  00d1f	c1 e9 08	 shr	 ecx, 8
  00d22	0f b6 c9	 movzx	 ecx, cl
  00d25	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT2[ecx*4]
  00d2c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _X0$[ebp]
  00d30	33 34 8d 00 00
	00 00		 xor	 esi, DWORD PTR _RT3[ecx*4]
  00d37	33 70 0c	 xor	 esi, DWORD PTR [eax+12]
  00d3a	8b ce		 mov	 ecx, esi
$L961:

; 770  :     }
; 771  : 
; 772  :     RK += 4;
; 773  : 
; 774  :     X0 = RK[0] ^ ( RSb[ (uint8) ( Y0 >> 24 ) ] << 24 ) ^
; 775  :                  ( RSb[ (uint8) ( Y3 >> 16 ) ] << 16 ) ^
; 776  :                  ( RSb[ (uint8) ( Y2 >>  8 ) ] <<  8 ) ^
; 777  :                  ( RSb[ (uint8) ( Y1       ) ]       );

  00d3c	c1 ea 18	 shr	 edx, 24			; 00000018H
  00d3f	33 db		 xor	 ebx, ebx
  00d41	03 c7		 add	 eax, edi
  00d43	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _RSb[edx]
  00d49	8b d1		 mov	 edx, ecx
  00d4b	c1 ea 10	 shr	 edx, 16			; 00000010H
  00d4e	0f b6 d2	 movzx	 edx, dl
  00d51	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00d58	33 da		 xor	 ebx, edx
  00d5a	8b 55 f8	 mov	 edx, DWORD PTR _Y2$[ebp]
  00d5d	c1 ea 08	 shr	 edx, 8
  00d60	0f b6 d2	 movzx	 edx, dl
  00d63	c1 e3 08	 shl	 ebx, 8
  00d66	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00d6d	33 da		 xor	 ebx, edx
  00d6f	0f b6 55 ec	 movzx	 edx, BYTE PTR _Y1$[ebp]
  00d73	c1 e3 08	 shl	 ebx, 8
  00d76	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00d7d	33 da		 xor	 ebx, edx

; 778  : 
; 779  :     X1 = RK[1] ^ ( RSb[ (uint8) ( Y1 >> 24 ) ] << 24 ) ^
; 780  :                  ( RSb[ (uint8) ( Y0 >> 16 ) ] << 16 ) ^
; 781  :                  ( RSb[ (uint8) ( Y3 >>  8 ) ] <<  8 ) ^
; 782  :                  ( RSb[ (uint8) ( Y2       ) ]       );

  00d7f	8b 55 ec	 mov	 edx, DWORD PTR _Y1$[ebp]
  00d82	33 18		 xor	 ebx, DWORD PTR [eax]
  00d84	c1 ea 18	 shr	 edx, 24			; 00000018H
  00d87	89 5d 0c	 mov	 DWORD PTR _X0$[ebp], ebx
  00d8a	33 db		 xor	 ebx, ebx
  00d8c	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _RSb[edx]
  00d92	8b 55 f4	 mov	 edx, DWORD PTR _Y0$[ebp]
  00d95	c1 ea 10	 shr	 edx, 16			; 00000010H
  00d98	0f b6 d2	 movzx	 edx, dl
  00d9b	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00da2	33 da		 xor	 ebx, edx
  00da4	8b d1		 mov	 edx, ecx
  00da6	c1 ea 08	 shr	 edx, 8
  00da9	0f b6 d2	 movzx	 edx, dl
  00dac	c1 e3 08	 shl	 ebx, 8
  00daf	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00db6	33 da		 xor	 ebx, edx
  00db8	0f b6 55 f8	 movzx	 edx, BYTE PTR _Y2$[ebp]
  00dbc	c1 e3 08	 shl	 ebx, 8
  00dbf	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00dc6	33 da		 xor	 ebx, edx

; 783  : 
; 784  :     X2 = RK[2] ^ ( RSb[ (uint8) ( Y2 >> 24 ) ] << 24 ) ^
; 785  :                  ( RSb[ (uint8) ( Y1 >> 16 ) ] << 16 ) ^
; 786  :                  ( RSb[ (uint8) ( Y0 >>  8 ) ] <<  8 ) ^
; 787  :                  ( RSb[ (uint8) ( Y3       ) ]       );

  00dc8	8b 55 f8	 mov	 edx, DWORD PTR _Y2$[ebp]
  00dcb	33 58 04	 xor	 ebx, DWORD PTR [eax+4]
  00dce	c1 ea 18	 shr	 edx, 24			; 00000018H
  00dd1	89 5d fc	 mov	 DWORD PTR _X1$[ebp], ebx
  00dd4	33 db		 xor	 ebx, ebx
  00dd6	8a ba 00 00 00
	00		 mov	 bh, BYTE PTR _RSb[edx]
  00ddc	8b 55 ec	 mov	 edx, DWORD PTR _Y1$[ebp]
  00ddf	c1 ea 10	 shr	 edx, 16			; 00000010H
  00de2	0f b6 d2	 movzx	 edx, dl
  00de5	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00dec	33 da		 xor	 ebx, edx
  00dee	8b 55 f4	 mov	 edx, DWORD PTR _Y0$[ebp]
  00df1	c1 ea 08	 shr	 edx, 8
  00df4	0f b6 d2	 movzx	 edx, dl
  00df7	c1 e3 08	 shl	 ebx, 8
  00dfa	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00e01	33 da		 xor	 ebx, edx
  00e03	0f b6 d1	 movzx	 edx, cl
  00e06	c1 e3 08	 shl	 ebx, 8
  00e09	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _RSb[edx]
  00e10	33 da		 xor	 ebx, edx
  00e12	33 58 08	 xor	 ebx, DWORD PTR [eax+8]

; 788  : 
; 789  :     X3 = RK[3] ^ ( RSb[ (uint8) ( Y3 >> 24 ) ] << 24 ) ^
; 790  :                  ( RSb[ (uint8) ( Y2 >> 16 ) ] << 16 ) ^
; 791  :                  ( RSb[ (uint8) ( Y1 >>  8 ) ] <<  8 ) ^
; 792  :                  ( RSb[ (uint8) ( Y0       ) ]       );

  00e15	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00e18	8b d3		 mov	 edx, ebx
  00e1a	33 db		 xor	 ebx, ebx
  00e1c	8a b9 00 00 00
	00		 mov	 bh, BYTE PTR _RSb[ecx]
  00e22	8b 4d f8	 mov	 ecx, DWORD PTR _Y2$[ebp]
  00e25	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e28	0f b6 c9	 movzx	 ecx, cl
  00e2b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _RSb[ecx]
  00e32	33 d9		 xor	 ebx, ecx
  00e34	8b 4d ec	 mov	 ecx, DWORD PTR _Y1$[ebp]
  00e37	c1 e9 08	 shr	 ecx, 8
  00e3a	0f b6 c9	 movzx	 ecx, cl
  00e3d	c1 e3 08	 shl	 ebx, 8
  00e40	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _RSb[ecx]
  00e47	33 d9		 xor	 ebx, ecx
  00e49	0f b6 4d f4	 movzx	 ecx, BYTE PTR _Y0$[ebp]
  00e4d	c1 e3 08	 shl	 ebx, 8
  00e50	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _RSb[ecx]
  00e57	33 d9		 xor	 ebx, ecx
  00e59	33 58 0c	 xor	 ebx, DWORD PTR [eax+12]

; 793  : 
; 794  :     PUT_UINT32_BE( X0, output,  0 );

  00e5c	8b 4d 0c	 mov	 ecx, DWORD PTR _X0$[ebp]
  00e5f	8b 45 10	 mov	 eax, DWORD PTR _output$[ebp]
  00e62	5f		 pop	 edi
  00e63	89 5d 08	 mov	 DWORD PTR _X3$[ebp], ebx
  00e66	8b d9		 mov	 ebx, ecx
  00e68	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00e6b	88 18		 mov	 BYTE PTR [eax], bl
  00e6d	8b d9		 mov	 ebx, ecx
  00e6f	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00e72	88 58 01	 mov	 BYTE PTR [eax+1], bl
  00e75	8b d9		 mov	 ebx, ecx
  00e77	c1 eb 08	 shr	 ebx, 8
  00e7a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 795  :     PUT_UINT32_BE( X1, output,  4 );

  00e7d	8b 4d fc	 mov	 ecx, DWORD PTR _X1$[ebp]
  00e80	88 58 02	 mov	 BYTE PTR [eax+2], bl
  00e83	8b d9		 mov	 ebx, ecx
  00e85	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00e88	88 58 04	 mov	 BYTE PTR [eax+4], bl
  00e8b	8b d9		 mov	 ebx, ecx
  00e8d	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00e90	88 58 05	 mov	 BYTE PTR [eax+5], bl
  00e93	8b d9		 mov	 ebx, ecx
  00e95	88 48 07	 mov	 BYTE PTR [eax+7], cl

; 796  :     PUT_UINT32_BE( X2, output,  8 );

  00e98	8b ca		 mov	 ecx, edx
  00e9a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00e9d	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00ea0	8b ca		 mov	 ecx, edx
  00ea2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ea5	88 48 09	 mov	 BYTE PTR [eax+9], cl
  00ea8	8b ca		 mov	 ecx, edx
  00eaa	c1 e9 08	 shr	 ecx, 8
  00ead	88 48 0a	 mov	 BYTE PTR [eax+10], cl

; 797  :     PUT_UINT32_BE( X3, output, 12 );

  00eb0	8b 4d 08	 mov	 ecx, DWORD PTR _X3$[ebp]
  00eb3	88 50 0b	 mov	 BYTE PTR [eax+11], dl
  00eb6	8b d1		 mov	 edx, ecx
  00eb8	c1 ea 18	 shr	 edx, 24			; 00000018H
  00ebb	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00ebe	8b d1		 mov	 edx, ecx
  00ec0	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ec3	88 50 0d	 mov	 BYTE PTR [eax+13], dl
  00ec6	8b d1		 mov	 edx, ecx
  00ec8	c1 eb 08	 shr	 ebx, 8
  00ecb	c1 ea 08	 shr	 edx, 8
  00ece	88 58 06	 mov	 BYTE PTR [eax+6], bl
  00ed1	5e		 pop	 esi
  00ed2	88 50 0e	 mov	 BYTE PTR [eax+14], dl
  00ed5	88 48 0f	 mov	 BYTE PTR [eax+15], cl
  00ed8	5b		 pop	 ebx

; 798  : }

  00ed9	c9		 leave
  00eda	c3		 ret	 0
_aes_decrypt ENDP
_TEXT	ENDS
PUBLIC	_aes_cbc_encrypt
EXTRN	_memcpy:NEAR
;	COMDAT _aes_cbc_encrypt
_TEXT	SEGMENT
_ctx$ = 8
_iv$ = 12
_input$ = 16
_output$ = 20
_len$ = 24
_aes_cbc_encrypt PROC NEAR				; COMDAT

; 808  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 809  :     int i;
; 810  : 
; 811  :     while( len > 0 )

  00004	8b 7d 18	 mov	 edi, DWORD PTR _len$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	7e 54		 jle	 SHORT $L1040
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR _output$[ebp]
  0000f	56		 push	 esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR _iv$[ebp]
  00013	2b 75 10	 sub	 esi, DWORD PTR _input$[ebp]
  00016	83 c7 0f	 add	 edi, 15			; 0000000fH
  00019	c1 ef 04	 shr	 edi, 4
$L1039:

; 812  :     {
; 813  :         for( i = 0; i < 16; i++ )

  0001c	8b 45 10	 mov	 eax, DWORD PTR _input$[ebp]
  0001f	8b cb		 mov	 ecx, ebx
  00021	2b c8		 sub	 ecx, eax
  00023	c7 45 18 10 00
	00 00		 mov	 DWORD PTR 24+[ebp], 16	; 00000010H
$L1041:

; 814  :             output[i] = input[i] ^ iv[i];

  0002a	8a 14 06	 mov	 dl, BYTE PTR [esi+eax]
  0002d	32 10		 xor	 dl, BYTE PTR [eax]
  0002f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00032	40		 inc	 eax
  00033	ff 4d 18	 dec	 DWORD PTR 24+[ebp]
  00036	75 f2		 jne	 SHORT $L1041

; 815  : 
; 816  :         aes_encrypt( ctx, output, output );

  00038	53		 push	 ebx
  00039	53		 push	 ebx
  0003a	ff 75 08	 push	 DWORD PTR _ctx$[ebp]
  0003d	e8 00 00 00 00	 call	 _aes_encrypt

; 817  :         memcpy( iv, output, 16 );

  00042	6a 10		 push	 16			; 00000010H
  00044	53		 push	 ebx
  00045	ff 75 0c	 push	 DWORD PTR _iv$[ebp]
  00048	e8 00 00 00 00	 call	 _memcpy

; 818  : 
; 819  :         input  += 16;

  0004d	83 45 10 10	 add	 DWORD PTR _input$[ebp], 16 ; 00000010H
  00051	83 c4 18	 add	 esp, 24			; 00000018H
  00054	83 ee 10	 sub	 esi, 16			; 00000010H

; 820  :         output += 16;

  00057	83 c3 10	 add	 ebx, 16			; 00000010H
  0005a	4f		 dec	 edi
  0005b	75 bf		 jne	 SHORT $L1039
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
$L1040:
  0005f	5f		 pop	 edi

; 821  :         len    -= 16;
; 822  :     }
; 823  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_aes_cbc_encrypt ENDP
_TEXT	ENDS
PUBLIC	_aes_cbc_decrypt
;	COMDAT _aes_cbc_decrypt
_TEXT	SEGMENT
_ctx$ = 8
_iv$ = 12
_input$ = 16
_output$ = 20
_len$ = 24
_temp$ = -16
_aes_cbc_decrypt PROC NEAR				; COMDAT

; 833  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 834  :     int i;
; 835  :     unsigned char temp[16];
; 836  : 
; 837  :     while( len > 0 )

  00006	8b 45 18	 mov	 eax, DWORD PTR _len$[ebp]
  00009	85 c0		 test	 eax, eax
  0000b	7e 58		 jle	 SHORT $L1059
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b 75 14	 mov	 esi, DWORD PTR _output$[ebp]
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR _iv$[ebp]
  00016	8d 58 0f	 lea	 ebx, DWORD PTR [eax+15]
  00019	2b fe		 sub	 edi, esi
  0001b	c1 eb 04	 shr	 ebx, 4
$L1058:

; 838  :     {
; 839  :         memcpy( temp, input, 16 );

  0001e	6a 10		 push	 16			; 00000010H
  00020	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00023	ff 75 10	 push	 DWORD PTR _input$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy

; 840  :         aes_decrypt( ctx, input, output );

  0002c	56		 push	 esi
  0002d	ff 75 10	 push	 DWORD PTR _input$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _ctx$[ebp]
  00033	e8 00 00 00 00	 call	 _aes_decrypt
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	6a 10		 push	 16			; 00000010H
  0003d	58		 pop	 eax
$L1060:

; 841  : 
; 842  :         for( i = 0; i < 16; i++ )
; 843  :             output[i] = output[i] ^ iv[i];

  0003e	8a 0c 37	 mov	 cl, BYTE PTR [edi+esi]
  00041	30 0e		 xor	 BYTE PTR [esi], cl
  00043	46		 inc	 esi
  00044	48		 dec	 eax
  00045	75 f7		 jne	 SHORT $L1060

; 844  : 
; 845  :         memcpy( iv, temp, 16 );

  00047	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  0004a	6a 10		 push	 16			; 00000010H
  0004c	50		 push	 eax
  0004d	ff 75 0c	 push	 DWORD PTR _iv$[ebp]
  00050	e8 00 00 00 00	 call	 _memcpy

; 846  : 
; 847  :         input  += 16;

  00055	83 45 10 10	 add	 DWORD PTR _input$[ebp], 16 ; 00000010H
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 848  :         output += 16;

  0005c	83 ef 10	 sub	 edi, 16			; 00000010H
  0005f	4b		 dec	 ebx
  00060	75 bc		 jne	 SHORT $L1058
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
$L1059:

; 849  :         len    -= 16;
; 850  :     }
; 851  : }

  00065	c9		 leave
  00066	c3		 ret	 0
_aes_cbc_decrypt ENDP
_TEXT	ENDS
PUBLIC	_aes_self_test
;	COMDAT _aes_self_test
_TEXT	SEGMENT
_aes_self_test PROC NEAR				; COMDAT

; 930  :     return( 0 );

  00000	33 c0		 xor	 eax, eax

; 931  : }

  00002	c3		 ret	 0
_aes_self_test ENDP
_TEXT	ENDS
END
