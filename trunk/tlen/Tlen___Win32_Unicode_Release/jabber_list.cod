	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_list.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListInit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListUninit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListWipe
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListWipeSpecial
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListFreeItemInternal
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListExist
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListAdd
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListRemove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListRemoveList
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListRemoveByIndex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListAddResource
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListRemoveResource
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListFindNext
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListGetItemPtr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListFindItemPtrById2
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberListGetItemPtrFromIndex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_JabberListInit
EXTRN	__imp__InitializeCriticalSection@4:NEAR
;	COMDAT _JabberListInit
_TEXT	SEGMENT
_proto$ = 8
_JabberListInit PROC NEAR				; COMDAT

; 32   : 	proto->lists = NULL;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _proto$[esp-4]
  00004	83 a0 1c 01 00
	00 00		 and	 DWORD PTR [eax+284], 0

; 33   : 	proto->listsCount = 0;

  0000b	83 a0 18 01 00
	00 00		 and	 DWORD PTR [eax+280], 0

; 34   : 	InitializeCriticalSection(&proto->csLists);

  00012	05 20 01 00 00	 add	 eax, 288		; 00000120H
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 35   : }

  0001e	c3		 ret	 0
_JabberListInit ENDP
_TEXT	ENDS
PUBLIC	_JabberListUninit
PUBLIC	_JabberListWipe
EXTRN	__imp__DeleteCriticalSection@4:NEAR
;	COMDAT _JabberListUninit
_TEXT	SEGMENT
_proto$ = 8
_JabberListUninit PROC NEAR				; COMDAT

; 38   : {

  00000	56		 push	 esi

; 39   : 	JabberListWipe(proto);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _proto$[esp]
  00005	56		 push	 esi
  00006	e8 00 00 00 00	 call	 _JabberListWipe
  0000b	59		 pop	 ecx

; 40   : 	DeleteCriticalSection(&proto->csLists);

  0000c	81 c6 20 01 00
	00		 add	 esi, 288		; 00000120H
  00012	56		 push	 esi
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00019	5e		 pop	 esi

; 41   : }

  0001a	c3		 ret	 0
_JabberListUninit ENDP
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__LeaveCriticalSection@4:NEAR
EXTRN	_mmi:BYTE
;	COMDAT _JabberListWipe
_TEXT	SEGMENT
_proto$ = 8
_JabberListWipe PROC NEAR				; COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 45   : 	int i;
; 46   : 
; 47   : 	EnterCriticalSection(&proto->csLists);

  00005	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00008	57		 push	 edi
  00009	8d 86 20 01 00
	00		 lea	 eax, DWORD PTR [esi+288]
  0000f	50		 push	 eax
  00010	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 48   : 	for(i=0; i<proto->listsCount; i++)

  00019	33 db		 xor	 ebx, ebx
  0001b	33 ff		 xor	 edi, edi
  0001d	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  00023	7e 1b		 jle	 SHORT $L82931
$L82929:

; 49   : 		JabberListFreeItemInternal(&(proto->lists[i]));

  00025	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  0002b	03 c3		 add	 eax, ebx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _JabberListFreeItemInternal
  00033	47		 inc	 edi
  00034	83 c3 5c	 add	 ebx, 92			; 0000005cH
  00037	3b be 18 01 00
	00		 cmp	 edi, DWORD PTR [esi+280]
  0003d	59		 pop	 ecx
  0003e	7c e5		 jl	 SHORT $L82929
$L82931:

; 50   : 	if (proto->lists != NULL) {

  00040	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00046	8d be 1c 01 00
	00		 lea	 edi, DWORD PTR [esi+284]
  0004c	85 c0		 test	 eax, eax
  0004e	74 0b		 je	 SHORT $L82933

; 51   : 		mir_free(proto->lists);

  00050	50		 push	 eax
  00051	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 52   : 		proto->lists = NULL;

  00057	83 27 00	 and	 DWORD PTR [edi], 0
  0005a	59		 pop	 ecx
$L82933:

; 53   : 	}
; 54   : 	proto->listsCount=0;
; 55   : 	LeaveCriticalSection(&proto->csLists);

  0005b	ff 75 08	 push	 DWORD PTR 8+[ebp]
  0005e	83 a6 18 01 00
	00 00		 and	 DWORD PTR [esi+280], 0
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx

; 56   : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_JabberListWipe ENDP
_TEXT	ENDS
PUBLIC	_JabberListWipeSpecial
EXTRN	__imp__memmove:NEAR
;	COMDAT _JabberListWipeSpecial
_TEXT	SEGMENT
_proto$ = 8
_JabberListWipeSpecial PROC NEAR			; COMDAT

; 59   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 60   : 	int i;
; 61   : 	EnterCriticalSection(&proto->csLists);

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _proto$[esp+8]
  00007	57		 push	 edi
  00008	8d ae 20 01 00
	00		 lea	 ebp, DWORD PTR [esi+288]
  0000e	55		 push	 ebp
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 62   : 	for(i=0; i<proto->listsCount; i++) {

  00015	33 db		 xor	 ebx, ebx
  00017	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  0001d	7e 56		 jle	 SHORT $L82941

; 60   : 	int i;
; 61   : 	EnterCriticalSection(&proto->csLists);

  0001f	33 ff		 xor	 edi, edi
$L82939:

; 63   : 		if (proto->lists[i].list != LIST_FILE && proto->lists[i].list != LIST_VOICE) {

  00021	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00027	03 c7		 add	 eax, edi
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	83 f9 02	 cmp	 ecx, 2
  0002e	74 39		 je	 SHORT $L82940
  00030	83 f9 05	 cmp	 ecx, 5
  00033	74 34		 je	 SHORT $L82940

; 64   : 			JabberListFreeItemInternal(&(proto->lists[i]));

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _JabberListFreeItemInternal

; 65   : 			proto->listsCount--;

  0003b	ff 8e 18 01 00
	00		 dec	 DWORD PTR [esi+280]
  00041	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]

; 66   : 			memmove(proto->lists+i, proto->lists+i+1, sizeof(JABBER_LIST_ITEM)*(proto->listsCount-i));

  00047	6b c0 5c	 imul	 eax, 92			; 0000005cH
  0004a	8b 8e 1c 01 00
	00		 mov	 ecx, DWORD PTR [esi+284]
  00050	2b c7		 sub	 eax, edi
  00052	50		 push	 eax
  00053	8d 44 0f 5c	 lea	 eax, DWORD PTR [edi+ecx+92]
  00057	50		 push	 eax
  00058	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00062	83 c4 10	 add	 esp, 16			; 00000010H

; 67   : 			i--;

  00065	4b		 dec	 ebx
  00066	83 ef 5c	 sub	 edi, 92			; 0000005cH
$L82940:
  00069	43		 inc	 ebx
  0006a	83 c7 5c	 add	 edi, 92			; 0000005cH
  0006d	3b 9e 18 01 00
	00		 cmp	 ebx, DWORD PTR [esi+280]
  00073	7c ac		 jl	 SHORT $L82939
$L82941:

; 68   : 		}
; 69   : 	}
; 70   : 	proto->lists = (JABBER_LIST_ITEM *) mir_realloc(proto->lists, sizeof(JABBER_LIST_ITEM)*proto->listsCount);

  00075	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]
  0007b	8d be 1c 01 00
	00		 lea	 edi, DWORD PTR [esi+284]
  00081	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00084	50		 push	 eax
  00085	ff 37		 push	 DWORD PTR [edi]
  00087	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  0008d	59		 pop	 ecx
  0008e	89 07		 mov	 DWORD PTR [edi], eax
  00090	59		 pop	 ecx

; 71   : 	LeaveCriticalSection(&proto->csLists);

  00091	55		 push	 ebp
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx

; 72   : }

  0009c	c3		 ret	 0
_JabberListWipeSpecial ENDP
_TEXT	ENDS
;	COMDAT _JabberListFreeItemInternal
_TEXT	SEGMENT
_item$ = 8
_JabberListFreeItemInternal PROC NEAR			; COMDAT

; 75   : {

  00000	56		 push	 esi

; 76   : 	if (item == NULL)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _item$[esp]
  00005	85 f6		 test	 esi, esi
  00007	0f 84 b4 00 00
	00		 je	 $L82962

; 77   : 		return;
; 78   : 
; 79   : 	if (item->jid) mir_free(item->jid);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	85 c0		 test	 eax, eax
  00012	74 08		 je	 SHORT $L82951
  00014	50		 push	 eax
  00015	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0001b	59		 pop	 ecx
$L82951:

; 80   : 	if (item->nick) mir_free(item->nick);

  0001c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001f	85 c0		 test	 eax, eax
  00021	74 08		 je	 SHORT $L82952
  00023	50		 push	 eax
  00024	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0002a	59		 pop	 ecx
$L82952:

; 81   : 	if (item->statusMessage) mir_free(item->statusMessage);

  0002b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002e	85 c0		 test	 eax, eax
  00030	74 08		 je	 SHORT $L82953
  00032	50		 push	 eax
  00033	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00039	59		 pop	 ecx
$L82953:

; 82   : 	if (item->group) mir_free(item->group);

  0003a	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0003d	85 c0		 test	 eax, eax
  0003f	74 08		 je	 SHORT $L82954
  00041	50		 push	 eax
  00042	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00048	59		 pop	 ecx
$L82954:

; 83   : 	if (item->messageEventIdStr) mir_free(item->messageEventIdStr);

  00049	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0004c	85 c0		 test	 eax, eax
  0004e	74 08		 je	 SHORT $L82955
  00050	50		 push	 eax
  00051	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00057	59		 pop	 ecx
$L82955:

; 84   : //	if (item->type) mir_free(item->type);
; 85   : 	//if (item->ft) JabberFileFreeFt(item->ft); // No need to free (it is always free when exit from JabberFileServerThread())
; 86   : 	if (item->roomName) mir_free(item->roomName);

  00058	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0005b	85 c0		 test	 eax, eax
  0005d	74 08		 je	 SHORT $L82956
  0005f	50		 push	 eax
  00060	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00066	59		 pop	 ecx
$L82956:

; 87   : 	if (item->version) mir_free(item->version);

  00067	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0006a	85 c0		 test	 eax, eax
  0006c	74 08		 je	 SHORT $L82957
  0006e	50		 push	 eax
  0006f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00075	59		 pop	 ecx
$L82957:

; 88   : 	if (item->software) mir_free(item->software);

  00076	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00079	85 c0		 test	 eax, eax
  0007b	74 08		 je	 SHORT $L82958
  0007d	50		 push	 eax
  0007e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00084	59		 pop	 ecx
$L82958:

; 89   : 	if (item->system) mir_free(item->system);

  00085	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00088	85 c0		 test	 eax, eax
  0008a	74 08		 je	 SHORT $L82959
  0008c	50		 push	 eax
  0008d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00093	59		 pop	 ecx
$L82959:

; 90   : 	if (item->avatarHash) mir_free(item->avatarHash);

  00094	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00097	85 c0		 test	 eax, eax
  00099	74 08		 je	 SHORT $L82960
  0009b	50		 push	 eax
  0009c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000a2	59		 pop	 ecx
$L82960:

; 91   : 
; 92   : 	if (item->protocolVersion) mir_free(item->protocolVersion);

  000a3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a6	85 c0		 test	 eax, eax
  000a8	74 08		 je	 SHORT $L82961
  000aa	50		 push	 eax
  000ab	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000b1	59		 pop	 ecx
$L82961:

; 93   : 	if (item->id2) mir_free(item->id2);

  000b2	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  000b5	85 f6		 test	 esi, esi
  000b7	74 08		 je	 SHORT $L82962
  000b9	56		 push	 esi
  000ba	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000c0	59		 pop	 ecx
$L82962:
  000c1	5e		 pop	 esi

; 94   : }

  000c2	c3		 ret	 0
_JabberListFreeItemInternal ENDP
_TEXT	ENDS
PUBLIC	_JabberListExist
EXTRN	_strlen:NEAR
EXTRN	__imp__strchr:NEAR
EXTRN	__imp___strlwr:NEAR
EXTRN	__imp__strncmp:NEAR
;	COMDAT _JabberListExist
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_i$ = 16
_s$ = -4
_JabberListExist PROC NEAR				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 98   : 	int i, len;
; 99   : 	char *s, *p, *q;
; 100  : 
; 101  : 	s = mir_strdup(jid); _strlwr(s);

  00008	ff 75 10	 push	 DWORD PTR _jid$[ebp]
  0000b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00011	8b d8		 mov	 ebx, eax
  00013	53		 push	 ebx
  00014	89 5d fc	 mov	 DWORD PTR _s$[ebp], ebx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strlwr

; 102  : 	// strip resouce name if any
; 103  : 	if ((p=strchr(s, '@')) != NULL) {

  0001d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__strchr
  00023	6a 40		 push	 64			; 00000040H
  00025	53		 push	 ebx
  00026	ff d6		 call	 esi
  00028	33 ff		 xor	 edi, edi
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
  0002d	3b c7		 cmp	 eax, edi
  0002f	74 0e		 je	 SHORT $L82978

; 104  : 		if ((q=strchr(p, '/')) != NULL)

  00031	6a 2f		 push	 47			; 0000002fH
  00033	50		 push	 eax
  00034	ff d6		 call	 esi
  00036	59		 pop	 ecx
  00037	3b c7		 cmp	 eax, edi
  00039	59		 pop	 ecx
  0003a	74 03		 je	 SHORT $L82978

; 105  : 			*q = '\0';

  0003c	80 20 00	 and	 BYTE PTR [eax], 0
$L82978:

; 106  : 	}
; 107  : 	len = strlen(s);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 _strlen

; 108  : 
; 109  : 	EnterCriticalSection(&proto->csLists);

  00045	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00048	8b d8		 mov	 ebx, eax
  0004a	59		 pop	 ecx
  0004b	8d 86 20 01 00
	00		 lea	 eax, DWORD PTR [esi+288]
  00051	50		 push	 eax
  00052	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 110  : 	for(i=0; i<proto->listsCount; i++)

  0005b	39 be 18 01 00
	00		 cmp	 DWORD PTR [esi+280], edi
  00061	89 7d 10	 mov	 DWORD PTR _i$[ebp], edi
  00064	7e 56		 jle	 SHORT $L82981

; 106  : 	}
; 107  : 	len = strlen(s);

  00066	89 7d 08	 mov	 DWORD PTR 8+[ebp], edi
$L82979:

; 111  : 		if (proto->lists[i].list==list) {

  00069	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR 8+[ebp]
  00072	03 c1		 add	 eax, ecx
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	3b 4d 0c	 cmp	 ecx, DWORD PTR _list$[ebp]
  00079	75 2f		 jne	 SHORT $L82980

; 112  : 			p = proto->lists[i].jid;

  0007b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 113  : 			if (p && (int)strlen(p)>=len && (p[len]=='\0'||p[len]=='/') && !strncmp(p, s, len)) {

  0007e	85 ff		 test	 edi, edi
  00080	74 28		 je	 SHORT $L82980
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 _strlen
  00088	3b c3		 cmp	 eax, ebx
  0008a	59		 pop	 ecx
  0008b	7c 1d		 jl	 SHORT $L82980
  0008d	8a 04 3b	 mov	 al, BYTE PTR [ebx+edi]
  00090	84 c0		 test	 al, al
  00092	74 04		 je	 SHORT $L82985
  00094	3c 2f		 cmp	 al, 47			; 0000002fH
  00096	75 12		 jne	 SHORT $L82980
$L82985:
  00098	53		 push	 ebx
  00099	ff 75 fc	 push	 DWORD PTR _s$[ebp]
  0009c	57		 push	 edi
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	85 c0		 test	 eax, eax
  000a8	74 2c		 je	 SHORT $L83220
$L82980:

; 110  : 	for(i=0; i<proto->listsCount; i++)

  000aa	ff 45 10	 inc	 DWORD PTR _i$[ebp]
  000ad	83 45 08 5c	 add	 DWORD PTR 8+[ebp], 92	; 0000005cH
  000b1	8b 45 10	 mov	 eax, DWORD PTR _i$[ebp]
  000b4	3b 86 18 01 00
	00		 cmp	 eax, DWORD PTR [esi+280]
  000ba	7c ad		 jl	 SHORT $L82979
$L82981:

; 117  : 			}
; 118  : 		}
; 119  : 	LeaveCriticalSection(&proto->csLists);

  000bc	ff 75 f8	 push	 DWORD PTR -8+[ebp]
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 120  : 	mir_free(s);

  000c5	ff 75 fc	 push	 DWORD PTR _s$[ebp]
  000c8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000ce	59		 pop	 ecx

; 121  : 	return 0;

  000cf	33 c0		 xor	 eax, eax
$L82969:
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 122  : }

  000d4	c9		 leave
  000d5	c3		 ret	 0
$L83220:

; 114  : 			  	LeaveCriticalSection(&proto->csLists);

  000d6	ff 75 f8	 push	 DWORD PTR -8+[ebp]
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 115  : 				mir_free(s);

  000df	ff 75 fc	 push	 DWORD PTR _s$[ebp]
  000e2	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 116  : 				return i+1;

  000e8	8b 45 10	 mov	 eax, DWORD PTR _i$[ebp]
  000eb	59		 pop	 ecx
  000ec	40		 inc	 eax
  000ed	eb e2		 jmp	 SHORT $L82969
_JabberListExist ENDP
_TEXT	ENDS
PUBLIC	_JabberListAdd
PUBLIC	_JabberListGetItemPtr
EXTRN	_memset:NEAR
;	COMDAT _JabberListAdd
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_s$ = 16
_item$ = 8
_JabberListAdd PROC NEAR				; COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 126  : 	char *s, *p, *q;
; 127  : 	JABBER_LIST_ITEM *item;
; 128  : 
; 129  : 	EnterCriticalSection(&proto->csLists);

  00007	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  0000a	8d b7 20 01 00
	00		 lea	 esi, DWORD PTR [edi+288]
  00010	56		 push	 esi
  00011	89 75 fc	 mov	 DWORD PTR -4+[ebp], esi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 130  : 	if ((item=JabberListGetItemPtr(proto, list, jid)) != NULL) {

  0001a	ff 75 10	 push	 DWORD PTR _jid$[ebp]
  0001d	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00026	33 db		 xor	 ebx, ebx
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	3b c3		 cmp	 eax, ebx
  0002d	89 45 08	 mov	 DWORD PTR _item$[ebp], eax
  00030	74 0f		 je	 SHORT $L82998

; 131  : 		LeaveCriticalSection(&proto->csLists);

  00032	56		 push	 esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 132  : 		return item;

  00039	8b 45 08	 mov	 eax, DWORD PTR _item$[ebp]
  0003c	e9 b9 00 00 00	 jmp	 $L82992
$L82998:

; 133  : 	}
; 134  : 
; 135  : 	s = mir_strdup(jid); _strlwr(s);

  00041	ff 75 10	 push	 DWORD PTR _jid$[ebp]
  00044	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0004a	50		 push	 eax
  0004b	89 45 10	 mov	 DWORD PTR _s$[ebp], eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strlwr

; 136  : 	// strip resource name if any
; 137  : 	if ((p=strchr(s, '@')) != NULL) {

  00054	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__strchr
  0005a	6a 40		 push	 64			; 00000040H
  0005c	ff 75 10	 push	 DWORD PTR _s$[ebp]
  0005f	ff d6		 call	 esi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b c3		 cmp	 eax, ebx
  00066	74 0d		 je	 SHORT $L83002

; 138  : 		if ((q=strchr(p, '/')) != NULL)

  00068	6a 2f		 push	 47			; 0000002fH
  0006a	50		 push	 eax
  0006b	ff d6		 call	 esi
  0006d	59		 pop	 ecx
  0006e	3b c3		 cmp	 eax, ebx
  00070	59		 pop	 ecx
  00071	74 02		 je	 SHORT $L83002

; 139  : 			*q = '\0';

  00073	88 18		 mov	 BYTE PTR [eax], bl
$L83002:

; 140  : 	}
; 141  : 
; 142  : 	proto->lists = (JABBER_LIST_ITEM *) mir_realloc(proto->lists, sizeof(JABBER_LIST_ITEM)*(proto->listsCount+1));

  00075	8b 87 18 01 00
	00		 mov	 eax, DWORD PTR [edi+280]
  0007b	8d b7 1c 01 00
	00		 lea	 esi, DWORD PTR [edi+284]
  00081	40		 inc	 eax
  00082	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00085	50		 push	 eax
  00086	ff 36		 push	 DWORD PTR [esi]
  00088	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  0008e	89 06		 mov	 DWORD PTR [esi], eax

; 143  : 	item = &(proto->lists[proto->listsCount]);

  00090	8b b7 18 01 00
	00		 mov	 esi, DWORD PTR [edi+280]
  00096	6b f6 5c	 imul	 esi, 92			; 0000005cH
  00099	03 f0		 add	 esi, eax

; 144  : 	memset(item, 0, sizeof(JABBER_LIST_ITEM));

  0009b	6a 5c		 push	 92			; 0000005cH
  0009d	53		 push	 ebx
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 _memset

; 145  : 	item->list = list;

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _list$[ebp]
  000a7	83 c4 14	 add	 esp, 20			; 00000014H
  000aa	89 06		 mov	 DWORD PTR [esi], eax

; 146  : 	item->jid = s;

  000ac	8b 45 10	 mov	 eax, DWORD PTR _s$[ebp]

; 147  : 	item->nick = NULL;
; 148  : 	item->status = ID_STATUS_OFFLINE;
; 149  : 	item->statusMessage = NULL;
; 150  : 	item->group = NULL;
; 151  : 	item->messageEventIdStr = NULL;
; 152  : 	item->wantComposingEvent = FALSE;
; 153  : 	item->isTyping = FALSE;
; 154  : //	item->type = NULL;
; 155  : 	item->ft = NULL;
; 156  : 	item->roomName = NULL;
; 157  : 	item->version = NULL;
; 158  : 	item->software = NULL;
; 159  : 	item->system = NULL;
; 160  : 	item->avatarHash = NULL;
; 161  : 	item->avatarFormat = PA_FORMAT_UNKNOWN;
; 162  : 	item->newAvatarDownloading = FALSE;
; 163  : 	item->versionRequested = FALSE;
; 164  : 	item->infoRequested = FALSE;
; 165  : 	proto->listsCount++;
; 166  : 	LeaveCriticalSection(&proto->csLists);

  000af	ff 75 fc	 push	 DWORD PTR -4+[ebp]
  000b2	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000b5	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  000b8	c7 46 10 87 9c
	00 00		 mov	 DWORD PTR [esi+16], 40071 ; 00009c87H
  000bf	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000c2	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  000c5	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  000c8	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  000cb	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  000ce	89 5e 58	 mov	 DWORD PTR [esi+88], ebx
  000d1	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  000d4	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  000d7	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  000da	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  000dd	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  000e0	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  000e3	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  000e6	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  000e9	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  000ec	ff 87 18 01 00
	00		 inc	 DWORD PTR [edi+280]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 167  : 
; 168  : 	return item;

  000f8	8b c6		 mov	 eax, esi
$L82992:
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 169  : }

  000fd	c9		 leave
  000fe	c3		 ret	 0
_JabberListAdd ENDP
_TEXT	ENDS
PUBLIC	_JabberListRemove
;	COMDAT _JabberListRemove
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_JabberListRemove PROC NEAR				; COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 173  : 	int i;
; 174  : 
; 175  : 	EnterCriticalSection(&proto->csLists);

  00005	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00008	57		 push	 edi
  00009	8d be 20 01 00
	00		 lea	 edi, DWORD PTR [esi+288]
  0000f	57		 push	 edi
  00010	89 7d 08	 mov	 DWORD PTR 8+[ebp], edi
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 176  : 	i = JabberListExist(proto, list, jid);

  00019	ff 75 10	 push	 DWORD PTR _jid$[ebp]
  0001c	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _JabberListExist
  00025	8b d8		 mov	 ebx, eax
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 	if (!i) {

  0002a	85 db		 test	 ebx, ebx
  0002c	75 03		 jne	 SHORT $L83024

; 178  : 		LeaveCriticalSection(&proto->csLists);

  0002e	57		 push	 edi

; 179  : 		return;

  0002f	eb 5e		 jmp	 SHORT $L83226
$L83024:

; 180  : 	}
; 181  : 	i--;

  00031	4b		 dec	 ebx

; 182  : 	JabberListFreeItemInternal(&(proto->lists[i]));

  00032	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00038	8b fb		 mov	 edi, ebx
  0003a	6b ff 5c	 imul	 edi, 92			; 0000005cH
  0003d	03 c7		 add	 eax, edi
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _JabberListFreeItemInternal

; 183  : 	proto->listsCount--;

  00045	ff 8e 18 01 00
	00		 dec	 DWORD PTR [esi+280]
  0004b	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]

; 184  : 	memmove(proto->lists+i, proto->lists+i+1, sizeof(JABBER_LIST_ITEM)*(proto->listsCount-i));

  00051	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00054	2b c7		 sub	 eax, edi
  00056	43		 inc	 ebx
  00057	6b db 5c	 imul	 ebx, 92			; 0000005cH
  0005a	8b 8e 1c 01 00
	00		 mov	 ecx, DWORD PTR [esi+284]
  00060	50		 push	 eax
  00061	03 d9		 add	 ebx, ecx
  00063	03 cf		 add	 ecx, edi
  00065	53		 push	 ebx
  00066	51		 push	 ecx
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 185  : 	proto->lists = (JABBER_LIST_ITEM *) mir_realloc(proto->lists, sizeof(JABBER_LIST_ITEM)*proto->listsCount);

  0006d	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]
  00073	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00076	50		 push	 eax
  00077	ff b6 1c 01 00
	00		 push	 DWORD PTR [esi+284]
  0007d	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  00083	83 c4 18	 add	 esp, 24			; 00000018H
  00086	89 86 1c 01 00
	00		 mov	 DWORD PTR [esi+284], eax

; 186  : 	LeaveCriticalSection(&proto->csLists);

  0008c	ff 75 08	 push	 DWORD PTR 8+[ebp]
$L83226:
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 187  : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_JabberListRemove ENDP
_TEXT	ENDS
PUBLIC	_JabberListRemoveList
PUBLIC	_JabberListRemoveByIndex
PUBLIC	_JabberListFindNext
;	COMDAT _JabberListRemoveList
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_JabberListRemoveList PROC NEAR				; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 191  : 	int i;
; 192  : 
; 193  : 	i = 0;
; 194  : 	while ((i=JabberListFindNext(proto, list, i)) >= 0) {

  00004	6a 00		 push	 0
  00006	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0000c	e8 00 00 00 00	 call	 _JabberListFindNext
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83230:
  00014	8b f0		 mov	 esi, eax
  00016	85 f6		 test	 esi, esi
  00018	7c 1a		 jl	 SHORT $L83036

; 195  : 		JabberListRemoveByIndex(proto, i);

  0001a	56		 push	 esi
  0001b	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0001e	e8 00 00 00 00	 call	 _JabberListRemoveByIndex
  00023	56		 push	 esi
  00024	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  00027	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0002a	e8 00 00 00 00	 call	 _JabberListFindNext
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	eb e0		 jmp	 SHORT $L83230
$L83036:
  00034	5e		 pop	 esi

; 196  : 	}
; 197  : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_JabberListRemoveList ENDP
_TEXT	ENDS
;	COMDAT _JabberListRemoveByIndex
_TEXT	SEGMENT
_proto$ = 8
_index$ = 12
_JabberListRemoveByIndex PROC NEAR			; COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 201  : 	EnterCriticalSection(&proto->csLists);

  00005	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00008	8d 86 20 01 00
	00		 lea	 eax, DWORD PTR [esi+288]
  0000e	50		 push	 eax
  0000f	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 202  : 	if (index>=0 && index<proto->listsCount) {

  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _index$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	7c 64		 jl	 SHORT $L83042
  0001f	3b 9e 18 01 00
	00		 cmp	 ebx, DWORD PTR [esi+280]
  00025	7d 5c		 jge	 SHORT $L83042
  00027	57		 push	 edi

; 203  : 		JabberListFreeItemInternal(&(proto->lists[index]));

  00028	8b fb		 mov	 edi, ebx
  0002a	6b ff 5c	 imul	 edi, 92			; 0000005cH
  0002d	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00033	03 c7		 add	 eax, edi
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _JabberListFreeItemInternal

; 204  : 		proto->listsCount--;

  0003b	ff 8e 18 01 00
	00		 dec	 DWORD PTR [esi+280]
  00041	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]

; 205  : 		memmove(proto->lists+index, proto->lists+index+1, sizeof(JABBER_LIST_ITEM)*(proto->listsCount-index));

  00047	6b c0 5c	 imul	 eax, 92			; 0000005cH
  0004a	2b c7		 sub	 eax, edi
  0004c	43		 inc	 ebx
  0004d	6b db 5c	 imul	 ebx, 92			; 0000005cH
  00050	8b 8e 1c 01 00
	00		 mov	 ecx, DWORD PTR [esi+284]
  00056	50		 push	 eax
  00057	03 d9		 add	 ebx, ecx
  00059	03 cf		 add	 ecx, edi
  0005b	53		 push	 ebx
  0005c	51		 push	 ecx
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 206  : 		proto->lists = (JABBER_LIST_ITEM *) mir_realloc(proto->lists, sizeof(JABBER_LIST_ITEM)*proto->listsCount);

  00063	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]
  00069	6b c0 5c	 imul	 eax, 92			; 0000005cH
  0006c	50		 push	 eax
  0006d	ff b6 1c 01 00
	00		 push	 DWORD PTR [esi+284]
  00073	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  00079	83 c4 18	 add	 esp, 24			; 00000018H
  0007c	89 86 1c 01 00
	00		 mov	 DWORD PTR [esi+284], eax
  00082	5f		 pop	 edi
$L83042:

; 207  : 	}
; 208  : 	LeaveCriticalSection(&proto->csLists);

  00083	ff 75 08	 push	 DWORD PTR 8+[ebp]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 209  : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_JabberListRemoveByIndex ENDP
_TEXT	ENDS
PUBLIC	_JabberListAddResource
;	COMDAT _JabberListAddResource
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_statusMessage$ = 24
_JabberListAddResource PROC NEAR			; COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 213  : 	int i;
; 214  : 
; 215  : 	EnterCriticalSection(&proto->csLists);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  00008	8d 9f 20 01 00
	00		 lea	 ebx, DWORD PTR [edi+288]
  0000e	53		 push	 ebx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 216  : 	i = JabberListExist(proto, list, jid);

  00015	ff 75 10	 push	 DWORD PTR _jid$[ebp]
  00018	ff 75 0c	 push	 DWORD PTR _list$[ebp]
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _JabberListExist
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 	if (!i) {

  00024	85 c0		 test	 eax, eax
  00026	75 09		 jne	 SHORT $L83058

; 218  : 		LeaveCriticalSection(&proto->csLists);

  00028	53		 push	 ebx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 219  : 		return;

  0002f	eb 4c		 jmp	 SHORT $L83056
$L83058:

; 220  : 	}
; 221  : 	i--;

  00031	48		 dec	 eax
  00032	56		 push	 esi

; 222  : 
; 223  : 	if (proto->lists[i].statusMessage != NULL)

  00033	8b f0		 mov	 esi, eax
  00035	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]
  0003b	6b f6 5c	 imul	 esi, 92			; 0000005cH
  0003e	8b 44 30 18	 mov	 eax, DWORD PTR [eax+esi+24]
  00042	85 c0		 test	 eax, eax
  00044	74 08		 je	 SHORT $L83060

; 224  : 		mir_free(proto->lists[i].statusMessage);

  00046	50		 push	 eax
  00047	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0004d	59		 pop	 ecx
$L83060:

; 225  : 	if (statusMessage)

  0004e	83 7d 18 00	 cmp	 DWORD PTR _statusMessage$[ebp], 0
  00052	74 16		 je	 SHORT $L83061

; 226  : 		proto->lists[i].statusMessage = mir_strdup(statusMessage);

  00054	ff 75 18	 push	 DWORD PTR _statusMessage$[ebp]
  00057	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0005d	59		 pop	 ecx
  0005e	8b 8f 1c 01 00
	00		 mov	 ecx, DWORD PTR [edi+284]
  00064	89 44 31 18	 mov	 DWORD PTR [ecx+esi+24], eax

; 227  : 	else

  00068	eb 0b		 jmp	 SHORT $L83062
$L83061:

; 228  : 		proto->lists[i].statusMessage = NULL;

  0006a	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]
  00070	83 64 30 18 00	 and	 DWORD PTR [eax+esi+24], 0
$L83062:

; 229  : 	LeaveCriticalSection(&proto->csLists);

  00075	53		 push	 ebx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0007c	5e		 pop	 esi
$L83056:
  0007d	5f		 pop	 edi
  0007e	5b		 pop	 ebx

; 230  : }

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_JabberListAddResource ENDP
_TEXT	ENDS
PUBLIC	_JabberListRemoveResource
;	COMDAT _JabberListRemoveResource
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_JabberListRemoveResource PROC NEAR			; COMDAT

; 233  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 234  : 	int i;
; 235  : 	EnterCriticalSection(&proto->csLists);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _proto$[esp+4]
  00006	8d b7 20 01 00
	00		 lea	 esi, DWORD PTR [edi+288]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 236  : 	i = JabberListExist(proto, list, jid);

  00013	ff 74 24 14	 push	 DWORD PTR _jid$[esp+4]
  00017	ff 74 24 14	 push	 DWORD PTR _list$[esp+8]
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _JabberListExist
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  : 	if (!i) {

  00024	85 c0		 test	 eax, eax

; 238  : 		LeaveCriticalSection(&proto->csLists);

  00026	56		 push	 esi

; 239  : 		return;
; 240  : 	}
; 241  : 	i--;
; 242  : 	LeaveCriticalSection(&proto->csLists);

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 243  : }

  0002f	c3		 ret	 0
_JabberListRemoveResource ENDP
_TEXT	ENDS
;	COMDAT _JabberListFindNext
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_fromOffset$ = 16
_JabberListFindNext PROC NEAR				; COMDAT

; 246  : {

  00000	56		 push	 esi

; 247  : 	int i;
; 248  : 
; 249  : 	EnterCriticalSection(&proto->csLists);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _proto$[esp]
  00005	57		 push	 edi
  00006	8d be 20 01 00
	00		 lea	 edi, DWORD PTR [esi+288]
  0000c	57		 push	 edi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 250  : 	i = (fromOffset>=0) ? fromOffset : 0;

  00013	8b 4c 24 14	 mov	 ecx, DWORD PTR _fromOffset$[esp+4]
  00017	85 c9		 test	 ecx, ecx
  00019	7d 02		 jge	 SHORT $L83237
  0001b	33 c9		 xor	 ecx, ecx
$L83237:

; 251  : 	for(; i<proto->listsCount; i++)

  0001d	8b 96 18 01 00
	00		 mov	 edx, DWORD PTR [esi+280]
  00023	3b ca		 cmp	 ecx, edx
  00025	7d 1f		 jge	 SHORT $L83083
  00027	53		 push	 ebx
  00028	8b d9		 mov	 ebx, ecx
  0002a	6b db 5c	 imul	 ebx, 92			; 0000005cH
  0002d	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00033	03 c3		 add	 eax, ebx
  00035	5b		 pop	 ebx
$L83081:

; 252  : 		if (proto->lists[i].list == list) {

  00036	8b 30		 mov	 esi, DWORD PTR [eax]
  00038	3b 74 24 10	 cmp	 esi, DWORD PTR _list$[esp+4]
  0003c	74 17		 je	 SHORT $L83239
  0003e	41		 inc	 ecx
  0003f	83 c0 5c	 add	 eax, 92			; 0000005cH
  00042	3b ca		 cmp	 ecx, edx
  00044	7c f0		 jl	 SHORT $L83081
$L83083:
  00046	83 ce ff	 or	 esi, -1
$L83241:

; 253  : 		  	LeaveCriticalSection(&proto->csLists);
; 254  : 			return i;
; 255  : 		}
; 256  : 	LeaveCriticalSection(&proto->csLists);

  00049	57		 push	 edi
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 257  : 	return -1;

  00050	8b c6		 mov	 eax, esi
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 258  : }

  00054	c3		 ret	 0
$L83239:
  00055	8b f1		 mov	 esi, ecx
  00057	eb f0		 jmp	 SHORT $L83241
_JabberListFindNext ENDP
_TEXT	ENDS
;	COMDAT _JabberListGetItemPtr
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_jid$ = 16
_JabberListGetItemPtr PROC NEAR				; COMDAT

; 261  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 262  : 	int i;
; 263  : 
; 264  : 	EnterCriticalSection(&proto->csLists);

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR _proto$[esp+8]
  00007	8d 9f 20 01 00
	00		 lea	 ebx, DWORD PTR [edi+288]
  0000d	53		 push	 ebx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 265  : 	i = JabberListExist(proto, list, jid);

  00014	ff 74 24 18	 push	 DWORD PTR _jid$[esp+8]
  00018	ff 74 24 18	 push	 DWORD PTR _list$[esp+12]
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _JabberListExist
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	8b f0		 mov	 esi, eax

; 266  : 	if (!i) {

  00027	85 f6		 test	 esi, esi

; 267  : 		LeaveCriticalSection(&proto->csLists);

  00029	53		 push	 ebx
  0002a	75 0a		 jne	 SHORT $L83093
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 268  : 		return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 13		 jmp	 SHORT $L83091
$L83093:

; 269  : 	}
; 270  : 	i--;
; 271  : 	LeaveCriticalSection(&proto->csLists);

  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 272  : 	return &(proto->lists[i]);

  0003c	6b f6 5c	 imul	 esi, 92			; 0000005cH
  0003f	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]
  00045	8d 44 30 a4	 lea	 eax, DWORD PTR [eax+esi-92]
$L83091:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 273  : }

  0004c	c3		 ret	 0
_JabberListGetItemPtr ENDP
_TEXT	ENDS
PUBLIC	_JabberListFindItemPtrById2
;	COMDAT _JabberListFindItemPtrById2
_TEXT	SEGMENT
_proto$ = 8
_list$ = 12
_id$ = 16
_i$ = 8
_len$ = -4
_JabberListFindItemPtrById2 PROC NEAR			; COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 277  : 
; 278  : 	int i, len;
; 279  : 	char *p;
; 280  : 
; 281  : 	len = strlen(id);

  00007	ff 75 10	 push	 DWORD PTR _id$[ebp]
  0000a	e8 00 00 00 00	 call	 _strlen

; 282  : 
; 283  : 	EnterCriticalSection(&proto->csLists);

  0000f	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00012	59		 pop	 ecx
  00013	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
  00016	8d be 20 01 00
	00		 lea	 edi, DWORD PTR [esi+288]
  0001c	57		 push	 edi
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 284  : 	for(i=0; i<proto->listsCount; i++) {

  00023	33 db		 xor	 ebx, ebx
  00025	39 9e 18 01 00
	00		 cmp	 DWORD PTR [esi+280], ebx
  0002b	89 5d 08	 mov	 DWORD PTR _i$[ebp], ebx
  0002e	7e 3b		 jle	 SHORT $L83107
$L83105:

; 285  : 		if (proto->lists[i].list==list) {

  00030	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]
  00036	03 c3		 add	 eax, ebx
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 4d 0c	 cmp	 ecx, DWORD PTR _list$[ebp]
  0003d	75 1b		 jne	 SHORT $L83106

; 286  : 			p = proto->lists[i].id2;

  0003f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 287  : 			if (p != NULL) {

  00042	85 c0		 test	 eax, eax
  00044	74 14		 je	 SHORT $L83106

; 288  : 				if (!strncmp(p, id, len)) {

  00046	ff 75 fc	 push	 DWORD PTR _len$[ebp]
  00049	ff 75 10	 push	 DWORD PTR _id$[ebp]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	85 c0		 test	 eax, eax
  00058	74 1f		 je	 SHORT $L83247
$L83106:

; 284  : 	for(i=0; i<proto->listsCount; i++) {

  0005a	ff 45 08	 inc	 DWORD PTR _i$[ebp]
  0005d	83 c3 5c	 add	 ebx, 92			; 0000005cH
  00060	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00063	3b 86 18 01 00
	00		 cmp	 eax, DWORD PTR [esi+280]
  00069	7c c5		 jl	 SHORT $L83105
$L83107:

; 291  : 				}
; 292  : 			}
; 293  : 		}
; 294  : 	}
; 295  : 	LeaveCriticalSection(&proto->csLists);

  0006b	57		 push	 edi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 296  : 	return NULL;

  00072	33 c0		 xor	 eax, eax
$L83101:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 297  : }

  00077	c9		 leave
  00078	c3		 ret	 0
$L83247:

; 289  : 			  		LeaveCriticalSection(&proto->csLists);

  00079	57		 push	 edi
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 290  : 					return &(proto->lists[i]);

  00080	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00083	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00086	03 86 1c 01 00
	00		 add	 eax, DWORD PTR [esi+284]
  0008c	eb e6		 jmp	 SHORT $L83101
_JabberListFindItemPtrById2 ENDP
_TEXT	ENDS
PUBLIC	_JabberListGetItemPtrFromIndex
;	COMDAT _JabberListGetItemPtrFromIndex
_TEXT	SEGMENT
_proto$ = 8
_index$ = 12
_JabberListGetItemPtrFromIndex PROC NEAR		; COMDAT

; 300  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 301  : 	EnterCriticalSection(&proto->csLists);

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR _proto$[esp+8]
  00007	8d 9f 20 01 00
	00		 lea	 ebx, DWORD PTR [edi+288]
  0000d	53		 push	 ebx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 302  : 	if (index>=0 && index<proto->listsCount) {

  00014	8b 74 24 14	 mov	 esi, DWORD PTR _index$[esp+8]
  00018	85 f6		 test	 esi, esi
  0001a	7c 1c		 jl	 SHORT $L83118
  0001c	3b b7 18 01 00
	00		 cmp	 esi, DWORD PTR [edi+280]
  00022	7d 14		 jge	 SHORT $L83118

; 303  : 		LeaveCriticalSection(&proto->csLists);

  00024	53		 push	 ebx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 304  : 		return &(proto->lists[index]);

  0002b	6b f6 5c	 imul	 esi, 92			; 0000005cH
  0002e	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]
  00034	03 c6		 add	 eax, esi
  00036	eb 09		 jmp	 SHORT $L83117
$L83118:

; 305  : 	}
; 306  : 	LeaveCriticalSection(&proto->csLists);

  00038	53		 push	 ebx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 307  : 	return NULL;

  0003f	33 c0		 xor	 eax, eax
$L83117:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 308  : }

  00044	c3		 ret	 0
_JabberListGetItemPtrFromIndex ENDP
_TEXT	ENDS
END
