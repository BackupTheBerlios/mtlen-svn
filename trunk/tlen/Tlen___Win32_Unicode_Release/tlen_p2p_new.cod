	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_p2p_new.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JNFB@at?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NLOI@INFO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@FJAN@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?0?$CF0@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NJEG@?5?5?$CFs?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@MHF@P2P?5receive?5thread?5started?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IAAH@wt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@BNNC@tlen_recv?4dxx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HDIA@START?3?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03ECDD@UDP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@JALB@?6?$HMRECV?5?$CFd?5bytes?5from?5?$CFs?3?$CFd?$HM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GPCA@?$CF02X?9?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DNLE@?6?$HMSEND?5?$HM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BJHC@P2P?5receive?5thread?5ended?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@LDOC@P2P?5send?5thread?5started?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@IPPJ@tlen_send?4gxx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BGOF@START?3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@HJMC@tlen_send?4dxx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@ICG@?$HMsend?3?5?$CFd?5?$CFs?5?$CFd?$HM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@OKPP@P2P?5send?5thread?5ended?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BFNN@Binding?5UDP?5socket?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EGHG@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BDKN@UDP?5socket?5bound?5to?5?$CFs?3?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PBDF@query?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02KJOB@fs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MDEI@vs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EFFC@dcng?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CNME@dc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NBOI@?$CFs?5file?$CIs?$CJ?0?5?$CFs?5bytes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@EIHO@sending?5chainrecv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JBLF@84273372?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0LH@FNNN@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CKHH@DCNG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IPKM@mi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FMCB@k?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BICJ@ck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02HNCL@iv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GEEL@file_send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GO@KKGF@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOLO@2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FIFD@step?5?$DN?52?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02EIOJ@pa?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELAO@pp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GI@FOBC@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KHCB@step?5?$DN?54?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenNewFileReceiveThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenNewFileSendThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenBindUDPSocket
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessP2P
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??_C@_02JNFB@at?$AA@				; `string'
PUBLIC	_TlenNewFileReceiveThread
PUBLIC	??_C@_0BL@MHF@P2P?5receive?5thread?5started?$AA@ ; `string'
PUBLIC	??_C@_02IAAH@wt?$AA@				; `string'
PUBLIC	??_C@_0O@BNNC@tlen_recv?4dxx?$AA@		; `string'
PUBLIC	??_C@_07HDIA@START?3?6?$AA@			; `string'
PUBLIC	??_C@_03ECDD@UDP?$AA@				; `string'
PUBLIC	??_C@_0BM@JALB@?6?$HMRECV?5?$CFd?5bytes?5from?5?$CFs?3?$CFd?$HM?$AA@ ; `string'
PUBLIC	??_C@_05GPCA@?$CF02X?9?$AA@			; `string'
PUBLIC	??_C@_08DNLE@?6?$HMSEND?5?$HM?$AA@		; `string'
PUBLIC	??_C@_01BJG@?6?$AA@				; `string'
PUBLIC	??_C@_0BJ@BJHC@P2P?5receive?5thread?5ended?$AA@	; `string'
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	_JabberListRemove:NEAR
EXTRN	_TlenP2PFreeFileTransfer:NEAR
EXTRN	__imp__fclose:NEAR
EXTRN	__imp__fopen:NEAR
EXTRN	__imp__fprintf:NEAR
EXTRN	_JabberLog:NEAR
EXTRN	_closesocket@4:NEAR
EXTRN	_pluginLink:DWORD
EXTRN	_htons@4:NEAR
EXTRN	_inet_addr@4:NEAR
EXTRN	_inet_ntoa@4:NEAR
EXTRN	_recvfrom@24:NEAR
EXTRN	_sendto@24:NEAR
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02JNFB@at?$AA@
_DATA	SEGMENT
??_C@_02JNFB@at?$AA@ DB 'at', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@MHF@P2P?5receive?5thread?5started?$AA@
_DATA	SEGMENT
??_C@_0BL@MHF@P2P?5receive?5thread?5started?$AA@ DB 'P2P receive thread s'
	DB	'tarted', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_02IAAH@wt?$AA@
_DATA	SEGMENT
??_C@_02IAAH@wt?$AA@ DB 'wt', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@BNNC@tlen_recv?4dxx?$AA@
_DATA	SEGMENT
??_C@_0O@BNNC@tlen_recv?4dxx?$AA@ DB 'tlen_recv.dxx', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HDIA@START?3?6?$AA@
_DATA	SEGMENT
??_C@_07HDIA@START?3?6?$AA@ DB 'START:', 0aH, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03ECDD@UDP?$AA@
_DATA	SEGMENT
??_C@_03ECDD@UDP?$AA@ DB 'UDP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@JALB@?6?$HMRECV?5?$CFd?5bytes?5from?5?$CFs?3?$CFd?$HM?$AA@
_DATA	SEGMENT
??_C@_0BM@JALB@?6?$HMRECV?5?$CFd?5bytes?5from?5?$CFs?3?$CFd?$HM?$AA@ DB 0aH
	DB	'|RECV %d bytes from %s:%d|', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GPCA@?$CF02X?9?$AA@
_DATA	SEGMENT
??_C@_05GPCA@?$CF02X?9?$AA@ DB '%02X-', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DNLE@?6?$HMSEND?5?$HM?$AA@
_DATA	SEGMENT
??_C@_08DNLE@?6?$HMSEND?5?$HM?$AA@ DB 0aH, '|SEND |', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
_DATA	SEGMENT
??_C@_01BJG@?6?$AA@ DB 0aH, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BJHC@P2P?5receive?5thread?5ended?$AA@
_DATA	SEGMENT
??_C@_0BJ@BJHC@P2P?5receive?5thread?5ended?$AA@ DB 'P2P receive thread en'
	DB	'ded', 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenNewFileReceiveThread
_TEXT	SEGMENT
_proto$ = 8
_ft$ = 12
_fout$83218 = 12
_toad$83221 = -56
_cad$83231 = -24
_alen$83232 = -40
_j$83233 = -4
_n$83234 = -8
_buff$83235 = -1080
_ack$83590 = -36
_ack$83596 = -36
_ack$83602 = -36
_TlenNewFileReceiveThread PROC NEAR			; COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 04 00
	00		 sub	 esp, 1080		; 00000438H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 53   : 	JabberLog(proto, "P2P receive thread started");

  0000b	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000e	57		 push	 edi
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MHF@P2P?5receive?5thread?5started?$AA@ ; `string'
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _JabberLog

; 54   : 	ProtoBroadcastAck(proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_CONNECTING, ft, 0);

  0001a	6a 06		 push	 6
  0001c	33 c0		 xor	 eax, eax
  0001e	59		 pop	 ecx
  0001f	8d 7d e0	 lea	 edi, DWORD PTR _ack$83590[ebp+4]
  00022	f3 ab		 rep stosd
  00024	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00027	8b 75 0c	 mov	 esi, DWORD PTR _ft$[ebp]
  0002a	89 45 e0	 mov	 DWORD PTR _ack$83590[ebp+4], eax
  0002d	83 65 f4 00	 and	 DWORD PTR _ack$83590[ebp+24], 0
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	6a 02		 push	 2
  00035	89 45 e4	 mov	 DWORD PTR _ack$83590[ebp+8], eax
  00038	5f		 pop	 edi
  00039	8d 45 dc	 lea	 eax, DWORD PTR _ack$83590[ebp]
  0003c	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00041	50		 push	 eax
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00047	6a 00		 push	 0
  00049	53		 push	 ebx
  0004a	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83590[ebp], 28 ; 0000001cH
  00051	89 7d e8	 mov	 DWORD PTR _ack$83590[ebp+12], edi
  00054	c7 45 ec 64 00
	00 00		 mov	 DWORD PTR _ack$83590[ebp+16], 100 ; 00000064H
  0005b	89 75 f0	 mov	 DWORD PTR _ack$83590[ebp+20], esi
  0005e	ff 50 24	 call	 DWORD PTR [eax+36]

; 55   : //	ft->mode = FT_RECV;
; 56   : //	ft->currentFile = 0;
; 57   : //	ft->state = FT_CONNECTING;
; 58   : 	{
; 59   : 		FILE * fout = fopen("tlen_recv.dxx", "wt");

  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IAAH@wt?$AA@ ; `string'
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BNNC@tlen_recv?4dxx?$AA@ ; `string'
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00071	83 c4 1c	 add	 esp, 28			; 0000001cH
  00074	89 45 0c	 mov	 DWORD PTR _fout$83218[ebp], eax

; 60   : 		SOCKADDR_IN toad;
; 61   : 		toad.sin_family = AF_INET;
; 62   : 		toad.sin_addr.s_addr = inet_addr(ft->hostName);

  00077	ff 76 20	 push	 DWORD PTR [esi+32]
  0007a	66 89 7d c8	 mov	 WORD PTR _toad$83221[ebp], di
  0007e	e8 00 00 00 00	 call	 _inet_addr@4
  00083	89 45 cc	 mov	 DWORD PTR _toad$83221[ebp+4], eax

; 63   : 		toad.sin_port = htons(ft->wPort);

  00086	66 8b 46 24	 mov	 ax, WORD PTR [esi+36]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _htons@4

; 64   : 		if (fout != NULL) {

  00090	83 7d 0c 00	 cmp	 DWORD PTR _fout$83218[ebp], 0
  00094	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__fprintf
  0009a	66 89 45 ca	 mov	 WORD PTR _toad$83221[ebp+2], ax
  0009e	74 16		 je	 SHORT $L83618

; 65   : 			fprintf(fout, "START:\n");

  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HDIA@START?3?6?$AA@ ; `string'
$L83619:
  000a5	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  000a8	ff d7		 call	 edi

; 66   : 		}
; 67   : 		if (fout != NULL) {
; 68   : 			fclose(fout);

  000aa	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83618:

; 69   : 		}
; 70   : 		while (ft->udps != INVALID_SOCKET) {

  000b6	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	0f 84 22 01 00
	00		 je	 $L83608

; 71   : 			SOCKADDR_IN cad;
; 72   : 			int alen;
; 73   : 			int j, n;
; 74   : 			char buff[1024];
; 75   : 			alen = sizeof(struct sockaddr);
; 76   : 			n=recvfrom(ft->udps, buff,sizeof(buff),0, (struct sockaddr *) &cad, &alen);

  000c2	8d 4d d8	 lea	 ecx, DWORD PTR _alen$83232[ebp]
  000c5	c7 45 d8 10 00
	00 00		 mov	 DWORD PTR _alen$83232[ebp], 16 ; 00000010H
  000cc	51		 push	 ecx
  000cd	8d 4d e8	 lea	 ecx, DWORD PTR _cad$83231[ebp]
  000d0	51		 push	 ecx
  000d1	6a 00		 push	 0
  000d3	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR _buff$83235[ebp]
  000d9	68 00 04 00 00	 push	 1024			; 00000400H
  000de	51		 push	 ecx
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _recvfrom@24

; 77   : 			if (n<0) {

  000e5	85 c0		 test	 eax, eax
  000e7	89 45 f8	 mov	 DWORD PTR _n$83234[ebp], eax
  000ea	0f 8c f4 00 00
	00		 jl	 $L83608

; 78   : 				break;
; 79   : 			}
; 80   : 			logInfo("tlen_recv.dxx", "UDP");

  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03ECDD@UDP?$AA@ ; `string'
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BNNC@tlen_recv?4dxx?$AA@ ; `string'
  000fa	e8 00 00 00 00	 call	 _logInfo

; 81   : 			fout = fopen("tlen_recv.dxx", "at");

  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02JNFB@at?$AA@ ; `string'
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BNNC@tlen_recv?4dxx?$AA@ ; `string'
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	89 45 0c	 mov	 DWORD PTR _fout$83218[ebp], eax

; 82   : 			if (fout != NULL) {

  00115	85 c0		 test	 eax, eax
  00117	74 4c		 je	 SHORT $L83245

; 83   : 				fprintf(fout, "\n|RECV %d bytes from %s:%d|",n, inet_ntoa(cad.sin_addr), cad.sin_port);

  00119	0f b7 45 ea	 movzx	 eax, WORD PTR _cad$83231[ebp+2]
  0011d	50		 push	 eax
  0011e	ff 75 ec	 push	 DWORD PTR _cad$83231[ebp+4]
  00121	e8 00 00 00 00	 call	 _inet_ntoa@4
  00126	50		 push	 eax
  00127	ff 75 f8	 push	 DWORD PTR _n$83234[ebp]
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JALB@?6?$HMRECV?5?$CFd?5bytes?5from?5?$CFs?3?$CFd?$HM?$AA@ ; `string'
  0012f	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  00132	ff d7		 call	 edi

; 84   : 				for (j = 0; j < n; j++) {

  00134	83 65 fc 00	 and	 DWORD PTR _j$83233[ebp], 0
  00138	83 c4 14	 add	 esp, 20			; 00000014H
  0013b	83 7d f8 00	 cmp	 DWORD PTR _n$83234[ebp], 0
  0013f	7e 24		 jle	 SHORT $L83245
$L83243:

; 85   : 					fprintf(fout, "%02X-", buff[j]);

  00141	8b 45 fc	 mov	 eax, DWORD PTR _j$83233[ebp]
  00144	0f be 84 05 c8
	fb ff ff	 movsx	 eax, BYTE PTR _buff$83235[ebp+eax]
  0014c	50		 push	 eax
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GPCA@?$CF02X?9?$AA@ ; `string'
  00152	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  00155	ff d7		 call	 edi
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015a	ff 45 fc	 inc	 DWORD PTR _j$83233[ebp]
  0015d	8b 45 fc	 mov	 eax, DWORD PTR _j$83233[ebp]
  00160	3b 45 f8	 cmp	 eax, DWORD PTR _n$83234[ebp]
  00163	7c dc		 jl	 SHORT $L83243
$L83245:

; 86   : 				}
; 87   : 			}
; 88   : 			if (n == 1) {

  00165	83 7d f8 01	 cmp	 DWORD PTR _n$83234[ebp], 1
  00169	75 65		 jne	 SHORT $L83255

; 89   : 				alen = sizeof(struct sockaddr);

  0016b	6a 10		 push	 16			; 00000010H
  0016d	58		 pop	 eax
  0016e	89 45 d8	 mov	 DWORD PTR _alen$83232[ebp], eax

; 90   : 				n = sendto(ft->udps, buff, n, 0,(struct sockaddr *) &toad, alen);

  00171	50		 push	 eax
  00172	8d 45 c8	 lea	 eax, DWORD PTR _toad$83221[ebp]
  00175	50		 push	 eax
  00176	6a 00		 push	 0
  00178	8d 85 c8 fb ff
	ff		 lea	 eax, DWORD PTR _buff$83235[ebp]
  0017e	6a 01		 push	 1
  00180	50		 push	 eax
  00181	ff 76 64	 push	 DWORD PTR [esi+100]
  00184	e8 00 00 00 00	 call	 _sendto@24

; 91   : 				if (fout != NULL) {

  00189	83 7d 0c 00	 cmp	 DWORD PTR _fout$83218[ebp], 0
  0018d	89 45 f8	 mov	 DWORD PTR _n$83234[ebp], eax
  00190	0f 84 20 ff ff
	ff		 je	 $L83618

; 92   : 					fprintf(fout, "\n|SEND |");

  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DNLE@?6?$HMSEND?5?$HM?$AA@ ; `string'
  0019b	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  0019e	ff d7		 call	 edi

; 93   : 					for (j = 0; j < n; j++) {

  001a0	83 65 fc 00	 and	 DWORD PTR _j$83233[ebp], 0
  001a4	83 7d f8 00	 cmp	 DWORD PTR _n$83234[ebp], 0
  001a8	59		 pop	 ecx
  001a9	59		 pop	 ecx
  001aa	7e 24		 jle	 SHORT $L83255
$L83253:

; 94   : 						fprintf(fout, "%02X-", buff[j]);

  001ac	8b 45 fc	 mov	 eax, DWORD PTR _j$83233[ebp]
  001af	0f be 84 05 c8
	fb ff ff	 movsx	 eax, BYTE PTR _buff$83235[ebp+eax]
  001b7	50		 push	 eax
  001b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GPCA@?$CF02X?9?$AA@ ; `string'
  001bd	ff 75 0c	 push	 DWORD PTR _fout$83218[ebp]
  001c0	ff d7		 call	 edi
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c5	ff 45 fc	 inc	 DWORD PTR _j$83233[ebp]
  001c8	8b 45 fc	 mov	 eax, DWORD PTR _j$83233[ebp]
  001cb	3b 45 f8	 cmp	 eax, DWORD PTR _n$83234[ebp]
  001ce	7c dc		 jl	 SHORT $L83253
$L83255:

; 95   : 					}
; 96   : 				}
; 97   : 			}
; 98   : 			if (fout != NULL) {

  001d0	83 7d 0c 00	 cmp	 DWORD PTR _fout$83218[ebp], 0
  001d4	0f 84 dc fe ff
	ff		 je	 $L83618

; 99   : 				fprintf(fout, "\n");

  001da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01BJG@?6?$AA@ ; `string'

; 69   : 		}
; 70   : 		while (ft->udps != INVALID_SOCKET) {

  001df	e9 c1 fe ff ff	 jmp	 $L83619
$L83608:

; 100  : 				fclose(fout);
; 101  : 			}
; 102  : 		}
; 103  : 	}
; 104  : 	if (ft->udps != INVALID_SOCKET) {

  001e4	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  001e7	83 f8 ff	 cmp	 eax, -1
  001ea	74 06		 je	 SHORT $L83260

; 105  : 		closesocket(ft->udps);

  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _closesocket@4
$L83260:

; 106  : 	}
; 107  : 
; 108  : 	JabberListRemove(ft->proto, LIST_FILE, ft->iqId);

  001f2	ff 76 18	 push	 DWORD PTR [esi+24]
  001f5	6a 02		 push	 2
  001f7	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001fd	e8 00 00 00 00	 call	 _JabberListRemove
  00202	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 	if (ft->state==FT_DONE)

  00205	83 7e 0c 03	 cmp	 DWORD PTR [esi+12], 3

; 110  : 		ProtoBroadcastAck(proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_SUCCESS, ft, 0);

  00209	6a 06		 push	 6
  0020b	59		 pop	 ecx
  0020c	75 35		 jne	 SHORT $L83261
  0020e	33 c0		 xor	 eax, eax
  00210	8d 7d e0	 lea	 edi, DWORD PTR _ack$83596[ebp+4]
  00213	f3 ab		 rep stosd
  00215	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00218	8d 4d dc	 lea	 ecx, DWORD PTR _ack$83596[ebp]
  0021b	51		 push	 ecx
  0021c	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83596[ebp], 28 ; 0000001cH
  00223	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00226	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ack$83596[ebp+12], 2
  0022d	89 45 e0	 mov	 DWORD PTR _ack$83596[ebp+4], eax
  00230	8b 06		 mov	 eax, DWORD PTR [esi]
  00232	89 45 e4	 mov	 DWORD PTR _ack$83596[ebp+8], eax
  00235	33 c0		 xor	 eax, eax
  00237	89 45 ec	 mov	 DWORD PTR _ack$83596[ebp+16], eax
  0023a	89 75 f0	 mov	 DWORD PTR _ack$83596[ebp+20], esi
  0023d	89 45 f4	 mov	 DWORD PTR _ack$83596[ebp+24], eax
  00240	50		 push	 eax

; 111  : 	else {

  00241	eb 37		 jmp	 SHORT $L83620
$L83261:

; 112  : 		ProtoBroadcastAck(proto->iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_FAILED, ft, 0);

  00243	33 c0		 xor	 eax, eax
  00245	8d 7d e0	 lea	 edi, DWORD PTR _ack$83602[ebp+4]
  00248	f3 ab		 rep stosd
  0024a	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  0024d	83 65 f4 00	 and	 DWORD PTR _ack$83602[ebp+24], 0
  00251	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _ack$83602[ebp], 28 ; 0000001cH
  00258	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _ack$83602[ebp+12], 2
  0025f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00262	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _ack$83602[ebp+16], 1
  00269	89 45 e0	 mov	 DWORD PTR _ack$83602[ebp+4], eax
  0026c	8b 06		 mov	 eax, DWORD PTR [esi]
  0026e	89 45 e4	 mov	 DWORD PTR _ack$83602[ebp+8], eax
  00271	8d 45 dc	 lea	 eax, DWORD PTR _ack$83602[ebp]
  00274	50		 push	 eax
  00275	89 75 f0	 mov	 DWORD PTR _ack$83602[ebp+20], esi
  00278	6a 00		 push	 0
$L83620:
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0027f	53		 push	 ebx
  00280	ff 50 24	 call	 DWORD PTR [eax+36]
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  : 	}
; 114  : 	JabberLog(proto, "P2P receive thread ended");

  00286	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@BJHC@P2P?5receive?5thread?5ended?$AA@ ; `string'
  0028b	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0028e	e8 00 00 00 00	 call	 _JabberLog

; 115  : 	TlenP2PFreeFileTransfer(ft);

  00293	56		 push	 esi
  00294	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
  00299	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029c	5f		 pop	 edi
  0029d	5e		 pop	 esi
  0029e	5b		 pop	 ebx

; 116  : }

  0029f	c9		 leave
  002a0	c3		 ret	 0
_TlenNewFileReceiveThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_04NLOI@INFO?$AA@				; `string'
PUBLIC	??_C@_0CI@FJAN@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?0?$CF0@ ; `string'
PUBLIC	??_C@_05NJEG@?5?5?$CFs?6?$AA@			; `string'
EXTRN	__imp__realloc:NEAR
EXTRN	_mmi:BYTE
EXTRN	__imp___vsnprintf:NEAR
EXTRN	__imp__GetLocalTime@4:NEAR
;	COMDAT ??_C@_04NLOI@INFO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_p2p_new.c
_DATA	SEGMENT
??_C@_04NLOI@INFO?$AA@ DB 'INFO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@FJAN@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?0?$CF0@
_DATA	SEGMENT
??_C@_0CI@FJAN@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?0?$CF0@ DB '%'
	DB	'04d-%02d-%02d %02d:%02d:%02d,%03d [%s]', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NJEG@?5?5?$CFs?6?$AA@
_DATA	SEGMENT
??_C@_05NJEG@?5?5?$CFs?6?$AA@ DB '  %s', 0aH, 00H	; `string'
_DATA	ENDS
;	COMDAT _logInfo
_TEXT	SEGMENT
_filename$ = 8
_fmt$ = 12
_time$ = -20
_strsize$ = 8
_flog$ = -4
_logInfo PROC NEAR					; COMDAT

; 31   : static void logInfo(const char *filename, const char *fmt, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 32   : 	SYSTEMTIME time;
; 33   : 	char *str;
; 34   : 	va_list vararg;
; 35   : 	int strsize;
; 36   : 	FILE *flog=fopen(filename,"at");

  00006	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02JNFB@at?$AA@ ; `string'
  0000b	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00014	59		 pop	 ecx
  00015	89 45 fc	 mov	 DWORD PTR _flog$[ebp], eax

; 37   : 	if (flog!=NULL) {

  00018	85 c0		 test	 eax, eax
  0001a	59		 pop	 ecx
  0001b	0f 84 b1 00 00
	00		 je	 $L83198
  00021	53		 push	 ebx
  00022	56		 push	 esi

; 38   : 		GetLocalTime(&time);

  00023	8d 45 ec	 lea	 eax, DWORD PTR _time$[ebp]
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 39   :     	va_start(vararg, fmt);
; 40   :     	str = (char *) mir_alloc(strsize=2048);

  0002e	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
  00033	56		 push	 esi
  00034	89 75 08	 mov	 DWORD PTR _strsize$[ebp], esi
  00037	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0003d	8b d8		 mov	 ebx, eax

; 41   :     	while (_vsnprintf(str, strsize, fmt, vararg) == -1)

  0003f	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00042	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___vsnprintf
  00048	50		 push	 eax
  00049	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  0004c	56		 push	 esi
  0004d	53		 push	 ebx
  0004e	ff d7		 call	 edi
  00050	83 c4 14	 add	 esp, 20			; 00000014H
$L83624:
  00053	83 f8 ff	 cmp	 eax, -1
  00056	75 21		 jne	 SHORT $L83205

; 42   :     		str = (char *) realloc(str, strsize+=2048);

  00058	01 75 08	 add	 DWORD PTR _strsize$[ebp], esi
  0005b	ff 75 08	 push	 DWORD PTR _strsize$[ebp]
  0005e	53		 push	 ebx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00065	8b d8		 mov	 ebx, eax
  00067	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0006a	50		 push	 eax
  0006b	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
  0006e	ff 75 08	 push	 DWORD PTR _strsize$[ebp]
  00071	53		 push	 ebx
  00072	ff d7		 call	 edi
  00074	83 c4 18	 add	 esp, 24			; 00000018H
  00077	eb da		 jmp	 SHORT $L83624
$L83205:

; 43   :     	va_end(vararg);
; 44   :     	fprintf(flog,"%04d-%02d-%02d %02d:%02d:%02d,%03d [%s]",time.wYear,time.wMonth,time.wDay,time.wHour,time.wMinute,time.wSecond,time.wMilliseconds, "INFO");

  00079	0f b7 45 fa	 movzx	 eax, WORD PTR _time$[ebp+14]
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NLOI@INFO?$AA@ ; `string'
  00082	50		 push	 eax
  00083	0f b7 45 f8	 movzx	 eax, WORD PTR _time$[ebp+12]
  00087	50		 push	 eax
  00088	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__fprintf
  0008e	0f b7 45 f6	 movzx	 eax, WORD PTR _time$[ebp+10]
  00092	50		 push	 eax
  00093	0f b7 45 f4	 movzx	 eax, WORD PTR _time$[ebp+8]
  00097	50		 push	 eax
  00098	0f b7 45 f2	 movzx	 eax, WORD PTR _time$[ebp+6]
  0009c	50		 push	 eax
  0009d	0f b7 45 ee	 movzx	 eax, WORD PTR _time$[ebp+2]
  000a1	50		 push	 eax
  000a2	0f b7 45 ec	 movzx	 eax, WORD PTR _time$[ebp]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FJAN@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?0?$CF0@ ; `string'
  000ac	ff 75 fc	 push	 DWORD PTR _flog$[ebp]
  000af	ff d6		 call	 esi

; 45   : 		fprintf(flog,"  %s\n",str);

  000b1	53		 push	 ebx
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05NJEG@?5?5?$CFs?6?$AA@ ; `string'
  000b7	ff 75 fc	 push	 DWORD PTR _flog$[ebp]
  000ba	ff d6		 call	 esi

; 46   :     	mir_free(str);

  000bc	53		 push	 ebx
  000bd	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 47   : 		fclose(flog);

  000c3	ff 75 fc	 push	 DWORD PTR _flog$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000cc	83 c4 3c	 add	 esp, 60			; 0000003cH
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
$L83198:

; 48   : 	}
; 49   : }

  000d2	c9		 leave
  000d3	c3		 ret	 0
_logInfo ENDP
_TEXT	ENDS
PUBLIC	_TlenNewFileSendThread
PUBLIC	??_C@_0BI@LDOC@P2P?5send?5thread?5started?$AA@	; `string'
PUBLIC	??_C@_0O@IPPJ@tlen_send?4gxx?$AA@		; `string'
PUBLIC	??_C@_06BGOF@START?3?$AA@			; `string'
PUBLIC	??_C@_0O@HJMC@tlen_send?4dxx?$AA@		; `string'
PUBLIC	??_C@_0BB@ICG@?$HMsend?3?5?$CFd?5?$CFs?5?$CFd?$HM?$AA@ ; `string'
PUBLIC	??_C@_0BG@OKPP@P2P?5send?5thread?5ended?$AA@	; `string'
EXTRN	__imp__SleepEx@8:NEAR
;	COMDAT ??_C@_0BI@LDOC@P2P?5send?5thread?5started?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_p2p_new.c
_DATA	SEGMENT
??_C@_0BI@LDOC@P2P?5send?5thread?5started?$AA@ DB 'P2P send thread starte'
	DB	'd', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@IPPJ@tlen_send?4gxx?$AA@
_DATA	SEGMENT
??_C@_0O@IPPJ@tlen_send?4gxx?$AA@ DB 'tlen_send.gxx', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BGOF@START?3?$AA@
_DATA	SEGMENT
??_C@_06BGOF@START?3?$AA@ DB 'START:', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@HJMC@tlen_send?4dxx?$AA@
_DATA	SEGMENT
??_C@_0O@HJMC@tlen_send?4dxx?$AA@ DB 'tlen_send.dxx', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@ICG@?$HMsend?3?5?$CFd?5?$CFs?5?$CFd?$HM?$AA@
_DATA	SEGMENT
??_C@_0BB@ICG@?$HMsend?3?5?$CFd?5?$CFs?5?$CFd?$HM?$AA@ DB '|send: %d %s %'
	DB	'd|', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@OKPP@P2P?5send?5thread?5ended?$AA@
_DATA	SEGMENT
??_C@_0BG@OKPP@P2P?5send?5thread?5ended?$AA@ DB 'P2P send thread ended', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenNewFileSendThread
_TEXT	SEGMENT
_ft$ = 8
_fout$83269 = 8
_step$83271 = -4
_toad$83272 = -24
_n$83283 = -8
_buff$83284 = -1048
_TlenNewFileSendThread PROC NEAR			; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 120  : 	JabberLog(ft->proto, "P2P send thread started");

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _ft$[ebp]
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@LDOC@P2P?5send?5thread?5started?$AA@ ; `string'
  00014	ff b7 7c 02 00
	00		 push	 DWORD PTR [edi+636]
  0001a	e8 00 00 00 00	 call	 _JabberLog

; 121  : //	ft->mode = FT_RECV;
; 122  : //	ProtoBroadcastAck(iface.m_szModuleName, ft->hContact, ACKTYPE_FILE, ACKRESULT_CONNECTING, ft, 0);
; 123  : //	ft->currentFile = 0;
; 124  : //	ft->state = FT_CONNECTING;
; 125  : 	{
; 126  : 		FILE * fout = fopen("tlen_send.gxx", "wt");

  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IAAH@wt?$AA@ ; `string'
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IPPJ@tlen_send?4gxx?$AA@ ; `string'
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	8b d8		 mov	 ebx, eax

; 127  : 		int step = 0;
; 128  : 		SOCKADDR_IN toad;
; 129  : 		toad.sin_family = AF_INET;
; 130  : 		toad.sin_addr.s_addr = inet_addr(ft->hostName);

  00034	ff 77 20	 push	 DWORD PTR [edi+32]
  00037	89 5d 08	 mov	 DWORD PTR _fout$83269[ebp], ebx
  0003a	66 c7 45 e8 02
	00		 mov	 WORD PTR _toad$83272[ebp], 2
  00040	e8 00 00 00 00	 call	 _inet_addr@4
  00045	89 45 ec	 mov	 DWORD PTR _toad$83272[ebp+4], eax

; 131  : 		toad.sin_port = htons(ft->wPort);

  00048	66 8b 47 24	 mov	 ax, WORD PTR [edi+36]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _htons@4

; 132  : 
; 133  : 		if (fout != NULL) {

  00052	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__fprintf
  00058	66 89 45 ea	 mov	 WORD PTR _toad$83272[ebp+2], ax
  0005c	85 db		 test	 ebx, ebx
  0005e	74 12		 je	 SHORT $L83277

; 134  : 			fprintf(fout, "START:");

  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06BGOF@START?3?$AA@ ; `string'
  00065	53		 push	 ebx
  00066	ff d6		 call	 esi

; 135  : 		}
; 136  : 		if (fout != NULL) {
; 137  : 			fclose(fout);

  00068	53		 push	 ebx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83277:

; 138  : 		}
; 139  : 		for (step = 0; step < 10; step ++) {

  00072	83 65 fc 00	 and	 DWORD PTR _step$83271[ebp], 0
$L83278:

; 140  : //		while (ft->udps != INVALID_SOCKET) {
; 141  : 			int alen;
; 142  : 			int j, n;
; 143  : 			char buff[1024];
; 144  : 			alen = sizeof(struct sockaddr);
; 145  : 			if (step < 3 || step > 5) {

  00076	83 7d fc 03	 cmp	 DWORD PTR _step$83271[ebp], 3
  0007a	7c 26		 jl	 SHORT $L83287
  0007c	83 7d fc 05	 cmp	 DWORD PTR _step$83271[ebp], 5
  00080	7f 20		 jg	 SHORT $L83287

; 148  : 			} else {
; 149  : 				buff[0] = '$';

  00082	c6 85 e8 fb ff
	ff 24		 mov	 BYTE PTR _buff$83284[ebp], 36 ; 00000024H

; 150  : 				buff[1] = '^';

  00089	c6 85 e9 fb ff
	ff 5e		 mov	 BYTE PTR _buff$83284[ebp+1], 94 ; 0000005eH

; 151  : 				buff[2] = '&';

  00090	c6 85 ea fb ff
	ff 26		 mov	 BYTE PTR _buff$83284[ebp+2], 38 ; 00000026H

; 152  : 				buff[3] = '%';

  00097	c6 85 eb fb ff
	ff 25		 mov	 BYTE PTR _buff$83284[ebp+3], 37 ; 00000025H

; 153  : 				n = 4;

  0009e	6a 04		 push	 4
  000a0	eb 09		 jmp	 SHORT $L83631
$L83287:

; 146  : 				buff[0] = 1;

  000a2	c6 85 e8 fb ff
	ff 01		 mov	 BYTE PTR _buff$83284[ebp], 1

; 147  : 				n = 1;

  000a9	6a 01		 push	 1
$L83631:
  000ab	58		 pop	 eax

; 154  : 			}
; 155  : 			n=sendto(ft->udps, buff, n, 0, (struct sockaddr *)&toad, alen);

  000ac	8d 4d e8	 lea	 ecx, DWORD PTR _toad$83272[ebp]
  000af	6a 10		 push	 16			; 00000010H
  000b1	51		 push	 ecx
  000b2	6a 00		 push	 0
  000b4	50		 push	 eax
  000b5	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _buff$83284[ebp]
  000bb	50		 push	 eax
  000bc	ff 77 64	 push	 DWORD PTR [edi+100]
  000bf	e8 00 00 00 00	 call	 _sendto@24

; 156  : 			logInfo("tlen_send.dxx", "UDP");

  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03ECDD@UDP?$AA@ ; `string'
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HJMC@tlen_send?4dxx?$AA@ ; `string'
  000ce	89 45 f8	 mov	 DWORD PTR _n$83283[ebp], eax
  000d1	e8 00 00 00 00	 call	 _logInfo

; 157  : 			if (fout != NULL) {

  000d6	33 db		 xor	 ebx, ebx
  000d8	59		 pop	 ecx
  000d9	39 5d 08	 cmp	 DWORD PTR _fout$83269[ebp], ebx
  000dc	59		 pop	 ecx
  000dd	74 55		 je	 SHORT $L83298

; 158  : 				fprintf(fout, "|send: %d %s %d|",n, inet_ntoa(toad.sin_addr), toad.sin_port);

  000df	0f b7 45 ea	 movzx	 eax, WORD PTR _toad$83272[ebp+2]
  000e3	50		 push	 eax
  000e4	ff 75 ec	 push	 DWORD PTR _toad$83272[ebp+4]
  000e7	e8 00 00 00 00	 call	 _inet_ntoa@4
  000ec	50		 push	 eax
  000ed	ff 75 f8	 push	 DWORD PTR _n$83283[ebp]
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@ICG@?$HMsend?3?5?$CFd?5?$CFs?5?$CFd?$HM?$AA@ ; `string'
  000f5	ff 75 08	 push	 DWORD PTR _fout$83269[ebp]
  000f8	ff d6		 call	 esi
  000fa	83 c4 14	 add	 esp, 20			; 00000014H

; 159  : 				for (j = 0; j < n; j++) {

  000fd	39 5d f8	 cmp	 DWORD PTR _n$83283[ebp], ebx
  00100	7e 1c		 jle	 SHORT $L83296
$L83294:

; 160  : 					fprintf(fout, "%02X-", buff[j]);

  00102	0f be 84 1d e8
	fb ff ff	 movsx	 eax, BYTE PTR _buff$83284[ebp+ebx]
  0010a	50		 push	 eax
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GPCA@?$CF02X?9?$AA@ ; `string'
  00110	ff 75 08	 push	 DWORD PTR _fout$83269[ebp]
  00113	ff d6		 call	 esi
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	43		 inc	 ebx
  00119	3b 5d f8	 cmp	 ebx, DWORD PTR _n$83283[ebp]
  0011c	7c e4		 jl	 SHORT $L83294
$L83296:

; 161  : 				}
; 162  : 			}
; 163  : 			if (fout != NULL) {
; 164  : 				fprintf(fout, "\n");

  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01BJG@?6?$AA@ ; `string'
  00123	ff 75 08	 push	 DWORD PTR _fout$83269[ebp]
  00126	ff d6		 call	 esi

; 165  : 				fclose(fout);

  00128	ff 75 08	 push	 DWORD PTR _fout$83269[ebp]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83298:

; 166  : 			}
; 167  : 			SleepEx(1000, TRUE);

  00134	6a 01		 push	 1
  00136	68 e8 03 00 00	 push	 1000			; 000003e8H
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8
  00141	ff 45 fc	 inc	 DWORD PTR _step$83271[ebp]
  00144	83 7d fc 0a	 cmp	 DWORD PTR _step$83271[ebp], 10 ; 0000000aH
  00148	0f 8c 28 ff ff
	ff		 jl	 $L83278

; 168  : 		}
; 169  : 	}
; 170  : 	JabberLog(ft->proto, "P2P send thread ended");

  0014e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@OKPP@P2P?5send?5thread?5ended?$AA@ ; `string'
  00153	ff b7 7c 02 00
	00		 push	 DWORD PTR [edi+636]
  00159	e8 00 00 00 00	 call	 _JabberLog
  0015e	59		 pop	 ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 171  : }

  00163	c9		 leave
  00164	c3		 ret	 0
_TlenNewFileSendThread ENDP
_TEXT	ENDS
PUBLIC	_TlenBindUDPSocket
PUBLIC	??_C@_0BD@BFNN@Binding?5UDP?5socket?$AA@	; `string'
PUBLIC	??_C@_0M@EGHG@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@	; `string'
PUBLIC	??_C@_0BK@BDKN@UDP?5socket?5bound?5to?5?$CFs?3?$CFd?$AA@ ; `string'
EXTRN	_socket@12:NEAR
EXTRN	_gethostbyname@4:NEAR
EXTRN	_gethostname@8:NEAR
EXTRN	_memset:NEAR
EXTRN	_bind@12:NEAR
EXTRN	_getsockname@12:NEAR
EXTRN	_htonl@4:NEAR
EXTRN	_ntohs@4:NEAR
;	COMDAT ??_C@_0BD@BFNN@Binding?5UDP?5socket?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_p2p_new.c
_DATA	SEGMENT
??_C@_0BD@BFNN@Binding?5UDP?5socket?$AA@ DB 'Binding UDP socket', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EGHG@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@
_DATA	SEGMENT
??_C@_0M@EGHG@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@ DB '%u.%u.%u.%u', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BDKN@UDP?5socket?5bound?5to?5?$CFs?3?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BK@BDKN@UDP?5socket?5bound?5to?5?$CFs?3?$CFd?$AA@ DB 'UDP socket b'
	DB	'ound to %s:%d', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenBindUDPSocket
_TEXT	SEGMENT
_ft$ = 8
_sin$83307 = -16
_len$83308 = 8
_host_name$83318 = -272
_TlenBindUDPSocket PROC NEAR				; COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	56		 push	 esi

; 175  : 	JabberLog(ft->proto, "Binding UDP socket");

  0000a	8b 75 08	 mov	 esi, DWORD PTR _ft$[ebp]
  0000d	57		 push	 edi
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@BFNN@Binding?5UDP?5socket?$AA@ ; `string'
  00013	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00019	e8 00 00 00 00	 call	 _JabberLog
  0001e	59		 pop	 ecx
  0001f	59		 pop	 ecx

; 176  : 	ft->udps = socket(PF_INET, SOCK_DGRAM, 0);

  00020	6a 00		 push	 0
  00022	6a 02		 push	 2
  00024	6a 02		 push	 2
  00026	e8 00 00 00 00	 call	 _socket@12

; 177  : 	if (ft->udps != INVALID_SOCKET) {

  0002b	83 f8 ff	 cmp	 eax, -1
  0002e	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00031	0f 84 d8 00 00
	00		 je	 $L83316

; 178  : 		SOCKADDR_IN sin;
; 179  : 		int len = sizeof(struct sockaddr);

  00037	6a 10		 push	 16			; 00000010H

; 180  : 		memset((char *)&sin,0,sizeof(sin));

  00039	8d 45 f0	 lea	 eax, DWORD PTR _sin$83307[ebp]
  0003c	5f		 pop	 edi
  0003d	57		 push	 edi
  0003e	6a 00		 push	 0
  00040	50		 push	 eax
  00041	89 7d 08	 mov	 DWORD PTR _len$83308[ebp], edi
  00044	e8 00 00 00 00	 call	 _memset
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 		sin.sin_family = AF_INET;

  0004c	66 c7 45 f0 02
	00		 mov	 WORD PTR _sin$83307[ebp], 2

; 182  : 		sin.sin_addr.s_addr = htonl(INADDR_ANY);;

  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 _htonl@4

; 183  : 		sin.sin_port = 0;

  00059	66 83 65 f2 00	 and	 WORD PTR _sin$83307[ebp+2], 0
  0005e	89 45 f4	 mov	 DWORD PTR _sin$83307[ebp+4], eax

; 184  : 		if (bind(ft->udps, (struct sockaddr *)&sin, sizeof(sin)) >= 0) {

  00061	8d 45 f0	 lea	 eax, DWORD PTR _sin$83307[ebp]
  00064	57		 push	 edi
  00065	50		 push	 eax
  00066	ff 76 64	 push	 DWORD PTR [esi+100]
  00069	e8 00 00 00 00	 call	 _bind@12
  0006e	85 c0		 test	 eax, eax
  00070	0f 8c 99 00 00
	00		 jl	 $L83316

; 185  : 			if(!getsockname((SOCKET)ft->udps,(SOCKADDR *)&sin,&len)) {

  00076	8d 45 08	 lea	 eax, DWORD PTR _len$83308[ebp]
  00079	50		 push	 eax
  0007a	8d 45 f0	 lea	 eax, DWORD PTR _sin$83307[ebp]
  0007d	50		 push	 eax
  0007e	ff 76 64	 push	 DWORD PTR [esi+100]
  00081	e8 00 00 00 00	 call	 _getsockname@12
  00086	85 c0		 test	 eax, eax
  00088	0f 85 81 00 00
	00		 jne	 $L83316

; 186  : 				struct hostent *hp;
; 187  : 				char host_name[256];
; 188  : 				gethostname(host_name, sizeof(host_name));

  0008e	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  00093	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _host_name$83318[ebp]
  00099	57		 push	 edi
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _gethostname@8

; 189  : 				hp = gethostbyname(host_name);

  000a0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _host_name$83318[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _gethostbyname@4

; 190  : 				mir_snprintf(host_name, sizeof(host_name), "%u.%u.%u.%u", (unsigned char)hp->h_addr_list[0][0],
; 191  : 															(unsigned char)hp->h_addr_list[0][1],
; 192  : 															(unsigned char)hp->h_addr_list[0][2],
; 193  : 															(unsigned char)hp->h_addr_list[0][3]);

  000ac	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000b5	51		 push	 ecx
  000b6	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000ba	51		 push	 ecx
  000bb	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000bf	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000c2	51		 push	 ecx
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@EGHG@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@ ; `string'
  000c9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _host_name$83318[ebp]
  000cf	57		 push	 edi
  000d0	50		 push	 eax
  000d1	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28
  000d7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 194  : 
; 195  : 				ft->wLocalPort = ntohs(sin.sin_port);

  000da	ff 75 f2	 push	 DWORD PTR _sin$83307[ebp+2]
  000dd	e8 00 00 00 00	 call	 _ntohs@4
  000e2	66 89 46 2c	 mov	 WORD PTR [esi+44], ax

; 196  : 				ft->localName= mir_strdup(host_name);

  000e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _host_name$83318[ebp]
  000ec	50		 push	 eax
  000ed	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 197  : 				JabberLog(ft->proto, "UDP socket bound to %s:%d", ft->localName, ft->wLocalPort);

  000f3	0f b7 4e 2c	 movzx	 ecx, WORD PTR [esi+44]
  000f7	51		 push	 ecx
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@BDKN@UDP?5socket?5bound?5to?5?$CFs?3?$CFd?$AA@ ; `string'
  000fe	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00101	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00107	e8 00 00 00 00	 call	 _JabberLog
  0010c	83 c4 14	 add	 esp, 20			; 00000014H
$L83316:
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi

; 198  : 			}
; 199  : 		}
; 200  : 	}
; 201  : }

  00111	c9		 leave
  00112	c3		 ret	 0
_TlenBindUDPSocket ENDP
_TEXT	ENDS
PUBLIC	_TlenProcessP2P
PUBLIC	??_C@_05PBDF@query?$AA@				; `string'
PUBLIC	??_C@_04GLLG@from?$AA@				; `string'
PUBLIC	??_C@_02KJOB@fs?$AA@				; `string'
PUBLIC	??_C@_02MDEI@vs?$AA@				; `string'
PUBLIC	??_C@_04EFFC@dcng?$AA@				; `string'
PUBLIC	??_C@_02CNME@dc?$AA@				; `string'
PUBLIC	??_C@_01PHOL@e?$AA@				; `string'
PUBLIC	??_C@_01JAP@i?$AA@				; `string'
PUBLIC	??_C@_01FBAH@1?$AA@				; `string'
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	??_C@_01KBOJ@s?$AA@				; `string'
PUBLIC	??_C@_0BF@NBOI@?$CFs?5file?$CIs?$CJ?0?5?$CFs?5bytes?$AA@ ; `string'
PUBLIC	??_C@_09KKHM@?1RecvFile?$AA@			; `string'
PUBLIC	??_C@_0BC@EIHO@sending?5chainrecv?$AA@		; `string'
PUBLIC	??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@		; `string'
PUBLIC	??_C@_01ECJ@3?$AA@				; `string'
PUBLIC	??_C@_01FBMM@4?$AA@				; `string'
PUBLIC	??_C@_01PLFL@5?$AA@				; `string'
PUBLIC	??_C@_08JBLF@84273372?$AA@			; `string'
PUBLIC	??_C@_0LH@FNNN@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
PUBLIC	??_C@_04CKHH@DCNG?$AA@				; `string'
PUBLIC	??_C@_02IPKM@mi?$AA@				; `string'
PUBLIC	??_C@_01FMOK@n?$AA@				; `string'
PUBLIC	??_C@_01FMCB@k?$AA@				; `string'
PUBLIC	??_C@_01KBCC@v?$AA@				; `string'
PUBLIC	??_C@_02BICJ@ck?$AA@				; `string'
PUBLIC	??_C@_02HNCL@iv?$AA@				; `string'
PUBLIC	??_C@_09GEEL@file_send?$AA@			; `string'
PUBLIC	??_C@_0GO@KKGF@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
PUBLIC	??_C@_01KOLO@2?$AA@				; `string'
PUBLIC	??_C@_08FIFD@step?5?$DN?52?$AA@			; `string'
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_02EIOJ@pa?$AA@				; `string'
PUBLIC	??_C@_02ELAO@pp?$AA@				; `string'
PUBLIC	??_C@_0GI@FOBC@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
PUBLIC	??_C@_08KHCB@step?5?$DN?54?$AA@			; `string'
EXTRN	__imp__atoi:NEAR
EXTRN	_JabberListAdd:NEAR
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_JabberXmlGetChild:NEAR
EXTRN	_JabberListGetItemPtr:NEAR
EXTRN	_JabberListFindItemPtrById2:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcmp:NEAR
EXTRN	_strlen:NEAR
EXTRN	_JabberSend:NEAR
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	__imp__time:NEAR
EXTRN	_JabberForkThread:NEAR
;	COMDAT ??_C@_05PBDF@query?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_p2p_new.c
_DATA	SEGMENT
??_C@_05PBDF@query?$AA@ DB 'query', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT
??_C@_04GLLG@from?$AA@ DB 'from', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02KJOB@fs?$AA@
_DATA	SEGMENT
??_C@_02KJOB@fs?$AA@ DB 'fs', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02MDEI@vs?$AA@
_DATA	SEGMENT
??_C@_02MDEI@vs?$AA@ DB 'vs', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EFFC@dcng?$AA@
_DATA	SEGMENT
??_C@_04EFFC@dcng?$AA@ DB 'dcng', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CNME@dc?$AA@
_DATA	SEGMENT
??_C@_02CNME@dc?$AA@ DB 'dc', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT
??_C@_01PHOL@e?$AA@ DB 'e', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT
??_C@_01JAP@i?$AA@ DB 'i', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT
??_C@_01FBAH@1?$AA@ DB '1', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT
??_C@_01KBOJ@s?$AA@ DB 's', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NBOI@?$CFs?5file?$CIs?$CJ?0?5?$CFs?5bytes?$AA@
_DATA	SEGMENT
??_C@_0BF@NBOI@?$CFs?5file?$CIs?$CJ?0?5?$CFs?5bytes?$AA@ DB '%s file(s), '
	DB	'%s bytes', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KKHM@?1RecvFile?$AA@
_DATA	SEGMENT
??_C@_09KKHM@?1RecvFile?$AA@ DB '/RecvFile', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@EIHO@sending?5chainrecv?$AA@
_DATA	SEGMENT
??_C@_0BC@EIHO@sending?5chainrecv?$AA@ DB 'sending chainrecv', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT
??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ DB 'Proto/ChainRecv', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT
??_C@_01ECJ@3?$AA@ DB '3', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT
??_C@_01FBMM@4?$AA@ DB '4', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT
??_C@_01PLFL@5?$AA@ DB '5', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JBLF@84273372?$AA@
_DATA	SEGMENT
??_C@_08JBLF@84273372?$AA@ DB '84273372', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0LH@FNNN@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT
??_C@_0LH@FNNN@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ DB '<'
	DB	'iq to=''%s''><query xmlns=''p2p''><dcng n=''file_send'' k=''5'
	DB	''' v=''2'' s=''1'' i=''%s'' ck=''o7a32V9n2UZYCWpBUhSbFw=='' k'
	DB	's=''16'' iv=''MhjWEj9WTsovrQc=o7a32V9n2UZYCWpBUhSbFw=='' mi='''
	DB	'%s''/></query></iq>', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CKHH@DCNG?$AA@
_DATA	SEGMENT
??_C@_04CKHH@DCNG?$AA@ DB 'DCNG', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02IPKM@mi?$AA@
_DATA	SEGMENT
??_C@_02IPKM@mi?$AA@ DB 'mi', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT
??_C@_01FMOK@n?$AA@ DB 'n', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FMCB@k?$AA@
_DATA	SEGMENT
??_C@_01FMCB@k?$AA@ DB 'k', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT
??_C@_01KBCC@v?$AA@ DB 'v', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_02BICJ@ck?$AA@
_DATA	SEGMENT
??_C@_02BICJ@ck?$AA@ DB 'ck', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02HNCL@iv?$AA@
_DATA	SEGMENT
??_C@_02HNCL@iv?$AA@ DB 'iv', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GEEL@file_send?$AA@
_DATA	SEGMENT
??_C@_09GEEL@file_send?$AA@ DB 'file_send', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GO@KKGF@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT
??_C@_0GO@KKGF@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ DB '<'
	DB	'iq to=''%s''><query xmlns=''p2p''><dcng  la=''%s'' lp=''%d'' '
	DB	'pa=''%s'' pp=''%d'' i=''%s'' v=''2'' k=''5'' s=''2''/></query'
	DB	'></iq>', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOLO@2?$AA@
_DATA	SEGMENT
??_C@_01KOLO@2?$AA@ DB '2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FIFD@step?5?$DN?52?$AA@
_DATA	SEGMENT
??_C@_08FIFD@step?5?$DN?52?$AA@ DB 'step = 2', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02EIOJ@pa?$AA@
_DATA	SEGMENT
??_C@_02EIOJ@pa?$AA@ DB 'pa', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02ELAO@pp?$AA@
_DATA	SEGMENT
??_C@_02ELAO@pp?$AA@ DB 'pp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GI@FOBC@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@
_DATA	SEGMENT
??_C@_0GI@FOBC@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ DB '<'
	DB	'iq to=''%s''><query xmlns=''p2p''><dcng  la=''%s'' lp=''%d'' '
	DB	'pa=''%s'' pp=''%d'' i=''%s'' k=''5'' s=''4''/></query></iq>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KHCB@step?5?$DN?54?$AA@
_DATA	SEGMENT
??_C@_08KHCB@step?5?$DN?54?$AA@ DB 'step = 4', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenProcessP2P
_TEXT	SEGMENT
_proto$ = 8
_node$ = 12
_info$ = 16
_from$ = 16
_fs$83342 = 12
_vs$83343 = -8
_dcng$83344 = -4
_id$83353 = -4
_ccs$83360 = -40
_pre$83361 = -24
_c$83362 = -8
_fileInfo$83373 = -168
_s$83406 = 12
_id$83407 = -8
_id2$83408 = 8
_n$83412 = 12
_TlenProcessP2P PROC NEAR				; COMDAT

; 224  : void TlenProcessP2P(TlenProtocol *proto, XmlNode *node, ThreadData *info) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx

; 225  : 	XmlNode *queryNode;
; 226  : 	JABBER_LIST_ITEM *item;
; 227  : 	char *from;
; 228  : 
; 229  : 	if (info == NULL) return;

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5d 10	 cmp	 DWORD PTR _info$[ebp], ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	0f 84 db 04 00
	00		 je	 $L83445

; 230  : 
; 231  : 	queryNode = JabberXmlGetChild(node, "query");

  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  0001c	ff 75 0c	 push	 DWORD PTR _node$[ebp]
  0001f	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 232  : 	if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00029	8b f8		 mov	 edi, eax
  0002b	ff 75 0c	 push	 DWORD PTR _node$[ebp]
  0002e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	3b c3		 cmp	 eax, ebx
  00038	89 45 10	 mov	 DWORD PTR _from$[ebp], eax
  0003b	0f 84 b1 04 00
	00		 je	 $L83445

; 233  : 		XmlNode *fs , *vs, *dcng, *dc;
; 234  : 		/* file send */
; 235  : 		fs = JabberXmlGetChild(queryNode, "fs");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KJOB@fs?$AA@ ; `string'
  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 236  : 		/* voice send */
; 237  : 		vs  = JabberXmlGetChild(queryNode, "vs");

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02MDEI@vs?$AA@ ; `string'
  00051	57		 push	 edi
  00052	89 45 0c	 mov	 DWORD PTR _fs$83342[ebp], eax
  00055	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 238  : 		dcng  = JabberXmlGetChild(queryNode, "dcng");

  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EFFC@dcng?$AA@ ; `string'
  0005f	57		 push	 edi
  00060	89 45 f8	 mov	 DWORD PTR _vs$83343[ebp], eax
  00063	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00068	8b f0		 mov	 esi, eax

; 239  : 		dc  = JabberXmlGetChild(queryNode, "dc");

  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02CNME@dc?$AA@ ; `string'
  0006f	57		 push	 edi
  00070	89 75 fc	 mov	 DWORD PTR _dcng$83344[ebp], esi
  00073	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00078	83 c4 20	 add	 esp, 32			; 00000020H

; 240  : 		if (fs  != NULL) {

  0007b	39 5d 0c	 cmp	 DWORD PTR _fs$83342[ebp], ebx
  0007e	0f 84 11 02 00
	00		 je	 $L83351

; 241  : 			char *e, *id;
; 242  : 			/* e - step in the process (starting with 1)*/
; 243  : 			/* i - id of the file */
; 244  : 			/* s - size of the file */
; 245  : 			/* c - number of files */
; 246  : 			/* v - ??? */
; 247  : 			e = JabberXmlGetAttrValue(fs, "e");

  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  00089	ff 75 0c	 push	 DWORD PTR _fs$83342[ebp]
  0008c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 248  : 			id = JabberXmlGetAttrValue(fs, "i");

  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00096	8b f0		 mov	 esi, eax
  00098	ff 75 0c	 push	 DWORD PTR _fs$83342[ebp]
  0009b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000a0	83 c4 10	 add	 esp, 16			; 00000010H

; 249  : 			if (e != NULL) {

  000a3	3b f3		 cmp	 esi, ebx
  000a5	89 45 fc	 mov	 DWORD PTR _id$83353[ebp], eax
  000a8	0f 84 44 04 00
	00		 je	 $L83445

; 250  : 				if (!strcmp(e, "1")) {

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 _strcmp
  000b9	59		 pop	 ecx
  000ba	85 c0		 test	 eax, eax
  000bc	59		 pop	 ecx
  000bd	0f 85 3f 01 00
	00		 jne	 $L83358

; 251  : 					CCSDATA ccs;
; 252  : 					PROTORECVEVENT pre;
; 253  : 					char *c, *s;
; 254  : 					TLEN_FILE_TRANSFER * ft = (TLEN_FILE_TRANSFER *) mir_alloc(sizeof(TLEN_FILE_TRANSFER));

  000c3	bf 80 02 00 00	 mov	 edi, 640		; 00000280H
  000c8	57		 push	 edi
  000c9	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  000cf	8b f0		 mov	 esi, eax

; 255  : 					memset(ft, 0, sizeof(TLEN_FILE_TRANSFER));

  000d1	57		 push	 edi
  000d2	53		 push	 ebx
  000d3	56		 push	 esi
  000d4	e8 00 00 00 00	 call	 _memset

; 256  : 					c = JabberXmlGetAttrValue(fs, "c");

  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  000de	ff 75 0c	 push	 DWORD PTR _fs$83342[ebp]
  000e1	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 257  : 					s = JabberXmlGetAttrValue(fs, "s");

  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  000eb	89 45 f8	 mov	 DWORD PTR _c$83362[ebp], eax
  000ee	ff 75 0c	 push	 DWORD PTR _fs$83342[ebp]
  000f1	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 258  : 					ft->jid = mir_strdup(from);

  000f6	ff 75 10	 push	 DWORD PTR _from$[ebp]
  000f9	8b f8		 mov	 edi, eax
  000fb	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 259  :                     ft->proto = proto;
; 260  : 					ft->hContact = JabberHContactFromJID(proto, from);

  00101	ff 75 10	 push	 DWORD PTR _from$[ebp]
  00104	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00107	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  0010a	50		 push	 eax
  0010b	89 86 7c 02 00
	00		 mov	 DWORD PTR [esi+636], eax
  00111	e8 00 00 00 00	 call	 _JabberHContactFromJID

; 261  : 					ft->iqId = mir_strdup(id);

  00116	ff 75 fc	 push	 DWORD PTR _id$83353[ebp]
  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 262  : 					ft->fileTotalSize = atoi(s);

  00121	57		 push	 edi
  00122	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 263  : 					ft->newP2P = TRUE;
; 264  : 					if ((item=JabberListAdd(ft->proto, LIST_FILE, ft->iqId)) != NULL) {

  0012b	ff 76 18	 push	 DWORD PTR [esi+24]
  0012e	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00131	c7 46 5c 01 00
	00 00		 mov	 DWORD PTR [esi+92], 1
  00138	6a 02		 push	 2
  0013a	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  00140	e8 00 00 00 00	 call	 _JabberListAdd
  00145	83 c4 40	 add	 esp, 64			; 00000040H
  00148	3b c3		 cmp	 eax, ebx
  0014a	0f 84 a2 03 00
	00		 je	 $L83445

; 265  : 						char *szBlob;
; 266  : 						char fileInfo[128];
; 267  : 						item->ft = ft;
; 268  : 						mir_snprintf(fileInfo, sizeof(fileInfo), "%s file(s), %s bytes", c, s);

  00150	57		 push	 edi
  00151	89 70 58	 mov	 DWORD PTR [eax+88], esi
  00154	ff 75 f8	 push	 DWORD PTR _c$83362[ebp]
  00157	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _fileInfo$83373[ebp]
  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NBOI@?$CFs?5file?$CIs?$CJ?0?5?$CFs?5bytes?$AA@ ; `string'
  00162	68 80 00 00 00	 push	 128			; 00000080H
  00167	50		 push	 eax
  00168	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28

; 269  : 						// blob is DWORD(*ft), ASCIIZ(filenames), ASCIIZ(description)
; 270  : 						szBlob = (char *) mir_alloc(sizeof(DWORD) + strlen(fileInfo) + 2);

  0016e	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _fileInfo$83373[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _strlen
  0017a	83 c0 06	 add	 eax, 6
  0017d	50		 push	 eax
  0017e	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00184	8b f8		 mov	 edi, eax

; 271  : 						*((PDWORD) szBlob) = (DWORD) ft;
; 272  : 						strcpy(szBlob + sizeof(DWORD), fileInfo);

  00186	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _fileInfo$83373[ebp]
  0018c	50		 push	 eax
  0018d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00190	89 37		 mov	 DWORD PTR [edi], esi
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _strcpy

; 273  : 						szBlob[sizeof(DWORD) + strlen(fileInfo) + 1] = '\0';

  00198	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _fileInfo$83373[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _strlen
  001a4	88 5c 38 05	 mov	 BYTE PTR [eax+edi+5], bl

; 274  : 						pre.flags = 0;
; 275  : 						pre.timestamp = time(NULL);

  001a8	53		 push	 ebx
  001a9	89 5d e8	 mov	 DWORD PTR _pre$83361[ebp], ebx
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
  001b2	89 45 ec	 mov	 DWORD PTR _pre$83361[ebp+4], eax

; 276  : 						pre.szMessage = szBlob;

  001b5	89 7d f0	 mov	 DWORD PTR _pre$83361[ebp+8], edi

; 277  : 						pre.lParam = 0;

  001b8	89 5d f4	 mov	 DWORD PTR _pre$83361[ebp+12], ebx

; 278  : 						ccs.szProtoService = PSR_FILE;

  001bb	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _ccs$83360[ebp+4], OFFSET FLAT:??_C@_09KKHM@?1RecvFile?$AA@ ; `string'

; 279  : 						ccs.hContact = ft->hContact;

  001c2	8b 06		 mov	 eax, DWORD PTR [esi]

; 280  : 						ccs.wParam = 0;
; 281  : 						ccs.lParam = (LPARAM) &pre;
; 282  : 						JabberLog(ft->proto, "sending chainrecv");

  001c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@EIHO@sending?5chainrecv?$AA@ ; `string'
  001c9	89 45 d8	 mov	 DWORD PTR _ccs$83360[ebp], eax
  001cc	8d 45 e8	 lea	 eax, DWORD PTR _pre$83361[ebp]
  001cf	89 5d e0	 mov	 DWORD PTR _ccs$83360[ebp+8], ebx
  001d2	89 45 e4	 mov	 DWORD PTR _ccs$83360[ebp+12], eax
  001d5	ff b6 7c 02 00
	00		 push	 DWORD PTR [esi+636]
  001db	e8 00 00 00 00	 call	 _JabberLog

; 283  : 						CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  001e0	8d 45 d8	 lea	 eax, DWORD PTR _ccs$83360[ebp]
  001e3	50		 push	 eax
  001e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001e9	53		 push	 ebx
  001ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  001ef	ff 50 24	 call	 DWORD PTR [eax+36]
  001f2	83 c4 40	 add	 esp, 64			; 00000040H

; 284  : 						mir_free(szBlob);

  001f5	57		 push	 edi
  001f6	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001fc	59		 pop	 ecx

; 285  : 					}
; 286  : 				} else if (!strcmp(e, "3")) {

  001fd	e9 f0 02 00 00	 jmp	 $L83445
$L83358:
  00202	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01ECJ@3?$AA@ ; `string'
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 _strcmp
  0020d	59		 pop	 ecx
  0020e	85 c0		 test	 eax, eax
  00210	59		 pop	 ecx
  00211	0f 84 db 02 00
	00		 je	 $L83445

; 287  : 					/* transfer error */
; 288  : 				} else if (!strcmp(e, "4")) {

  00217	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBMM@4?$AA@ ; `string'
  0021c	56		 push	 esi
  0021d	e8 00 00 00 00	 call	 _strcmp
  00222	59		 pop	 ecx
  00223	85 c0		 test	 eax, eax
  00225	59		 pop	 ecx
  00226	0f 84 c6 02 00
	00		 je	 $L83445

; 289  : 					/* transfer denied */
; 290  : 				} else if (!strcmp(e, "5")) {

  0022c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PLFL@5?$AA@ ; `string'
  00231	56		 push	 esi
  00232	e8 00 00 00 00	 call	 _strcmp
  00237	59		 pop	 ecx
  00238	85 c0		 test	 eax, eax
  0023a	59		 pop	 ecx
  0023b	0f 85 b1 02 00
	00		 jne	 $L83445

; 291  : 					/* transfer accepted */
; 292  : 					if ((item=JabberListGetItemPtr(proto, LIST_FILE, id)) != NULL) {

  00241	ff 75 fc	 push	 DWORD PTR _id$83353[ebp]
  00244	6a 02		 push	 2
  00246	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00249	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0024e	8b f0		 mov	 esi, eax
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH
  00253	3b f3		 cmp	 esi, ebx
  00255	0f 84 97 02 00
	00		 je	 $L83445

; 293  : 						item->id2 = mir_strdup("84273372");

  0025b	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_08JBLF@84273372?$AA@ ; `string'
  00260	57		 push	 edi
  00261	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 294  : 						item->ft->id2 = mir_strdup("84273372");

  00267	57		 push	 edi
  00268	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0026b	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00271	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 295  : 						JabberSend(proto, "<iq to='%s'><query xmlns='p2p'><dcng n='file_send' k='5' v='2' s='1' i='%s' ck='o7a32V9n2UZYCWpBUhSbFw==' ks='16' iv='MhjWEj9WTsovrQc=o7a32V9n2UZYCWpBUhSbFw==' mi='%s'/></query></iq>", from, item->id2, id);

  00274	ff 75 fc	 push	 DWORD PTR _id$83353[ebp]
  00277	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0027a	ff 76 08	 push	 DWORD PTR [esi+8]
  0027d	ff 75 10	 push	 DWORD PTR _from$[ebp]
  00280	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0LH@FNNN@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
  00285	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00288	e8 00 00 00 00	 call	 _JabberSend
  0028d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 296  : 					}
; 297  : 				}
; 298  : 			}
; 299  : 		} else if (vs != NULL) {

  00290	e9 5d 02 00 00	 jmp	 $L83445
$L83351:
  00295	39 5d f8	 cmp	 DWORD PTR _vs$83343[ebp], ebx
  00298	0f 85 54 02 00
	00		 jne	 $L83445

; 300  : 
; 301  : 		} else if (dcng != NULL) {

  0029e	3b f3		 cmp	 esi, ebx
  002a0	0f 84 4c 02 00
	00		 je	 $L83445

; 302  : 			char *s, *id, *id2;
; 303  : 			JabberLog(proto, "DCNG");

  002a6	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  002a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04CKHH@DCNG?$AA@ ; `string'
  002ae	57		 push	 edi
  002af	e8 00 00 00 00	 call	 _JabberLog

; 304  : 			s = JabberXmlGetAttrValue(dcng, "s");

  002b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  002b9	56		 push	 esi
  002ba	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 305  : 			id2 = JabberXmlGetAttrValue(dcng, "i");

  002bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  002c4	56		 push	 esi
  002c5	89 45 0c	 mov	 DWORD PTR _s$83406[ebp], eax
  002c8	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 306  : 			id = JabberXmlGetAttrValue(dcng, "mi");

  002cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IPKM@mi?$AA@ ; `string'
  002d2	56		 push	 esi
  002d3	89 45 08	 mov	 DWORD PTR _id2$83408[ebp], eax
  002d6	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 307  : 			if (!strcmp(s, "1")) {

  002db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  002e0	89 45 f8	 mov	 DWORD PTR _id$83407[ebp], eax
  002e3	ff 75 0c	 push	 DWORD PTR _s$83406[ebp]
  002e6	e8 00 00 00 00	 call	 _strcmp
  002eb	83 c4 28	 add	 esp, 40			; 00000028H
  002ee	85 c0		 test	 eax, eax
  002f0	0f 85 b1 00 00
	00		 jne	 $L83411

; 308  : 				/* Keys */
; 309  : 				/* n - name (file_send) */
; 310  : 				/* k - ??? */
; 311  : 				/* v - ??? */
; 312  : 				/* s - step */
; 313  : 				/* i - id of the file */
; 314  : 				/* ck - aes key */
; 315  : 				/* ks - key size (in bytes) */
; 316  : 				/* iv - aes initial vector */
; 317  : 				/* mi - p2p connection id */
; 318  : 				char *n, *k, *v, *ck, *ks, *iv;
; 319  : 				n = JabberXmlGetAttrValue(dcng, "n");

  002f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  002fb	56		 push	 esi
  002fc	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 320  : 				k = JabberXmlGetAttrValue(dcng, "k");

  00301	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMCB@k?$AA@ ; `string'
  00306	56		 push	 esi
  00307	89 45 0c	 mov	 DWORD PTR _n$83412[ebp], eax
  0030a	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 321  : 				v = JabberXmlGetAttrValue(dcng, "v");

  0030f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBCC@v?$AA@ ; `string'
  00314	56		 push	 esi
  00315	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 322  : 				ck = JabberXmlGetAttrValue(dcng, "ck");

  0031a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BICJ@ck?$AA@ ; `string'
  0031f	56		 push	 esi
  00320	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 323  : 				iv = JabberXmlGetAttrValue(dcng, "iv");

  00325	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02HNCL@iv?$AA@ ; `string'
  0032a	56		 push	 esi
  0032b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 324  : 				if (!strcmp(n, "file_send")) {

  00330	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09GEEL@file_send?$AA@ ; `string'
  00335	ff 75 0c	 push	 DWORD PTR _n$83412[ebp]
  00338	e8 00 00 00 00	 call	 _strcmp
  0033d	83 c4 30	 add	 esp, 48			; 00000030H
  00340	85 c0		 test	 eax, eax
  00342	0f 85 aa 01 00
	00		 jne	 $L83445

; 325  : 					if ((item=JabberListGetItemPtr(proto, LIST_FILE, id)) != NULL) {

  00348	ff 75 f8	 push	 DWORD PTR _id$83407[ebp]
  0034b	6a 02		 push	 2
  0034d	57		 push	 edi
  0034e	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00353	8b f0		 mov	 esi, eax
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH
  00358	3b f3		 cmp	 esi, ebx
  0035a	0f 84 92 01 00
	00		 je	 $L83445

; 326  : 						item->id2 = mir_strdup(id2);

  00360	ff 75 08	 push	 DWORD PTR _id2$83408[ebp]
  00363	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 327  : 						item->ft->id2 = mir_strdup(id2);

  00369	ff 75 08	 push	 DWORD PTR _id2$83408[ebp]
  0036c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0036f	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00375	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00378	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 328  : 						TlenBindUDPSocket(item->ft);

  0037b	ff 76 58	 push	 DWORD PTR [esi+88]
  0037e	e8 00 00 00 00	 call	 _TlenBindUDPSocket

; 329  : 						JabberSend(proto, "<iq to='%s'><query xmlns='p2p'><dcng  la='%s' lp='%d' pa='%s' pp='%d' i='%s' v='2' k='5' s='2'/></query></iq>",
; 330  : 							item->ft->jid, item->ft->localName, item->ft->wLocalPort, item->ft->localName, item->ft->wLocalPort, item->ft->id2);

  00383	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00386	0f b7 48 2c	 movzx	 ecx, WORD PTR [eax+44]
  0038a	ff 70 60	 push	 DWORD PTR [eax+96]
  0038d	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00390	51		 push	 ecx
  00391	52		 push	 edx
  00392	51		 push	 ecx
  00393	52		 push	 edx
  00394	ff 70 10	 push	 DWORD PTR [eax+16]
  00397	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GO@KKGF@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
  0039c	57		 push	 edi
  0039d	e8 00 00 00 00	 call	 _JabberSend

; 331  : 					}
; 332  : 				}
; 333  : 			}  else if (!strcmp(s, "2")) {

  003a2	e9 48 01 00 00	 jmp	 $L83634
$L83411:
  003a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOLO@2?$AA@ ; `string'
  003ac	ff 75 0c	 push	 DWORD PTR _s$83406[ebp]
  003af	e8 00 00 00 00	 call	 _strcmp
  003b4	59		 pop	 ecx
  003b5	85 c0		 test	 eax, eax
  003b7	59		 pop	 ecx
  003b8	0f 85 bc 00 00
	00		 jne	 $L83429

; 334  : 				JabberLog(proto, "step = 2");

  003be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08FIFD@step?5?$DN?52?$AA@ ; `string'
  003c3	57		 push	 edi
  003c4	e8 00 00 00 00	 call	 _JabberLog

; 335  : 				JabberLog(proto, "%s",from);

  003c9	ff 75 10	 push	 DWORD PTR _from$[ebp]
  003cc	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@ ; `string'
  003d1	56		 push	 esi
  003d2	57		 push	 edi
  003d3	e8 00 00 00 00	 call	 _JabberLog

; 336  : 				JabberLog(proto, "%s",id2);

  003d8	ff 75 08	 push	 DWORD PTR _id2$83408[ebp]
  003db	56		 push	 esi
  003dc	57		 push	 edi
  003dd	e8 00 00 00 00	 call	 _JabberLog

; 337  : 				/* IP and port */
; 338  : 				if ((item=JabberListFindItemPtrById2(proto, LIST_FILE, id2)) != NULL) {

  003e2	ff 75 08	 push	 DWORD PTR _id2$83408[ebp]
  003e5	6a 02		 push	 2
  003e7	57		 push	 edi
  003e8	e8 00 00 00 00	 call	 _JabberListFindItemPtrById2
  003ed	8b f0		 mov	 esi, eax
  003ef	83 c4 2c	 add	 esp, 44			; 0000002cH
  003f2	3b f3		 cmp	 esi, ebx
  003f4	0f 84 f8 00 00
	00		 je	 $L83445

; 339  : 					item->ft->hostName = mir_strdup(JabberXmlGetAttrValue(dcng, "pa"));

  003fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EIOJ@pa?$AA@ ; `string'
  003ff	ff 75 fc	 push	 DWORD PTR _dcng$83344[ebp]
  00402	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00407	50		 push	 eax
  00408	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0040e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 340  : 					item->ft->wPort = atoi(JabberXmlGetAttrValue(dcng, "pp"));

  00411	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02ELAO@pp?$AA@ ; `string'
  00416	ff 75 fc	 push	 DWORD PTR _dcng$83344[ebp]
  00419	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0041c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00421	50		 push	 eax
  00422	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00428	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0042b	66 89 41 24	 mov	 WORD PTR [ecx+36], ax

; 341  : 					TlenBindUDPSocket(item->ft);

  0042f	ff 76 58	 push	 DWORD PTR [esi+88]
  00432	e8 00 00 00 00	 call	 _TlenBindUDPSocket

; 342  : 					JabberSend(proto, "<iq to='%s'><query xmlns='p2p'><dcng  la='%s' lp='%d' pa='%s' pp='%d' i='%s' k='5' s='4'/></query></iq>",
; 343  : 						item->ft->jid, item->ft->localName, item->ft->wLocalPort, item->ft->localName, item->ft->wLocalPort, item->ft->id2);

  00437	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0043a	0f b7 48 2c	 movzx	 ecx, WORD PTR [eax+44]
  0043e	ff 70 60	 push	 DWORD PTR [eax+96]
  00441	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00444	51		 push	 ecx
  00445	52		 push	 edx
  00446	51		 push	 ecx
  00447	52		 push	 edx
  00448	ff 70 10	 push	 DWORD PTR [eax+16]
  0044b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GI@FOBC@?$DMiq?5to?$DN?8?$CFs?8?$DO?$DMquery?5xmlns?$DN?8p2p?8?$DO?$DM@ ; `string'
  00450	57		 push	 edi
  00451	e8 00 00 00 00	 call	 _JabberSend

; 344  : 					JabberForkThread((void (__cdecl *)(void*))TlenNewFileReceiveThread, 0, item->ft);

  00456	ff 76 58	 push	 DWORD PTR [esi+88]
  00459	53		 push	 ebx
  0045a	68 00 00 00 00	 push	 OFFSET FLAT:_TlenNewFileReceiveThread
  0045f	e8 00 00 00 00	 call	 _JabberForkThread
  00464	83 c4 48	 add	 esp, 72			; 00000048H

; 345  : 					JabberForkThread((void (__cdecl *)(void*))TlenNewFileSendThread, 0, item->ft);

  00467	ff 76 58	 push	 DWORD PTR [esi+88]
  0046a	53		 push	 ebx
  0046b	68 00 00 00 00	 push	 OFFSET FLAT:_TlenNewFileSendThread
  00470	e8 00 00 00 00	 call	 _JabberForkThread
  00475	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : 				}
; 347  : 			} else if (!strcmp(s, "4")) {

  00478	eb 78		 jmp	 SHORT $L83445
$L83429:
  0047a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBMM@4?$AA@ ; `string'
  0047f	ff 75 0c	 push	 DWORD PTR _s$83406[ebp]
  00482	e8 00 00 00 00	 call	 _strcmp
  00487	59		 pop	 ecx
  00488	85 c0		 test	 eax, eax
  0048a	59		 pop	 ecx
  0048b	75 65		 jne	 SHORT $L83445

; 348  : 				/* IP and port */
; 349  : 				if ((item=JabberListFindItemPtrById2(proto, LIST_FILE, id2)) != NULL) {

  0048d	ff 75 08	 push	 DWORD PTR _id2$83408[ebp]
  00490	6a 02		 push	 2
  00492	57		 push	 edi
  00493	e8 00 00 00 00	 call	 _JabberListFindItemPtrById2
  00498	8b f0		 mov	 esi, eax
  0049a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0049d	3b f3		 cmp	 esi, ebx
  0049f	74 51		 je	 SHORT $L83445

; 350  : 					JabberLog(proto, "step = 4");

  004a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08KHCB@step?5?$DN?54?$AA@ ; `string'
  004a6	57		 push	 edi
  004a7	e8 00 00 00 00	 call	 _JabberLog

; 351  : 					item->ft->hostName = mir_strdup(JabberXmlGetAttrValue(dcng, "pa"));

  004ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EIOJ@pa?$AA@ ; `string'
  004b1	ff 75 fc	 push	 DWORD PTR _dcng$83344[ebp]
  004b4	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  004b9	50		 push	 eax
  004ba	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  004c0	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 352  : 					item->ft->wPort = atoi(JabberXmlGetAttrValue(dcng, "pp"));

  004c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02ELAO@pp?$AA@ ; `string'
  004c8	ff 75 fc	 push	 DWORD PTR _dcng$83344[ebp]
  004cb	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  004ce	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  004d3	50		 push	 eax
  004d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  004da	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  004dd	66 89 41 24	 mov	 WORD PTR [ecx+36], ax

; 353  : 					JabberForkThread((void (__cdecl *)(void*))TlenNewFileReceiveThread, 0, item->ft);

  004e1	ff 76 58	 push	 DWORD PTR [esi+88]
  004e4	53		 push	 ebx
  004e5	68 00 00 00 00	 push	 OFFSET FLAT:_TlenNewFileReceiveThread
  004ea	e8 00 00 00 00	 call	 _JabberForkThread
$L83634:
  004ef	83 c4 2c	 add	 esp, 44			; 0000002cH
$L83445:
  004f2	5f		 pop	 edi
  004f3	5e		 pop	 esi
  004f4	5b		 pop	 ebx

; 354  : 				}
; 355  : 			}
; 356  : 
; 357  : 		} else if (dc != NULL) {
; 358  : 
; 359  : 		}
; 360  : 	}
; 361  : }

  004f5	c9		 leave
  004f6	c3		 ret	 0
_TlenProcessP2P ENDP
_TEXT	ENDS
END
