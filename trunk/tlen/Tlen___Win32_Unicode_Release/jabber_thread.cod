	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NICK@Enter?5password?5for?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JKGE@?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PMJI@Thread?5started?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@EPHB@Thread?5ended?0?5another?5normal?5thr@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@HFMA@E?3?2Documents?5and?5Settings?2piotr?2@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ONOL@LoginName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@BOLK@Thread?5ended?0?5login?5name?5is?5not?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@FPOL@Thread?5ended?0?5login?5server?5is?5no@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@BEAN@SavePassword?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DD@KPAN@Thread?5ended?0?5password?5request?5d@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NKKK@Password?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PHIF@DB?1Crypt?1DecodeString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@HFJJ@Thread?5ended?0?5password?5is?5not?5co@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DB@IKHJ@Thread?5ended?0?5network?5buffer?5can@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FKFD@ManualHost?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DDEI@ManualPort?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LCM@Thread?5server?$DN?8?$CFs?8?5port?$DN?8?$CFd?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GFAF@Connection?5failed?5?$CI?$CFd?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@LBMO@Thread?5ended?0?5connection?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LNJJ@KeepAlive?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LFIL@?$DMs?5s?$DN?81?8?5v?$DN?89?8?5t?$DN?806000106?8?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NDA@?$DMs?5v?$DN?83?8?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HMLD@Entering?5main?5recv?5loop?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OCNP@RECV?3?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HAFD@bytesParsed?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@LEOM@Increasing?5network?5buffer?5size?5t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DG@HPPI@Cannot?5reallocate?5more?5network?5b@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EG@CPAF@Unknown?5state?3?5bytesParsed?$DN?$CFd?0?5d@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IOLI@Status?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@DNBM@Thread?5ended?3?5server?$DN?8?$CFs?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CNLL@Exiting?5ServerThread?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DCMN@?$CFs?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@BBAP@?$DMiq?5type?$DN?8set?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02KAFL@k1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FPOC@k2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02PFHF@k3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HPJP@?$DMcipher?5k1?$DN?8?$CFs?8?5k2?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@DDKD@stream?3error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@OCCN@Jabber?5Connection?5Error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NPGL@message?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PJFJ@presence?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CIMO@iq?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IFC@f?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01LLF@w?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KDFD@m?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JBCA@avatar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KLJ@cipher?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0HI@MJEA@Invalid?5top?9level?5tag?5?$CIonly?5?$DMmes@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIKN@type?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GDII@?$DMcipher?5type?$DN?8ok?8?1?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07KGID@1?48?40?40?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CBAK@Windows?5Server?52003?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JDIA@Windows?5XP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CDPP@Windows?52000?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CEIK@Windows?5NT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NDG@Windows?595?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FJEF@Windows?598?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BMJC@Windows?5ME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07PKLL@Windows?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FMHA@Miranda?5IM?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HNHJ@Miranda?1System?1GetVersionText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CDOA@?5?$CITlen?5v?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KMMP@?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0JF@MBPO@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GPDL@token?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05COLM@error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FDOK@IgnoreAdvertisements?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FDIC@groupchat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DCIF@pic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03NEIN@idt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LLHI@size?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03GHGA@pid?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CBAD@crc_c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BNG@crc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MMAH@rt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02NKKN@st?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02LELH@ps?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DB@FKMD@?$DMmessage?5type?$DN?8pic?8?5to?$DN?8?$CFs?8?5crc_@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NIOK@body?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BGGH@subject?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEJ@?$CFs?$AN?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOI@x?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GJOJ@xmlns?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@ECLD@jabber?3x?3delay?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JMPA@stamp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@JKJA@jabber?3x?3event?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EEFM@delivered?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IBHF@id?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FB@KMAI@?$DMmessage?5to?$DN?8?$CFs?8?$DO?$DMx?5xmlns?$DN?8jabbe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IJNK@composing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PNLP@DB?1Event?1FindLast?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@BBFJ@DB?1Event?1Get?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@BJOD@?1RecvMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07KIAB@offline?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OKNP@mim_?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MLLO@available?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DK@PBCP@Receive?5presence?5online?5from?5?$CFs?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DDJJ@show?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EKMD@away?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02PNLN@xa?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03GPAF@dnd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FLKK@chat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IHLO@unavailable?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DKLM@status?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LNIP@StatusMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OJLM@ShowTransport?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EP@IAIE@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@PILD@?$CFs?5?$CI?$CFs?$CJ?5online?0?5set?5contact?5stat@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DL@LDFJ@Receive?5presence?5offline?5from?5?$CFs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MMNL@OfflineAsInvisible?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@HNKJ@?$CFs?5offline?0?5set?5contact?5status?5t@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ODAA@subscribe?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IEHI@?$CFs?5?$CI?$CFs?$CJ?5requests?5authorization?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PCJP@subscribed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PBDF@query?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IBHF@Handling?5iq?5request?5for?5id?$DN?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CKOL@p2p?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03NHNF@set?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@INA@jabber?3iq?3roster?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@OLFG@?$DMiq?1?$DO?5Got?5roster?5push?0?5query?5has@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPOO@item?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJOK@subscription?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02LJIJ@to?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LBKE@both?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KIKH@none?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OPJK@name?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GCOD@group?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@CLHC@Roster?5push?5for?5jid?$DN?$CFs?0?5set?5subs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JIKN@remove?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LOOF@get?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NOHM@jabber?3iq?3version?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NMEN@result?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@BIMC@jabber?3iq?3info?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KFCH@tcfg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02KCDM@?$EAc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOLO@2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01EOC@6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KOHF@7?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KPCI@8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CFJN@?$CFs?5Web?5Messages?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MBPE@From?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@KDJE@Web?5message?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NAFD@?$CFs?$AN?6?$CFs?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KKPA@E?9mail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FACN@?$AN?6?$CFs?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LJOI@?$AN?6?$AN?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BBKE@tp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PEAM@t?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FOJL@u?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@CNHA@An?5alert?5has?5been?5received?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NMMF@TlenAlertNotify?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KCAO@b?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BJKC@inv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IKEP@Private?5conference?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GMOL@MailPopupEnabled?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CNMO@MailPopupBack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@KDHG@MailPopupText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JHKD@MailPopupDelayMode?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@ECBA@MailPopupDelay?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FONL@?$CFs?5mail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OEOL@?$CFs?3?5?$CFs?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MEND@Subject?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HNNJ@?$CFs?3?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@DCBH@TlenMailNotify?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FDLN@?1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FPMG@z?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KGFE@kick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LELA@?$CFs?1?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GHLJ@TlenVoiceNotify?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OEJB@Netlib?1Select?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LDML@?5?7?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@IAJP@Exiting?5KeepAliveThread?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _Netlib_CloseHandle
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSetting_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBDeleteContactSetting
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingByte
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingWord
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingString
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TranslateDialogDefault
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SkinPlaySound
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberDummyApcFunc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberPasswordDlgProc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberPasswordCreateDialogApcProc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberServerThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenSendAuth
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessStreamOpening
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessStreamClosing
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessProtocol
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessCipher
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessIqGetVersion
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessMessage
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessPresence
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberProcessIq
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessW
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessM
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenMailPopup
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessN
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessV
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberKeepAliveThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@	; `string'
PUBLIC	??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@	; `string'
PUBLIC	??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@	; `string'
PUBLIC	??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@		; `string'
PUBLIC	_JabberServerThread
PUBLIC	??_C@_0P@PMJI@Thread?5started?$AA@		; `string'
PUBLIC	??_C@_0CP@EPHB@Thread?5ended?0?5another?5normal?5thr@ ; `string'
PUBLIC	??_C@_09ONOL@LoginName?$AA@			; `string'
PUBLIC	??_C@_0CL@BOLK@Thread?5ended?0?5login?5name?5is?5not?5@ ; `string'
PUBLIC	??_C@_0M@IBOM@LoginServer?$AA@			; `string'
PUBLIC	??_C@_0CN@FPOL@Thread?5ended?0?5login?5server?5is?5no@ ; `string'
PUBLIC	??_C@_0N@BEAN@SavePassword?$AA@			; `string'
PUBLIC	??_C@_0DD@KPAN@Thread?5ended?0?5password?5request?5d@ ; `string'
PUBLIC	??_C@_08NKKK@Password?$AA@			; `string'
PUBLIC	??_C@_0BG@PHIF@DB?1Crypt?1DecodeString?$AA@	; `string'
PUBLIC	??_C@_0CJ@HFJJ@Thread?5ended?0?5password?5is?5not?5co@ ; `string'
PUBLIC	??_C@_0DB@IKHJ@Thread?5ended?0?5network?5buffer?5can@ ; `string'
PUBLIC	??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@		; `string'
PUBLIC	??_C@_03HCJC@jid?$AA@				; `string'
PUBLIC	??_C@_0L@FKFD@ManualHost?$AA@			; `string'
PUBLIC	??_C@_0L@DDEI@ManualPort?$AA@			; `string'
PUBLIC	??_C@_0BN@LCM@Thread?5server?$DN?8?$CFs?8?5port?$DN?8?$CFd?8?$AA@ ; `string'
PUBLIC	??_C@_0L@POM@AvatarHash?$AA@			; `string'
PUBLIC	??_C@_0N@IOKO@AvatarFormat?$AA@			; `string'
PUBLIC	??_C@_0BH@GFAF@Connection?5failed?5?$CI?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@ ; `string'
PUBLIC	??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0CA@LBMO@Thread?5ended?0?5connection?5failed?$AA@ ; `string'
PUBLIC	??_C@_09LNJJ@KeepAlive?$AA@			; `string'
PUBLIC	??_C@_0BN@LFIL@?$DMs?5s?$DN?81?8?5v?$DN?89?8?5t?$DN?806000106?8?$DO?$AA@ ; `string'
PUBLIC	??_C@_09NDA@?$DMs?5v?$DN?83?8?$DO?$AA@		; `string'
PUBLIC	??_C@_0BI@HMLD@Entering?5main?5recv?5loop?$AA@	; `string'
PUBLIC	??_C@_07OCNP@RECV?3?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BB@HAFD@bytesParsed?5?$DN?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0CF@LEOM@Increasing?5network?5buffer?5size?5t@ ; `string'
PUBLIC	??_C@_0DG@HPPI@Cannot?5reallocate?5more?5network?5b@ ; `string'
PUBLIC	??_C@_0EG@CPAF@Unknown?5state?3?5bytesParsed?$DN?$CFd?0?5d@ ; `string'
PUBLIC	??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@	; `string'
PUBLIC	??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@	; `string'
PUBLIC	??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@	; `string'
PUBLIC	??_C@_06IOLI@Status?$AA@			; `string'
PUBLIC	??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@	; `string'
PUBLIC	??_C@_0BK@DNBM@Thread?5ended?3?5server?$DN?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_0BF@CNLL@Exiting?5ServerThread?$AA@	; `string'
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	__imp__QueueUserAPC@12:NEAR
EXTRN	_WSAGetLastError@0:NEAR
EXTRN	__imp__SleepEx@8:NEAR
EXTRN	_JabberXmlInitState:NEAR
EXTRN	__imp__rand:NEAR
EXTRN	_JabberXmlDestroyState:NEAR
EXTRN	_JabberXmlSetCallback:NEAR
EXTRN	_JabberXmlParse:NEAR
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	_mmi:BYTE
EXTRN	__imp__CreateEventW@16:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	_memset:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcmp:NEAR
EXTRN	_strlen:NEAR
EXTRN	__imp__memmove:NEAR
EXTRN	__imp___strlwr:NEAR
EXTRN	__imp__strncpy:NEAR
EXTRN	__imp___snprintf:NEAR
EXTRN	_hMainThread:DWORD
EXTRN	_JabberLog:NEAR
EXTRN	_JabberWsConnect:NEAR
EXTRN	_JabberWsRecv:NEAR
EXTRN	_JabberWsRecvAES:NEAR
EXTRN	_JabberSend:NEAR
EXTRN	_JabberForkThread:NEAR
EXTRN	_JabberListWipeSpecial:NEAR
EXTRN	_pluginLink:DWORD
_BSS	SEGMENT
_onlinePassword DB 080H DUP (?)
_hEventPasswdDlg DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ DB 'Netlib/CloseHandle', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT
??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ DB 'DB/Contact/GetSetting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT
??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ DB 'DB/Contact/FreeVariant', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT
??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ DB 'DB/Contact/WriteSetting'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@PMJI@Thread?5started?$AA@
_DATA	SEGMENT
??_C@_0P@PMJI@Thread?5started?$AA@ DB 'Thread started', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CP@EPHB@Thread?5ended?0?5another?5normal?5thr@
_DATA	SEGMENT
??_C@_0CP@EPHB@Thread?5ended?0?5another?5normal?5thr@ DB 'Thread ended, a'
	DB	'nother normal thread is running', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ONOL@LoginName?$AA@
_DATA	SEGMENT
??_C@_09ONOL@LoginName?$AA@ DB 'LoginName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@BOLK@Thread?5ended?0?5login?5name?5is?5not?5@
_DATA	SEGMENT
??_C@_0CL@BOLK@Thread?5ended?0?5login?5name?5is?5not?5@ DB 'Thread ended,'
	DB	' login name is not configured', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
_DATA	SEGMENT
??_C@_0M@IBOM@LoginServer?$AA@ DB 'LoginServer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@FPOL@Thread?5ended?0?5login?5server?5is?5no@
_DATA	SEGMENT
??_C@_0CN@FPOL@Thread?5ended?0?5login?5server?5is?5no@ DB 'Thread ended, '
	DB	'login server is not configured', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@BEAN@SavePassword?$AA@
_DATA	SEGMENT
??_C@_0N@BEAN@SavePassword?$AA@ DB 'SavePassword', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DD@KPAN@Thread?5ended?0?5password?5request?5d@
_DATA	SEGMENT
??_C@_0DD@KPAN@Thread?5ended?0?5password?5request?5d@ DB 'Thread ended, p'
	DB	'assword request dialog was canceled', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NKKK@Password?$AA@
_DATA	SEGMENT
??_C@_08NKKK@Password?$AA@ DB 'Password', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PHIF@DB?1Crypt?1DecodeString?$AA@
_DATA	SEGMENT
??_C@_0BG@PHIF@DB?1Crypt?1DecodeString?$AA@ DB 'DB/Crypt/DecodeString', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@HFJJ@Thread?5ended?0?5password?5is?5not?5co@
_DATA	SEGMENT
??_C@_0CJ@HFJJ@Thread?5ended?0?5password?5is?5not?5co@ DB 'Thread ended, '
	DB	'password is not configured', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DB@IKHJ@Thread?5ended?0?5network?5buffer?5can@
_DATA	SEGMENT
??_C@_0DB@IKHJ@Thread?5ended?0?5network?5buffer?5can@ DB 'Thread ended, n'
	DB	'etwork buffer cannot be allocated', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT
??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ DB '%s@%s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT
??_C@_03HCJC@jid?$AA@ DB 'jid', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FKFD@ManualHost?$AA@
_DATA	SEGMENT
??_C@_0L@FKFD@ManualHost?$AA@ DB 'ManualHost', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DDEI@ManualPort?$AA@
_DATA	SEGMENT
??_C@_0L@DDEI@ManualPort?$AA@ DB 'ManualPort', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LCM@Thread?5server?$DN?8?$CFs?8?5port?$DN?8?$CFd?8?$AA@
_DATA	SEGMENT
??_C@_0BN@LCM@Thread?5server?$DN?8?$CFs?8?5port?$DN?8?$CFd?8?$AA@ DB 'Thr'
	DB	'ead server=''%s'' port=''%d''', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT
??_C@_0L@POM@AvatarHash?$AA@ DB 'AvatarHash', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT
??_C@_0N@IOKO@AvatarFormat?$AA@ DB 'AvatarFormat', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GFAF@Connection?5failed?5?$CI?$CFd?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BH@GFAF@Connection?5failed?5?$CI?$CFd?$CJ?$AA@ DB 'Connection fail'
	DB	'ed (%d)', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@
_DATA	SEGMENT
??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@ DB 'Sleeping %d s'
	DB	'econds before automatic reconnecting...', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@ DB 'Reconnecting'
	DB	' to the network...', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@LBMO@Thread?5ended?0?5connection?5failed?$AA@
_DATA	SEGMENT
??_C@_0CA@LBMO@Thread?5ended?0?5connection?5failed?$AA@ DB 'Thread ended,'
	DB	' connection failed', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LNJJ@KeepAlive?$AA@
_DATA	SEGMENT
??_C@_09LNJJ@KeepAlive?$AA@ DB 'KeepAlive', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LFIL@?$DMs?5s?$DN?81?8?5v?$DN?89?8?5t?$DN?806000106?8?$DO?$AA@
_DATA	SEGMENT
??_C@_0BN@LFIL@?$DMs?5s?$DN?81?8?5v?$DN?89?8?5t?$DN?806000106?8?$DO?$AA@ DB '<'
	DB	's s=''1'' v=''9'' t=''06000106''>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NDA@?$DMs?5v?$DN?83?8?$DO?$AA@
_DATA	SEGMENT
??_C@_09NDA@?$DMs?5v?$DN?83?8?$DO?$AA@ DB '<s v=''3''>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HMLD@Entering?5main?5recv?5loop?$AA@
_DATA	SEGMENT
??_C@_0BI@HMLD@Entering?5main?5recv?5loop?$AA@ DB 'Entering main recv loo'
	DB	'p', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OCNP@RECV?3?$CFs?$AA@
_DATA	SEGMENT
??_C@_07OCNP@RECV?3?$CFs?$AA@ DB 'RECV:%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HAFD@bytesParsed?5?$DN?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BB@HAFD@bytesParsed?5?$DN?5?$CFd?$AA@ DB 'bytesParsed = %d', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@LEOM@Increasing?5network?5buffer?5size?5t@
_DATA	SEGMENT
??_C@_0CF@LEOM@Increasing?5network?5buffer?5size?5t@ DB 'Increasing netwo'
	DB	'rk buffer size to %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DG@HPPI@Cannot?5reallocate?5more?5network?5b@
_DATA	SEGMENT
??_C@_0DG@HPPI@Cannot?5reallocate?5more?5network?5b@ DB 'Cannot reallocat'
	DB	'e more network buffer, go offline now', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EG@CPAF@Unknown?5state?3?5bytesParsed?$DN?$CFd?0?5d@
_DATA	SEGMENT
??_C@_0EG@CPAF@Unknown?5state?3?5bytesParsed?$DN?$CFd?0?5d@ DB 'Unknown s'
	DB	'tate: bytesParsed=%d, datalen=%d, jabberNetworkBufferSize=%d', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
_DATA	SEGMENT
??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ DB 'CList/ModifyMenuItem', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
_DATA	SEGMENT
??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ DB 'DB/Contact/FindFirst', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT
??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ DB 'Proto/GetContactBasePr'
	DB	'oto', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IOLI@Status?$AA@
_DATA	SEGMENT
??_C@_06IOLI@Status?$AA@ DB 'Status', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT
??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ DB 'DB/Contact/FindNext', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@DNBM@Thread?5ended?3?5server?$DN?8?$CFs?8?$AA@
_DATA	SEGMENT
??_C@_0BK@DNBM@Thread?5ended?3?5server?$DN?8?$CFs?8?$AA@ DB 'Thread ended'
	DB	': server=''%s''', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CNLL@Exiting?5ServerThread?$AA@
_DATA	SEGMENT
??_C@_0BF@CNLL@Exiting?5ServerThread?$AA@ DB 'Exiting ServerThread', 00H ; `string'
_DATA	ENDS
;	COMDAT _JabberServerThread
_TEXT	SEGMENT
_cgs$85251 = -16
_cws$85257 = -64
_cgs$85267 = -16
_cws$85273 = -64
_dbv$85282 = -76
_cgs$85283 = -16
_cgs$85292 = -16
_ack$85301 = -104
_ack$85307 = -104
_cws$85312 = -64
_cgs$85319 = -16
_dbv$85328 = -76
_cgs$85329 = -16
_cgs$85338 = -16
_dbv$85347 = -76
_cgs$85348 = -16
_ack$85356 = -188
_ack$85361 = -272
_ack$85367 = -132
_dbv$85373 = -284
_cgs$85374 = -16
_ack$85382 = -244
_dbv$85388 = -56
_cgs$85389 = -76
_cws$85396 = -96
_ack$85401 = -160
_ack$85411 = -216
_info$ = 8
_dbv$ = -40
_jidStr$ = -524
_connectHost$ = -44
_buffer$ = 8
_xmlState$ = -396
_jabberNetworkBufferSize$ = -28
_oldStatus$ = -24
_reconnectMaxTime$ = -20
_numRetry$ = -4
_reconnectTime$ = -20
_clmi$ = -324
_loginErr$ = -4
_bytesParsed$83752 = -20
_JabberServerThread PROC NEAR				; COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 102  : 	DBVARIANT dbv;
; 103  : 	char jidStr[128];
; 104  : 	char *connectHost;
; 105  : 	char *buffer;
; 106  : 	int datalen;
; 107  : 	XmlState xmlState;
; 108  : 	HANDLE hContact;
; 109  : 	int jabberNetworkBufferSize;
; 110  : 	int oldStatus = ID_STATUS_OFFLINE;
; 111  : 	int reconnectMaxTime;
; 112  : 	int numRetry;
; 113  : 	int reconnectTime;
; 114  : 	char *str;
; 115  : 	CLISTMENUITEM clmi;
; 116  :     int loginErr = 0;
; 117  : 	JabberLog(info->proto, "Thread started");

  0000b	8b 75 08	 mov	 esi, DWORD PTR _info$[ebp]
  0000e	57		 push	 edi
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PMJI@Thread?5started?$AA@ ; `string'
  00014	33 db		 xor	 ebx, ebx
  00016	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0001c	89 5d fc	 mov	 DWORD PTR _loginErr$[ebp], ebx
  0001f	e8 00 00 00 00	 call	 _JabberLog

; 118  : 
; 119  : 
; 120  : 	// Normal server connection, we will fetch all connection parameters
; 121  : 	// e.g. username, password, etc. from the database.
; 122  : 
; 123  : 	if (info->proto->threadData != NULL) {

  00024	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0002a	59		 pop	 ecx
  0002b	59		 pop	 ecx
  0002c	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00032	3b cb		 cmp	 ecx, ebx
  00034	74 18		 je	 SHORT $L83654

; 124  : 		// Will not start another connection thread if a thread is already running.
; 125  : 		// Make APC call to the main thread. This will immediately wake the thread up
; 126  : 		// in case it is asleep in the reconnect loop so that it will immediately
; 127  : 		// reconnect.
; 128  : 		QueueUserAPC(JabberDummyApcFunc, info->proto->threadData->hThread, 0);

  00036	53		 push	 ebx
  00037	ff 31		 push	 DWORD PTR [ecx]
  00039	68 00 00 00 00	 push	 OFFSET FLAT:_JabberDummyApcFunc@4
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueueUserAPC@12

; 129  : 		JabberLog(info->proto, "Thread ended, another normal thread is running");

  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@EPHB@Thread?5ended?0?5another?5normal?5thr@ ; `string'

; 130  : 		mir_free(info);
; 131  : 		return;

  00049	e9 a0 0d 00 00	 jmp	 $L85428
$L83654:

; 132  : 	}
; 133  : 
; 134  :     info->proto->threadData = info;

  0004e	89 b0 e0 00 00
	00		 mov	 DWORD PTR [eax+224], esi

; 135  :     
; 136  : 	if (!DBGetContactSetting(NULL, info->proto->iface.m_szModuleName, "LoginName", &dbv)) {

  00054	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0005a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85251[ebp+4], OFFSET FLAT:??_C@_09ONOL@LoginName?$AA@ ; `string'
  00061	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00064	89 45 f0	 mov	 DWORD PTR _cgs$85251[ebp], eax
  00067	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  0006a	89 45 f8	 mov	 DWORD PTR _cgs$85251[ebp+8], eax
  0006d	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85251[ebp]
  00070	50		 push	 eax
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00076	53		 push	 ebx
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0007c	ff 50 24	 call	 DWORD PTR [eax+36]
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
  00087	85 c0		 test	 eax, eax
  00089	0f 85 01 01 00
	00		 jne	 $L83657

; 137  : 		strncpy(info->username, dbv.pszVal, sizeof(info->username));

  0008f	57		 push	 edi
  00090	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00093	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  00096	50		 push	 eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 138  : 		info->username[sizeof(info->username)-1] = '\0';
; 139  : 		_strlwr(info->username);

  0009d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000a0	88 9e 87 00 00
	00		 mov	 BYTE PTR [esi+135], bl
  000a6	50		 push	 eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strlwr

; 140  : 		DBWriteContactSettingString(NULL, info->proto->iface.m_szModuleName, "LoginName", info->username);

  000ad	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  000b3	80 4d c8 ff	 or	 BYTE PTR _cws$85257[ebp+8], 255 ; 000000ffH
  000b7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _cws$85257[ebp+4], OFFSET FLAT:??_C@_09ONOL@LoginName?$AA@ ; `string'
  000be	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000c1	89 45 c0	 mov	 DWORD PTR _cws$85257[ebp], eax
  000c4	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000c7	89 45 cc	 mov	 DWORD PTR _cws$85257[ebp+12], eax
  000ca	8d 45 c0	 lea	 eax, DWORD PTR _cws$85257[ebp]
  000cd	50		 push	 eax
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d3	53		 push	 ebx
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  000d9	ff 50 24	 call	 DWORD PTR [eax+36]

; 141  : 		DBFreeVariant(&dbv);

  000dc	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  000df	50		 push	 eax
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e5	53		 push	 ebx
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000eb	ff 50 24	 call	 DWORD PTR [eax+36]

; 149  :         if (!DBGetContactSetting(NULL, info->proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  000ee	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  000f4	83 c4 28	 add	 esp, 40			; 00000028H
  000f7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85267[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  000fe	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00101	89 45 f0	 mov	 DWORD PTR _cgs$85267[ebp], eax
  00104	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00107	89 45 f8	 mov	 DWORD PTR _cgs$85267[ebp+8], eax
  0010a	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85267[ebp]
  0010d	50		 push	 eax
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00113	53		 push	 ebx
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00119	ff 50 24	 call	 DWORD PTR [eax+36]
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	85 c0		 test	 eax, eax
  00121	75 77		 jne	 SHORT $L83665

; 150  :             strncpy(info->server, dbv.pszVal, sizeof(info->server));

  00123	57		 push	 edi
  00124	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  0012a	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  0012d	50		 push	 eax
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 151  :             info->server[sizeof(info->server)-1] = '\0';
; 152  :             _strlwr(info->server);

  00134	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  0013a	88 9e 87 01 00
	00		 mov	 BYTE PTR [esi+391], bl
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strlwr

; 153  :             DBWriteContactSettingString(NULL, info->proto->iface.m_szModuleName, "LoginServer", info->server);

  00147	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0014d	80 4d c8 ff	 or	 BYTE PTR _cws$85273[ebp+8], 255 ; 000000ffH
  00151	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _cws$85273[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00158	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0015b	89 45 c0	 mov	 DWORD PTR _cws$85273[ebp], eax
  0015e	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  00164	89 45 cc	 mov	 DWORD PTR _cws$85273[ebp+12], eax
  00167	8d 45 c0	 lea	 eax, DWORD PTR _cws$85273[ebp]
  0016a	50		 push	 eax
  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00170	53		 push	 ebx
  00171	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00176	ff 50 24	 call	 DWORD PTR [eax+36]

; 154  :             DBFreeVariant(&dbv);

  00179	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  0017c	50		 push	 eax
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00182	53		 push	 ebx
  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00188	ff 50 24	 call	 DWORD PTR [eax+36]
  0018b	83 c4 28	 add	 esp, 40			; 00000028H

; 155  :         } else {

  0018e	eb 28		 jmp	 SHORT $L85425
$L83657:

; 142  :         
; 143  : 	} else {
; 144  : 		JabberLog(info->proto, "Thread ended, login name is not configured");

  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@BOLK@Thread?5ended?0?5login?5name?5is?5not?5@ ; `string'

; 145  :         loginErr = LOGINERR_BADUSERID;
; 146  :     }
; 147  : 
; 148  :     if (loginErr == 0) {

  00195	e9 60 01 00 00	 jmp	 $L85429
$L83665:

; 156  :     		JabberLog(info->proto, "Thread ended, login server is not configured");

  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@FPOL@Thread?5ended?0?5login?5server?5is?5no@ ; `string'
  0019f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  001a5	e8 00 00 00 00	 call	 _JabberLog
  001aa	59		 pop	 ecx

; 157  :             loginErr = LOGINERR_NONETWORK;

  001ab	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _loginErr$[ebp], 2
  001b2	59		 pop	 ecx

; 158  :         }
; 159  :     }
; 160  : 
; 161  :     if (loginErr == 0) {

  001b3	e9 56 01 00 00	 jmp	 $L83688
$L85425:

; 162  :         if (DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "SavePassword", TRUE) == FALSE) {

  001b8	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  001be	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85283[ebp+4], OFFSET FLAT:??_C@_0N@BEAN@SavePassword?$AA@ ; `string'
  001c5	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  001c8	89 45 f0	 mov	 DWORD PTR _cgs$85283[ebp], eax
  001cb	8d 45 b4	 lea	 eax, DWORD PTR _dbv$85282[ebp]
  001ce	89 45 f8	 mov	 DWORD PTR _cgs$85283[ebp+8], eax
  001d1	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85283[ebp]
  001d4	50		 push	 eax
  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001da	53		 push	 ebx
  001db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  001e0	ff 50 24	 call	 DWORD PTR [eax+36]
  001e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e6	85 c0		 test	 eax, eax
  001e8	0f 85 84 00 00
	00		 jne	 $L83672
  001ee	0f b6 45 b8	 movzx	 eax, BYTE PTR _dbv$85282[ebp+4]
  001f2	3b c3		 cmp	 eax, ebx
  001f4	75 7c		 jne	 SHORT $L83672

; 163  :             // Ugly hack: continue logging on only the return value is &(onlinePassword[0])
; 164  :             // because if WM_QUIT while dialog box is still visible, p is returned with some
; 165  :             // exit code which may not be NULL.
; 166  :             // Should be better with modeless.
; 167  :             onlinePassword[0] = (char) -1;

  001f6	80 0d 00 00 00
	00 ff		 or	 BYTE PTR _onlinePassword, -1

; 168  :             hEventPasswdDlg = CreateEvent(NULL, FALSE, FALSE, NULL);

  001fd	53		 push	 ebx
  001fe	53		 push	 ebx
  001ff	53		 push	 ebx
  00200	53		 push	 ebx
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16
  00207	a3 00 00 00 00	 mov	 DWORD PTR _hEventPasswdDlg, eax

; 169  :             QueueUserAPC(JabberPasswordCreateDialogApcProc, hMainThread, (DWORD) jidStr);

  0020c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _jidStr$[ebp]
  00212	50		 push	 eax
  00213	ff 35 00 00 00
	00		 push	 DWORD PTR _hMainThread
  00219	68 00 00 00 00	 push	 OFFSET FLAT:_JabberPasswordCreateDialogApcProc@4
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueueUserAPC@12

; 170  :             WaitForSingleObject(hEventPasswdDlg, INFINITE);

  00224	6a ff		 push	 -1
  00226	ff 35 00 00 00
	00		 push	 DWORD PTR _hEventPasswdDlg
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 171  :             CloseHandle(hEventPasswdDlg);

  00232	ff 35 00 00 00
	00		 push	 DWORD PTR _hEventPasswdDlg
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 172  :             //if ((p=(char *)DialogBoxParam(hInst, MAKEINTRESOURCE(IDD_PASSWORD), NULL, JabberPasswordDlgProc, (LPARAM) jidStr)) != onlinePassword) {
; 173  :             if (onlinePassword[0] != (char) -1) {

  0023e	80 3d 00 00 00
	00 ff		 cmp	 BYTE PTR _onlinePassword, -1
  00245	74 21		 je	 SHORT $L83679

; 174  :                 strncpy(info->password, onlinePassword, sizeof(info->password));

  00247	57		 push	 edi
  00248	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  0024e	68 00 00 00 00	 push	 OFFSET FLAT:_onlinePassword
  00253	50		 push	 eax
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0025a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  :                 info->password[sizeof(info->password)-1] = '\0';

  0025d	88 9e 07 01 00
	00		 mov	 BYTE PTR [esi+263], bl

; 176  :             } else {

  00263	e9 a6 00 00 00	 jmp	 $L83688
$L83679:

; 177  :                 JabberLog(info->proto, "Thread ended, password request dialog was canceled");

  00268	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@KPAN@Thread?5ended?0?5password?5request?5d@ ; `string'

; 178  :                 loginErr = LOGINERR_BADUSERID;
; 179  :             }
; 180  :         } else {

  0026d	e9 88 00 00 00	 jmp	 $L85429
$L83672:

; 181  :             if (!DBGetContactSetting(NULL, info->proto->iface.m_szModuleName, "Password", &dbv)) {

  00272	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00278	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85292[ebp+4], OFFSET FLAT:??_C@_08NKKK@Password?$AA@ ; `string'
  0027f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00282	89 45 f0	 mov	 DWORD PTR _cgs$85292[ebp], eax
  00285	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00288	89 45 f8	 mov	 DWORD PTR _cgs$85292[ebp+8], eax
  0028b	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85292[ebp]
  0028e	50		 push	 eax
  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00294	53		 push	 ebx
  00295	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0029a	ff 50 24	 call	 DWORD PTR [eax+36]
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a0	85 c0		 test	 eax, eax
  002a2	75 51		 jne	 SHORT $L83684

; 182  :                 CallService(MS_DB_CRYPT_DECODESTRING, strlen(dbv.pszVal)+1, (LPARAM) dbv.pszVal);

  002a4	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002ac	83 c0 24	 add	 eax, 36			; 00000024H
  002af	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  002b2	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
  002b5	e8 00 00 00 00	 call	 _strlen
  002ba	59		 pop	 ecx
  002bb	40		 inc	 eax
  002bc	50		 push	 eax
  002bd	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  002c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PHIF@DB?1Crypt?1DecodeString?$AA@ ; `string'
  002c5	ff 10		 call	 DWORD PTR [eax]

; 183  :                 strncpy(info->password, dbv.pszVal, sizeof(info->password));

  002c7	57		 push	 edi
  002c8	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  002ce	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  002d1	50		 push	 eax
  002d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 184  :                 info->password[sizeof(info->password)-1] = '\0';
; 185  :                 DBFreeVariant(&dbv);

  002d8	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  002db	88 9e 07 01 00
	00		 mov	 BYTE PTR [esi+263], bl
  002e1	50		 push	 eax
  002e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002e7	53		 push	 ebx
  002e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  002ed	ff 50 24	 call	 DWORD PTR [eax+36]
  002f0	83 c4 24	 add	 esp, 36			; 00000024H

; 186  :             } else {

  002f3	eb 19		 jmp	 SHORT $L83688
$L83684:

; 187  :                 JabberLog(info->proto, "Thread ended, password is not configured");

  002f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@HFJJ@Thread?5ended?0?5password?5is?5not?5co@ ; `string'
$L85429:
  002fa	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00300	e8 00 00 00 00	 call	 _JabberLog
  00305	59		 pop	 ecx

; 188  :                 loginErr = LOGINERR_BADUSERID;

  00306	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _loginErr$[ebp], 4
  0030d	59		 pop	 ecx
$L83688:

; 189  :             }
; 190  :         }
; 191  :     }    
; 192  : 	
; 193  :     jabberNetworkBufferSize = 2048;
; 194  : 	if ((buffer=(char *) mir_alloc(jabberNetworkBufferSize+1)) == NULL) {	// +1 is for '\0' when debug logging this buffer

  0030e	68 01 08 00 00	 push	 2049			; 00000801H
  00313	c7 45 e4 00 08
	00 00		 mov	 DWORD PTR _jabberNetworkBufferSize$[ebp], 2048 ; 00000800H
  0031a	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00320	3b c3		 cmp	 eax, ebx
  00322	59		 pop	 ecx
  00323	89 45 08	 mov	 DWORD PTR _buffer$[ebp], eax
  00326	75 19		 jne	 SHORT $L83692

; 195  : 		JabberLog(info->proto, "Thread ended, network buffer cannot be allocated");

  00328	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IKHJ@Thread?5ended?0?5network?5buffer?5can@ ; `string'
  0032d	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00333	e8 00 00 00 00	 call	 _JabberLog
  00338	59		 pop	 ecx

; 196  :         loginErr = LOGINERR_NONETWORK;

  00339	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _loginErr$[ebp], 2
  00340	59		 pop	 ecx
$L83692:

; 197  :     }
; 198  : 
; 199  :     if (loginErr != 0) {

  00341	39 5d fc	 cmp	 DWORD PTR _loginErr$[ebp], ebx
  00344	0f 84 b9 00 00
	00		 je	 $L83694

; 200  :         info->proto->threadData = NULL;

  0034a	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]

; 201  : 		oldStatus = info->proto->iface.m_iStatus;
; 202  : 		info->proto->iface.m_iStatus = ID_STATUS_OFFLINE;
; 203  : 		ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  00350	6a 06		 push	 6
  00352	59		 pop	 ecx
  00353	8d 7d 9c	 lea	 edi, DWORD PTR _ack$85301[ebp+4]
  00356	89 98 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ebx
  0035c	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00362	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00365	c7 40 04 87 9c
	00 00		 mov	 DWORD PTR [eax+4], 40071 ; 00009c87H
  0036c	33 c0		 xor	 eax, eax
  0036e	f3 ab		 rep stosd
  00370	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00376	c7 45 98 1c 00
	00 00		 mov	 DWORD PTR _ack$85301[ebp], 28 ; 0000001cH
  0037d	89 5d a0	 mov	 DWORD PTR _ack$85301[ebp+8], ebx
  00380	c7 45 a4 0c 00
	00 00		 mov	 DWORD PTR _ack$85301[ebp+12], 12 ; 0000000cH
  00387	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0038a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0038d	89 45 b0	 mov	 DWORD PTR _ack$85301[ebp+24], eax
  00390	8d 45 98	 lea	 eax, DWORD PTR _ack$85301[ebp]
  00393	50		 push	 eax
  00394	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00399	53		 push	 ebx
  0039a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0039f	89 4d 9c	 mov	 DWORD PTR _ack$85301[ebp+4], ecx
  003a2	89 5d a8	 mov	 DWORD PTR _ack$85301[ebp+16], ebx
  003a5	89 55 ac	 mov	 DWORD PTR _ack$85301[ebp+20], edx
  003a8	ff 50 24	 call	 DWORD PTR [eax+36]

; 204  : 		ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_LOGIN, ACKRESULT_FAILED, NULL, loginErr);

  003ab	6a 06		 push	 6
  003ad	33 c0		 xor	 eax, eax
  003af	59		 pop	 ecx
  003b0	8d 7d 9c	 lea	 edi, DWORD PTR _ack$85307[ebp+4]
  003b3	f3 ab		 rep stosd
  003b5	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  003bb	c7 45 98 1c 00
	00 00		 mov	 DWORD PTR _ack$85307[ebp], 28 ; 0000001cH
  003c2	89 5d a0	 mov	 DWORD PTR _ack$85307[ebp+8], ebx
  003c5	c7 45 a4 09 00
	00 00		 mov	 DWORD PTR _ack$85307[ebp+12], 9
  003cc	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003cf	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR _ack$85307[ebp+16], 1
  003d6	89 45 9c	 mov	 DWORD PTR _ack$85307[ebp+4], eax
  003d9	8b 45 fc	 mov	 eax, DWORD PTR _loginErr$[ebp]
  003dc	89 45 b0	 mov	 DWORD PTR _ack$85307[ebp+24], eax
  003df	8d 45 98	 lea	 eax, DWORD PTR _ack$85307[ebp]
  003e2	50		 push	 eax
  003e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003e8	53		 push	 ebx
  003e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  003ee	89 5d ac	 mov	 DWORD PTR _ack$85307[ebp+20], ebx
  003f1	ff 50 24	 call	 DWORD PTR [eax+36]

; 205  : 		mir_free(info);

  003f4	56		 push	 esi
  003f5	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  003fb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 206  : 		return;

  003fe	e9 00 0a 00 00	 jmp	 $L83636
$L83694:

; 207  : 	}
; 208  :     
; 209  : 	_snprintf(jidStr, sizeof(jidStr), "%s@%s", info->username, info->server);

  00403	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  00409	50		 push	 eax
  0040a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0040d	50		 push	 eax
  0040e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  00413	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _jidStr$[ebp]
  00419	57		 push	 edi
  0041a	50		 push	 eax
  0041b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 210  : 	DBWriteContactSettingString(NULL, info->proto->iface.m_szModuleName, "jid", jidStr);

  00421	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00427	80 4d c8 ff	 or	 BYTE PTR _cws$85312[ebp+8], 255 ; 000000ffH
  0042b	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _cws$85312[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00432	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00435	89 45 c0	 mov	 DWORD PTR _cws$85312[ebp], eax
  00438	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _jidStr$[ebp]
  0043e	89 45 cc	 mov	 DWORD PTR _cws$85312[ebp+12], eax
  00441	8d 45 c0	 lea	 eax, DWORD PTR _cws$85312[ebp]
  00444	50		 push	 eax
  00445	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0044a	53		 push	 ebx
  0044b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00450	ff 50 24	 call	 DWORD PTR [eax+36]

; 211  : 
; 212  : 	if (!DBGetContactSetting(NULL, info->proto->iface.m_szModuleName, "ManualHost", &dbv)) {

  00453	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00459	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85319[ebp+4], OFFSET FLAT:??_C@_0L@FKFD@ManualHost?$AA@ ; `string'
  00460	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00463	89 45 f0	 mov	 DWORD PTR _cgs$85319[ebp], eax
  00466	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00469	89 45 f8	 mov	 DWORD PTR _cgs$85319[ebp+8], eax
  0046c	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85319[ebp]
  0046f	50		 push	 eax
  00470	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00475	53		 push	 ebx
  00476	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0047b	ff 50 24	 call	 DWORD PTR [eax+36]
  0047e	83 c4 2c	 add	 esp, 44			; 0000002cH
  00481	85 c0		 test	 eax, eax
  00483	75 2c		 jne	 SHORT $L85324

; 213  : 		strncpy(info->manualHost, dbv.pszVal, sizeof(info->manualHost));

  00485	57		 push	 edi
  00486	8d 86 88 01 00
	00		 lea	 eax, DWORD PTR [esi+392]
  0048c	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  0048f	50		 push	 eax
  00490	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy

; 214  : 		info->manualHost[sizeof(info->manualHost)-1] = '\0';
; 215  : 		DBFreeVariant(&dbv);

  00496	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00499	88 9e 07 02 00
	00		 mov	 BYTE PTR [esi+519], bl
  0049f	50		 push	 eax
  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004a5	53		 push	 ebx
  004a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  004ab	ff 50 24	 call	 DWORD PTR [eax+36]
  004ae	83 c4 18	 add	 esp, 24			; 00000018H
$L85324:

; 216  : 	}
; 217  : 	info->port = DBGetContactSettingWord(NULL, info->proto->iface.m_szModuleName, "ManualPort", TLEN_DEFAULT_PORT);

  004b1	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  004b7	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  004bc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85329[ebp+4], OFFSET FLAT:??_C@_0L@DDEI@ManualPort?$AA@ ; `string'
  004c3	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  004c6	89 45 f0	 mov	 DWORD PTR _cgs$85329[ebp], eax
  004c9	8d 45 b4	 lea	 eax, DWORD PTR _dbv$85328[ebp]
  004cc	89 45 f8	 mov	 DWORD PTR _cgs$85329[ebp+8], eax
  004cf	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85329[ebp]
  004d2	50		 push	 eax
  004d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004d8	53		 push	 ebx
  004d9	57		 push	 edi
  004da	ff 50 24	 call	 DWORD PTR [eax+36]
  004dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e0	ba bb 01 00 00	 mov	 edx, 443		; 000001bbH
  004e5	85 c0		 test	 eax, eax
  004e7	75 04		 jne	 SHORT $L85327
  004e9	0f b7 55 b8	 movzx	 edx, WORD PTR _dbv$85328[ebp+4]
$L85327:

; 218  : 	info->useEncryption = info->proto->tlenOptions.useEncryption;

  004ed	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]

; 219  : 
; 220  : 	if (info->manualHost[0])

  004f3	38 9e 88 01 00
	00		 cmp	 BYTE PTR [esi+392], bl
  004f9	66 89 96 cc 02
	00 00		 mov	 WORD PTR [esi+716], dx
  00500	8b 88 b4 01 00
	00		 mov	 ecx, DWORD PTR [eax+436]
  00506	89 8e d0 02 00
	00		 mov	 DWORD PTR [esi+720], ecx
  0050c	8d 8e 88 01 00
	00		 lea	 ecx, DWORD PTR [esi+392]

; 221  : 		connectHost = info->manualHost;
; 222  : 	else

  00512	75 06		 jne	 SHORT $L85430

; 223  : 		connectHost = info->server;

  00514	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
$L85430:
  0051a	89 4d d4	 mov	 DWORD PTR _connectHost$[ebp], ecx

; 224  : 
; 225  : 	JabberLog(info->proto, "Thread server='%s' port='%d'", connectHost, info->port);

  0051d	0f b7 ca	 movzx	 ecx, dx
  00520	51		 push	 ecx
  00521	ff 75 d4	 push	 DWORD PTR _connectHost$[ebp]
  00524	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@LCM@Thread?5server?$DN?8?$CFs?8?5port?$DN?8?$CFd?8?$AA@ ; `string'
  00529	50		 push	 eax
  0052a	e8 00 00 00 00	 call	 _JabberLog

; 226  : 
; 227  : 
; 228  : 	if (!DBGetContactSetting(NULL, info->proto->iface.m_szModuleName, "AvatarHash", &dbv)) {

  0052f	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00535	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85338[ebp+4], OFFSET FLAT:??_C@_0L@POM@AvatarHash?$AA@ ; `string'
  0053c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0053f	89 45 f0	 mov	 DWORD PTR _cgs$85338[ebp], eax
  00542	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  00545	89 45 f8	 mov	 DWORD PTR _cgs$85338[ebp+8], eax
  00548	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85338[ebp]
  0054b	50		 push	 eax
  0054c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00551	53		 push	 ebx
  00552	57		 push	 edi
  00553	ff 50 24	 call	 DWORD PTR [eax+36]
  00556	83 c4 1c	 add	 esp, 28			; 0000001cH
  00559	85 c0		 test	 eax, eax
  0055b	75 2f		 jne	 SHORT $L85343

; 229  : 		strcpy(info->proto->threadData->avatarHash, dbv.pszVal);

  0055d	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00563	ff 75 dc	 push	 DWORD PTR _dbv$[ebp+4]
  00566	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]
  0056c	05 88 02 00 00	 add	 eax, 648		; 00000288H
  00571	50		 push	 eax
  00572	e8 00 00 00 00	 call	 _strcpy

; 230  : 		DBFreeVariant(&dbv);

  00577	8d 45 d8	 lea	 eax, DWORD PTR _dbv$[ebp]
  0057a	50		 push	 eax
  0057b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00580	53		 push	 ebx
  00581	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00586	ff 50 24	 call	 DWORD PTR [eax+36]
  00589	83 c4 14	 add	 esp, 20			; 00000014H
$L85343:

; 231  : 	}
; 232  : 	info->avatarFormat = DBGetContactSettingDword(NULL, info->proto->iface.m_szModuleName, "AvatarFormat", PA_FORMAT_UNKNOWN);

  0058c	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00592	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85348[ebp+4], OFFSET FLAT:??_C@_0N@IOKO@AvatarFormat?$AA@ ; `string'
  00599	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0059c	89 45 f0	 mov	 DWORD PTR _cgs$85348[ebp], eax
  0059f	8d 45 b4	 lea	 eax, DWORD PTR _dbv$85347[ebp]
  005a2	89 45 f8	 mov	 DWORD PTR _cgs$85348[ebp+8], eax
  005a5	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85348[ebp]
  005a8	50		 push	 eax
  005a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  005ae	53		 push	 ebx
  005af	57		 push	 edi
  005b0	ff 50 24	 call	 DWORD PTR [eax+36]
  005b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  : 
; 234  :     
; 235  : 	reconnectMaxTime = 10;

  005b6	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _reconnectMaxTime$[ebp], 10 ; 0000000aH
  005bd	f7 d8		 neg	 eax
  005bf	1b c0		 sbb	 eax, eax

; 236  : 	numRetry = 0;

  005c1	89 5d fc	 mov	 DWORD PTR _numRetry$[ebp], ebx
  005c4	f7 d0		 not	 eax
  005c6	23 45 b8	 and	 eax, DWORD PTR _dbv$85347[ebp+4]
  005c9	89 86 c8 02 00
	00		 mov	 DWORD PTR [esi+712], eax
$L83717:

; 237  : 
; 238  : 	for (;;) {	// Reconnect loop
; 239  : 
; 240  : 		info->s = JabberWsConnect(info->proto, connectHost, info->port);

  005cf	66 8b 86 cc 02
	00 00		 mov	 ax, WORD PTR [esi+716]
  005d6	50		 push	 eax
  005d7	ff 75 d4	 push	 DWORD PTR _connectHost$[ebp]
  005da	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  005e0	e8 00 00 00 00	 call	 _JabberWsConnect
  005e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 241  : 		if (info->s == NULL) {

  005e8	3b c3		 cmp	 eax, ebx
  005ea	89 86 d4 02 00
	00		 mov	 DWORD PTR [esi+724], eax
  005f0	0f 85 e2 01 00
	00		 jne	 $L83720

; 242  : 			JabberLog(info->proto, "Connection failed (%d)", WSAGetLastError());

  005f6	e8 00 00 00 00	 call	 _WSAGetLastError@0
  005fb	50		 push	 eax
  005fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GFAF@Connection?5failed?5?$CI?$CFd?$CJ?$AA@ ; `string'
  00601	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00607	e8 00 00 00 00	 call	 _JabberLog

; 243  : 			if (info->proto->threadData == info) {

  0060c	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00612	83 c4 0c	 add	 esp, 12			; 0000000cH
  00615	39 b0 e0 00 00
	00		 cmp	 DWORD PTR [eax+224], esi
  0061b	0f 85 5f 07 00
	00		 jne	 $L83730

; 244  : 				oldStatus = info->proto->iface.m_iStatus;

  00621	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 245  : 				info->proto->iface.m_iStatus = ID_STATUS_OFFLINE;
; 246  : 				ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_LOGIN, ACKRESULT_FAILED, NULL, LOGINERR_NONETWORK);

  00624	6a 06		 push	 6
  00626	89 4d e8	 mov	 DWORD PTR _oldStatus$[ebp], ecx
  00629	c7 40 04 87 9c
	00 00		 mov	 DWORD PTR [eax+4], 40071 ; 00009c87H
  00630	59		 pop	 ecx
  00631	33 c0		 xor	 eax, eax
  00633	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _ack$85356[ebp+4]
  00639	f3 ab		 rep stosd
  0063b	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00641	c7 85 44 ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85356[ebp], 28 ; 0000001cH
  0064b	89 9d 4c ff ff
	ff		 mov	 DWORD PTR _ack$85356[ebp+8], ebx
  00651	c7 85 50 ff ff
	ff 09 00 00 00	 mov	 DWORD PTR _ack$85356[ebp+12], 9
  0065b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0065e	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _ack$85356[ebp+16], 1
  00668	89 85 48 ff ff
	ff		 mov	 DWORD PTR _ack$85356[ebp+4], eax
  0066e	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _ack$85356[ebp]
  00674	50		 push	 eax
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0067a	53		 push	 ebx
  0067b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00680	89 9d 58 ff ff
	ff		 mov	 DWORD PTR _ack$85356[ebp+20], ebx
  00686	c7 85 5c ff ff
	ff 02 00 00 00	 mov	 DWORD PTR _ack$85356[ebp+24], 2
  00690	ff 50 24	 call	 DWORD PTR [eax+36]

; 247  : 				ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  00693	6a 06		 push	 6
  00695	33 c0		 xor	 eax, eax
  00697	59		 pop	 ecx
  00698	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR _ack$85361[ebp+4]
  0069e	f3 ab		 rep stosd
  006a0	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  006a6	c7 85 f0 fe ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85361[ebp], 28 ; 0000001cH
  006b0	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _ack$85361[ebp+8], ebx
  006b6	c7 85 fc fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _ack$85361[ebp+12], 12 ; 0000000cH
  006c0	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  006c3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  006c6	89 85 08 ff ff
	ff		 mov	 DWORD PTR _ack$85361[ebp+24], eax
  006cc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _ack$85361[ebp]
  006d2	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _ack$85361[ebp+4], ecx
  006d8	8b 4d e8	 mov	 ecx, DWORD PTR _oldStatus$[ebp]
  006db	50		 push	 eax
  006dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  006e1	53		 push	 ebx
  006e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  006e7	89 9d 00 ff ff
	ff		 mov	 DWORD PTR _ack$85361[ebp+16], ebx
  006ed	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _ack$85361[ebp+20], ecx
  006f3	ff 50 24	 call	 DWORD PTR [eax+36]

; 248  : 				if (info->proto->tlenOptions.reconnect == TRUE) {

  006f6	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  006fc	83 c4 18	 add	 esp, 24			; 00000018H
  006ff	83 b8 b8 01 00
	00 01		 cmp	 DWORD PTR [eax+440], 1
  00706	0f 85 68 06 00
	00		 jne	 $L83735

; 249  : 					reconnectTime = rand() % reconnectMaxTime;

  0070c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00712	99		 cdq
  00713	f7 7d ec	 idiv	 DWORD PTR _reconnectMaxTime$[ebp]
  00716	8b fa		 mov	 edi, edx

; 250  : 					JabberLog(info->proto, "Sleeping %d seconds before automatic reconnecting...", reconnectTime);

  00718	57		 push	 edi
  00719	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@ ; `string'
  0071e	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00724	e8 00 00 00 00	 call	 _JabberLog

; 251  : 					SleepEx(reconnectTime * 1000, TRUE);

  00729	69 ff e8 03 00
	00		 imul	 edi, 1000		; 000003e8H
  0072f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00732	6a 01		 push	 1
  00734	57		 push	 edi
  00735	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8

; 252  : 					if (reconnectMaxTime < 10*60)	// Maximum is 10 minutes

  0073b	8b 45 ec	 mov	 eax, DWORD PTR _reconnectMaxTime$[ebp]
  0073e	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00743	7d 05		 jge	 SHORT $L83729

; 253  : 						reconnectMaxTime *= 2;

  00745	03 c0		 add	 eax, eax
  00747	89 45 ec	 mov	 DWORD PTR _reconnectMaxTime$[ebp], eax
$L83729:

; 254  : 					if (info->proto->threadData == info) {	// Make sure this is still the active thread for the main Jabber connection

  0074a	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00750	39 b0 e0 00 00
	00		 cmp	 DWORD PTR [eax+224], esi
  00756	0f 85 24 06 00
	00		 jne	 $L83730

; 255  : 						JabberLog(info->proto, "Reconnecting to the network...");

  0075c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@ ; `string'
  00761	50		 push	 eax
  00762	e8 00 00 00 00	 call	 _JabberLog

; 256  : 						if (numRetry < MAX_CONNECT_RETRIES)

  00767	81 7d fc 10 27
	00 00		 cmp	 DWORD PTR _numRetry$[ebp], 10000 ; 00002710H
  0076e	59		 pop	 ecx
  0076f	59		 pop	 ecx
  00770	7d 03		 jge	 SHORT $L83732

; 257  : 							numRetry++;

  00772	ff 45 fc	 inc	 DWORD PTR _numRetry$[ebp]
$L83732:

; 258  : 						oldStatus = info->proto->iface.m_iStatus;

  00775	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]

; 259  : 						info->proto->iface.m_iStatus = ID_STATUS_CONNECTING + numRetry;

  0077b	8b 4d fc	 mov	 ecx, DWORD PTR _numRetry$[ebp]
  0077e	41		 inc	 ecx

; 260  : 						ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  0077f	6a 06		 push	 6
  00781	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00784	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00787	59		 pop	 ecx
  00788	33 c0		 xor	 eax, eax
  0078a	8d 7d 80	 lea	 edi, DWORD PTR _ack$85367[ebp+4]
  0078d	f3 ab		 rep stosd
  0078f	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00795	c7 85 7c ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85367[ebp], 28 ; 0000001cH
  0079f	89 5d 84	 mov	 DWORD PTR _ack$85367[ebp+8], ebx
  007a2	c7 45 88 0c 00
	00 00		 mov	 DWORD PTR _ack$85367[ebp+12], 12 ; 0000000cH
  007a9	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  007ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  007af	89 45 94	 mov	 DWORD PTR _ack$85367[ebp+24], eax
  007b2	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _ack$85367[ebp]
  007b8	50		 push	 eax
  007b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  007be	53		 push	 ebx
  007bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  007c4	89 4d 80	 mov	 DWORD PTR _ack$85367[ebp+4], ecx
  007c7	89 5d 8c	 mov	 DWORD PTR _ack$85367[ebp+16], ebx
  007ca	89 55 90	 mov	 DWORD PTR _ack$85367[ebp+20], edx
  007cd	ff 50 24	 call	 DWORD PTR [eax+36]
  007d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 261  : 						continue;

  007d3	e9 92 05 00 00	 jmp	 $L85431
$L83720:

; 276  : 		}
; 277  : 
; 278  : 		// Determine local IP
; 279  : 		/*
; 280  : 		socket = CallService(MS_NETLIB_GETSOCKET, (WPARAM) proto, 0);
; 281  : 		struct sockaddr_in saddr;
; 282  : 		int len;
; 283  : 
; 284  : 		len = sizeof(saddr);
; 285  : 		getsockname(socket, (struct sockaddr *) &saddr, &len);
; 286  : 		jabberLocalIP = saddr.sin_addr.S_un.S_addr;
; 287  : 		JabberLog("Local IP = %s", inet_ntoa(saddr.sin_addr));
; 288  : 		*/
; 289  : 
; 290  : 		// User may change status to OFFLINE while we are connecting above
; 291  : 		if (info->proto->iface.m_iDesiredStatus!=ID_STATUS_OFFLINE) {

  007d8	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  007de	b9 87 9c 00 00	 mov	 ecx, 40071		; 00009c87H
  007e3	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  007e6	0f 84 04 04 00
	00		 je	 $L83738

; 292  : 
; 293  : 			info->proto->jabberConnected = TRUE;

  007ec	c7 80 7c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+380], 1

; 294  : 			if (DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "KeepAlive", 1))

  007f6	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  007fc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$85374[ebp+4], OFFSET FLAT:??_C@_09LNJJ@KeepAlive?$AA@ ; `string'
  00803	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00806	89 45 f0	 mov	 DWORD PTR _cgs$85374[ebp], eax
  00809	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _dbv$85373[ebp]
  0080f	89 45 f8	 mov	 DWORD PTR _cgs$85374[ebp+8], eax
  00812	8d 45 f0	 lea	 eax, DWORD PTR _cgs$85374[ebp]
  00815	50		 push	 eax
  00816	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0081b	53		 push	 ebx
  0081c	57		 push	 edi
  0081d	ff 50 24	 call	 DWORD PTR [eax+36]
  00820	83 c4 0c	 add	 esp, 12			; 0000000cH
  00823	85 c0		 test	 eax, eax
  00825	75 0b		 jne	 SHORT $L85426
  00827	0f b6 85 e8 fe
	ff ff		 movzx	 eax, BYTE PTR _dbv$85373[ebp+4]
  0082e	3b c3		 cmp	 eax, ebx
  00830	74 11		 je	 SHORT $L83740
$L85426:

; 295  : 				info->proto->tlenOptions.sendKeepAlive = TRUE;

  00832	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00838	6a 01		 push	 1
  0083a	5f		 pop	 edi
  0083b	89 b8 f0 01 00
	00		 mov	 DWORD PTR [eax+496], edi

; 296  : 			else

  00841	eb 0f		 jmp	 SHORT $L83742
$L83740:

; 297  : 				info->proto->tlenOptions.sendKeepAlive = FALSE;

  00843	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00849	6a 01		 push	 1
  0084b	5f		 pop	 edi
  0084c	89 98 f0 01 00
	00		 mov	 DWORD PTR [eax+496], ebx
$L83742:

; 298  : 			JabberForkThread(JabberKeepAliveThread, 0, info->proto);

  00852	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00858	53		 push	 ebx
  00859	68 00 00 00 00	 push	 OFFSET FLAT:_JabberKeepAliveThread
  0085e	e8 00 00 00 00	 call	 _JabberForkThread

; 299  : 
; 300  : 			JabberXmlInitState(&xmlState);

  00863	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  00869	50		 push	 eax
  0086a	e8 00 00 00 00	 call	 _JabberXmlInitState

; 301  : 			JabberXmlSetCallback(&xmlState, 1, ELEM_OPEN, JabberProcessStreamOpening, info);

  0086f	56		 push	 esi
  00870	68 00 00 00 00	 push	 OFFSET FLAT:_JabberProcessStreamOpening
  00875	53		 push	 ebx
  00876	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  0087c	57		 push	 edi
  0087d	50		 push	 eax
  0087e	e8 00 00 00 00	 call	 _JabberXmlSetCallback

; 302  : 			JabberXmlSetCallback(&xmlState, 1, ELEM_CLOSE, JabberProcessStreamClosing, info);

  00883	56		 push	 esi
  00884	68 00 00 00 00	 push	 OFFSET FLAT:_JabberProcessStreamClosing
  00889	57		 push	 edi
  0088a	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  00890	57		 push	 edi
  00891	50		 push	 eax
  00892	e8 00 00 00 00	 call	 _JabberXmlSetCallback

; 303  : 			JabberXmlSetCallback(&xmlState, 2, ELEM_CLOSE, JabberProcessProtocol, info);

  00897	56		 push	 esi
  00898	68 00 00 00 00	 push	 OFFSET FLAT:_JabberProcessProtocol
  0089d	57		 push	 edi
  0089e	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  008a4	6a 02		 push	 2
  008a6	50		 push	 eax
  008a7	e8 00 00 00 00	 call	 _JabberXmlSetCallback
  008ac	83 c4 4c	 add	 esp, 76			; 0000004cH

; 304  : 
; 305  : 			info->useAES = FALSE;
; 306  : 
; 307  : 			if (info->useEncryption) {

  008af	39 9e d0 02 00
	00		 cmp	 DWORD PTR [esi+720], ebx
  008b5	89 9e 00 07 00
	00		 mov	 DWORD PTR [esi+1792], ebx
  008bb	74 07		 je	 SHORT $L83743

; 308  : 				JabberSend(info->proto, "<s s='1' v='9' t='06000106'>");

  008bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@LFIL@?$DMs?5s?$DN?81?8?5v?$DN?89?8?5t?$DN?806000106?8?$DO?$AA@ ; `string'

; 309  : 				
; 310  : 			} else {

  008c2	eb 05		 jmp	 SHORT $L85432
$L83743:

; 311  : 				JabberSend(info->proto, "<s v='3'>");

  008c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09NDA@?$DMs?5v?$DN?83?8?$DO?$AA@ ; `string'
$L85432:
  008c9	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  008cf	e8 00 00 00 00	 call	 _JabberSend
  008d4	59		 pop	 ecx
  008d5	59		 pop	 ecx

; 312  : 			}
; 313  : 
; 314  : 			JabberLog(info->proto, "Entering main recv loop");

  008d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@HMLD@Entering?5main?5recv?5loop?$AA@ ; `string'
  008db	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  008e1	e8 00 00 00 00	 call	 _JabberLog
  008e6	8b 45 e4	 mov	 eax, DWORD PTR _jabberNetworkBufferSize$[ebp]

; 315  : 			datalen = 0;

  008e9	33 ff		 xor	 edi, edi
  008eb	59		 pop	 ecx
  008ec	40		 inc	 eax
  008ed	59		 pop	 ecx
  008ee	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
$L83749:

; 316  : 
; 317  : 			for (;;) {
; 318  : 				int recvResult, bytesParsed;
; 319  : 
; 320  : 				if (info->useAES) {

  008f1	39 9e 00 07 00
	00		 cmp	 DWORD PTR [esi+1792], ebx
  008f7	74 2a		 je	 SHORT $L83753

; 321  : 					recvResult = JabberWsRecvAES(info->proto, buffer+datalen, jabberNetworkBufferSize-datalen, &info->aes_in_context, info->aes_in_iv);

  008f9	8d 86 e0 06 00
	00		 lea	 eax, DWORD PTR [esi+1760]
  008ff	50		 push	 eax
  00900	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  00906	50		 push	 eax
  00907	8b 45 e4	 mov	 eax, DWORD PTR _jabberNetworkBufferSize$[ebp]
  0090a	2b c7		 sub	 eax, edi
  0090c	50		 push	 eax
  0090d	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00910	03 c7		 add	 eax, edi
  00912	50		 push	 eax
  00913	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00919	e8 00 00 00 00	 call	 _JabberWsRecvAES
  0091e	83 c4 14	 add	 esp, 20			; 00000014H

; 322  : 				} else {

  00921	eb 1a		 jmp	 SHORT $L83754
$L83753:

; 323  : 					recvResult = JabberWsRecv(info->proto, buffer+datalen, jabberNetworkBufferSize-datalen);

  00923	8b 45 e4	 mov	 eax, DWORD PTR _jabberNetworkBufferSize$[ebp]
  00926	2b c7		 sub	 eax, edi
  00928	50		 push	 eax
  00929	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0092c	03 c7		 add	 eax, edi
  0092e	50		 push	 eax
  0092f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00935	e8 00 00 00 00	 call	 _JabberWsRecv
  0093a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83754:

; 324  : 				}
; 325  : 
; 326  : 				if (recvResult <= 0)

  0093d	3b c3		 cmp	 eax, ebx
  0093f	0f 8e d7 00 00
	00		 jle	 $L83750

; 327  : 					break;
; 328  : 				datalen += recvResult;

  00945	03 f8		 add	 edi, eax

; 329  : 
; 330  : 				buffer[datalen] = '\0';

  00947	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]

; 331  : 				JabberLog(info->proto, "RECV:%s", buffer);

  0094a	50		 push	 eax
  0094b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OCNP@RECV?3?$CFs?$AA@ ; `string'
  00950	88 1c 07	 mov	 BYTE PTR [edi+eax], bl
  00953	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00959	e8 00 00 00 00	 call	 _JabberLog

; 332  : 
; 333  : 				bytesParsed = JabberXmlParse(&xmlState, buffer, datalen);

  0095e	57		 push	 edi
  0095f	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  00965	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  00968	50		 push	 eax
  00969	e8 00 00 00 00	 call	 _JabberXmlParse

; 334  : 				JabberLog(info->proto, "bytesParsed = %d", bytesParsed);

  0096e	50		 push	 eax
  0096f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@HAFD@bytesParsed?5?$DN?5?$CFd?$AA@ ; `string'
  00974	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0097a	89 45 ec	 mov	 DWORD PTR _bytesParsed$83752[ebp], eax
  0097d	e8 00 00 00 00	 call	 _JabberLog

; 335  : 				if (bytesParsed > 0) {

  00982	8b 45 ec	 mov	 eax, DWORD PTR _bytesParsed$83752[ebp]
  00985	83 c4 24	 add	 esp, 36			; 00000024H
  00988	3b c3		 cmp	 eax, ebx
  0098a	7e 23		 jle	 SHORT $L83758

; 336  : 					if (bytesParsed < datalen)

  0098c	3b c7		 cmp	 eax, edi
  0098e	7d 18		 jge	 SHORT $L83759

; 337  : 						memmove(buffer, buffer+bytesParsed, datalen-bytesParsed);

  00990	8b cf		 mov	 ecx, edi
  00992	2b c8		 sub	 ecx, eax
  00994	51		 push	 ecx
  00995	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00998	03 c1		 add	 eax, ecx
  0099a	50		 push	 eax
  0099b	51		 push	 ecx
  0099c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  009a2	8b 45 ec	 mov	 eax, DWORD PTR _bytesParsed$83752[ebp]
  009a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83759:

; 338  : 					datalen -= bytesParsed;

  009a8	2b f8		 sub	 edi, eax

; 339  : 				}
; 340  : 				else if (datalen == jabberNetworkBufferSize) {

  009aa	e9 42 ff ff ff	 jmp	 $L83749
$L83758:
  009af	3b 7d e4	 cmp	 edi, DWORD PTR _jabberNetworkBufferSize$[ebp]
  009b2	75 39		 jne	 SHORT $L83761

; 341  : 					jabberNetworkBufferSize += 2048;

  009b4	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  009b9	01 45 e4	 add	 DWORD PTR _jabberNetworkBufferSize$[ebp], eax
  009bc	01 45 e8	 add	 DWORD PTR -24+[ebp], eax

; 342  : 					JabberLog(info->proto, "Increasing network buffer size to %d", jabberNetworkBufferSize);

  009bf	ff 75 e4	 push	 DWORD PTR _jabberNetworkBufferSize$[ebp]
  009c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@LEOM@Increasing?5network?5buffer?5size?5t@ ; `string'
  009c7	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  009cd	e8 00 00 00 00	 call	 _JabberLog

; 343  : 					if ((buffer=(char *) mir_realloc(buffer, jabberNetworkBufferSize+1)) == NULL) {

  009d2	ff 75 e8	 push	 DWORD PTR -24+[ebp]
  009d5	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  009d8	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  009de	83 c4 14	 add	 esp, 20			; 00000014H
  009e1	3b c3		 cmp	 eax, ebx
  009e3	89 45 08	 mov	 DWORD PTR _buffer$[ebp], eax
  009e6	74 22		 je	 SHORT $L85419

; 345  : 						break;
; 346  : 					}
; 347  : 				}
; 348  : 				else {

  009e8	e9 04 ff ff ff	 jmp	 $L83749
$L83761:

; 349  : 					JabberLog(info->proto, "Unknown state: bytesParsed=%d, datalen=%d, jabberNetworkBufferSize=%d", bytesParsed, datalen, jabberNetworkBufferSize);

  009ed	ff 75 e4	 push	 DWORD PTR _jabberNetworkBufferSize$[ebp]
  009f0	57		 push	 edi
  009f1	50		 push	 eax
  009f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@CPAF@Unknown?5state?3?5bytesParsed?$DN?$CFd?0?5d@ ; `string'
  009f7	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  009fd	e8 00 00 00 00	 call	 _JabberLog
  00a02	83 c4 14	 add	 esp, 20			; 00000014H

; 350  : 				}
; 351  : 			}

  00a05	e9 e7 fe ff ff	 jmp	 $L83749
$L85419:

; 344  : 						JabberLog(info->proto, "Cannot reallocate more network buffer, go offline now");

  00a0a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@HPPI@Cannot?5reallocate?5more?5network?5b@ ; `string'
  00a0f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00a15	e8 00 00 00 00	 call	 _JabberLog
  00a1a	59		 pop	 ecx
  00a1b	59		 pop	 ecx
$L83750:

; 352  : 
; 353  : 			JabberXmlDestroyState(&xmlState);

  00a1c	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _xmlState$[ebp]
  00a22	50		 push	 eax
  00a23	e8 00 00 00 00	 call	 _JabberXmlDestroyState

; 354  : 
; 355  : 			info->proto->jabberOnline = FALSE;

  00a28	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]

; 356  : 			info->proto->jabberConnected = FALSE;
; 357  : 
; 358  : 			memset(&clmi, 0, sizeof(CLISTMENUITEM));

  00a2e	6a 28		 push	 40			; 00000028H
  00a30	5f		 pop	 edi
  00a31	89 98 78 01 00
	00		 mov	 DWORD PTR [eax+376], ebx
  00a37	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00a3d	57		 push	 edi
  00a3e	53		 push	 ebx
  00a3f	89 98 7c 01 00
	00		 mov	 DWORD PTR [eax+380], ebx
  00a45	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _clmi$[ebp]
  00a4b	50		 push	 eax
  00a4c	e8 00 00 00 00	 call	 _memset

; 359  : 			clmi.cbSize = sizeof(CLISTMENUITEM);
; 360  : 			clmi.flags = CMIM_FLAGS | CMIF_GRAYED;
; 361  : 			CallService(MS_CLIST_MODIFYMENUITEM, (WPARAM) info->proto->hMenuMUC, (LPARAM) &clmi);

  00a51	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _clmi$[ebp]
  00a57	89 bd bc fe ff
	ff		 mov	 DWORD PTR _clmi$[ebp], edi
  00a5d	50		 push	 eax
  00a5e	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00a64	c7 85 c4 fe ff
	ff 01 00 00 40	 mov	 DWORD PTR _clmi$[ebp+8], 1073741825 ; 40000001H
  00a6e	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ ; `string'
  00a73	ff b0 e8 00 00
	00		 push	 DWORD PTR [eax+232]
  00a79	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00a7e	57		 push	 edi
  00a7f	ff 50 24	 call	 DWORD PTR [eax+36]

; 362  : 			CallService(MS_CLIST_MODIFYMENUITEM, (WPARAM) info->proto->hMenuChats, (LPARAM) &clmi);

  00a82	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _clmi$[ebp]
  00a88	50		 push	 eax
  00a89	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00a8f	ff b0 ec 00 00
	00		 push	 DWORD PTR [eax+236]
  00a95	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00a9a	57		 push	 edi
  00a9b	ff 50 24	 call	 DWORD PTR [eax+36]

; 363  : 
; 364  : 			// Set status to offline
; 365  : 			oldStatus = info->proto->iface.m_iStatus;

  00a9e	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]

; 366  : 			info->proto->iface.m_iStatus = ID_STATUS_OFFLINE;
; 367  : 			ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  00aa4	6a 06		 push	 6
  00aa6	59		 pop	 ecx
  00aa7	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR _ack$85382[ebp+4]
  00aad	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00ab0	c7 40 04 87 9c
	00 00		 mov	 DWORD PTR [eax+4], 40071 ; 00009c87H
  00ab7	33 c0		 xor	 eax, eax
  00ab9	89 55 e8	 mov	 DWORD PTR _oldStatus$[ebp], edx
  00abc	f3 ab		 rep stosd
  00abe	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00ac4	c7 85 0c ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85382[ebp], 28 ; 0000001cH
  00ace	89 9d 14 ff ff
	ff		 mov	 DWORD PTR _ack$85382[ebp+8], ebx
  00ad4	c7 85 18 ff ff
	ff 0c 00 00 00	 mov	 DWORD PTR _ack$85382[ebp+12], 12 ; 0000000cH
  00ade	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00ae1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ae4	89 85 24 ff ff
	ff		 mov	 DWORD PTR _ack$85382[ebp+24], eax
  00aea	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _ack$85382[ebp]
  00af0	50		 push	 eax
  00af1	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00af6	53		 push	 ebx
  00af7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00afc	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _ack$85382[ebp+4], ecx
  00b02	89 9d 1c ff ff
	ff		 mov	 DWORD PTR _ack$85382[ebp+16], ebx
  00b08	89 95 20 ff ff
	ff		 mov	 DWORD PTR _ack$85382[ebp+20], edx
  00b0e	ff 50 24	 call	 DWORD PTR [eax+36]

; 368  : 
; 369  : 			// Set all contacts to offline
; 370  : 			hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDFIRST, 0, 0);

  00b11	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00b16	53		 push	 ebx
  00b17	53		 push	 ebx
  00b18	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ ; `string'
  00b1d	ff 50 24	 call	 DWORD PTR [eax+36]
  00b20	83 c4 40	 add	 esp, 64			; 00000040H
$L85433:
  00b23	8b f8		 mov	 edi, eax

; 371  : 			while (hContact != NULL) {

  00b25	3b fb		 cmp	 edi, ebx
  00b27	0f 84 b5 00 00
	00		 je	 $L83783

; 372  : 				str = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);

  00b2d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00b32	53		 push	 ebx
  00b33	57		 push	 edi
  00b34	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  00b39	ff 50 24	 call	 DWORD PTR [eax+36]
  00b3c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 373  : 				if(str!=NULL && !strcmp(str, info->proto->iface.m_szModuleName)) {

  00b3f	3b c3		 cmp	 eax, ebx
  00b41	0f 84 84 00 00
	00		 je	 $L85395
  00b47	8b 8e 20 0f 00
	00		 mov	 ecx, DWORD PTR [esi+3872]
  00b4d	ff 71 1c	 push	 DWORD PTR [ecx+28]
  00b50	50		 push	 eax
  00b51	e8 00 00 00 00	 call	 _strcmp
  00b56	59		 pop	 ecx
  00b57	85 c0		 test	 eax, eax
  00b59	59		 pop	 ecx
  00b5a	75 6f		 jne	 SHORT $L85395

; 374  : 					if (DBGetContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != ID_STATUS_OFFLINE) {

  00b5c	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00b62	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _cgs$85389[ebp+4], OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  00b69	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00b6c	89 45 b4	 mov	 DWORD PTR _cgs$85389[ebp], eax
  00b6f	8d 45 c8	 lea	 eax, DWORD PTR _dbv$85388[ebp]
  00b72	89 45 bc	 mov	 DWORD PTR _cgs$85389[ebp+8], eax
  00b75	8d 45 b4	 lea	 eax, DWORD PTR _cgs$85389[ebp]
  00b78	50		 push	 eax
  00b79	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00b7e	57		 push	 edi
  00b7f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00b84	ff 50 24	 call	 DWORD PTR [eax+36]
  00b87	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b8a	85 c0		 test	 eax, eax
  00b8c	75 3d		 jne	 SHORT $L85395
  00b8e	0f b7 45 cc	 movzx	 eax, WORD PTR _dbv$85388[ebp+4]
  00b92	3d 87 9c 00 00	 cmp	 eax, 40071		; 00009c87H
  00b97	74 32		 je	 SHORT $L85395

; 375  : 						DBWriteContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE);

  00b99	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00b9f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _cws$85396[ebp+4], OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  00ba6	c6 45 a8 02	 mov	 BYTE PTR _cws$85396[ebp+8], 2
  00baa	66 c7 45 ac 87
	9c		 mov	 WORD PTR _cws$85396[ebp+12], 40071 ; 00009c87H
  00bb0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00bb3	89 45 a0	 mov	 DWORD PTR _cws$85396[ebp], eax
  00bb6	8d 45 a0	 lea	 eax, DWORD PTR _cws$85396[ebp]
  00bb9	50		 push	 eax
  00bba	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00bbf	57		 push	 edi
  00bc0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00bc5	ff 50 24	 call	 DWORD PTR [eax+36]
  00bc8	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85395:

; 376  : 					}
; 377  : 				}
; 378  : 				hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDNEXT, (WPARAM) hContact, 0);

  00bcb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00bd0	53		 push	 ebx
  00bd1	57		 push	 edi
  00bd2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ ; `string'
  00bd7	ff 50 24	 call	 DWORD PTR [eax+36]
  00bda	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bdd	e9 41 ff ff ff	 jmp	 $L85433
$L83783:

; 379  : 			}
; 380  : 
; 381  : 			JabberListWipeSpecial(info->proto);

  00be2	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00be8	e8 00 00 00 00	 call	 _JabberListWipeSpecial
  00bed	59		 pop	 ecx

; 382  : 		}
; 383  : 		else {

  00bee	eb 6c		 jmp	 SHORT $L85400
$L83738:

; 384  : 			oldStatus = info->proto->iface.m_iStatus;

  00bf0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 385  : 			info->proto->iface.m_iStatus = ID_STATUS_OFFLINE;
; 386  : 			ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  00bf3	6a 06		 push	 6
  00bf5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00bf8	59		 pop	 ecx
  00bf9	33 c0		 xor	 eax, eax
  00bfb	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR _ack$85401[ebp+4]
  00c01	f3 ab		 rep stosd
  00c03	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00c09	89 55 e8	 mov	 DWORD PTR _oldStatus$[ebp], edx
  00c0c	c7 85 60 ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85401[ebp], 28 ; 0000001cH
  00c16	89 9d 68 ff ff
	ff		 mov	 DWORD PTR _ack$85401[ebp+8], ebx
  00c1c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00c1f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00c22	89 85 78 ff ff
	ff		 mov	 DWORD PTR _ack$85401[ebp+24], eax
  00c28	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ack$85401[ebp]
  00c2e	50		 push	 eax
  00c2f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00c34	53		 push	 ebx
  00c35	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00c3a	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _ack$85401[ebp+4], ecx
  00c40	c7 85 6c ff ff
	ff 0c 00 00 00	 mov	 DWORD PTR _ack$85401[ebp+12], 12 ; 0000000cH
  00c4a	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _ack$85401[ebp+16], ebx
  00c50	89 95 74 ff ff
	ff		 mov	 DWORD PTR _ack$85401[ebp+20], edx
  00c56	ff 50 24	 call	 DWORD PTR [eax+36]
  00c59	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85400:

; 387  : 		}
; 388  : 
; 389  : 		Netlib_CloseHandle(info->s);

  00c5c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00c61	53		 push	 ebx
  00c62	ff b6 d4 02 00
	00		 push	 DWORD PTR [esi+724]
  00c68	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00c6d	ff 50 24	 call	 DWORD PTR [eax+36]

; 390  : 
; 391  : 		if (info->proto->tlenOptions.reconnect==FALSE)

  00c70	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00c76	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c79	39 98 b8 01 00
	00		 cmp	 DWORD PTR [eax+440], ebx
  00c7f	0f 84 20 01 00
	00		 je	 $L85420

; 392  : 			break;
; 393  : 
; 394  : 		if (info->proto->threadData != info)	// Make sure this is still the main Jabber connection thread

  00c85	39 b0 e0 00 00
	00		 cmp	 DWORD PTR [eax+224], esi
  00c8b	0f 85 14 01 00
	00		 jne	 $L85420

; 395  : 			break;
; 396  : 		reconnectTime = rand() % 10;

  00c91	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00c97	6a 0a		 push	 10			; 0000000aH
  00c99	99		 cdq
  00c9a	59		 pop	 ecx
  00c9b	f7 f9		 idiv	 ecx

; 397  : 		JabberLog(info->proto, "Sleeping %d seconds before automatic reconnecting...", reconnectTime);

  00c9d	52		 push	 edx
  00c9e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@IGAC@Sleeping?5?$CFd?5seconds?5before?5autom@ ; `string'
  00ca3	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00ca9	89 55 ec	 mov	 DWORD PTR _reconnectTime$[ebp], edx
  00cac	e8 00 00 00 00	 call	 _JabberLog

; 398  : 		SleepEx(reconnectTime * 1000, TRUE);

  00cb1	8b 45 ec	 mov	 eax, DWORD PTR _reconnectTime$[ebp]
  00cb4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cb7	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  00cbd	6a 01		 push	 1
  00cbf	5f		 pop	 edi
  00cc0	57		 push	 edi
  00cc1	50		 push	 eax
  00cc2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SleepEx@8

; 399  : 		reconnectMaxTime = 20;
; 400  : 		if (info->proto->threadData != info)	// Make sure this is still the main Jabber connection thread

  00cc8	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00cce	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _reconnectMaxTime$[ebp], 20 ; 00000014H
  00cd5	39 b0 e0 00 00
	00		 cmp	 DWORD PTR [eax+224], esi
  00cdb	0f 85 c4 00 00
	00		 jne	 $L85420

; 401  : 			break;
; 402  : 		JabberLog(info->proto, "Reconnecting to the network...");

  00ce1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BBBE@Reconnecting?5to?5the?5network?4?4?4?$AA@ ; `string'
  00ce6	50		 push	 eax
  00ce7	e8 00 00 00 00	 call	 _JabberLog

; 403  : 		info->proto->iface.m_iDesiredStatus = oldStatus;	// Reconnect to my last status

  00cec	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00cf2	8b 4d e8	 mov	 ecx, DWORD PTR _oldStatus$[ebp]

; 404  : 		oldStatus = info->proto->iface.m_iStatus;
; 405  : 		info->proto->iface.m_iStatus = ID_STATUS_CONNECTING;
; 406  : 		numRetry = 1;
; 407  : 		ProtoBroadcastAck(info->proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, info->proto->iface.m_iStatus);

  00cf5	6a 06		 push	 6
  00cf7	89 7d fc	 mov	 DWORD PTR _numRetry$[ebp], edi
  00cfa	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00cfd	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00d03	59		 pop	 ecx
  00d04	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00d07	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00d0a	33 c0		 xor	 eax, eax
  00d0c	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR _ack$85411[ebp+4]
  00d12	f3 ab		 rep stosd
  00d14	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00d1a	c7 85 28 ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _ack$85411[ebp], 28 ; 0000001cH
  00d24	89 9d 30 ff ff
	ff		 mov	 DWORD PTR _ack$85411[ebp+8], ebx
  00d2a	c7 85 34 ff ff
	ff 0c 00 00 00	 mov	 DWORD PTR _ack$85411[ebp+12], 12 ; 0000000cH
  00d34	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00d37	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00d3a	89 85 40 ff ff
	ff		 mov	 DWORD PTR _ack$85411[ebp+24], eax
  00d40	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _ack$85411[ebp]
  00d46	50		 push	 eax
  00d47	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00d4c	53		 push	 ebx
  00d4d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00d52	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _ack$85411[ebp+4], ecx
  00d58	89 9d 38 ff ff
	ff		 mov	 DWORD PTR _ack$85411[ebp+16], ebx
  00d5e	89 95 3c ff ff
	ff		 mov	 DWORD PTR _ack$85411[ebp+20], edx
  00d64	ff 50 24	 call	 DWORD PTR [eax+36]
  00d67	83 c4 14	 add	 esp, 20			; 00000014H
$L85431:

; 408  : 	}

  00d6a	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00d6f	e9 5b f8 ff ff	 jmp	 $L83717
$L83735:

; 262  : 					}
; 263  : 					else {
; 264  : 						JabberLog(info->proto, "Thread ended, connection failed");
; 265  : 						mir_free(buffer);
; 266  : 						mir_free(info);
; 267  : 						return;
; 268  : 					}
; 269  : 				}
; 270  :                 info->proto->threadData = NULL;

  00d74	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00d7a	89 98 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ebx
$L83730:

; 271  : 			}
; 272  : 			JabberLog(info->proto, "Thread ended, connection failed");

  00d80	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LBMO@Thread?5ended?0?5connection?5failed?$AA@ ; `string'
  00d85	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00d8b	e8 00 00 00 00	 call	 _JabberLog

; 273  : 			mir_free(buffer);

  00d90	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  00d93	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 274  : 			mir_free(info);

  00d99	56		 push	 esi
  00d9a	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00da0	83 c4 10	 add	 esp, 16			; 00000010H

; 275  : 			return;

  00da3	eb 5e		 jmp	 SHORT $L83636
$L85420:

; 409  : 
; 410  : 	JabberLog(info->proto, "Thread ended: server='%s'", info->server);

  00da5	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  00dab	50		 push	 eax
  00dac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DNBM@Thread?5ended?3?5server?$DN?8?$CFs?8?$AA@ ; `string'
  00db1	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00db7	e8 00 00 00 00	 call	 _JabberLog

; 411  : 
; 412  : 	if (info->proto->threadData==info) {

  00dbc	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00dc2	83 c4 0c	 add	 esp, 12			; 0000000cH
  00dc5	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  00dca	39 30		 cmp	 DWORD PTR [eax], esi
  00dcc	75 02		 jne	 SHORT $L83803

; 413  :         info->proto->threadData = NULL;

  00dce	89 18		 mov	 DWORD PTR [eax], ebx
$L83803:

; 414  : 	}
; 415  : 
; 416  : 	mir_free(buffer);

  00dd0	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  00dd3	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 417  :     if (info->streamId) mir_free(info->streamId);

  00dd9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00ddc	59		 pop	 ecx
  00ddd	3b c3		 cmp	 eax, ebx
  00ddf	74 08		 je	 SHORT $L83805
  00de1	50		 push	 eax
  00de2	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00de8	59		 pop	 ecx
$L83805:

; 418  : 	JabberLog(info->proto, "Exiting ServerThread");

  00de9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@CNLL@Exiting?5ServerThread?$AA@ ; `string'
$L85428:
  00dee	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00df4	e8 00 00 00 00	 call	 _JabberLog

; 419  : 	mir_free(info);

  00df9	56		 push	 esi
  00dfa	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00e00	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83636:
  00e03	5f		 pop	 edi
  00e04	5e		 pop	 esi
  00e05	5b		 pop	 ebx

; 420  : }

  00e06	c9		 leave
  00e07	c3		 ret	 0
_JabberServerThread ENDP
_TEXT	ENDS
;	COMDAT _JabberDummyApcFunc@4
_TEXT	SEGMENT
_JabberDummyApcFunc@4 PROC NEAR				; COMDAT

; 60   : 	return;
; 61   : }

  00000	c2 04 00	 ret	 4
_JabberDummyApcFunc@4 ENDP
_TEXT	ENDS
EXTRN	__imp__CreateDialogParamW@20:NEAR
EXTRN	_hInst:DWORD
;	COMDAT _JabberPasswordCreateDialogApcProc@4
_TEXT	SEGMENT
_param$ = 8
_JabberPasswordCreateDialogApcProc@4 PROC NEAR		; COMDAT

; 97   : 	CreateDialogParam(hInst, MAKEINTRESOURCE(IDD_PASSWORD), NULL, JabberPasswordDlgProc, (LPARAM) param);

  00000	ff 74 24 04	 push	 DWORD PTR _param$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:_JabberPasswordDlgProc@16
  00009	6a 00		 push	 0
  0000b	68 9d 00 00 00	 push	 157			; 0000009dH
  00010	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 98   : }

  0001c	c2 04 00	 ret	 4
_JabberPasswordCreateDialogApcProc@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@NICK@Enter?5password?5for?$AA@	; `string'
PUBLIC	??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@	; `string'
PUBLIC	??_C@_05JKGE@?$CFs?5?$CFs?$AA@			; `string'
EXTRN	__imp__SetEvent@4:NEAR
EXTRN	__imp__SetDlgItemTextA@12:NEAR
EXTRN	__imp__GetDlgItemTextA@16:NEAR
EXTRN	__imp__sprintf:NEAR
EXTRN	__imp__DestroyWindow@4:NEAR
;	COMDAT ??_C@_0BD@NICK@Enter?5password?5for?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_langpack.h
_DATA	SEGMENT
??_C@_0BD@NICK@Enter?5password?5for?$AA@ DB 'Enter password for', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT
??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ DB 'LangPack/TranslateStrin'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JKGE@?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_05JKGE@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT _JabberPasswordDlgProc@16
_TEXT	SEGMENT
_hwndDlg$ = 8
_msg$ = 12
_wParam$ = 16
_lParam$ = 20
_text$ = -128
_JabberPasswordDlgProc@16 PROC NEAR			; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 68   : 	char text[128];
; 69   : 
; 70   : 	switch (msg) {

  00009	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0000c	2d 10 01 00 00	 sub	 eax, 272		; 00000110H
  00011	74 40		 je	 SHORT $L83609
  00013	48		 dec	 eax
  00014	75 0a		 jne	 SHORT $L83620

; 76   : 	case WM_COMMAND:
; 77   : 		switch (LOWORD(wParam)) {

  00016	0f b7 45 10	 movzx	 eax, WORD PTR _wParam$[ebp]
  0001a	48		 dec	 eax
  0001b	74 07		 je	 SHORT $L83623
  0001d	48		 dec	 eax
  0001e	74 1c		 je	 SHORT $L83624
$L83620:

; 88   : 		}
; 89   : 		break;
; 90   : 	}
; 91   : 
; 92   : 	return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	eb 7a		 jmp	 SHORT $L83603
$L83623:

; 78   : 		case IDOK:
; 79   : 			GetDlgItemTextA(hwndDlg, IDC_PASSWORD, onlinePassword, sizeof(onlinePassword));

  00024	68 80 00 00 00	 push	 128			; 00000080H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:_onlinePassword
  0002e	68 1a 04 00 00	 push	 1050			; 0000041aH
  00033	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16
$L83624:

; 80   : 			//EndDialog(hwndDlg, (int) onlinePassword);
; 81   : 			//return TRUE;
; 82   : 			// Fall through
; 83   : 		case IDCANCEL:
; 84   : 			//EndDialog(hwndDlg, 0);
; 85   : 			SetEvent(hEventPasswdDlg);

  0003c	ff 35 00 00 00
	00		 push	 DWORD PTR _hEventPasswdDlg
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 86   : 			DestroyWindow(hwndDlg);

  00048	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 87   : 			return TRUE;

  00051	eb 48		 jmp	 SHORT $L85440
$L83609:

; 71   : 	case WM_INITDIALOG:
; 72   : 		TranslateDialogDefault(hwndDlg);

  00053	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00056	e8 00 00 00 00	 call	 _TranslateDialogDefault

; 73   : 		sprintf(text, "%s %s", Translate("Enter password for"), (char *) lParam);

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00060	59		 pop	 ecx
  00061	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@NICK@Enter?5password?5for?$AA@ ; `string'
  00069	6a 00		 push	 0
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00070	ff 50 24	 call	 DWORD PTR [eax+36]
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	50		 push	 eax
  00077	8d 45 80	 lea	 eax, DWORD PTR _text$[ebp]
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05JKGE@?$CFs?5?$CFs?$AA@ ; `string'
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 74   : 		SetDlgItemTextA(hwndDlg, IDC_JID, text);

  00089	8d 45 80	 lea	 eax, DWORD PTR _text$[ebp]
  0008c	50		 push	 eax
  0008d	68 1b 04 00 00	 push	 1051			; 0000041bH
  00092	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
$L85440:

; 75   : 		return TRUE;

  0009b	6a 01		 push	 1
  0009d	58		 pop	 eax
$L83603:

; 93   : }

  0009e	c9		 leave
  0009f	c2 10 00	 ret	 16			; 00000010H
_JabberPasswordDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KBOJ@s?$AA@				; `string'
PUBLIC	??_C@_01JAP@i?$AA@				; `string'
PUBLIC	??_C@_01FBAH@1?$AA@				; `string'
PUBLIC	??_C@_02KAFL@k1?$AA@				; `string'
PUBLIC	??_C@_02FPOC@k2?$AA@				; `string'
PUBLIC	??_C@_02PFHF@k3?$AA@				; `string'
PUBLIC	??_C@_0BK@HPJP@?$DMcipher?5k1?$DN?8?$CFs?8?5k2?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_aes_set_key:NEAR
EXTRN	_mpi_read_string:NEAR
EXTRN	_mpi_write_string:NEAR
EXTRN	_mpi_read_binary:NEAR
EXTRN	_mpi_write_binary:NEAR
EXTRN	_mpi_exp_mod:NEAR
;	COMDAT ??_C@_01KBOJ@s?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_01KBOJ@s?$AA@ DB 's', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01JAP@i?$AA@
_DATA	SEGMENT
??_C@_01JAP@i?$AA@ DB 'i', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
_DATA	SEGMENT
??_C@_01FBAH@1?$AA@ DB '1', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_02KAFL@k1?$AA@
_DATA	SEGMENT
??_C@_02KAFL@k1?$AA@ DB 'k1', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FPOC@k2?$AA@
_DATA	SEGMENT
??_C@_02FPOC@k2?$AA@ DB 'k2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02PFHF@k3?$AA@
_DATA	SEGMENT
??_C@_02PFHF@k3?$AA@ DB 'k3', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HPJP@?$DMcipher?5k1?$DN?8?$CFs?8?5k2?$DN?8?$CFs?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BK@HPJP@?$DMcipher?5k1?$DN?8?$CFs?8?5k2?$DN?8?$CFs?8?1?$DO?$AA@ DB '<'
	DB	'cipher k1=''%s'' k2=''%s''/>', 00H		; `string'
_DATA	ENDS
;	COMDAT _JabberProcessStreamOpening
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_sid$ = 8
_i$83837 = 8
_k1$83838 = -20
_k2$83839 = -16
_k3$83840 = 8
_aes_key$83841 = -76
_aes_key_str$83842 = -256
_aes_iv_str$83843 = -116
_k1_mpi$83844 = -44
_k2_mpi$83845 = -32
_aes_mpi$83846 = -12
_slen$83847 = 12
_JabberProcessStreamOpening PROC NEAR			; COMDAT

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 442  : 	char *sid, *s;
; 443  : 
; 444  : 	if (node->name==NULL || strcmp(node->name, "s")) 

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _node$[ebp]
  0000f	33 db		 xor	 ebx, ebx
  00011	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00014	3b c3		 cmp	 eax, ebx
  00016	0f 84 48 02 00
	00		 je	 $L83828
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strcmp
  00027	59		 pop	 ecx
  00028	85 c0		 test	 eax, eax
  0002a	59		 pop	 ecx
  0002b	0f 85 33 02 00
	00		 jne	 $L83828

; 445  : 		return;
; 446  : 
; 447  : 	if ((sid=JabberXmlGetAttrValue(node, "i")) != NULL) {

  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0003c	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  0003f	59		 pop	 ecx
  00040	3b c3		 cmp	 eax, ebx
  00042	59		 pop	 ecx
  00043	89 45 08	 mov	 DWORD PTR _sid$[ebp], eax
  00046	74 1c		 je	 SHORT $L83831

; 448  : 		if (info->streamId) mir_free(info->streamId);

  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	3b c3		 cmp	 eax, ebx
  0004d	74 08		 je	 SHORT $L83833
  0004f	50		 push	 eax
  00050	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00056	59		 pop	 ecx
$L83833:

; 449  : 		info->streamId = mir_strdup(sid);

  00057	ff 75 08	 push	 DWORD PTR _sid$[ebp]
  0005a	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00060	59		 pop	 ecx
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
$L83831:

; 450  : 	}
; 451  : 	if ((s=JabberXmlGetAttrValue(node, "s")) != NULL && !strcmp(s, "1")) {

  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0006f	59		 pop	 ecx
  00070	3b c3		 cmp	 eax, ebx
  00072	59		 pop	 ecx
  00073	0f 84 df 01 00
	00		 je	 $L83835
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _strcmp
  00084	59		 pop	 ecx
  00085	85 c0		 test	 eax, eax
  00087	59		 pop	 ecx
  00088	0f 85 ca 01 00
	00		 jne	 $L83835

; 452  : 		int i;
; 453  : 		char *k1, *k2, *k3;
; 454  : 		unsigned char aes_key[32];
; 455  : 		char aes_key_str[140], aes_iv_str[40];
; 456  : 		mpi k1_mpi, k2_mpi, aes_mpi;
; 457  : 		int slen;
; 458  : 
; 459  : 		k1=JabberXmlGetAttrValue(node, "k1");

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KAFL@k1?$AA@ ; `string'
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 460  : 		k2=JabberXmlGetAttrValue(node, "k2");

  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02FPOC@k2?$AA@ ; `string'
  0009e	57		 push	 edi
  0009f	89 45 ec	 mov	 DWORD PTR _k1$83838[ebp], eax
  000a2	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 461  : 		k3=JabberXmlGetAttrValue(node, "k3");

  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PFHF@k3?$AA@ ; `string'
  000ac	57		 push	 edi
  000ad	89 45 f0	 mov	 DWORD PTR _k2$83839[ebp], eax
  000b0	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 462  : 
; 463  : 		memset(&info->aes_in_context, 0, sizeof (aes_context));

  000b5	bf 04 02 00 00	 mov	 edi, 516		; 00000204H
  000ba	89 45 08	 mov	 DWORD PTR _k3$83840[ebp], eax
  000bd	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  000c3	57		 push	 edi
  000c4	53		 push	 ebx
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memset

; 464  : 		memset(&info->aes_out_context, 0, sizeof (aes_context));

  000cb	8d 86 dc 04 00
	00		 lea	 eax, DWORD PTR [esi+1244]
  000d1	57		 push	 edi
  000d2	53		 push	 ebx
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _memset

; 465  : 		memset(&aes_mpi, 0, sizeof (mpi));

  000d9	6a 0c		 push	 12			; 0000000cH
  000db	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  000de	53		 push	 ebx
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _memset

; 466  : 		mpi_read_string(&aes_mpi, 16, k3);

  000e5	ff 75 08	 push	 DWORD PTR _k3$83840[ebp]
  000e8	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  000eb	6a 10		 push	 16			; 00000010H
  000ed	5f		 pop	 edi
  000ee	57		 push	 edi
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _mpi_read_string
  000f5	83 c4 48	 add	 esp, 72			; 00000048H

; 467  : 		slen = 16;
; 468  : 		mpi_write_binary(&aes_mpi, info->aes_in_iv, &slen);

  000f8	8d 45 0c	 lea	 eax, DWORD PTR _slen$83847[ebp]
  000fb	89 7d 0c	 mov	 DWORD PTR _slen$83847[ebp], edi
  000fe	50		 push	 eax
  000ff	8d 86 e0 06 00
	00		 lea	 eax, DWORD PTR [esi+1760]
  00105	50		 push	 eax
  00106	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _mpi_write_binary
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 469  : 		for (i = 0; i < 16; i++) {

  00112	89 5d 08	 mov	 DWORD PTR _i$83837[ebp], ebx
$L83854:

; 470  : 			info->aes_out_iv[i] = rand();

  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _i$83837[ebp]
  0011e	88 84 0e f0 06
	00 00		 mov	 BYTE PTR [esi+ecx+1776], al

; 471  : 			aes_key[i] = rand();

  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _i$83837[ebp]
  0012e	ff 45 08	 inc	 DWORD PTR _i$83837[ebp]
  00131	39 7d 08	 cmp	 DWORD PTR _i$83837[ebp], edi
  00134	88 44 0d b4	 mov	 BYTE PTR _aes_key$83841[ebp+ecx], al
  00138	7c db		 jl	 SHORT $L83854

; 472  : 		}
; 473  : 		memset(&aes_mpi, 0, sizeof (mpi));

  0013a	6a 0c		 push	 12			; 0000000cH
  0013c	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  0013f	53		 push	 ebx
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _memset

; 474  : 		mpi_read_binary(&aes_mpi, info->aes_out_iv, 16);

  00146	8d 86 f0 06 00
	00		 lea	 eax, DWORD PTR [esi+1776]
  0014c	57		 push	 edi
  0014d	50		 push	 eax
  0014e	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _mpi_read_binary

; 475  : 		slen = 40;
; 476  : 		mpi_write_string(&aes_mpi, 16, aes_iv_str, &slen);

  00157	8d 45 0c	 lea	 eax, DWORD PTR _slen$83847[ebp]
  0015a	c7 45 0c 28 00
	00 00		 mov	 DWORD PTR _slen$83847[ebp], 40 ; 00000028H
  00161	50		 push	 eax
  00162	8d 45 8c	 lea	 eax, DWORD PTR _aes_iv_str$83843[ebp]
  00165	50		 push	 eax
  00166	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00169	57		 push	 edi
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _mpi_write_string

; 477  : 		aes_set_key(&info->aes_in_context, aes_key, 128);

  00170	8d 45 b4	 lea	 eax, DWORD PTR _aes_key$83841[ebp]
  00173	68 80 00 00 00	 push	 128			; 00000080H
  00178	50		 push	 eax
  00179	8d 86 d8 02 00
	00		 lea	 eax, DWORD PTR [esi+728]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _aes_set_key

; 478  : 		aes_set_key(&info->aes_out_context, aes_key, 128);

  00185	8d 45 b4	 lea	 eax, DWORD PTR _aes_key$83841[ebp]
  00188	68 80 00 00 00	 push	 128			; 00000080H
  0018d	50		 push	 eax
  0018e	8d 86 dc 04 00
	00		 lea	 eax, DWORD PTR [esi+1244]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _aes_set_key
  0019a	83 c4 40	 add	 esp, 64			; 00000040H

; 479  : 		memset(&aes_mpi, 0, sizeof (mpi));

  0019d	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  001a0	6a 0c		 push	 12			; 0000000cH
  001a2	53		 push	 ebx
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 _memset

; 480  : 		mpi_read_binary(&aes_mpi, aes_key, 16);

  001a9	8d 45 b4	 lea	 eax, DWORD PTR _aes_key$83841[ebp]
  001ac	57		 push	 edi
  001ad	50		 push	 eax
  001ae	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _mpi_read_binary

; 481  : 		memset(&k1_mpi, 0, sizeof (mpi));

  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	8d 45 d4	 lea	 eax, DWORD PTR _k1_mpi$83844[ebp]
  001bc	53		 push	 ebx
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _memset

; 482  : 		mpi_read_string( &k1_mpi, 16, k1 );

  001c3	ff 75 ec	 push	 DWORD PTR _k1$83838[ebp]
  001c6	8d 45 d4	 lea	 eax, DWORD PTR _k1_mpi$83844[ebp]
  001c9	57		 push	 edi
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _mpi_read_string

; 483  : 		memset(&k2_mpi, 0, sizeof (mpi));

  001d0	6a 0c		 push	 12			; 0000000cH
  001d2	8d 45 e0	 lea	 eax, DWORD PTR _k2_mpi$83845[ebp]
  001d5	53		 push	 ebx
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _memset

; 484  : 	    mpi_read_string( &k2_mpi, 16, k2 );

  001dc	ff 75 f0	 push	 DWORD PTR _k2$83839[ebp]
  001df	8d 45 e0	 lea	 eax, DWORD PTR _k2_mpi$83845[ebp]
  001e2	57		 push	 edi
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _mpi_read_string
  001e9	83 c4 48	 add	 esp, 72			; 00000048H

; 485  : 		memset(&aes_mpi, 0, sizeof (mpi));

  001ec	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  001ef	6a 0c		 push	 12			; 0000000cH
  001f1	53		 push	 ebx
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 _memset

; 486  : 		mpi_read_binary(&aes_mpi, (unsigned char *)aes_key, 16);

  001f8	8d 45 b4	 lea	 eax, DWORD PTR _aes_key$83841[ebp]
  001fb	57		 push	 edi
  001fc	50		 push	 eax
  001fd	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _mpi_read_binary

; 487  : 		mpi_exp_mod( &aes_mpi, &aes_mpi, &k1_mpi, &k2_mpi, NULL );

  00206	8d 45 e0	 lea	 eax, DWORD PTR _k2_mpi$83845[ebp]
  00209	53		 push	 ebx
  0020a	50		 push	 eax
  0020b	8d 45 d4	 lea	 eax, DWORD PTR _k1_mpi$83844[ebp]
  0020e	50		 push	 eax
  0020f	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00212	50		 push	 eax
  00213	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _mpi_exp_mod

; 488  : 		slen = 140;
; 489  : 		mpi_write_string(&aes_mpi, 16, aes_key_str, &slen);

  0021c	8d 45 0c	 lea	 eax, DWORD PTR _slen$83847[ebp]
  0021f	c7 45 0c 8c 00
	00 00		 mov	 DWORD PTR _slen$83847[ebp], 140 ; 0000008cH
  00226	50		 push	 eax
  00227	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _aes_key_str$83842[ebp]
  0022d	50		 push	 eax
  0022e	8d 45 f4	 lea	 eax, DWORD PTR _aes_mpi$83846[ebp]
  00231	57		 push	 edi
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _mpi_write_string

; 490  : 		JabberSend(info->proto, "<cipher k1='%s' k2='%s'/>", aes_key_str, aes_iv_str);

  00238	8d 45 8c	 lea	 eax, DWORD PTR _aes_iv_str$83843[ebp]
  0023b	50		 push	 eax
  0023c	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _aes_key_str$83842[ebp]
  00242	50		 push	 eax
  00243	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HPJP@?$DMcipher?5k1?$DN?8?$CFs?8?5k2?$DN?8?$CFs?8?1?$DO?$AA@ ; `string'
  00248	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0024e	e8 00 00 00 00	 call	 _JabberSend
  00253	83 c4 4c	 add	 esp, 76			; 0000004cH

; 491  : 	} else {

  00256	eb 0c		 jmp	 SHORT $L83828
$L83835:

; 492  : 		TlenSendAuth(info->proto);

  00258	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0025e	e8 00 00 00 00	 call	 _TlenSendAuth
  00263	59		 pop	 ecx
$L83828:
  00264	5f		 pop	 edi
  00265	5e		 pop	 esi
  00266	5b		 pop	 ebx

; 493  : 	}
; 494  : }

  00267	c9		 leave
  00268	c3		 ret	 0
_JabberProcessStreamOpening ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DCMN@?$CFs?$CFs?$AA@			; `string'
PUBLIC	??_C@_0IH@BBAP@?$DMiq?5type?$DN?8set?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ ; `string'
EXTRN	_JabberIqAdd:NEAR
EXTRN	_JabberIqResultAuth:NEAR
EXTRN	_JabberSerialNext:NEAR
EXTRN	_JabberSha1:NEAR
EXTRN	_TlenPasswordHash:NEAR
EXTRN	_JabberTextEncode:NEAR
;	COMDAT ??_C@_04DCMN@?$CFs?$CFs?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_04DCMN@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0IH@BBAP@?$DMiq?5type?$DN?8set?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@
_DATA	SEGMENT
??_C@_0IH@BBAP@?$DMiq?5type?$DN?8set?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ DB '<'
	DB	'iq type=''set'' id=''mim_%d''><query xmlns=''jabber:iq:auth'''
	DB	'><username>%s</username><digest>%s</digest><resource>t</resou'
	DB	'rce></query></iq>', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenSendAuth
_TEXT	SEGMENT
_proto$ = 8
_str$ = 8
_text$ = -128
_TlenSendAuth PROC NEAR					; COMDAT

; 422  : static void TlenSendAuth(TlenProtocol *proto) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	56		 push	 esi

; 423  : 	int iqId;
; 424  : 	char *p;
; 425  : 	char *str;
; 426  : 	char text[128];
; 427  : 	str = TlenPasswordHash(proto->threadData->password);

  0000a	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000d	57		 push	 edi
  0000e	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00014	05 88 00 00 00	 add	 eax, 136		; 00000088H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _TlenPasswordHash
  0001f	8b f8		 mov	 edi, eax

; 428  : 	sprintf(text, "%s%s", proto->threadData->streamId, str);

  00021	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00027	57		 push	 edi
  00028	ff 70 04	 push	 DWORD PTR [eax+4]
  0002b	8d 45 80	 lea	 eax, DWORD PTR _text$[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04DCMN@?$CFs?$CFs?$AA@ ; `string'
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 429  : 	mir_free(str);

  0003a	57		 push	 edi
  0003b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 430  : 	str = JabberSha1(text);

  00041	8d 45 80	 lea	 eax, DWORD PTR _text$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _JabberSha1
  0004a	89 45 08	 mov	 DWORD PTR _str$[ebp], eax

; 431  : 	if ((p=JabberTextEncode(proto->threadData->username)) != NULL) {

  0004d	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00053	83 c0 08	 add	 eax, 8
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _JabberTextEncode
  0005c	8b f8		 mov	 edi, eax
  0005e	83 c4 20	 add	 esp, 32			; 00000020H
  00061	85 ff		 test	 edi, edi
  00063	74 3f		 je	 SHORT $L83817

; 432  : 		iqId = JabberSerialNext(proto->threadData->proto);

  00065	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0006b	53		 push	 ebx
  0006c	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00072	e8 00 00 00 00	 call	 _JabberSerialNext
  00077	8b d8		 mov	 ebx, eax

; 433  : 		JabberIqAdd(proto, iqId, IQ_PROC_NONE, JabberIqResultAuth);

  00079	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:_JabberIqResultAuth
  00080	6a 00		 push	 0
  00082	53		 push	 ebx
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 _JabberIqAdd

; 434  : 		JabberSend(proto, "<iq type='set' id='"JABBER_IQID"%d'><query xmlns='jabber:iq:auth'><username>%s</username><digest>%s</digest><resource>t</resource></query></iq>", iqId, p /*info->username*/, str);

  00089	ff 75 08	 push	 DWORD PTR _str$[ebp]
  0008c	57		 push	 edi
  0008d	53		 push	 ebx
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0IH@BBAP@?$DMiq?5type?$DN?8set?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ ; `string'
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 _JabberSend

; 435  : 		mir_free(p);

  00099	57		 push	 edi
  0009a	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000a0	83 c4 28	 add	 esp, 40			; 00000028H
  000a3	5b		 pop	 ebx
$L83817:

; 436  : 	}
; 437  : 	mir_free(str);

  000a4	ff 75 08	 push	 DWORD PTR _str$[ebp]
  000a7	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 438  : }

  000b0	c9		 leave
  000b1	c3		 ret	 0
_TlenSendAuth ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DDKD@stream?3error?$AA@		; `string'
PUBLIC	??_C@_0BI@OCCN@Jabber?5Connection?5Error?$AA@	; `string'
EXTRN	__imp__MessageBoxA@16:NEAR
;	COMDAT ??_C@_0N@DDKD@stream?3error?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_netlib.h
_DATA	SEGMENT
??_C@_0N@DDKD@stream?3error?$AA@ DB 'stream:error', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@OCCN@Jabber?5Connection?5Error?$AA@
_DATA	SEGMENT
??_C@_0BI@OCCN@Jabber?5Connection?5Error?$AA@ DB 'Jabber Connection Error'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT _JabberProcessStreamClosing
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_JabberProcessStreamClosing PROC NEAR			; COMDAT

; 498  : 	Netlib_CloseHandle(info->proto);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _info$[esp-4]
  00004	53		 push	 ebx
  00005	33 db		 xor	 ebx, ebx
  00007	57		 push	 edi
  00008	53		 push	 ebx
  00009	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00019	ff 50 24	 call	 DWORD PTR [eax+36]

; 499  : 	if (node->name && !strcmp(node->name, "stream:error") && node->text)

  0001c	8b 7c 24 18	 mov	 edi, DWORD PTR _node$[esp+16]
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	3b c3		 cmp	 eax, ebx
  00028	74 4d		 je	 SHORT $L83871
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@DDKD@stream?3error?$AA@ ; `string'
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _strcmp
  00035	59		 pop	 ecx
  00036	85 c0		 test	 eax, eax
  00038	59		 pop	 ecx
  00039	75 3c		 jne	 SHORT $L83871
  0003b	39 5f 20	 cmp	 DWORD PTR [edi+32], ebx
  0003e	74 37		 je	 SHORT $L83871

; 500  : 		MessageBoxA(NULL, Translate(node->text), Translate("Jabber Connection Error"), MB_OK|MB_ICONERROR|MB_SETFOREGROUND);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00045	56		 push	 esi
  00046	68 10 00 01 00	 push	 65552			; 00010010H
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@OCCN@Jabber?5Connection?5Error?$AA@ ; `string'
  00050	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00055	53		 push	 ebx
  00056	56		 push	 esi
  00057	ff 50 24	 call	 DWORD PTR [eax+36]
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	50		 push	 eax
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00063	ff 77 20	 push	 DWORD PTR [edi+32]
  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	ff 50 24	 call	 DWORD PTR [eax+36]
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	50		 push	 eax
  0006f	53		 push	 ebx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00076	5e		 pop	 esi
$L83871:
  00077	5f		 pop	 edi
  00078	5b		 pop	 ebx

; 501  : }

  00079	c3		 ret	 0
_JabberProcessStreamClosing ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NPGL@message?$AA@			; `string'
PUBLIC	??_C@_08PJFJ@presence?$AA@			; `string'
PUBLIC	??_C@_02CIMO@iq?$AA@				; `string'
PUBLIC	??_C@_01IFC@f?$AA@				; `string'
PUBLIC	??_C@_01LLF@w?$AA@				; `string'
PUBLIC	??_C@_01KDFD@m?$AA@				; `string'
PUBLIC	??_C@_01FMOK@n?$AA@				; `string'
PUBLIC	??_C@_01FOFA@p?$AA@				; `string'
PUBLIC	??_C@_01KBCC@v?$AA@				; `string'
PUBLIC	??_C@_06JBCA@avatar?$AA@			; `string'
PUBLIC	??_C@_06KLJ@cipher?$AA@				; `string'
PUBLIC	??_C@_0HI@MJEA@Invalid?5top?9level?5tag?5?$CIonly?5?$DMmes@ ; `string'
EXTRN	_TlenProcessF:NEAR
;	COMDAT ??_C@_07NPGL@message?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_07NPGL@message?$AA@ DB 'message', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PJFJ@presence?$AA@
_DATA	SEGMENT
??_C@_08PJFJ@presence?$AA@ DB 'presence', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CIMO@iq?$AA@
_DATA	SEGMENT
??_C@_02CIMO@iq?$AA@ DB 'iq', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IFC@f?$AA@
_DATA	SEGMENT
??_C@_01IFC@f?$AA@ DB 'f', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01LLF@w?$AA@
_DATA	SEGMENT
??_C@_01LLF@w?$AA@ DB 'w', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KDFD@m?$AA@
_DATA	SEGMENT
??_C@_01KDFD@m?$AA@ DB 'm', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FMOK@n?$AA@
_DATA	SEGMENT
??_C@_01FMOK@n?$AA@ DB 'n', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FOFA@p?$AA@
_DATA	SEGMENT
??_C@_01FOFA@p?$AA@ DB 'p', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT
??_C@_01KBCC@v?$AA@ DB 'v', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JBCA@avatar?$AA@
_DATA	SEGMENT
??_C@_06JBCA@avatar?$AA@ DB 'avatar', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KLJ@cipher?$AA@
_DATA	SEGMENT
??_C@_06KLJ@cipher?$AA@ DB 'cipher', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0HI@MJEA@Invalid?5top?9level?5tag?5?$CIonly?5?$DMmes@
_DATA	SEGMENT
??_C@_0HI@MJEA@Invalid?5top?9level?5tag?5?$CIonly?5?$DMmes@ DB 'Invalid t'
	DB	'op-level tag (only <message/> <presence/> <iq/> <f/> <w/> <m/'
	DB	'> <n/> <p/> <v/> <cipher/> and <avatar/> allowed)', 00H ; `string'
_DATA	ENDS
;	COMDAT _JabberProcessProtocol
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_JabberProcessProtocol PROC NEAR			; COMDAT

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 505  : 	if (!strcmp(node->name, "message"))

  00004	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NPGL@message?$AA@ ; `string'
  0000c	ff 76 04	 push	 DWORD PTR [esi+4]
  0000f	e8 00 00 00 00	 call	 _strcmp
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	59		 pop	 ecx
  00018	75 0e		 jne	 SHORT $L83884

; 506  : 		JabberProcessMessage(node, info);

  0001a	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _JabberProcessMessage

; 507  : 	else if (!strcmp(node->name, "presence"))

  00023	e9 51 01 00 00	 jmp	 $L85452
$L83884:
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08PJFJ@presence?$AA@ ; `string'
  0002d	ff 76 04	 push	 DWORD PTR [esi+4]
  00030	e8 00 00 00 00	 call	 _strcmp
  00035	59		 pop	 ecx
  00036	85 c0		 test	 eax, eax
  00038	59		 pop	 ecx
  00039	75 0e		 jne	 SHORT $L83887

; 508  : 		JabberProcessPresence(node, info);

  0003b	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _JabberProcessPresence

; 509  : 	else if (!strcmp(node->name, "iq"))

  00044	e9 30 01 00 00	 jmp	 $L85452
$L83887:
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02CIMO@iq?$AA@ ; `string'
  0004e	ff 76 04	 push	 DWORD PTR [esi+4]
  00051	e8 00 00 00 00	 call	 _strcmp
  00056	59		 pop	 ecx
  00057	85 c0		 test	 eax, eax
  00059	59		 pop	 ecx
  0005a	75 0e		 jne	 SHORT $L83890

; 510  : 		JabberProcessIq(node, info);

  0005c	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 _JabberProcessIq

; 511  : 	else if (!strcmp(node->name, "f"))

  00065	e9 0f 01 00 00	 jmp	 $L85452
$L83890:
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  0006f	ff 76 04	 push	 DWORD PTR [esi+4]
  00072	e8 00 00 00 00	 call	 _strcmp
  00077	59		 pop	 ecx
  00078	85 c0		 test	 eax, eax
  0007a	59		 pop	 ecx
  0007b	75 0e		 jne	 SHORT $L83893

; 512  : 		TlenProcessF(node, info);

  0007d	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 _TlenProcessF

; 513  : 	else if (!strcmp(node->name, "w"))

  00086	e9 ee 00 00 00	 jmp	 $L85452
$L83893:
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LLF@w?$AA@ ; `string'
  00090	ff 76 04	 push	 DWORD PTR [esi+4]
  00093	e8 00 00 00 00	 call	 _strcmp
  00098	59		 pop	 ecx
  00099	85 c0		 test	 eax, eax
  0009b	59		 pop	 ecx
  0009c	75 0e		 jne	 SHORT $L83896

; 514  : 		TlenProcessW(node, info);

  0009e	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 _TlenProcessW

; 515  : 	else if (!strcmp(node->name, "m"))

  000a7	e9 cd 00 00 00	 jmp	 $L85452
$L83896:
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KDFD@m?$AA@ ; `string'
  000b1	ff 76 04	 push	 DWORD PTR [esi+4]
  000b4	e8 00 00 00 00	 call	 _strcmp
  000b9	59		 pop	 ecx
  000ba	85 c0		 test	 eax, eax
  000bc	59		 pop	 ecx
  000bd	75 0e		 jne	 SHORT $L83899

; 516  : 		TlenProcessM(node, info);

  000bf	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _TlenProcessM

; 517  : 	else if (!strcmp(node->name, "n"))

  000c8	e9 ac 00 00 00	 jmp	 $L85452
$L83899:
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  000d2	ff 76 04	 push	 DWORD PTR [esi+4]
  000d5	e8 00 00 00 00	 call	 _strcmp
  000da	59		 pop	 ecx
  000db	85 c0		 test	 eax, eax
  000dd	59		 pop	 ecx
  000de	75 0e		 jne	 SHORT $L83902

; 518  : 		TlenProcessN(node, info);

  000e0	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 _TlenProcessN

; 519  : 	else if (!strcmp(node->name, "p"))

  000e9	e9 8b 00 00 00	 jmp	 $L85452
$L83902:
  000ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  000f3	ff 76 04	 push	 DWORD PTR [esi+4]
  000f6	e8 00 00 00 00	 call	 _strcmp
  000fb	59		 pop	 ecx
  000fc	85 c0		 test	 eax, eax
  000fe	59		 pop	 ecx
  000ff	75 0b		 jne	 SHORT $L83905

; 520  : 		TlenProcessP(node, info);

  00101	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 _TlenProcessP

; 521  : 	else if (!strcmp(node->name, "v"))

  0010a	eb 6d		 jmp	 SHORT $L85452
$L83905:
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBCC@v?$AA@ ; `string'
  00111	ff 76 04	 push	 DWORD PTR [esi+4]
  00114	e8 00 00 00 00	 call	 _strcmp
  00119	59		 pop	 ecx
  0011a	85 c0		 test	 eax, eax
  0011c	59		 pop	 ecx
  0011d	75 0b		 jne	 SHORT $L83908

; 522  : 		TlenProcessV(node, info);

  0011f	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 _TlenProcessV

; 523  : 	else if (!strcmp(node->name, "avatar"))

  00128	eb 4f		 jmp	 SHORT $L85452
$L83908:
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JBCA@avatar?$AA@ ; `string'
  0012f	ff 76 04	 push	 DWORD PTR [esi+4]
  00132	e8 00 00 00 00	 call	 _strcmp
  00137	59		 pop	 ecx
  00138	85 c0		 test	 eax, eax
  0013a	59		 pop	 ecx
  0013b	75 0b		 jne	 SHORT $L83911

; 524  : 		TlenProcessAvatar(node, info);

  0013d	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  00140	56		 push	 esi
  00141	e8 00 00 00 00	 call	 _TlenProcessAvatar

; 525  : 	else if (!strcmp(node->name, "cipher"))

  00146	eb 31		 jmp	 SHORT $L85452
$L83911:
  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06KLJ@cipher?$AA@ ; `string'
  0014d	ff 76 04	 push	 DWORD PTR [esi+4]
  00150	e8 00 00 00 00	 call	 _strcmp
  00155	59		 pop	 ecx
  00156	85 c0		 test	 eax, eax
  00158	59		 pop	 ecx
  00159	75 0b		 jne	 SHORT $L83914

; 526  : 		TlenProcessCipher(node, info);

  0015b	ff 75 0c	 push	 DWORD PTR _info$[ebp]
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 _TlenProcessCipher

; 527  : 	else

  00164	eb 13		 jmp	 SHORT $L85452
$L83914:

; 528  : 		JabberLog(info->proto, "Invalid top-level tag (only <message/> <presence/> <iq/> <f/> <w/> <m/> <n/> <p/> <v/> <cipher/> and <avatar/> allowed)");

  00166	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00169	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HI@MJEA@Invalid?5top?9level?5tag?5?$CIonly?5?$DMmes@ ; `string'
  0016e	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00174	e8 00 00 00 00	 call	 _JabberLog
$L85452:
  00179	59		 pop	 ecx
  0017a	59		 pop	 ecx
  0017b	5e		 pop	 esi

; 529  : 
; 530  : }

  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
_JabberProcessProtocol ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PIKN@type?$AA@				; `string'
PUBLIC	??_C@_0BE@GDII@?$DMcipher?5type?$DN?8ok?8?1?$DO?$AA@ ; `string'
;	COMDAT ??_C@_04PIKN@type?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_04PIKN@type?$AA@ DB 'type', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GDII@?$DMcipher?5type?$DN?8ok?8?1?$DO?$AA@
_DATA	SEGMENT
??_C@_0BE@GDII@?$DMcipher?5type?$DN?8ok?8?1?$DO?$AA@ DB '<cipher type=''o'
	DB	'k''/>', 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenProcessCipher
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_TlenProcessCipher PROC NEAR				; COMDAT

; 533  : {

  00000	56		 push	 esi

; 534  : 	char *type;
; 535  : 	type=JabberXmlGetAttrValue(node, "type");

  00001	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00006	ff 74 24 0c	 push	 DWORD PTR _node$[esp+4]
  0000a	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 536  : 	info->useAES = TRUE;

  0000f	8b 44 24 14	 mov	 eax, DWORD PTR _info$[esp+8]

; 537  : 	JabberSend(info->proto, "<cipher type='ok'/>");

  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GDII@?$DMcipher?5type?$DN?8ok?8?1?$DO?$AA@ ; `string'
  00018	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  0001e	8d b0 20 0f 00
	00		 lea	 esi, DWORD PTR [eax+3872]
  00024	c7 80 00 07 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+1792], 1
  0002e	e8 00 00 00 00	 call	 _JabberSend

; 538  : 	TlenSendAuth(info->proto);

  00033	ff 36		 push	 DWORD PTR [esi]
  00035	e8 00 00 00 00	 call	 _TlenSendAuth
  0003a	83 c4 14	 add	 esp, 20			; 00000014H
  0003d	5e		 pop	 esi

; 539  : }

  0003e	c3		 ret	 0
_TlenProcessCipher ENDP
_TEXT	ENDS
PUBLIC	??_C@_05GPDL@token?$AA@				; `string'
PUBLIC	??_C@_01FNLH@a?$AA@				; `string'
EXTRN	_JabberXmlGetChild:NEAR
EXTRN	_TlenProcessAvatarNode:NEAR
;	COMDAT ??_C@_05GPDL@token?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_05GPDL@token?$AA@ DB 'token', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT
??_C@_01FNLH@a?$AA@ DB 'a', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenProcessAvatar
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_TlenProcessAvatar PROC NEAR				; COMDAT

; 597  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 598  : 	XmlNode *tokenNode, *aNode;
; 599  : 	tokenNode = JabberXmlGetChild(node, "token");

  00003	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GPDL@token?$AA@ ; `string'
  00008	ff 74 24 14	 push	 DWORD PTR _node$[esp+12]
  0000c	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 600  : 	aNode = JabberXmlGetChild(node, "a");

  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  00016	8b f0		 mov	 esi, eax
  00018	ff 74 24 1c	 push	 DWORD PTR _node$[esp+20]
  0001c	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 601  : 	if (tokenNode != NULL) {

  00021	8b 7c 24 24	 mov	 edi, DWORD PTR _info$[esp+24]
  00025	83 c4 10	 add	 esp, 16			; 00000010H
  00028	85 f6		 test	 esi, esi
  0002a	8b d8		 mov	 ebx, eax
  0002c	74 11		 je	 SHORT $L84016

; 602  : 		char *token = tokenNode->text;
; 603  : 		strcpy(info->avatarToken, token);

  0002e	ff 76 20	 push	 DWORD PTR [esi+32]
  00031	8d 87 08 02 00
	00		 lea	 eax, DWORD PTR [edi+520]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _strcpy
  0003d	59		 pop	 ecx
  0003e	59		 pop	 ecx
$L84016:

; 604  : 	}
; 605  : 	if (aNode != NULL) {

  0003f	85 db		 test	 ebx, ebx
  00041	74 14		 je	 SHORT $L84021

; 606  : 		if (TlenProcessAvatarNode(info->proto, node, NULL)) {

  00043	6a 00		 push	 0
  00045	ff 74 24 14	 push	 DWORD PTR _node$[esp+12]
  00049	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  0004f	e8 00 00 00 00	 call	 _TlenProcessAvatarNode
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84021:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 607  : 		}
; 608  : 	}
; 609  : }

  0005a	c3		 ret	 0
_TlenProcessAvatar ENDP
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
PUBLIC	??_C@_05COLM@error?$AA@				; `string'
PUBLIC	??_C@_0BF@FDOK@IgnoreAdvertisements?$AA@	; `string'
PUBLIC	??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@		; `string'
PUBLIC	??_C@_09FDIC@groupchat?$AA@			; `string'
PUBLIC	??_C@_03DCIF@pic?$AA@				; `string'
PUBLIC	??_C@_03NEIN@idt?$AA@				; `string'
PUBLIC	??_C@_04LLHI@size?$AA@				; `string'
PUBLIC	??_C@_03GHGA@pid?$AA@				; `string'
PUBLIC	??_C@_05CBAD@crc_c?$AA@				; `string'
PUBLIC	??_C@_03BNG@crc?$AA@				; `string'
PUBLIC	??_C@_02MMAH@rt?$AA@				; `string'
PUBLIC	??_C@_02NKKN@st?$AA@				; `string'
PUBLIC	??_C@_02LELH@ps?$AA@				; `string'
PUBLIC	??_C@_0DB@FKMD@?$DMmessage?5type?$DN?8pic?8?5to?$DN?8?$CFs?8?5crc_@ ; `string'
PUBLIC	??_C@_04NIOK@body?$AA@				; `string'
PUBLIC	??_C@_07BGGH@subject?$AA@			; `string'
PUBLIC	??_C@_06OEJ@?$CFs?$AN?6?$CFs?$AA@		; `string'
PUBLIC	??_C@_01KOI@x?$AA@				; `string'
PUBLIC	??_C@_05GJOJ@xmlns?$AA@				; `string'
PUBLIC	??_C@_0P@ECLD@jabber?3x?3delay?$AA@		; `string'
PUBLIC	??_C@_05JMPA@stamp?$AA@				; `string'
PUBLIC	??_C@_0P@JKJA@jabber?3x?3event?$AA@		; `string'
PUBLIC	??_C@_09EEFM@delivered?$AA@			; `string'
PUBLIC	??_C@_02IBHF@id?$AA@				; `string'
PUBLIC	??_C@_0FB@KMAI@?$DMmessage?5to?$DN?8?$CFs?8?$DO?$DMx?5xmlns?$DN?8jabbe@ ; `string'
PUBLIC	??_C@_09IJNK@composing?$AA@			; `string'
PUBLIC	??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@	; `string'
PUBLIC	??_C@_0BC@PNLP@DB?1Event?1FindLast?$AA@		; `string'
PUBLIC	??_C@_0N@BBFJ@DB?1Event?1Get?$AA@		; `string'
PUBLIC	??_C@_0N@BJOD@?1RecvMessage?$AA@		; `string'
PUBLIC	??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@		; `string'
PUBLIC	??_C@_07KIAB@offline?$AA@			; `string'
PUBLIC	??_C@_04OKNP@mim_?$AA@				; `string'
PUBLIC	??_C@_04GLLG@from?$AA@				; `string'
EXTRN	__imp__atoi:NEAR
EXTRN	_JabberXmlGetNthChild:NEAR
EXTRN	_JabberXmlAddAttr:NEAR
EXTRN	__imp__strchr:NEAR
EXTRN	__imp__strncmp:NEAR
EXTRN	__imp__strstr:NEAR
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	__imp__time:NEAR
EXTRN	_JabberLocalNickFromJID:NEAR
EXTRN	_JabberTextDecode:NEAR
EXTRN	_JabberIsoToUnixTime:NEAR
EXTRN	_JabberDBCreateContact:NEAR
EXTRN	_JabberListExist:NEAR
EXTRN	_JabberListGetItemPtr:NEAR
;	COMDAT ??_C@_00A@?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT
??_C@_04GLLG@from?$AA@ DB 'from', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05COLM@error?$AA@
_DATA	SEGMENT
??_C@_05COLM@error?$AA@ DB 'error', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FDOK@IgnoreAdvertisements?$AA@
_DATA	SEGMENT
??_C@_0BF@FDOK@IgnoreAdvertisements?$AA@ DB 'IgnoreAdvertisements', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@
_DATA	SEGMENT
??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@ DB 'b73@tlen.pl', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FDIC@groupchat?$AA@
_DATA	SEGMENT
??_C@_09FDIC@groupchat?$AA@ DB 'groupchat', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DCIF@pic?$AA@
_DATA	SEGMENT
??_C@_03DCIF@pic?$AA@ DB 'pic', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03NEIN@idt?$AA@
_DATA	SEGMENT
??_C@_03NEIN@idt?$AA@ DB 'idt', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LLHI@size?$AA@
_DATA	SEGMENT
??_C@_04LLHI@size?$AA@ DB 'size', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03GHGA@pid?$AA@
_DATA	SEGMENT
??_C@_03GHGA@pid?$AA@ DB 'pid', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CBAD@crc_c?$AA@
_DATA	SEGMENT
??_C@_05CBAD@crc_c?$AA@ DB 'crc_c', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BNG@crc?$AA@
_DATA	SEGMENT
??_C@_03BNG@crc?$AA@ DB 'crc', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02MMAH@rt?$AA@
_DATA	SEGMENT
??_C@_02MMAH@rt?$AA@ DB 'rt', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02NKKN@st?$AA@
_DATA	SEGMENT
??_C@_02NKKN@st?$AA@ DB 'st', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02LELH@ps?$AA@
_DATA	SEGMENT
??_C@_02LELH@ps?$AA@ DB 'ps', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DB@FKMD@?$DMmessage?5type?$DN?8pic?8?5to?$DN?8?$CFs?8?5crc_@
_DATA	SEGMENT
??_C@_0DB@FKMD@?$DMmessage?5type?$DN?8pic?8?5to?$DN?8?$CFs?8?5crc_@ DB '<'
	DB	'message type=''pic'' to=''%s'' crc_c=''n'' idt=''%s''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NIOK@body?$AA@
_DATA	SEGMENT
??_C@_04NIOK@body?$AA@ DB 'body', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BGGH@subject?$AA@
_DATA	SEGMENT
??_C@_07BGGH@subject?$AA@ DB 'subject', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OEJ@?$CFs?$AN?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_06OEJ@?$CFs?$AN?6?$CFs?$AA@ DB '%s', 0dH, 0aH, '%s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOI@x?$AA@
_DATA	SEGMENT
??_C@_01KOI@x?$AA@ DB 'x', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GJOJ@xmlns?$AA@
_DATA	SEGMENT
??_C@_05GJOJ@xmlns?$AA@ DB 'xmlns', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@ECLD@jabber?3x?3delay?$AA@
_DATA	SEGMENT
??_C@_0P@ECLD@jabber?3x?3delay?$AA@ DB 'jabber:x:delay', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JMPA@stamp?$AA@
_DATA	SEGMENT
??_C@_05JMPA@stamp?$AA@ DB 'stamp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@JKJA@jabber?3x?3event?$AA@
_DATA	SEGMENT
??_C@_0P@JKJA@jabber?3x?3event?$AA@ DB 'jabber:x:event', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EEFM@delivered?$AA@
_DATA	SEGMENT
??_C@_09EEFM@delivered?$AA@ DB 'delivered', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02IBHF@id?$AA@
_DATA	SEGMENT
??_C@_02IBHF@id?$AA@ DB 'id', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FB@KMAI@?$DMmessage?5to?$DN?8?$CFs?8?$DO?$DMx?5xmlns?$DN?8jabbe@
_DATA	SEGMENT
??_C@_0FB@KMAI@?$DMmessage?5to?$DN?8?$CFs?8?$DO?$DMx?5xmlns?$DN?8jabbe@ DB '<'
	DB	'message to=''%s''><x xmlns=''jabber:x:event''><delivered/><id'
	DB	'>%s</id></x></message>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IJNK@composing?$AA@
_DATA	SEGMENT
??_C@_09IJNK@composing?$AA@ DB 'composing', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@
_DATA	SEGMENT
??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@ DB 'Proto/ContactIsTyping', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PNLP@DB?1Event?1FindLast?$AA@
_DATA	SEGMENT
??_C@_0BC@PNLP@DB?1Event?1FindLast?$AA@ DB 'DB/Event/FindLast', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@BBFJ@DB?1Event?1Get?$AA@
_DATA	SEGMENT
??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ DB 'DB/Event/Get', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@BJOD@?1RecvMessage?$AA@
_DATA	SEGMENT
??_C@_0N@BJOD@?1RecvMessage?$AA@ DB '/RecvMessage', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@
_DATA	SEGMENT
??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ DB 'Proto/ChainRecv', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07KIAB@offline?$AA@
_DATA	SEGMENT
??_C@_07KIAB@offline?$AA@ DB 'offline', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OKNP@mim_?$AA@
_DATA	SEGMENT
??_C@_04OKNP@mim_?$AA@ DB 'mim_', 00H			; `string'
_DATA	ENDS
;	COMDAT _JabberProcessMessage
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_hContact$ = 12
_ccs$ = -84
_recv$ = -68
_xNode$ = -24
_idNode$ = -28
_from$ = -4
_type$ = -8
_localMessage$ = -24
_msgTime$ = 8
_delivered$ = -16
_composing$ = -20
_i$ = -8
_id$ = 8
_item$ = -12
_isChatRoomJid$ = -28
_crc$84067 = 12
_crc_c$84068 = -20
_idt$84069 = -24
_pid$84072 = 8
_dbei$84166 = -112
_dbv$85464 = -52
_cgs$85465 = -40
_ack$85474 = -112
_JabberProcessMessage PROC NEAR				; COMDAT

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx

; 613  : 	HANDLE hContact;
; 614  : 	CCSDATA ccs;
; 615  : 	PROTORECVEVENT recv;
; 616  : 	XmlNode *bodyNode, *subjectNode, *xNode, *idNode, *n;
; 617  : 	char *from, *type, *nick, *p, *localMessage, *idStr;
; 618  : 	DWORD msgTime;
; 619  : 	BOOL delivered, composing;
; 620  : 	int i, id;
; 621  : 	JABBER_LIST_ITEM *item;
; 622  : 	BOOL isChatRoomJid;
; 623  : 
; 624  : 	if (!node->name || strcmp(node->name, "message")) return;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _node$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 02 07 00
	00		 je	 $L84049
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NPGL@message?$AA@ ; `string'
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _strcmp
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax
  00025	59		 pop	 ecx
  00026	0f 85 ed 06 00
	00		 jne	 $L84049

; 625  : 
; 626  : 	if ((type=JabberXmlGetAttrValue(node, "type"))!=NULL && !strcmp(type, "error")) {

  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00037	59		 pop	 ecx
  00038	89 45 f8	 mov	 DWORD PTR _type$[ebp], eax
  0003b	85 c0		 test	 eax, eax
  0003d	59		 pop	 ecx
  0003e	74 15		 je	 SHORT $L84051
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05COLM@error?$AA@ ; `string'
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _strcmp
  0004b	59		 pop	 ecx
  0004c	85 c0		 test	 eax, eax
  0004e	59		 pop	 ecx
  0004f	0f 84 c4 06 00
	00		 je	 $L84049
$L84051:

; 627  : 	}
; 628  : 	else {
; 629  : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  0005a	53		 push	 ebx
  0005b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00060	8b f0		 mov	 esi, eax
  00062	59		 pop	 ecx
  00063	85 f6		 test	 esi, esi
  00065	59		 pop	 ecx
  00066	89 75 fc	 mov	 DWORD PTR _from$[ebp], esi
  00069	0f 84 aa 06 00
	00		 je	 $L84049

; 630  : 			if (DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "IgnoreAdvertisements", TRUE) && strstr(from, "b73@tlen.pl") == from) {

  0006f	8b 7d 0c	 mov	 edi, DWORD PTR _info$[ebp]
  00072	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _cgs$85465[ebp+4], OFFSET FLAT:??_C@_0BF@FDOK@IgnoreAdvertisements?$AA@ ; `string'
  00079	8b 87 20 0f 00
	00		 mov	 eax, DWORD PTR [edi+3872]
  0007f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00082	89 45 d8	 mov	 DWORD PTR _cgs$85465[ebp], eax
  00085	8d 45 cc	 lea	 eax, DWORD PTR _dbv$85464[ebp]
  00088	89 45 e0	 mov	 DWORD PTR _cgs$85465[ebp+8], eax
  0008b	8d 45 d8	 lea	 eax, DWORD PTR _cgs$85465[ebp]
  0008e	50		 push	 eax
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00094	6a 00		 push	 0
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0009b	ff 50 24	 call	 DWORD PTR [eax+36]
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	85 c0		 test	 eax, eax
  000a3	75 08		 jne	 SHORT $L85479
  000a5	0f b6 45 d0	 movzx	 eax, BYTE PTR _dbv$85464[ebp+4]
  000a9	85 c0		 test	 eax, eax
  000ab	74 16		 je	 SHORT $L84057
$L85479:
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KLOL@b73?$EAtlen?4pl?$AA@ ; `string'
  000b2	56		 push	 esi
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  000b9	59		 pop	 ecx
  000ba	3b c6		 cmp	 eax, esi
  000bc	59		 pop	 ecx
  000bd	0f 84 56 06 00
	00		 je	 $L84049
$L84057:

; 631  : 				return;
; 632  : 			}
; 633  : 			// If message is from a stranger (not in roster), item is NULL
; 634  : 			item = JabberListGetItemPtr(info->proto, LIST_ROSTER, from);

  000c3	56		 push	 esi
  000c4	6a 00		 push	 0
  000c6	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  000cc	e8 00 00 00 00	 call	 _JabberListGetItemPtr

; 635  : 			isChatRoomJid = JabberListExist(info->proto, LIST_CHATROOM, from);

  000d1	56		 push	 esi
  000d2	6a 01		 push	 1
  000d4	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  000da	89 45 f4	 mov	 DWORD PTR _item$[ebp], eax
  000dd	e8 00 00 00 00	 call	 _JabberListExist
  000e2	83 c4 18	 add	 esp, 24			; 00000018H
  000e5	89 45 e4	 mov	 DWORD PTR _isChatRoomJid$[ebp], eax

; 636  : 
; 637  : 			if (isChatRoomJid && type!=NULL && !strcmp(type, "groupchat")) {

  000e8	85 c0		 test	 eax, eax
  000ea	74 21		 je	 SHORT $L84061
  000ec	83 7d f8 00	 cmp	 DWORD PTR _type$[ebp], 0
  000f0	0f 84 30 01 00
	00		 je	 $L84097
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FDIC@groupchat?$AA@ ; `string'
  000fb	ff 75 f8	 push	 DWORD PTR _type$[ebp]
  000fe	e8 00 00 00 00	 call	 _strcmp
  00103	59		 pop	 ecx
  00104	85 c0		 test	 eax, eax
  00106	59		 pop	 ecx
  00107	0f 84 0c 06 00
	00		 je	 $L84049
$L84061:

; 638  : 				//JabberGroupchatProcessMessage(node, userdata);
; 639  : 			} else if (type!=NULL && !strcmp(type, "pic")) {

  0010d	83 7d f8 00	 cmp	 DWORD PTR _type$[ebp], 0
  00111	0f 84 0f 01 00
	00		 je	 $L84097
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03DCIF@pic?$AA@ ; `string'
  0011c	ff 75 f8	 push	 DWORD PTR _type$[ebp]
  0011f	e8 00 00 00 00	 call	 _strcmp
  00124	59		 pop	 ecx
  00125	85 c0		 test	 eax, eax
  00127	59		 pop	 ecx
  00128	0f 85 b4 00 00
	00		 jne	 $L84065

; 640  : 				//1.  <message type='pic' to='piastucki@tlen.pl' crc='3baccc1' idt='7709' size='1434'/>
; 641  : 				//2.  <message to='the_leech7@tlen.pl' from='ps' type='pic' pid='1014' st='CtIO' rt='nWGa' idt='7709'/>
; 642  : 				char *crc, *crc_c, *idt, *size, *rt, *pid, *st;
; 643  : 				idt = JabberXmlGetAttrValue(node, "idt");

  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03NEIN@idt?$AA@ ; `string'
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 644  : 				size = JabberXmlGetAttrValue(node, "size");

  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LLHI@size?$AA@ ; `string'
  0013e	53		 push	 ebx
  0013f	89 45 e8	 mov	 DWORD PTR _idt$84069[ebp], eax
  00142	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 645  : 				pid = JabberXmlGetAttrValue(node, "pid");

  00147	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03GHGA@pid?$AA@ ; `string'
  0014c	53		 push	 ebx
  0014d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 646  : 				crc_c = JabberXmlGetAttrValue(node, "crc_c");

  00152	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05CBAD@crc_c?$AA@ ; `string'
  00157	53		 push	 ebx
  00158	89 45 08	 mov	 DWORD PTR _pid$84072[ebp], eax
  0015b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 647  : 				crc = JabberXmlGetAttrValue(node, "crc");

  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03BNG@crc?$AA@ ; `string'
  00165	53		 push	 ebx
  00166	89 45 ec	 mov	 DWORD PTR _crc_c$84068[ebp], eax
  00169	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 648  : 				rt = JabberXmlGetAttrValue(node, "rt");

  0016e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02MMAH@rt?$AA@ ; `string'
  00173	53		 push	 ebx
  00174	89 45 0c	 mov	 DWORD PTR _crc$84067[ebp], eax
  00177	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 649  : 				st = JabberXmlGetAttrValue(node, "st");

  0017c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02NKKN@st?$AA@ ; `string'
  00181	53		 push	 ebx
  00182	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 650  : 				if (strcmp(from, "ps")) {

  00187	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LELH@ps?$AA@ ; `string'
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 _strcmp
  00192	83 c4 40	 add	 esp, 64			; 00000040H
  00195	85 c0		 test	 eax, eax
  00197	0f 84 7c 05 00
	00		 je	 $L84049

; 651  : 					if (pid == NULL && crc != NULL) {

  0019d	33 c0		 xor	 eax, eax
  0019f	39 45 08	 cmp	 DWORD PTR _pid$84072[ebp], eax
  001a2	75 21		 jne	 SHORT $L84085
  001a4	39 45 0c	 cmp	 DWORD PTR _crc$84067[ebp], eax
  001a7	74 1c		 je	 SHORT $L84085

; 652  : 						JabberSend(info->proto, "<message type='pic' to='%s' crc_c='n' idt='%s'/>", from, idt);

  001a9	ff 75 e8	 push	 DWORD PTR _idt$84069[ebp]
  001ac	56		 push	 esi
  001ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@FKMD@?$DMmessage?5type?$DN?8pic?8?5to?$DN?8?$CFs?8?5crc_@ ; `string'
  001b2	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  001b8	e8 00 00 00 00	 call	 _JabberSend
$L85490:
  001bd	83 c4 10	 add	 esp, 16			; 00000010H

; 653  : 					} else if (crc_c != NULL) {

  001c0	e9 54 05 00 00	 jmp	 $L84049
$L84085:
  001c5	39 45 ec	 cmp	 DWORD PTR _crc_c$84068[ebp], eax
  001c8	0f 84 4b 05 00
	00		 je	 $L84049

; 654  : 						/* crc_c = f, if the picure has been already received */
; 655  : 						/* crc_c = n, if the picture should be transferred */
; 656  : 						if (!strcmp(crc, "n")) {

  001ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  001d3	ff 75 0c	 push	 DWORD PTR _crc$84067[ebp]
  001d6	e8 00 00 00 00	 call	 _strcmp
  001db	59		 pop	 ecx
  001dc	59		 pop	 ecx

; 657  : 
; 658  : 						}
; 659  : 					} else if (rt != NULL) {
; 660  : 						// retrieve the picture here
; 661  : 					}
; 662  : 				} else {
; 663  : 					//from ps
; 664  : 				}
; 665  : 			} else if (type!=NULL && !strcmp(type, "iq")) {

  001dd	e9 37 05 00 00	 jmp	 $L84049
$L84065:
  001e2	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_02CIMO@iq?$AA@ ; `string'
  001e7	56		 push	 esi
  001e8	ff 75 f8	 push	 DWORD PTR _type$[ebp]
  001eb	e8 00 00 00 00	 call	 _strcmp
  001f0	59		 pop	 ecx
  001f1	85 c0		 test	 eax, eax
  001f3	59		 pop	 ecx
  001f4	75 30		 jne	 SHORT $L84097

; 666  : 				XmlNode *iqNode;
; 667  : 				// Jabber-compatible iq
; 668  : 				if ((iqNode=JabberXmlGetChild(node, "iq")) != NULL) {

  001f6	56		 push	 esi
  001f7	53		 push	 ebx
  001f8	e8 00 00 00 00	 call	 _JabberXmlGetChild
  001fd	8b f0		 mov	 esi, eax
  001ff	59		 pop	 ecx
  00200	85 f6		 test	 esi, esi
  00202	59		 pop	 ecx
  00203	0f 84 10 05 00
	00		 je	 $L84049

; 669  : 					JabberXmlAddAttr(iqNode, "from", from);

  00209	ff 75 fc	 push	 DWORD PTR _from$[ebp]
  0020c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00211	56		 push	 esi
  00212	e8 00 00 00 00	 call	 _JabberXmlAddAttr

; 670  : 					JabberProcessIq(iqNode, info);

  00217	57		 push	 edi
  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 _JabberProcessIq
  0021e	83 c4 14	 add	 esp, 20			; 00000014H

; 671  : 				}
; 672  : 			} else {

  00221	e9 f3 04 00 00	 jmp	 $L84049
$L84097:

; 673  : 				if ((bodyNode=JabberXmlGetChild(node, "body")) != NULL) {

  00226	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NIOK@body?$AA@ ; `string'
  0022b	53		 push	 ebx
  0022c	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00231	8b f0		 mov	 esi, eax
  00233	59		 pop	 ecx
  00234	85 f6		 test	 esi, esi
  00236	59		 pop	 ecx
  00237	0f 84 28 03 00
	00		 je	 $L84103

; 674  : 					if (bodyNode->text != NULL) {

  0023d	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00241	0f 84 d2 04 00
	00		 je	 $L84049

; 675  : 						if ((subjectNode=JabberXmlGetChild(node, "subject"))!=NULL && subjectNode->text!=NULL && subjectNode->text[0]!='\0') {

  00247	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BGGH@subject?$AA@ ; `string'
  0024c	53		 push	 ebx
  0024d	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00252	8b f8		 mov	 edi, eax
  00254	59		 pop	 ecx
  00255	85 ff		 test	 edi, edi
  00257	59		 pop	 ecx
  00258	74 58		 je	 SHORT $L84109
  0025a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0025d	85 c0		 test	 eax, eax
  0025f	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00262	74 4e		 je	 SHORT $L84109
  00264	80 38 00	 cmp	 BYTE PTR [eax], 0
  00267	74 49		 je	 SHORT $L84109

; 676  : 							p = (char *) mir_alloc(strlen(subjectNode->text)+strlen(bodyNode->text)+5);

  00269	ff 76 20	 push	 DWORD PTR [esi+32]
  0026c	e8 00 00 00 00	 call	 _strlen
  00271	ff 75 e8	 push	 DWORD PTR -24+[ebp]
  00274	8b d8		 mov	 ebx, eax
  00276	e8 00 00 00 00	 call	 _strlen
  0027b	8d 44 03 05	 lea	 eax, DWORD PTR [ebx+eax+5]
  0027f	50		 push	 eax
  00280	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 677  : 							sprintf(p, "%s\r\n%s", subjectNode->text, bodyNode->text);

  00286	ff 76 20	 push	 DWORD PTR [esi+32]
  00289	8b d8		 mov	 ebx, eax
  0028b	ff 77 20	 push	 DWORD PTR [edi+32]
  0028e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06OEJ@?$CFs?$AN?6?$CFs?$AA@ ; `string'
  00293	53		 push	 ebx
  00294	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 678  : 							localMessage = JabberTextDecode(p);

  0029a	53		 push	 ebx
  0029b	e8 00 00 00 00	 call	 _JabberTextDecode

; 679  : 							mir_free(p);

  002a0	53		 push	 ebx
  002a1	89 45 e8	 mov	 DWORD PTR _localMessage$[ebp], eax
  002a4	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 680  : 						} else {

  002aa	8b 5d 08	 mov	 ebx, DWORD PTR _node$[ebp]
  002ad	83 c4 24	 add	 esp, 36			; 00000024H
  002b0	eb 0c		 jmp	 SHORT $L84113
$L84109:

; 681  : 							localMessage = JabberTextDecode(bodyNode->text);

  002b2	ff 76 20	 push	 DWORD PTR [esi+32]
  002b5	e8 00 00 00 00	 call	 _JabberTextDecode
  002ba	59		 pop	 ecx
  002bb	89 45 e8	 mov	 DWORD PTR _localMessage$[ebp], eax
$L84113:

; 682  : 						}
; 683  : 
; 684  : 						msgTime = 0;
; 685  : 						delivered = composing = FALSE;
; 686  : 						i = 1;

  002be	6a 01		 push	 1
  002c0	33 ff		 xor	 edi, edi
  002c2	58		 pop	 eax
  002c3	89 7d 08	 mov	 DWORD PTR _msgTime$[ebp], edi

; 687  : 						while ((xNode=JabberXmlGetNthChild(node, "x", i)) != NULL) {

  002c6	50		 push	 eax
  002c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  002cc	53		 push	 ebx
  002cd	89 7d ec	 mov	 DWORD PTR _composing$[ebp], edi
  002d0	89 7d f0	 mov	 DWORD PTR _delivered$[ebp], edi
  002d3	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  002d6	e8 00 00 00 00	 call	 _JabberXmlGetNthChild
  002db	8b f0		 mov	 esi, eax
  002dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e0	3b f7		 cmp	 esi, edi
  002e2	0f 84 1d 01 00
	00		 je	 $L84117
$L84116:

; 688  : 							if ((p=JabberXmlGetAttrValue(xNode, "xmlns")) != NULL) {

  002e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GJOJ@xmlns?$AA@ ; `string'
  002ed	56		 push	 esi
  002ee	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  002f3	8b f8		 mov	 edi, eax
  002f5	59		 pop	 ecx
  002f6	85 ff		 test	 edi, edi
  002f8	59		 pop	 ecx
  002f9	0f 84 e6 00 00
	00		 je	 $L84138

; 689  : 								if (!strcmp(p, "jabber:x:delay") && msgTime==0) {

  002ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@ECLD@jabber?3x?3delay?$AA@ ; `string'
  00304	57		 push	 edi
  00305	e8 00 00 00 00	 call	 _strcmp
  0030a	59		 pop	 ecx
  0030b	85 c0		 test	 eax, eax
  0030d	59		 pop	 ecx
  0030e	75 29		 jne	 SHORT $L84122
  00310	39 45 08	 cmp	 DWORD PTR _msgTime$[ebp], eax
  00313	75 24		 jne	 SHORT $L84122

; 690  : 									if ((p=JabberXmlGetAttrValue(xNode, "stamp")) != NULL) {

  00315	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05JMPA@stamp?$AA@ ; `string'
  0031a	56		 push	 esi
  0031b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00320	59		 pop	 ecx
  00321	85 c0		 test	 eax, eax
  00323	59		 pop	 ecx
  00324	0f 84 bb 00 00
	00		 je	 $L84138

; 691  : 										msgTime = JabberIsoToUnixTime(p);

  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 _JabberIsoToUnixTime
  00330	59		 pop	 ecx
  00331	89 45 08	 mov	 DWORD PTR _msgTime$[ebp], eax

; 692  : 									}
; 693  : 								}
; 694  : 								else if (!strcmp(p, "jabber:x:event")) {

  00334	e9 ac 00 00 00	 jmp	 $L84138
$L84122:
  00339	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@JKJA@jabber?3x?3event?$AA@ ; `string'
  0033e	57		 push	 edi
  0033f	e8 00 00 00 00	 call	 _strcmp
  00344	59		 pop	 ecx
  00345	85 c0		 test	 eax, eax
  00347	59		 pop	 ecx
  00348	0f 85 97 00 00
	00		 jne	 $L84138

; 695  : 									// Check whether any event is requested
; 696  : 									if (!delivered && (n=JabberXmlGetChild(xNode, "delivered"))!=NULL) {

  0034e	39 45 f0	 cmp	 DWORD PTR _delivered$[ebp], eax
  00351	75 48		 jne	 SHORT $L84131
  00353	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EEFM@delivered?$AA@ ; `string'
  00358	56		 push	 esi
  00359	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0035e	59		 pop	 ecx
  0035f	85 c0		 test	 eax, eax
  00361	59		 pop	 ecx
  00362	74 37		 je	 SHORT $L84131

; 697  : 										delivered = TRUE;
; 698  : 										idStr = JabberXmlGetAttrValue(node, "id");

  00364	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  00369	53		 push	 ebx
  0036a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _delivered$[ebp], 1
  00371	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00376	59		 pop	 ecx

; 699  : 										JabberSend(info->proto, "<message to='%s'><x xmlns='jabber:x:event'><delivered/><id>%s</id></x></message>", from, (idStr!=NULL)?idStr:"");

  00377	85 c0		 test	 eax, eax
  00379	59		 pop	 ecx
  0037a	75 05		 jne	 SHORT $L85459
  0037c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L85459:
  00381	50		 push	 eax
  00382	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00385	ff 75 fc	 push	 DWORD PTR _from$[ebp]
  00388	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FB@KMAI@?$DMmessage?5to?$DN?8?$CFs?8?$DO?$DMx?5xmlns?$DN?8jabbe@ ; `string'
  0038d	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00393	e8 00 00 00 00	 call	 _JabberSend
  00398	83 c4 10	 add	 esp, 16			; 00000010H
$L84131:

; 700  : 									}
; 701  : 									if (item!=NULL && JabberXmlGetChild(xNode, "composing")!=NULL) {

  0039b	8b 7d f4	 mov	 edi, DWORD PTR _item$[ebp]
  0039e	85 ff		 test	 edi, edi
  003a0	74 43		 je	 SHORT $L84138
  003a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09IJNK@composing?$AA@ ; `string'
  003a7	56		 push	 esi
  003a8	e8 00 00 00 00	 call	 _JabberXmlGetChild
  003ad	59		 pop	 ecx
  003ae	85 c0		 test	 eax, eax
  003b0	59		 pop	 ecx
  003b1	74 32		 je	 SHORT $L84138

; 702  : 										composing = TRUE;
; 703  : 										if (item->messageEventIdStr)

  003b3	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  003b6	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _composing$[ebp], 1
  003bd	85 c0		 test	 eax, eax
  003bf	74 08		 je	 SHORT $L84140

; 704  : 											mir_free(item->messageEventIdStr);

  003c1	50		 push	 eax
  003c2	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  003c8	59		 pop	 ecx
$L84140:

; 705  : 										idStr = JabberXmlGetAttrValue(node, "id");

  003c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  003ce	53		 push	 ebx
  003cf	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  003d4	59		 pop	 ecx

; 706  : 										item->messageEventIdStr = (idStr==NULL)?NULL:mir_strdup(idStr);

  003d5	85 c0		 test	 eax, eax
  003d7	59		 pop	 ecx
  003d8	74 08		 je	 SHORT $L85461
$L85460:
  003da	50		 push	 eax
  003db	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  003e1	59		 pop	 ecx
$L85461:
  003e2	89 47 48	 mov	 DWORD PTR [edi+72], eax
$L84138:

; 707  : 									}
; 708  : 								}
; 709  : 							}
; 710  : 							i++;

  003e5	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  003e8	ff 75 f8	 push	 DWORD PTR _i$[ebp]
  003eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  003f0	53		 push	 ebx
  003f1	e8 00 00 00 00	 call	 _JabberXmlGetNthChild
  003f6	8b f0		 mov	 esi, eax
  003f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003fb	85 f6		 test	 esi, esi
  003fd	0f 85 e5 fe ff
	ff		 jne	 $L84116

; 687  : 						while ((xNode=JabberXmlGetNthChild(node, "x", i)) != NULL) {

  00403	33 ff		 xor	 edi, edi
$L84117:

; 711  : 						}
; 712  : 
; 713  : 						if (item != NULL) {

  00405	8b 45 f4	 mov	 eax, DWORD PTR _item$[ebp]
  00408	3b c7		 cmp	 eax, edi
  0040a	74 3c		 je	 SHORT $L85480

; 714  : 							item->wantComposingEvent = composing;

  0040c	8b 4d ec	 mov	 ecx, DWORD PTR _composing$[ebp]

; 715  : 							if (item->isTyping) {

  0040f	39 78 50	 cmp	 DWORD PTR [eax+80], edi
  00412	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00415	74 31		 je	 SHORT $L85480

; 716  : 								item->isTyping = FALSE;
; 717  : 								if ((hContact=JabberHContactFromJID(info->proto, from)) != NULL)

  00417	8b 75 fc	 mov	 esi, DWORD PTR _from$[ebp]
  0041a	89 78 50	 mov	 DWORD PTR [eax+80], edi
  0041d	8b 7d 0c	 mov	 edi, DWORD PTR _info$[ebp]
  00420	56		 push	 esi
  00421	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  00427	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0042c	33 db		 xor	 ebx, ebx
  0042e	59		 pop	 ecx
  0042f	3b c3		 cmp	 eax, ebx
  00431	59		 pop	 ecx
  00432	74 1c		 je	 SHORT $L84147

; 718  : 									CallService(MS_PROTO_CONTACTISTYPING, (WPARAM) hContact, PROTOTYPE_CONTACTTYPING_OFF);

  00434	53		 push	 ebx
  00435	50		 push	 eax
  00436	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0043b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@ ; `string'
  00440	ff 50 24	 call	 DWORD PTR [eax+36]
  00443	83 c4 0c	 add	 esp, 12			; 0000000cH
  00446	eb 08		 jmp	 SHORT $L84147
$L85480:
  00448	8b 7d 0c	 mov	 edi, DWORD PTR _info$[ebp]
  0044b	8b 75 fc	 mov	 esi, DWORD PTR _from$[ebp]
  0044e	33 db		 xor	 ebx, ebx
$L84147:

; 719  : 							}
; 720  : 						}
; 721  : 
; 722  : 						if ((hContact=JabberHContactFromJID(info->proto, from)) == NULL) {

  00450	56		 push	 esi
  00451	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  00457	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0045c	59		 pop	 ecx
  0045d	3b c3		 cmp	 eax, ebx
  0045f	59		 pop	 ecx
  00460	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
  00463	75 4b		 jne	 SHORT $L84151

; 723  : 							// Create a temporary contact
; 724  : 							if (isChatRoomJid) {

  00465	39 5d e4	 cmp	 DWORD PTR _isChatRoomJid$[ebp], ebx
  00468	74 1f		 je	 SHORT $L84152

; 725  : 								if ((p=strchr(from, '/'))!=NULL && p[1]!='\0')

  0046a	6a 2f		 push	 47			; 0000002fH
  0046c	56		 push	 esi
  0046d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00473	59		 pop	 ecx
  00474	3b c3		 cmp	 eax, ebx
  00476	59		 pop	 ecx
  00477	74 06		 je	 SHORT $L84154
  00479	40		 inc	 eax
  0047a	80 38 00	 cmp	 BYTE PTR [eax], 0

; 726  : 									p++;
; 727  : 								else

  0047d	75 02		 jne	 SHORT $L84155
$L84154:

; 728  : 									p = from;

  0047f	8b c6		 mov	 eax, esi
$L84155:

; 729  : 								nick = JabberTextEncode(p);

  00481	50		 push	 eax
  00482	e8 00 00 00 00	 call	 _JabberTextEncode

; 730  : 								hContact = JabberDBCreateContact(info->proto, from, nick, TRUE);
; 731  : 							}
; 732  : 							else {

  00487	eb 06		 jmp	 SHORT $L85488
$L84152:

; 733  : 								nick = JabberLocalNickFromJID(from);

  00489	56		 push	 esi
  0048a	e8 00 00 00 00	 call	 _JabberLocalNickFromJID
$L85488:
  0048f	8b d8		 mov	 ebx, eax

; 734  : 								hContact = JabberDBCreateContact(info->proto, from, nick, TRUE);

  00491	6a 01		 push	 1
  00493	53		 push	 ebx
  00494	56		 push	 esi
  00495	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  0049b	e8 00 00 00 00	 call	 _JabberDBCreateContact
  004a0	83 c4 14	 add	 esp, 20			; 00000014H
  004a3	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax

; 735  : 							}
; 736  : 							mir_free(nick);

  004a6	53		 push	 ebx
  004a7	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  004ad	59		 pop	 ecx
  004ae	33 db		 xor	 ebx, ebx
$L84151:

; 737  : 						}
; 738  : 
; 739  : 						if (msgTime == 0) {

  004b0	39 5d 08	 cmp	 DWORD PTR _msgTime$[ebp], ebx

; 740  : 							msgTime = time(NULL);

  004b3	53		 push	 ebx
  004b4	75 08		 jne	 SHORT $L84157
  004b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time

; 741  : 						} else {

  004bc	eb 5d		 jmp	 SHORT $L85489
$L84157:

; 742  : 							HANDLE hDbEvent = (HANDLE) CallService(MS_DB_EVENT_FINDLAST, (WPARAM) hContact, 0);

  004be	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  004c1	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@PNLP@DB?1Event?1FindLast?$AA@ ; `string'
  004cb	ff 50 24	 call	 DWORD PTR [eax+36]
  004ce	8b d0		 mov	 edx, eax
  004d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  : 							if (hDbEvent != NULL) {

  004d3	3b d3		 cmp	 edx, ebx
  004d5	74 32		 je	 SHORT $L84170

; 744  : 								DBEVENTINFO dbei = { 0 };

  004d7	6a 06		 push	 6
  004d9	33 c0		 xor	 eax, eax
  004db	59		 pop	 ecx
  004dc	8d 7d 94	 lea	 edi, DWORD PTR _dbei$84166[ebp+4]
  004df	f3 ab		 rep stosd

; 745  : 								dbei.cbSize = sizeof(dbei);
; 746  : 								CallService(MS_DB_EVENT_GET, (WPARAM) hDbEvent, (LPARAM) &dbei);

  004e1	8d 45 90	 lea	 eax, DWORD PTR _dbei$84166[ebp]
  004e4	c7 45 90 1c 00
	00 00		 mov	 DWORD PTR _dbei$84166[ebp], 28 ; 0000001cH
  004eb	50		 push	 eax
  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004f1	52		 push	 edx
  004f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BBFJ@DB?1Event?1Get?$AA@ ; `string'
  004f7	ff 50 24	 call	 DWORD PTR [eax+36]

; 747  : 								if (msgTime < dbei.timestamp) {

  004fa	8b 45 98	 mov	 eax, DWORD PTR _dbei$84166[ebp+8]
  004fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00500	39 45 08	 cmp	 DWORD PTR _msgTime$[ebp], eax
  00503	73 04		 jae	 SHORT $L84170

; 748  : 									msgTime = dbei.timestamp + 1;

  00505	40		 inc	 eax
  00506	89 45 08	 mov	 DWORD PTR _msgTime$[ebp], eax
$L84170:

; 749  : 								}
; 750  : 							}
; 751  : 							if (msgTime > (DWORD)time(NULL)) {

  00509	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__time
  0050f	53		 push	 ebx
  00510	ff d7		 call	 edi
  00512	39 45 08	 cmp	 DWORD PTR _msgTime$[ebp], eax
  00515	59		 pop	 ecx
  00516	76 07		 jbe	 SHORT $L84173

; 752  : 								msgTime = time(NULL);

  00518	53		 push	 ebx
  00519	ff d7		 call	 edi
$L85489:
  0051b	59		 pop	 ecx
  0051c	89 45 08	 mov	 DWORD PTR _msgTime$[ebp], eax
$L84173:

; 753  : 							}
; 754  : 						}
; 755  : 						recv.flags = 0;
; 756  : 						recv.timestamp = (DWORD) msgTime;

  0051f	8b 45 08	 mov	 eax, DWORD PTR _msgTime$[ebp]

; 757  : 						recv.szMessage = localMessage;

  00522	8b 75 e8	 mov	 esi, DWORD PTR _localMessage$[ebp]
  00525	89 45 c0	 mov	 DWORD PTR _recv$[ebp+4], eax

; 758  : 						recv.lParam = 0;
; 759  : 						ccs.hContact = hContact;

  00528	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  0052b	89 45 ac	 mov	 DWORD PTR _ccs$[ebp], eax

; 760  : 						ccs.wParam = 0;
; 761  : 						ccs.szProtoService = PSR_MESSAGE;
; 762  : 						ccs.lParam = (LPARAM) &recv;

  0052e	8d 45 bc	 lea	 eax, DWORD PTR _recv$[ebp]
  00531	89 45 b8	 mov	 DWORD PTR _ccs$[ebp+12], eax

; 763  : 						CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  00534	8d 45 ac	 lea	 eax, DWORD PTR _ccs$[ebp]
  00537	50		 push	 eax
  00538	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0053d	53		 push	 ebx
  0053e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  00543	89 5d bc	 mov	 DWORD PTR _recv$[ebp], ebx
  00546	89 75 c4	 mov	 DWORD PTR _recv$[ebp+8], esi
  00549	89 5d c8	 mov	 DWORD PTR _recv$[ebp+12], ebx
  0054c	89 5d b4	 mov	 DWORD PTR _ccs$[ebp+8], ebx
  0054f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_0N@BJOD@?1RecvMessage?$AA@ ; `string'
  00556	ff 50 24	 call	 DWORD PTR [eax+36]

; 764  : 
; 765  : 						mir_free(localMessage);

  00559	56		 push	 esi
  0055a	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 766  : 					}
; 767  : 				}
; 768  : 				else {	// bodyNode==NULL - check for message event notification (ack, composing)

  00560	e9 58 fc ff ff	 jmp	 $L85490
$L84103:

; 769  : 					if ((xNode=JabberXmlGetChild(node, "x")) != NULL) {

  00565	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  0056a	53		 push	 ebx
  0056b	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00570	8b f0		 mov	 esi, eax
  00572	59		 pop	 ecx
  00573	85 f6		 test	 esi, esi
  00575	59		 pop	 ecx
  00576	89 75 e8	 mov	 DWORD PTR _xNode$[ebp], esi
  00579	0f 84 9a 01 00
	00		 je	 $L84049

; 770  : 						if ((p=JabberXmlGetAttrValue(xNode, "xmlns"))!=NULL && !strcmp(p, "jabber:x:event")) {

  0057f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GJOJ@xmlns?$AA@ ; `string'
  00584	56		 push	 esi
  00585	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0058a	59		 pop	 ecx
  0058b	85 c0		 test	 eax, eax
  0058d	59		 pop	 ecx
  0058e	0f 84 85 01 00
	00		 je	 $L84049
  00594	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@JKJA@jabber?3x?3event?$AA@ ; `string'
  00599	50		 push	 eax
  0059a	e8 00 00 00 00	 call	 _strcmp
  0059f	59		 pop	 ecx
  005a0	85 c0		 test	 eax, eax
  005a2	59		 pop	 ecx
  005a3	0f 85 70 01 00
	00		 jne	 $L84049

; 771  : 							idNode = JabberXmlGetChild(xNode, "id");

  005a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  005ae	56		 push	 esi
  005af	e8 00 00 00 00	 call	 _JabberXmlGetChild
  005b4	8b d8		 mov	 ebx, eax

; 772  : 							if (JabberXmlGetChild(xNode, "delivered")!=NULL ||
; 773  : 								JabberXmlGetChild(xNode, "offline")!=NULL) {

  005b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EEFM@delivered?$AA@ ; `string'
  005bb	56		 push	 esi
  005bc	89 5d e4	 mov	 DWORD PTR _idNode$[ebp], ebx
  005bf	e8 00 00 00 00	 call	 _JabberXmlGetChild
  005c4	83 c4 10	 add	 esp, 16			; 00000010H
  005c7	85 c0		 test	 eax, eax
  005c9	75 15		 jne	 SHORT $L84188
  005cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KIAB@offline?$AA@ ; `string'
  005d0	56		 push	 esi
  005d1	e8 00 00 00 00	 call	 _JabberXmlGetChild
  005d6	59		 pop	 ecx
  005d7	85 c0		 test	 eax, eax
  005d9	59		 pop	 ecx
  005da	0f 84 a8 00 00
	00		 je	 $L85482
$L84188:

; 774  : 
; 775  : 								id = -1;

  005e0	83 4d 08 ff	 or	 DWORD PTR _id$[ebp], -1

; 776  : 								if (idNode!=NULL && idNode->text!=NULL) {

  005e4	85 db		 test	 ebx, ebx
  005e6	74 38		 je	 SHORT $L84193
  005e8	83 7b 20 00	 cmp	 DWORD PTR [ebx+32], 0
  005ec	74 32		 je	 SHORT $L84193

; 777  : 									if (!strncmp(idNode->text, JABBER_IQID, strlen(JABBER_IQID)))

  005ee	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_04OKNP@mim_?$AA@ ; `string'
  005f3	56		 push	 esi
  005f4	e8 00 00 00 00	 call	 _strlen
  005f9	50		 push	 eax
  005fa	56		 push	 esi
  005fb	ff 73 20	 push	 DWORD PTR [ebx+32]
  005fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00604	83 c4 10	 add	 esp, 16			; 00000010H
  00607	85 c0		 test	 eax, eax
  00609	75 15		 jne	 SHORT $L84193

; 778  : 										id = atoi((idNode->text)+strlen(JABBER_IQID));

  0060b	56		 push	 esi
  0060c	e8 00 00 00 00	 call	 _strlen
  00611	03 43 20	 add	 eax, DWORD PTR [ebx+32]
  00614	50		 push	 eax
  00615	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0061b	59		 pop	 ecx
  0061c	89 45 08	 mov	 DWORD PTR _id$[ebp], eax
  0061f	59		 pop	 ecx
$L84193:

; 779  : 								}
; 780  : 								if (id == item->idMsgAckPending) {

  00620	8b 75 f4	 mov	 esi, DWORD PTR _item$[ebp]
  00623	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00626	3b 46 44	 cmp	 eax, DWORD PTR [esi+68]
  00629	75 60		 jne	 SHORT $L85473

; 781  : 									ProtoBroadcastAck(info->proto->iface.m_szModuleName, JabberHContactFromJID(info->proto, from), ACKTYPE_MESSAGE, ACKRESULT_SUCCESS, (HANDLE) 1, 0);

  0062b	ff 75 fc	 push	 DWORD PTR _from$[ebp]
  0062e	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  00634	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00639	6a 06		 push	 6
  0063b	8b d0		 mov	 edx, eax
  0063d	59		 pop	 ecx
  0063e	33 c0		 xor	 eax, eax
  00640	8d 7d 94	 lea	 edi, DWORD PTR _ack$85474[ebp+4]
  00643	f3 ab		 rep stosd
  00645	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00648	8d 4d 90	 lea	 ecx, DWORD PTR _ack$85474[ebp]
  0064b	51		 push	 ecx
  0064c	c7 45 90 1c 00
	00 00		 mov	 DWORD PTR _ack$85474[ebp], 28 ; 0000001cH
  00653	8b 80 20 0f 00
	00		 mov	 eax, DWORD PTR [eax+3872]
  00659	89 55 98	 mov	 DWORD PTR _ack$85474[ebp+8], edx
  0065c	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _ack$85474[ebp+20], 1
  00663	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00666	89 45 94	 mov	 DWORD PTR _ack$85474[ebp+4], eax
  00669	33 c0		 xor	 eax, eax
  0066b	89 45 9c	 mov	 DWORD PTR _ack$85474[ebp+12], eax
  0066e	89 45 a0	 mov	 DWORD PTR _ack$85474[ebp+16], eax
  00671	89 45 a8	 mov	 DWORD PTR _ack$85474[ebp+24], eax
  00674	50		 push	 eax
  00675	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0067a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  0067f	ff 50 24	 call	 DWORD PTR [eax+36]
  00682	8b 7d 0c	 mov	 edi, DWORD PTR _info$[ebp]
  00685	83 c4 14	 add	 esp, 20			; 00000014H
$L85482:
  00688	8b 75 f4	 mov	 esi, DWORD PTR _item$[ebp]
$L85473:

; 782  : 								}
; 783  : 							}
; 784  : 							if (JabberXmlGetChild(xNode, "composing") != NULL) {

  0068b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09IJNK@composing?$AA@ ; `string'
  00690	ff 75 e8	 push	 DWORD PTR _xNode$[ebp]
  00693	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00698	59		 pop	 ecx
  00699	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@ ; `string'
  0069e	85 c0		 test	 eax, eax
  006a0	59		 pop	 ecx
  006a1	74 31		 je	 SHORT $L84202

; 785  : 								if ((hContact=JabberHContactFromJID(info->proto, from)) != NULL) {

  006a3	ff 75 fc	 push	 DWORD PTR _from$[ebp]
  006a6	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  006ac	e8 00 00 00 00	 call	 _JabberHContactFromJID
  006b1	59		 pop	 ecx
  006b2	85 c0		 test	 eax, eax
  006b4	59		 pop	 ecx
  006b5	74 1d		 je	 SHORT $L84202

; 786  : 									if (item != NULL) {

  006b7	85 f6		 test	 esi, esi
  006b9	74 19		 je	 SHORT $L84202

; 787  : 										item->isTyping = TRUE;
; 788  : 										CallService(MS_PROTO_CONTACTISTYPING, (WPARAM) hContact, PROTOTYPE_CONTACTTYPING_INFINITE);

  006bb	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  006c0	c7 46 50 01 00
	00 00		 mov	 DWORD PTR [esi+80], 1
  006c7	50		 push	 eax
  006c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  006cd	53		 push	 ebx
  006ce	ff 50 24	 call	 DWORD PTR [eax+36]
  006d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84202:

; 789  : 									}
; 790  : 								}
; 791  : 							}
; 792  : 							if (xNode->numChild==0 || (xNode->numChild==1 && idNode!=NULL)) {

  006d4	8b 45 e8	 mov	 eax, DWORD PTR _xNode$[ebp]
  006d7	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  006da	85 c0		 test	 eax, eax
  006dc	74 0b		 je	 SHORT $L84206
  006de	83 f8 01	 cmp	 eax, 1
  006e1	75 36		 jne	 SHORT $L84049
  006e3	83 7d e4 00	 cmp	 DWORD PTR _idNode$[ebp], 0
  006e7	74 30		 je	 SHORT $L84049
$L84206:

; 793  : 								// Maybe a cancel to the previous composing
; 794  : 								if ((hContact=JabberHContactFromJID(info->proto, from)) != NULL) {

  006e9	ff 75 fc	 push	 DWORD PTR _from$[ebp]
  006ec	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  006f2	e8 00 00 00 00	 call	 _JabberHContactFromJID
  006f7	59		 pop	 ecx
  006f8	59		 pop	 ecx
  006f9	33 c9		 xor	 ecx, ecx
  006fb	3b c1		 cmp	 eax, ecx
  006fd	74 1a		 je	 SHORT $L84049

; 795  : 									if (item != NULL && item->isTyping) {

  006ff	3b f1		 cmp	 esi, ecx
  00701	74 16		 je	 SHORT $L84049
  00703	39 4e 50	 cmp	 DWORD PTR [esi+80], ecx
  00706	74 11		 je	 SHORT $L84049

; 796  : 										item->isTyping = FALSE;
; 797  : 										CallService(MS_PROTO_CONTACTISTYPING, (WPARAM) hContact, PROTOTYPE_CONTACTTYPING_OFF);

  00708	51		 push	 ecx
  00709	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  0070c	50		 push	 eax
  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00712	53		 push	 ebx
  00713	ff 50 24	 call	 DWORD PTR [eax+36]
  00716	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84049:
  00719	5f		 pop	 edi
  0071a	5e		 pop	 esi
  0071b	5b		 pop	 ebx

; 798  : 									}
; 799  : 								}
; 800  : 							}
; 801  : 						}
; 802  : 					}
; 803  : 				}
; 804  : 			}
; 805  : 		}
; 806  : 	}
; 807  : }

  0071c	c9		 leave
  0071d	c3		 ret	 0
_JabberProcessMessage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@	; `string'
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_langpack.h
_DATA	SEGMENT
??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@ DB 'LangPack/TranslateDialo'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT _TranslateDialogDefault
_TEXT	SEGMENT
_hwndDlg$ = 8
_lptd$ = -16
_TranslateDialogDefault PROC NEAR			; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 82   : 	LANGPACKTRANSLATEDIALOG lptd;
; 83   : 	lptd.cbSize=sizeof(lptd);
; 84   : 	lptd.flags=0;
; 85   : 	lptd.hwndDlg=hwndDlg;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _hwndDlg$[ebp]
  00009	33 c0		 xor	 eax, eax
  0000b	89 4d f8	 mov	 DWORD PTR _lptd$[ebp+8], ecx

; 86   : 	lptd.ignoreControls=NULL;
; 87   : 	return CallService(MS_LANGPACK_TRANSLATEDIALOG,0,(LPARAM)&lptd);

  0000e	8d 4d f0	 lea	 ecx, DWORD PTR _lptd$[ebp]
  00011	51		 push	 ecx
  00012	89 45 f4	 mov	 DWORD PTR _lptd$[ebp+4], eax
  00015	89 45 fc	 mov	 DWORD PTR _lptd$[ebp+12], eax
  00018	50		 push	 eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@ ; `string'
  00023	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _lptd$[ebp], 16 ; 00000010H
  0002a	ff 50 24	 call	 DWORD PTR [eax+36]
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : }

  00030	c9		 leave
  00031	c3		 ret	 0
_TranslateDialogDefault ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ ; `string'
PUBLIC	??_C@_09MLLO@available?$AA@			; `string'
PUBLIC	??_C@_0DK@PBCP@Receive?5presence?5online?5from?5?$CFs?5@ ; `string'
PUBLIC	??_C@_04DDJJ@show?$AA@				; `string'
PUBLIC	??_C@_04EKMD@away?$AA@				; `string'
PUBLIC	??_C@_02PNLN@xa?$AA@				; `string'
PUBLIC	??_C@_03GPAF@dnd?$AA@				; `string'
PUBLIC	??_C@_04FLKK@chat?$AA@				; `string'
PUBLIC	??_C@_0M@IHLO@unavailable?$AA@			; `string'
PUBLIC	??_C@_06DKLM@status?$AA@			; `string'
PUBLIC	??_C@_09LNIP@StatusMsg?$AA@			; `string'
PUBLIC	??_C@_05NNBH@CList?$AA@				; `string'
PUBLIC	??_C@_0O@OJLM@ShowTransport?$AA@		; `string'
PUBLIC	??_C@_0EP@IAIE@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ ; `string'
PUBLIC	??_C@_0CJ@PILD@?$CFs?5?$CI?$CFs?$CJ?5online?0?5set?5contact?5stat@ ; `string'
PUBLIC	??_C@_0DL@LDFJ@Receive?5presence?5offline?5from?5?$CFs@ ; `string'
PUBLIC	??_C@_0BD@MMNL@OfflineAsInvisible?$AA@		; `string'
PUBLIC	??_C@_0CF@HNKJ@?$CFs?5offline?0?5set?5contact?5status?5t@ ; `string'
PUBLIC	??_C@_09ODAA@subscribe?$AA@			; `string'
PUBLIC	??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
PUBLIC	??_C@_0BP@IEHI@?$CFs?5?$CI?$CFs?$CJ?5requests?5authorization?$AA@ ; `string'
PUBLIC	??_C@_0L@PCJP@subscribed?$AA@			; `string'
PUBLIC	??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@	; `string'
EXTRN	_TlenProcessPresenceAvatar:NEAR
EXTRN	_JabberNickFromJID:NEAR
EXTRN	_JabberDBAddAuthRequest:NEAR
EXTRN	_JabberListAdd:NEAR
EXTRN	_JabberListAddResource:NEAR
EXTRN	_JabberListRemoveResource:NEAR
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ DB 'DB/Contact/DeleteSetti'
	DB	'ng', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@
_DATA	SEGMENT
??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ DB '<'
	DB	'message to=''%s'' type=''iq''><iq type=''get''><query xmlns='''
	DB	'jabber:iq:version''/></iq></message>', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MLLO@available?$AA@
_DATA	SEGMENT
??_C@_09MLLO@available?$AA@ DB 'available', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DK@PBCP@Receive?5presence?5online?5from?5?$CFs?5@
_DATA	SEGMENT
??_C@_0DK@PBCP@Receive?5presence?5online?5from?5?$CFs?5@ DB 'Receive pres'
	DB	'ence online from %s (who is not in my roster)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DDJJ@show?$AA@
_DATA	SEGMENT
??_C@_04DDJJ@show?$AA@ DB 'show', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EKMD@away?$AA@
_DATA	SEGMENT
??_C@_04EKMD@away?$AA@ DB 'away', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02PNLN@xa?$AA@
_DATA	SEGMENT
??_C@_02PNLN@xa?$AA@ DB 'xa', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03GPAF@dnd?$AA@
_DATA	SEGMENT
??_C@_03GPAF@dnd?$AA@ DB 'dnd', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FLKK@chat?$AA@
_DATA	SEGMENT
??_C@_04FLKK@chat?$AA@ DB 'chat', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@IHLO@unavailable?$AA@
_DATA	SEGMENT
??_C@_0M@IHLO@unavailable?$AA@ DB 'unavailable', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06DKLM@status?$AA@
_DATA	SEGMENT
??_C@_06DKLM@status?$AA@ DB 'status', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LNIP@StatusMsg?$AA@
_DATA	SEGMENT
??_C@_09LNIP@StatusMsg?$AA@ DB 'StatusMsg', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT
??_C@_05NNBH@CList?$AA@ DB 'CList', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@OJLM@ShowTransport?$AA@
_DATA	SEGMENT
??_C@_0O@OJLM@ShowTransport?$AA@ DB 'ShowTransport', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EP@IAIE@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@
_DATA	SEGMENT
??_C@_0EP@IAIE@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ DB '<'
	DB	'iq type=''get'' id=''mim_%d''><query xmlns=''jabber:iq:info'''
	DB	' to=''%s''></query></iq>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@PILD@?$CFs?5?$CI?$CFs?$CJ?5online?0?5set?5contact?5stat@
_DATA	SEGMENT
??_C@_0CJ@PILD@?$CFs?5?$CI?$CFs?$CJ?5online?0?5set?5contact?5stat@ DB '%s'
	DB	' (%s) online, set contact status to %d', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DL@LDFJ@Receive?5presence?5offline?5from?5?$CFs@
_DATA	SEGMENT
??_C@_0DL@LDFJ@Receive?5presence?5offline?5from?5?$CFs@ DB 'Receive prese'
	DB	'nce offline from %s (who is not in my roster)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MMNL@OfflineAsInvisible?$AA@
_DATA	SEGMENT
??_C@_0BD@MMNL@OfflineAsInvisible?$AA@ DB 'OfflineAsInvisible', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@HNKJ@?$CFs?5offline?0?5set?5contact?5status?5t@
_DATA	SEGMENT
??_C@_0CF@HNKJ@?$CFs?5offline?0?5set?5contact?5status?5t@ DB '%s offline,'
	DB	' set contact status to %d', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ODAA@subscribe?$AA@
_DATA	SEGMENT
??_C@_09ODAA@subscribe?$AA@ DB 'subscribe', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@
_DATA	SEGMENT
??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ DB '<pr'
	DB	'esence to=''%s'' type=''subscribed''/>', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IEHI@?$CFs?5?$CI?$CFs?$CJ?5requests?5authorization?$AA@
_DATA	SEGMENT
??_C@_0BP@IEHI@?$CFs?5?$CI?$CFs?$CJ?5requests?5authorization?$AA@ DB '%s '
	DB	'(%s) requests authorization', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PCJP@subscribed?$AA@
_DATA	SEGMENT
??_C@_0L@PCJP@subscribed?$AA@ DB 'subscribed', 00H	; `string'
_DATA	ENDS
;	COMDAT _JabberProcessPresence
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_hContact$ = -4
_statusNode$ = 8
_item$ = -16
_from$ = -8
_type$ = 12
_nick$ = -12
_status$ = 12
_p$ = 8
_cws$85497 = -48
_cgs$85501 = -28
_dbv$85504 = -40
_cgs$85505 = -28
_dbv$85513 = -40
_cgs$85514 = -28
_cws$85522 = -48
_dbv$85526 = -40
_cgs$85527 = -28
_cws$85536 = -48
_cgs$85540 = -28
_dbv$85543 = -40
_cgs$85544 = -28
_dbv$85552 = -40
_cgs$85553 = -28
_cws$85561 = -48
_JabberProcessPresence PROC NEAR			; COMDAT

; 810  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 811  : 	HANDLE hContact;
; 812  : 	XmlNode *showNode, *statusNode;
; 813  : 	JABBER_LIST_ITEM *item;
; 814  : 	char *from, *type, *nick, *show;
; 815  : 	int status, laststatus = ID_STATUS_OFFLINE;
; 816  : 	char *p;
; 817  : 
; 818  : 	if (!node || !node->name || strcmp(node->name, "presence")) return;

  00008	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	3b f3		 cmp	 esi, ebx
  0000f	57		 push	 edi
  00010	0f 84 32 07 00
	00		 je	 $L84242
  00016	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00019	3b c3		 cmp	 eax, ebx
  0001b	0f 84 27 07 00
	00		 je	 $L84242
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08PJFJ@presence?$AA@ ; `string'
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _strcmp
  0002c	59		 pop	 ecx
  0002d	85 c0		 test	 eax, eax
  0002f	59		 pop	 ecx
  00030	0f 85 12 07 00
	00		 jne	 $L84242

; 819  : 
; 820  : 	if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00041	8b f8		 mov	 edi, eax
  00043	59		 pop	 ecx
  00044	3b fb		 cmp	 edi, ebx
  00046	59		 pop	 ecx
  00047	89 7d f8	 mov	 DWORD PTR _from$[ebp], edi
  0004a	0f 84 f8 06 00
	00		 je	 $L84242

; 821  : 		if (JabberListExist(info->proto, LIST_CHATROOM, from)); //JabberGroupchatProcessPresence(node, userdata);

  00050	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  00053	57		 push	 edi
  00054	6a 01		 push	 1
  00056	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0005c	e8 00 00 00 00	 call	 _JabberListExist
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	85 c0		 test	 eax, eax
  00066	0f 85 dc 06 00
	00		 jne	 $L84242

; 822  : 
; 823  : 		else {
; 824  : 			type = JabberXmlGetAttrValue(node, "type");

  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00071	ff 75 08	 push	 DWORD PTR _node$[ebp]
  00074	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 825  : 			item = JabberListGetItemPtr(info->proto, LIST_ROSTER, from);

  00079	57		 push	 edi
  0007a	53		 push	 ebx
  0007b	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00081	89 45 0c	 mov	 DWORD PTR _type$[ebp], eax
  00084	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00089	83 c4 14	 add	 esp, 20			; 00000014H

; 826  : 			if (item != NULL) {

  0008c	3b c3		 cmp	 eax, ebx
  0008e	89 45 f0	 mov	 DWORD PTR _item$[ebp], eax
  00091	74 1d		 je	 SHORT $L84236

; 827  : 				if (info->proto->tlenOptions.enableAvatars) {

  00093	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00099	39 98 dc 01 00
	00		 cmp	 DWORD PTR [eax+476], ebx
  0009f	74 0f		 je	 SHORT $L84236

; 828  : 					TlenProcessPresenceAvatar(info->proto, node, item);

  000a1	ff 75 f0	 push	 DWORD PTR _item$[ebp]
  000a4	ff 75 08	 push	 DWORD PTR _node$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _TlenProcessPresenceAvatar
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84236:

; 829  : 				}
; 830  : 			}
; 831  : 			if (type==NULL || (!strcmp(type, "available"))) {

  000b0	39 5d 0c	 cmp	 DWORD PTR _type$[ebp], ebx
  000b3	0f 84 77 03 00
	00		 je	 $L84239
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09MLLO@available?$AA@ ; `string'
  000be	ff 75 0c	 push	 DWORD PTR _type$[ebp]
  000c1	e8 00 00 00 00	 call	 _strcmp
  000c6	59		 pop	 ecx
  000c7	85 c0		 test	 eax, eax
  000c9	59		 pop	 ecx
  000ca	0f 84 60 03 00
	00		 je	 $L84239

; 889  : 				}
; 890  : 			}
; 891  : 			else if (!strcmp(type, "unavailable")) {

  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@IHLO@unavailable?$AA@ ; `string'
  000d5	ff 75 0c	 push	 DWORD PTR _type$[ebp]
  000d8	e8 00 00 00 00	 call	 _strcmp
  000dd	59		 pop	 ecx
  000de	85 c0		 test	 eax, eax
  000e0	59		 pop	 ecx
  000e1	0f 85 74 02 00
	00		 jne	 $L84293

; 892  : 				if (!JabberListExist(info->proto, LIST_ROSTER, from)) {

  000e7	57		 push	 edi
  000e8	53		 push	 ebx
  000e9	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  000ef	e8 00 00 00 00	 call	 _JabberListExist
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	85 c0		 test	 eax, eax

; 893  : 					JabberLog(info->proto, "Receive presence offline from %s (who is not in my roster)", from);

  000f9	57		 push	 edi
  000fa	75 22		 jne	 SHORT $L84294
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@LDFJ@Receive?5presence?5offline?5from?5?$CFs@ ; `string'
  00101	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00107	e8 00 00 00 00	 call	 _JabberLog

; 894  : 					JabberListAdd(info->proto, LIST_ROSTER, from);

  0010c	57		 push	 edi
  0010d	53		 push	 ebx
  0010e	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00114	e8 00 00 00 00	 call	 _JabberListAdd
  00119	83 c4 18	 add	 esp, 24			; 00000018H

; 895  : 				}
; 896  : 				else {

  0011c	eb 0f		 jmp	 SHORT $L84296
$L84294:

; 897  : 					JabberListRemoveResource(info->proto, LIST_ROSTER, from);

  0011e	53		 push	 ebx
  0011f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00125	e8 00 00 00 00	 call	 _JabberListRemoveResource
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84296:

; 898  : 				}
; 899  : 				status = ID_STATUS_OFFLINE;
; 900  : 				statusNode = JabberXmlGetChild(node, "status");

  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06DKLM@status?$AA@ ; `string'
  00132	c7 45 0c 87 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40071 ; 00009c87H
  00139	ff 75 08	 push	 DWORD PTR _node$[ebp]
  0013c	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00141	59		 pop	 ecx
  00142	89 45 08	 mov	 DWORD PTR _statusNode$[ebp], eax

; 901  : 				if (statusNode) {

  00145	85 c0		 test	 eax, eax
  00147	59		 pop	 ecx
  00148	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0014d	0f 84 cd 00 00
	00		 je	 $L84305

; 902  : 					if (DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "OfflineAsInvisible", FALSE)==TRUE) {

  00153	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00159	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85527[ebp+4], OFFSET FLAT:??_C@_0BD@MMNL@OfflineAsInvisible?$AA@ ; `string'
  00160	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00163	89 45 e4	 mov	 DWORD PTR _cgs$85527[ebp], eax
  00166	8d 45 d8	 lea	 eax, DWORD PTR _dbv$85526[ebp]
  00169	89 45 ec	 mov	 DWORD PTR _cgs$85527[ebp+8], eax
  0016c	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85527[ebp]
  0016f	50		 push	 eax
  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00175	6a 00		 push	 0
  00177	53		 push	 ebx
  00178	ff 50 24	 call	 DWORD PTR [eax+36]
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	85 c0		 test	 eax, eax
  00180	75 10		 jne	 SHORT $L84299
  00182	0f b6 45 dc	 movzx	 eax, BYTE PTR _dbv$85526[ebp+4]
  00186	83 f8 01	 cmp	 eax, 1
  00189	75 07		 jne	 SHORT $L84299

; 903  : 						status = ID_STATUS_INVISIBLE;

  0018b	c7 45 0c 8e 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40078 ; 00009c8eH
$L84299:

; 904  : 					}
; 905  : 					p = JabberTextDecode(statusNode->text);

  00192	8b 45 08	 mov	 eax, DWORD PTR _statusNode$[ebp]
  00195	ff 70 20	 push	 DWORD PTR [eax+32]
  00198	e8 00 00 00 00	 call	 _JabberTextDecode

; 906  : 					JabberListAddResource(info->proto, LIST_ROSTER, from, status, p);

  0019d	50		 push	 eax
  0019e	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
  001a1	ff 75 0c	 push	 DWORD PTR _status$[ebp]
  001a4	57		 push	 edi
  001a5	6a 00		 push	 0
  001a7	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  001ad	e8 00 00 00 00	 call	 _JabberListAddResource

; 907  : 					if ((hContact=JabberHContactFromJID(info->proto, from)) != NULL) {

  001b2	57		 push	 edi
  001b3	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  001b9	e8 00 00 00 00	 call	 _JabberHContactFromJID
  001be	83 c4 20	 add	 esp, 32			; 00000020H
  001c1	85 c0		 test	 eax, eax
  001c3	74 4b		 je	 SHORT $L85539

; 908  : 						if (p) {

  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  001c8	85 c9		 test	 ecx, ecx
  001ca	74 21		 je	 SHORT $L84303

; 909  : 							DBWriteContactSettingString(hContact, "CList", "StatusMsg", p);

  001cc	80 4d d8 ff	 or	 BYTE PTR _cws$85536[ebp+8], 255 ; 000000ffH
  001d0	89 4d dc	 mov	 DWORD PTR _cws$85536[ebp+12], ecx
  001d3	8d 4d d0	 lea	 ecx, DWORD PTR _cws$85536[ebp]
  001d6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _cws$85536[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  001dd	51		 push	 ecx
  001de	50		 push	 eax
  001df	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cws$85536[ebp+4], OFFSET FLAT:??_C@_09LNIP@StatusMsg?$AA@ ; `string'
  001e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'

; 910  : 						} else {

  001eb	eb 18		 jmp	 SHORT $L85571
$L84303:

; 911  : 							DBDeleteContactSetting(hContact, "CList", "StatusMsg");

  001ed	8d 4d e4	 lea	 ecx, DWORD PTR _cgs$85540[ebp]
  001f0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _cgs$85540[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  001f7	51		 push	 ecx
  001f8	50		 push	 eax
  001f9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85540[ebp+4], OFFSET FLAT:??_C@_09LNIP@StatusMsg?$AA@ ; `string'
  00200	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
$L85571:
  00205	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0020a	ff 50 24	 call	 DWORD PTR [eax+36]
  0020d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85539:

; 912  : 						}
; 913  : 					}
; 914  : 					if (p) mir_free(p);

  00210	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00214	74 0a		 je	 SHORT $L84305
  00216	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00219	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0021f	59		 pop	 ecx
$L84305:

; 915  : 				}
; 916  : 				if ((item=JabberListGetItemPtr(info->proto, LIST_ROSTER, from)) != NULL) {

  00220	57		 push	 edi
  00221	6a 00		 push	 0
  00223	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00229	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00231	89 45 f0	 mov	 DWORD PTR _item$[ebp], eax
  00234	85 c0		 test	 eax, eax
  00236	74 0e		 je	 SHORT $L84307

; 917  : 					// Determine status to show for the contact based on the remaining resources
; 918  : 					item->status = status;

  00238	8b 4d 0c	 mov	 ecx, DWORD PTR _status$[ebp]

; 919  : 					item->versionRequested = FALSE;

  0023b	83 60 3c 00	 and	 DWORD PTR [eax+60], 0

; 920  : 					item->infoRequested = FALSE;

  0023f	83 60 40 00	 and	 DWORD PTR [eax+64], 0
  00243	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L84307:

; 921  : 				}
; 922  : 				if ((hContact=JabberHContactFromJID(info->proto, from)) != NULL) {

  00246	57		 push	 edi
  00247	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0024d	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00252	59		 pop	 ecx
  00253	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
  00256	85 c0		 test	 eax, eax
  00258	59		 pop	 ecx
  00259	0f 84 e9 04 00
	00		 je	 $L84242

; 923  : 					if (strchr(from, '@')!=NULL || DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "ShowTransport", TRUE)==TRUE) {

  0025f	6a 40		 push	 64			; 00000040H
  00261	57		 push	 edi
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00268	59		 pop	 ecx
  00269	85 c0		 test	 eax, eax
  0026b	59		 pop	 ecx
  0026c	75 38		 jne	 SHORT $L84313
  0026e	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00274	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85544[ebp+4], OFFSET FLAT:??_C@_0O@OJLM@ShowTransport?$AA@ ; `string'
  0027b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0027e	89 45 e4	 mov	 DWORD PTR _cgs$85544[ebp], eax
  00281	8d 45 d8	 lea	 eax, DWORD PTR _dbv$85543[ebp]
  00284	89 45 ec	 mov	 DWORD PTR _cgs$85544[ebp+8], eax
  00287	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85544[ebp]
  0028a	50		 push	 eax
  0028b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00290	6a 00		 push	 0
  00292	53		 push	 ebx
  00293	ff 50 24	 call	 DWORD PTR [eax+36]
  00296	83 c4 0c	 add	 esp, 12			; 0000000cH
  00299	85 c0		 test	 eax, eax
  0029b	75 09		 jne	 SHORT $L84313
  0029d	0f b6 45 dc	 movzx	 eax, BYTE PTR _dbv$85543[ebp+4]
  002a1	83 f8 01	 cmp	 eax, 1
  002a4	75 74		 jne	 SHORT $L85560
$L84313:

; 924  : 						if (DBGetContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != status)

  002a6	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  002ac	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  002b1	89 7d e8	 mov	 DWORD PTR _cgs$85553[ebp+4], edi
  002b4	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002b7	89 45 e4	 mov	 DWORD PTR _cgs$85553[ebp], eax
  002ba	8d 45 d8	 lea	 eax, DWORD PTR _dbv$85552[ebp]
  002bd	89 45 ec	 mov	 DWORD PTR _cgs$85553[ebp+8], eax
  002c0	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85553[ebp]
  002c3	50		 push	 eax
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002c9	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  002cc	53		 push	 ebx
  002cd	ff 50 24	 call	 DWORD PTR [eax+36]
  002d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d3	85 c0		 test	 eax, eax
  002d5	b8 87 9c 00 00	 mov	 eax, 40071		; 00009c87H
  002da	75 04		 jne	 SHORT $L85551
  002dc	0f b7 45 dc	 movzx	 eax, WORD PTR _dbv$85552[ebp+4]
$L85551:
  002e0	3b 45 0c	 cmp	 eax, DWORD PTR _status$[ebp]
  002e3	74 32		 je	 SHORT $L85563

; 925  : 							DBWriteContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", (WORD) status);

  002e5	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  002eb	89 7d d4	 mov	 DWORD PTR _cws$85561[ebp+4], edi
  002ee	c6 45 d8 02	 mov	 BYTE PTR _cws$85561[ebp+8], 2
  002f2	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002f5	89 45 d0	 mov	 DWORD PTR _cws$85561[ebp], eax
  002f8	66 8b 45 0c	 mov	 ax, WORD PTR _status$[ebp]
  002fc	66 89 45 dc	 mov	 WORD PTR _cws$85561[ebp+12], ax
  00300	8d 45 d0	 lea	 eax, DWORD PTR _cws$85561[ebp]
  00303	50		 push	 eax
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00309	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  0030c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00311	ff 50 24	 call	 DWORD PTR [eax+36]
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85563:
  00317	8b 7d f8	 mov	 edi, DWORD PTR _from$[ebp]
$L85560:

; 926  : 					}
; 927  : 					if (item != NULL && item->isTyping) {

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  0031d	33 c9		 xor	 ecx, ecx
  0031f	3b c1		 cmp	 eax, ecx
  00321	74 1c		 je	 SHORT $L84317
  00323	39 48 50	 cmp	 DWORD PTR [eax+80], ecx
  00326	74 17		 je	 SHORT $L84317

; 928  : 						item->isTyping = FALSE;
; 929  : 						CallService(MS_PROTO_CONTACTISTYPING, (WPARAM) hContact, PROTOTYPE_CONTACTTYPING_OFF);

  00328	51		 push	 ecx
  00329	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  0032c	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  0032f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00334	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@ ; `string'
  00339	ff 50 24	 call	 DWORD PTR [eax+36]
  0033c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84317:

; 930  : 					}
; 931  : 					JabberLog(info->proto, "%s offline, set contact status to %d", from, status);

  0033f	ff 75 0c	 push	 DWORD PTR _status$[ebp]
  00342	57		 push	 edi
  00343	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@HNKJ@?$CFs?5offline?0?5set?5contact?5status?5t@ ; `string'
  00348	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0034e	e8 00 00 00 00	 call	 _JabberLog
  00353	83 c4 10	 add	 esp, 16			; 00000010H

; 932  : 				}
; 933  : 			}
; 934  : 			else if (!strcmp(type, "subscribe")) {

  00356	e9 ed 03 00 00	 jmp	 $L84242
$L84293:
  0035b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09ODAA@subscribe?$AA@ ; `string'
  00360	ff 75 0c	 push	 DWORD PTR _type$[ebp]
  00363	e8 00 00 00 00	 call	 _strcmp
  00368	59		 pop	 ecx
  00369	85 c0		 test	 eax, eax
  0036b	59		 pop	 ecx
  0036c	75 6b		 jne	 SHORT $L84321

; 935  : 				if (strchr(from, '@') == NULL) {

  0036e	6a 40		 push	 64			; 00000040H
  00370	57		 push	 edi
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00377	59		 pop	 ecx
  00378	59		 pop	 ecx
  00379	85 c0		 test	 eax, eax

; 936  : 					// automatically send authorization allowed to agent/transport
; 937  : 					JabberSend(info->proto, "<presence to='%s' type='subscribed'/>", from);

  0037b	57		 push	 edi
  0037c	75 18		 jne	 SHORT $L84324
  0037e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@PEGH@?$DMpresence?5to?$DN?8?$CFs?8?5type?$DN?8subscrib@ ; `string'
  00383	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00389	e8 00 00 00 00	 call	 _JabberSend
  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 938  : 				}
; 939  : 				else if ((nick=JabberNickFromJID(from)) != NULL) {

  00391	e9 b2 03 00 00	 jmp	 $L84242
$L84324:
  00396	e8 00 00 00 00	 call	 _JabberNickFromJID
  0039b	3b c3		 cmp	 eax, ebx
  0039d	59		 pop	 ecx
  0039e	89 45 f4	 mov	 DWORD PTR _nick$[ebp], eax
  003a1	0f 84 a1 03 00
	00		 je	 $L84242

; 940  : 					JabberLog(info->proto, "%s (%s) requests authorization", nick, from);

  003a7	57		 push	 edi
  003a8	50		 push	 eax
  003a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IEHI@?$CFs?5?$CI?$CFs?$CJ?5requests?5authorization?$AA@ ; `string'
  003ae	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  003b4	e8 00 00 00 00	 call	 _JabberLog

; 941  : 					JabberDBAddAuthRequest(info->proto, from, nick);

  003b9	ff 75 f4	 push	 DWORD PTR _nick$[ebp]
  003bc	57		 push	 edi
  003bd	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  003c3	e8 00 00 00 00	 call	 _JabberDBAddAuthRequest

; 942  : 					mir_free(nick);

  003c8	ff 75 f4	 push	 DWORD PTR _nick$[ebp]
  003cb	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  003d1	83 c4 20	 add	 esp, 32			; 00000020H

; 943  : 				}
; 944  : 			}
; 945  : 			else if (!strcmp(type, "subscribed")) {

  003d4	e9 6f 03 00 00	 jmp	 $L84242
$L84321:
  003d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@PCJP@subscribed?$AA@ ; `string'
  003de	ff 75 0c	 push	 DWORD PTR _type$[ebp]
  003e1	e8 00 00 00 00	 call	 _strcmp
  003e6	59		 pop	 ecx
  003e7	85 c0		 test	 eax, eax
  003e9	59		 pop	 ecx
  003ea	0f 85 58 03 00
	00		 jne	 $L84242

; 946  : 				if ((item=JabberListGetItemPtr(info->proto, LIST_ROSTER, from)) != NULL) {

  003f0	57		 push	 edi
  003f1	53		 push	 ebx
  003f2	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  003f8	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  003fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00400	3b c3		 cmp	 eax, ebx
  00402	0f 84 40 03 00
	00		 je	 $L84242

; 947  : 					if (item->subscription == SUB_FROM) item->subscription = SUB_BOTH;

  00408	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0040b	83 f9 02	 cmp	 ecx, 2
  0040e	75 0c		 jne	 SHORT $L84335
  00410	c7 40 14 03 00
	00 00		 mov	 DWORD PTR [eax+20], 3

; 948  : 					else if (item->subscription == SUB_NONE) {

  00417	e9 2c 03 00 00	 jmp	 $L84242
$L84335:
  0041c	3b cb		 cmp	 ecx, ebx
  0041e	0f 85 24 03 00
	00		 jne	 $L84242

; 949  : 						item->subscription = SUB_TO;

  00424	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
  0042b	e9 18 03 00 00	 jmp	 $L84242
$L84239:

; 832  : 				if ((nick=JabberLocalNickFromJID(from)) != NULL) {

  00430	57		 push	 edi
  00431	e8 00 00 00 00	 call	 _JabberLocalNickFromJID
  00436	3b c3		 cmp	 eax, ebx
  00438	59		 pop	 ecx
  00439	89 45 f4	 mov	 DWORD PTR _nick$[ebp], eax
  0043c	0f 84 06 03 00
	00		 je	 $L84242

; 833  : 					if ((hContact=JabberHContactFromJID(info->proto, from)) == NULL)

  00442	57		 push	 edi
  00443	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00449	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0044e	59		 pop	 ecx
  0044f	3b c3		 cmp	 eax, ebx
  00451	59		 pop	 ecx
  00452	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
  00455	75 16		 jne	 SHORT $L84244

; 834  : 						hContact = JabberDBCreateContact(info->proto, from, nick, FALSE);

  00457	53		 push	 ebx
  00458	ff 75 f4	 push	 DWORD PTR _nick$[ebp]
  0045b	57		 push	 edi
  0045c	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00462	e8 00 00 00 00	 call	 _JabberDBCreateContact
  00467	83 c4 10	 add	 esp, 16			; 00000010H
  0046a	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
$L84244:

; 835  : 					if (!JabberListExist(info->proto, LIST_ROSTER, from)) {

  0046d	57		 push	 edi
  0046e	53		 push	 ebx
  0046f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00475	e8 00 00 00 00	 call	 _JabberListExist
  0047a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047d	85 c0		 test	 eax, eax
  0047f	75 21		 jne	 SHORT $L84245

; 836  : 						JabberLog(info->proto, "Receive presence online from %s (who is not in my roster)", from);

  00481	57		 push	 edi
  00482	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBCP@Receive?5presence?5online?5from?5?$CFs?5@ ; `string'
  00487	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0048d	e8 00 00 00 00	 call	 _JabberLog

; 837  : 						JabberListAdd(info->proto, LIST_ROSTER, from);

  00492	57		 push	 edi
  00493	53		 push	 ebx
  00494	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0049a	e8 00 00 00 00	 call	 _JabberListAdd
  0049f	83 c4 18	 add	 esp, 24			; 00000018H
$L84245:

; 838  : 					}
; 839  : 					status = ID_STATUS_ONLINE;
; 840  : 					if ((showNode=JabberXmlGetChild(node, "show")) != NULL) {

  004a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04DDJJ@show?$AA@ ; `string'
  004a7	c7 45 0c 88 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40072 ; 00009c88H
  004ae	ff 75 08	 push	 DWORD PTR _node$[ebp]
  004b1	e8 00 00 00 00	 call	 _JabberXmlGetChild
  004b6	59		 pop	 ecx
  004b7	3b c3		 cmp	 eax, ebx
  004b9	59		 pop	 ecx
  004ba	0f 84 8b 00 00
	00		 je	 $L84264

; 841  : 						if ((show=showNode->text) != NULL) {

  004c0	8b 78 20	 mov	 edi, DWORD PTR [eax+32]
  004c3	3b fb		 cmp	 edi, ebx
  004c5	0f 84 80 00 00
	00		 je	 $L84264

; 842  : 							if (!strcmp(show, "away")) status = ID_STATUS_AWAY;

  004cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EKMD@away?$AA@ ; `string'
  004d0	57		 push	 edi
  004d1	e8 00 00 00 00	 call	 _strcmp
  004d6	59		 pop	 ecx
  004d7	85 c0		 test	 eax, eax
  004d9	59		 pop	 ecx
  004da	75 09		 jne	 SHORT $L84252
  004dc	c7 45 0c 89 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40073 ; 00009c89H

; 843  : 							else if (!strcmp(show, "xa")) status = ID_STATUS_NA;

  004e3	eb 66		 jmp	 SHORT $L84264
$L84252:
  004e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PNLN@xa?$AA@ ; `string'
  004ea	57		 push	 edi
  004eb	e8 00 00 00 00	 call	 _strcmp
  004f0	59		 pop	 ecx
  004f1	85 c0		 test	 eax, eax
  004f3	59		 pop	 ecx
  004f4	75 09		 jne	 SHORT $L84255
  004f6	c7 45 0c 8b 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40075 ; 00009c8bH

; 844  : 							else if (!strcmp(show, "dnd")) status = ID_STATUS_DND;

  004fd	eb 4c		 jmp	 SHORT $L84264
$L84255:
  004ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03GPAF@dnd?$AA@ ; `string'
  00504	57		 push	 edi
  00505	e8 00 00 00 00	 call	 _strcmp
  0050a	59		 pop	 ecx
  0050b	85 c0		 test	 eax, eax
  0050d	59		 pop	 ecx
  0050e	75 09		 jne	 SHORT $L84258
  00510	c7 45 0c 8a 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40074 ; 00009c8aH

; 845  : 							else if (!strcmp(show, "chat")) status = ID_STATUS_FREECHAT;

  00517	eb 32		 jmp	 SHORT $L84264
$L84258:
  00519	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04FLKK@chat?$AA@ ; `string'
  0051e	57		 push	 edi
  0051f	e8 00 00 00 00	 call	 _strcmp
  00524	59		 pop	 ecx
  00525	85 c0		 test	 eax, eax
  00527	59		 pop	 ecx
  00528	75 09		 jne	 SHORT $L84261
  0052a	c7 45 0c 8d 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40077 ; 00009c8dH

; 846  : 							else if (!strcmp(show, "unavailable")) {

  00531	eb 18		 jmp	 SHORT $L84264
$L84261:
  00533	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@IHLO@unavailable?$AA@ ; `string'
  00538	57		 push	 edi
  00539	e8 00 00 00 00	 call	 _strcmp
  0053e	59		 pop	 ecx
  0053f	85 c0		 test	 eax, eax
  00541	59		 pop	 ecx
  00542	75 07		 jne	 SHORT $L84264

; 847  : 								// Always show invisible (on old Tlen client) as invisible (not offline)
; 848  : 								status = ID_STATUS_OFFLINE;

  00544	c7 45 0c 87 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40071 ; 00009c87H
$L84264:

; 849  : 							}
; 850  : 						}
; 851  : 					}
; 852  : 
; 853  : 					statusNode = JabberXmlGetChild(node, "status");

  0054b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06DKLM@status?$AA@ ; `string'
  00550	ff 75 08	 push	 DWORD PTR _node$[ebp]
  00553	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00558	8b f8		 mov	 edi, eax
  0055a	59		 pop	 ecx

; 854  : 					if (statusNode)

  0055b	85 ff		 test	 edi, edi
  0055d	59		 pop	 ecx
  0055e	74 0d		 je	 SHORT $L84267

; 855  : 						p = JabberTextDecode(statusNode->text);

  00560	ff 77 20	 push	 DWORD PTR [edi+32]
  00563	e8 00 00 00 00	 call	 _JabberTextDecode
  00568	59		 pop	 ecx
  00569	8b d8		 mov	 ebx, eax

; 856  : 					else

  0056b	eb 02		 jmp	 SHORT $L84268
$L84267:

; 857  : 						p = NULL;

  0056d	33 db		 xor	 ebx, ebx
$L84268:

; 858  : 					JabberListAddResource(info->proto, LIST_ROSTER, from, status, statusNode?p:NULL);

  0056f	f7 df		 neg	 edi
  00571	1b ff		 sbb	 edi, edi
  00573	23 fb		 and	 edi, ebx
  00575	57		 push	 edi
  00576	8b 7d 0c	 mov	 edi, DWORD PTR _status$[ebp]
  00579	57		 push	 edi
  0057a	ff 75 f8	 push	 DWORD PTR _from$[ebp]
  0057d	6a 00		 push	 0
  0057f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00585	e8 00 00 00 00	 call	 _JabberListAddResource
  0058a	83 c4 14	 add	 esp, 20			; 00000014H

; 859  : 					if (p) {

  0058d	85 db		 test	 ebx, ebx
  0058f	74 35		 je	 SHORT $L84271

; 860  : 						DBWriteContactSettingString(hContact, "CList", "StatusMsg", p);

  00591	80 4d d8 ff	 or	 BYTE PTR _cws$85497[ebp+8], 255 ; 000000ffH
  00595	8d 45 d0	 lea	 eax, DWORD PTR _cws$85497[ebp]
  00598	50		 push	 eax
  00599	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0059e	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  005a1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _cws$85497[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  005a8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cws$85497[ebp+4], OFFSET FLAT:??_C@_09LNIP@StatusMsg?$AA@ ; `string'
  005af	89 5d dc	 mov	 DWORD PTR _cws$85497[ebp+12], ebx
  005b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  005b7	ff 50 24	 call	 DWORD PTR [eax+36]

; 861  : 						mir_free(p);

  005ba	53		 push	 ebx
  005bb	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  005c1	83 c4 10	 add	 esp, 16			; 00000010H

; 862  : 					} else {

  005c4	eb 25		 jmp	 SHORT $L85500
$L84271:

; 863  : 						DBDeleteContactSetting(hContact, "CList", "StatusMsg");

  005c6	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85501[ebp]
  005c9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _cgs$85501[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  005d0	50		 push	 eax
  005d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  005d6	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  005d9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85501[ebp+4], OFFSET FLAT:??_C@_09LNIP@StatusMsg?$AA@ ; `string'
  005e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  005e5	ff 50 24	 call	 DWORD PTR [eax+36]
  005e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85500:

; 864  : 					}
; 865  : 					// Determine status to show for the contact and request version information
; 866  : 					if (item != NULL) {

  005eb	8b 45 f0	 mov	 eax, DWORD PTR _item$[ebp]
  005ee	85 c0		 test	 eax, eax
  005f0	74 03		 je	 SHORT $L84276

; 867  : 						laststatus = item->status;
; 868  : 						item->status = status;

  005f2	89 78 10	 mov	 DWORD PTR [eax+16], edi
$L84276:

; 869  : 					}
; 870  : 					if (strchr(from, '@')!=NULL || DBGetContactSettingByte(NULL, info->proto->iface.m_szModuleName, "ShowTransport", TRUE)==TRUE) {

  005f5	6a 40		 push	 64			; 00000040H
  005f7	ff 75 f8	 push	 DWORD PTR _from$[ebp]
  005fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00600	59		 pop	 ecx
  00601	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00606	85 c0		 test	 eax, eax
  00608	59		 pop	 ecx
  00609	75 38		 jne	 SHORT $L84280
  0060b	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00611	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cgs$85505[ebp+4], OFFSET FLAT:??_C@_0O@OJLM@ShowTransport?$AA@ ; `string'
  00618	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0061b	89 45 e4	 mov	 DWORD PTR _cgs$85505[ebp], eax
  0061e	8d 45 d8	 lea	 eax, DWORD PTR _dbv$85504[ebp]
  00621	89 45 ec	 mov	 DWORD PTR _cgs$85505[ebp+8], eax
  00624	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85505[ebp]
  00627	50		 push	 eax
  00628	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0062d	6a 00		 push	 0
  0062f	53		 push	 ebx
  00630	ff 50 24	 call	 DWORD PTR [eax+36]
  00633	83 c4 0c	 add	 esp, 12			; 0000000cH
  00636	85 c0		 test	 eax, eax
  00638	75 09		 jne	 SHORT $L84280
  0063a	0f b6 45 dc	 movzx	 eax, BYTE PTR _dbv$85504[ebp+4]
  0063e	83 f8 01	 cmp	 eax, 1
  00641	75 6f		 jne	 SHORT $L85521
$L84280:

; 871  : 						if (DBGetContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != status)

  00643	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00649	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  0064e	89 7d e8	 mov	 DWORD PTR _cgs$85514[ebp+4], edi
  00651	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00654	89 45 e4	 mov	 DWORD PTR _cgs$85514[ebp], eax
  00657	8d 45 d8	 lea	 eax, DWORD PTR _dbv$85513[ebp]
  0065a	89 45 ec	 mov	 DWORD PTR _cgs$85514[ebp+8], eax
  0065d	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85514[ebp]
  00660	50		 push	 eax
  00661	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00666	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  00669	53		 push	 ebx
  0066a	ff 50 24	 call	 DWORD PTR [eax+36]
  0066d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00670	85 c0		 test	 eax, eax
  00672	b8 87 9c 00 00	 mov	 eax, 40071		; 00009c87H
  00677	75 04		 jne	 SHORT $L85512
  00679	0f b7 45 dc	 movzx	 eax, WORD PTR _dbv$85513[ebp+4]
$L85512:
  0067d	8b 4d 0c	 mov	 ecx, DWORD PTR _status$[ebp]
  00680	3b c1		 cmp	 eax, ecx
  00682	74 2e		 je	 SHORT $L85521

; 872  : 							DBWriteContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", (WORD) status);

  00684	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0068a	89 7d d4	 mov	 DWORD PTR _cws$85522[ebp+4], edi
  0068d	c6 45 d8 02	 mov	 BYTE PTR _cws$85522[ebp+8], 2
  00691	66 89 4d dc	 mov	 WORD PTR _cws$85522[ebp+12], cx
  00695	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00698	89 45 d0	 mov	 DWORD PTR _cws$85522[ebp], eax
  0069b	8d 45 d0	 lea	 eax, DWORD PTR _cws$85522[ebp]
  0069e	50		 push	 eax
  0069f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  006a4	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  006a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  006ac	ff 50 24	 call	 DWORD PTR [eax+36]
  006af	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85521:

; 873  : 					}
; 874  : 					if (item != NULL) {

  006b2	8b 7d f0	 mov	 edi, DWORD PTR _item$[ebp]
  006b5	33 db		 xor	 ebx, ebx
  006b7	3b fb		 cmp	 edi, ebx
  006b9	74 68		 je	 SHORT $L84290

; 875  : 						if (!item->infoRequested) {

  006bb	39 5f 40	 cmp	 DWORD PTR [edi+64], ebx
  006be	75 29		 jne	 SHORT $L84286

; 876  : 							int iqId = JabberSerialNext(info->proto);

  006c0	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  006c6	e8 00 00 00 00	 call	 _JabberSerialNext

; 877  : 							item->infoRequested = TRUE;
; 878  : 							JabberSend( info->proto, "<iq type='get' id='"JABBER_IQID"%d'><query xmlns='jabber:iq:info' to='%s'></query></iq>", iqId, from);

  006cb	ff 75 f8	 push	 DWORD PTR _from$[ebp]
  006ce	c7 47 40 01 00
	00 00		 mov	 DWORD PTR [edi+64], 1
  006d5	50		 push	 eax
  006d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EP@IAIE@?$DMiq?5type?$DN?8get?8?5id?$DN?8mim_?$CFd?8?$DO?$DMquer@ ; `string'
  006db	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  006e1	e8 00 00 00 00	 call	 _JabberSend
  006e6	83 c4 14	 add	 esp, 20			; 00000014H
$L84286:

; 879  : 						}
; 880  : 						if (info->proto->tlenOptions.enableVersion && !item->versionRequested) {

  006e9	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  006ef	39 98 e0 01 00
	00		 cmp	 DWORD PTR [eax+480], ebx
  006f5	74 2c		 je	 SHORT $L84290
  006f7	39 5f 3c	 cmp	 DWORD PTR [edi+60], ebx
  006fa	75 27		 jne	 SHORT $L84290

; 881  : 							item->versionRequested = TRUE;

  006fc	c7 47 3c 01 00
	00 00		 mov	 DWORD PTR [edi+60], 1

; 882  : 							if (info->proto->iface.m_iStatus != ID_STATUS_INVISIBLE) {

  00703	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00709	81 78 04 8e 9c
	00 00		 cmp	 DWORD PTR [eax+4], 40078 ; 00009c8eH
  00710	74 11		 je	 SHORT $L84290

; 883  : 								JabberSend( info->proto, "<message to='%s' type='iq'><iq type='get'><query xmlns='jabber:iq:version'/></iq></message>", from );

  00712	ff 75 f8	 push	 DWORD PTR _from$[ebp]
  00715	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ ; `string'
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 _JabberSend
  00720	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84290:

; 884  : 							}
; 885  : 						}
; 886  : 					}
; 887  : 					JabberLog(info->proto, "%s (%s) online, set contact status to %d", nick, from, status);

  00723	ff 75 0c	 push	 DWORD PTR _status$[ebp]
  00726	ff 75 f8	 push	 DWORD PTR _from$[ebp]
  00729	ff 75 f4	 push	 DWORD PTR _nick$[ebp]
  0072c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@PILD@?$CFs?5?$CI?$CFs?$CJ?5online?0?5set?5contact?5stat@ ; `string'
  00731	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00737	e8 00 00 00 00	 call	 _JabberLog

; 888  : 					mir_free(nick);

  0073c	ff 75 f4	 push	 DWORD PTR _nick$[ebp]
  0073f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00745	83 c4 18	 add	 esp, 24			; 00000018H
$L84242:
  00748	5f		 pop	 edi
  00749	5e		 pop	 esi
  0074a	5b		 pop	 ebx

; 950  : 					}
; 951  : 				}
; 952  : 			}
; 953  : 		}
; 954  : 	}
; 955  : }

  0074b	c9		 leave
  0074c	c3		 ret	 0
_JabberProcessPresence ENDP
_TEXT	ENDS
PUBLIC	??_C@_05PBDF@query?$AA@				; `string'
PUBLIC	??_C@_0BO@IBHF@Handling?5iq?5request?5for?5id?$DN?$CFd?$AA@ ; `string'
PUBLIC	??_C@_03CKOL@p2p?$AA@				; `string'
PUBLIC	??_C@_03NHNF@set?$AA@				; `string'
PUBLIC	??_C@_0BB@INA@jabber?3iq?3roster?$AA@		; `string'
PUBLIC	??_C@_0CN@OLFG@?$DMiq?1?$DO?5Got?5roster?5push?0?5query?5has@ ; `string'
PUBLIC	??_C@_04MPOO@item?$AA@				; `string'
PUBLIC	??_C@_0N@CJOK@subscription?$AA@			; `string'
PUBLIC	??_C@_02LJIJ@to?$AA@				; `string'
PUBLIC	??_C@_04LBKE@both?$AA@				; `string'
PUBLIC	??_C@_04KIKH@none?$AA@				; `string'
PUBLIC	??_C@_04OPJK@name?$AA@				; `string'
PUBLIC	??_C@_08GNFE@MyHandle?$AA@			; `string'
PUBLIC	??_C@_05GCOD@group?$AA@				; `string'
PUBLIC	??_C@_05GGEJ@Group?$AA@				; `string'
PUBLIC	??_C@_0CP@CLHC@Roster?5push?5for?5jid?$DN?$CFs?0?5set?5subs@ ; `string'
PUBLIC	??_C@_06JIKN@remove?$AA@			; `string'
PUBLIC	??_C@_03LOOF@get?$AA@				; `string'
PUBLIC	??_C@_0BC@NOHM@jabber?3iq?3version?$AA@		; `string'
PUBLIC	??_C@_06NMEN@result?$AA@			; `string'
PUBLIC	??_C@_0P@BIMC@jabber?3iq?3info?$AA@		; `string'
PUBLIC	??_C@_04KFCH@tcfg?$AA@				; `string'
PUBLIC	??_C@_02KCDM@?$EAc?$AA@				; `string'
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	??_C@_01KOLO@2?$AA@				; `string'
PUBLIC	??_C@_01ECJ@3?$AA@				; `string'
PUBLIC	??_C@_01FBMM@4?$AA@				; `string'
PUBLIC	??_C@_01PLFL@5?$AA@				; `string'
PUBLIC	??_C@_01EOC@6?$AA@				; `string'
PUBLIC	??_C@_01KOHF@7?$AA@				; `string'
PUBLIC	??_C@_01KPCI@8?$AA@				; `string'
EXTRN	_JabberIqResultRoster:NEAR
EXTRN	_TlenIqResultVersion:NEAR
EXTRN	_TlenIqResultInfo:NEAR
EXTRN	_TlenIqResultTcfg:NEAR
EXTRN	_TlenIqResultChatGroups:NEAR
EXTRN	_TlenIqResultChatRooms:NEAR
EXTRN	_TlenIqResultUserRooms:NEAR
EXTRN	_TlenIqResultUserNicks:NEAR
EXTRN	_TlenIqResultRoomSearch:NEAR
EXTRN	_TlenIqResultRoomInfo:NEAR
EXTRN	_TlenIqResultChatRoomUsers:NEAR
EXTRN	_TlenMUCRecvError:NEAR
EXTRN	_TlenProcessP2P:NEAR
EXTRN	_TlenGroupDecode:NEAR
EXTRN	_JabberContactListCreateGroup:NEAR
EXTRN	_JabberListRemove:NEAR
EXTRN	_JabberListFindNext:NEAR
EXTRN	_JabberListGetItemPtrFromIndex:NEAR
EXTRN	_JabberIqFetchFunc:NEAR
;	COMDAT ??_C@_05PBDF@query?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_05PBDF@query?$AA@ DB 'query', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IBHF@Handling?5iq?5request?5for?5id?$DN?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@IBHF@Handling?5iq?5request?5for?5id?$DN?$CFd?$AA@ DB 'Handling '
	DB	'iq request for id=%d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CKOL@p2p?$AA@
_DATA	SEGMENT
??_C@_03CKOL@p2p?$AA@ DB 'p2p', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03NHNF@set?$AA@
_DATA	SEGMENT
??_C@_03NHNF@set?$AA@ DB 'set', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@INA@jabber?3iq?3roster?$AA@
_DATA	SEGMENT
??_C@_0BB@INA@jabber?3iq?3roster?$AA@ DB 'jabber:iq:roster', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@OLFG@?$DMiq?1?$DO?5Got?5roster?5push?0?5query?5has@
_DATA	SEGMENT
??_C@_0CN@OLFG@?$DMiq?1?$DO?5Got?5roster?5push?0?5query?5has@ DB '<iq/> G'
	DB	'ot roster push, query has %d children', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MPOO@item?$AA@
_DATA	SEGMENT
??_C@_04MPOO@item?$AA@ DB 'item', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJOK@subscription?$AA@
_DATA	SEGMENT
??_C@_0N@CJOK@subscription?$AA@ DB 'subscription', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02LJIJ@to?$AA@
_DATA	SEGMENT
??_C@_02LJIJ@to?$AA@ DB 'to', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LBKE@both?$AA@
_DATA	SEGMENT
??_C@_04LBKE@both?$AA@ DB 'both', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KIKH@none?$AA@
_DATA	SEGMENT
??_C@_04KIKH@none?$AA@ DB 'none', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OPJK@name?$AA@
_DATA	SEGMENT
??_C@_04OPJK@name?$AA@ DB 'name', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT
??_C@_08GNFE@MyHandle?$AA@ DB 'MyHandle', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GCOD@group?$AA@
_DATA	SEGMENT
??_C@_05GCOD@group?$AA@ DB 'group', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT
??_C@_05GGEJ@Group?$AA@ DB 'Group', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CP@CLHC@Roster?5push?5for?5jid?$DN?$CFs?0?5set?5subs@
_DATA	SEGMENT
??_C@_0CP@CLHC@Roster?5push?5for?5jid?$DN?$CFs?0?5set?5subs@ DB 'Roster p'
	DB	'ush for jid=%s, set subscription to %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JIKN@remove?$AA@
_DATA	SEGMENT
??_C@_06JIKN@remove?$AA@ DB 'remove', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LOOF@get?$AA@
_DATA	SEGMENT
??_C@_03LOOF@get?$AA@ DB 'get', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NOHM@jabber?3iq?3version?$AA@
_DATA	SEGMENT
??_C@_0BC@NOHM@jabber?3iq?3version?$AA@ DB 'jabber:iq:version', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NMEN@result?$AA@
_DATA	SEGMENT
??_C@_06NMEN@result?$AA@ DB 'result', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@BIMC@jabber?3iq?3info?$AA@
_DATA	SEGMENT
??_C@_0P@BIMC@jabber?3iq?3info?$AA@ DB 'jabber:iq:info', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KFCH@tcfg?$AA@
_DATA	SEGMENT
??_C@_04KFCH@tcfg?$AA@ DB 'tcfg', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02KCDM@?$EAc?$AA@
_DATA	SEGMENT
??_C@_02KCDM@?$EAc?$AA@ DB '@c', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOLO@2?$AA@
_DATA	SEGMENT
??_C@_01KOLO@2?$AA@ DB '2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01ECJ@3?$AA@
_DATA	SEGMENT
??_C@_01ECJ@3?$AA@ DB '3', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FBMM@4?$AA@
_DATA	SEGMENT
??_C@_01FBMM@4?$AA@ DB '4', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PLFL@5?$AA@
_DATA	SEGMENT
??_C@_01PLFL@5?$AA@ DB '5', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01EOC@6?$AA@
_DATA	SEGMENT
??_C@_01EOC@6?$AA@ DB '6', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KOHF@7?$AA@
_DATA	SEGMENT
??_C@_01KOHF@7?$AA@ DB '7', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KPCI@8?$AA@
_DATA	SEGMENT
??_C@_01KPCI@8?$AA@ DB '8', 00H				; `string'
_DATA	ENDS
;	COMDAT _JabberProcessIq
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_hContact$ = 12
_queryNode$ = -16
_type$ = 8
_jid$ = 8
_xmlns$ = -4
_idStr$ = -12
_str$ = -12
_id$ = -8
_i$ = -8
_pfunc$ = 12
_itemNode$84379 = -4
_cws$85576 = -72
_cws$85580 = -92
_cgs$85584 = -52
_dbv$85588 = -156
_cgs$85589 = -28
_cws$85596 = -132
_dbv$85601 = -144
_cgs$85602 = -40
_cws$85609 = -112
_JabberProcessIq PROC NEAR				; COMDAT

; 958  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH

; 959  : 	HANDLE hContact;
; 960  : 	XmlNode *queryNode = NULL;
; 961  : 	char *type, *jid, *nick;
; 962  : 	char *xmlns = NULL;

  00009	83 65 fc 00	 and	 DWORD PTR _xmlns$[ebp], 0
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 963  : 	char *idStr, *str;
; 964  : 	int id;
; 965  : 	int i;
; 966  : 	JABBER_IQ_PFUNC pfunc;
; 967  : 
; 968  : 	if (!node->name || strcmp(node->name, "iq")) return;

  00010	8b 7d 08	 mov	 edi, DWORD PTR _node$[ebp]
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	0f 84 5e 09 00
	00		 je	 $L84357
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02CIMO@iq?$AA@ ; `string'
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _strcmp
  00029	59		 pop	 ecx
  0002a	85 c0		 test	 eax, eax
  0002c	59		 pop	 ecx
  0002d	0f 85 49 09 00
	00		 jne	 $L84357

; 969  : 	type=JabberXmlGetAttrValue(node, "type");

  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 970  : //	if ((type=JabberXmlGetAttrValue(node, "type")) == NULL) return;
; 971  : 
; 972  : 	id = -1;

  0003e	83 4d f8 ff	 or	 DWORD PTR _id$[ebp], -1

; 973  : 	if ((idStr=JabberXmlGetAttrValue(node, "id")) != NULL) {

  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  00047	57		 push	 edi
  00048	89 45 08	 mov	 DWORD PTR _type$[ebp], eax
  0004b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00050	8b d8		 mov	 ebx, eax
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	85 db		 test	 ebx, ebx
  00057	89 5d f4	 mov	 DWORD PTR _idStr$[ebp], ebx
  0005a	74 2f		 je	 SHORT $L84360

; 974  : 		if (!strncmp(idStr, JABBER_IQID, strlen(JABBER_IQID)))

  0005c	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_04OKNP@mim_?$AA@ ; `string'
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _strlen
  00067	50		 push	 eax
  00068	56		 push	 esi
  00069	53		 push	 ebx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	85 c0		 test	 eax, eax
  00075	75 14		 jne	 SHORT $L84360

; 975  : 			id = atoi(idStr+strlen(JABBER_IQID));

  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 _strlen
  0007d	03 c3		 add	 eax, ebx
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00086	59		 pop	 ecx
  00087	89 45 f8	 mov	 DWORD PTR _id$[ebp], eax
  0008a	59		 pop	 ecx
$L84360:

; 976  : 	}
; 977  : 
; 978  : 	queryNode = JabberXmlGetChild(node, "query");

  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00096	8b d8		 mov	 ebx, eax
  00098	59		 pop	 ecx

; 979  : 	if (queryNode != NULL) {

  00099	85 db		 test	 ebx, ebx
  0009b	59		 pop	 ecx
  0009c	89 5d f0	 mov	 DWORD PTR _queryNode$[ebp], ebx
  0009f	74 10		 je	 SHORT $L84363

; 980  : 		xmlns = JabberXmlGetAttrValue(queryNode, "xmlns");

  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GJOJ@xmlns?$AA@ ; `string'
  000a6	53		 push	 ebx
  000a7	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000ac	59		 pop	 ecx
  000ad	89 45 fc	 mov	 DWORD PTR _xmlns$[ebp], eax
  000b0	59		 pop	 ecx
$L84363:

; 981  : 	}
; 982  : 
; 983  : 
; 984  : 	/////////////////////////////////////////////////////////////////////////
; 985  : 	// MATCH BY ID
; 986  : 	/////////////////////////////////////////////////////////////////////////
; 987  : 	if ((pfunc=JabberIqFetchFunc(info->proto, id)) != NULL) {

  000b1	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  000b4	ff 75 f8	 push	 DWORD PTR _id$[ebp]
  000b7	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  000bd	e8 00 00 00 00	 call	 _JabberIqFetchFunc
  000c2	59		 pop	 ecx
  000c3	89 45 0c	 mov	 DWORD PTR _pfunc$[ebp], eax
  000c6	85 c0		 test	 eax, eax
  000c8	59		 pop	 ecx
  000c9	74 25		 je	 SHORT $L84365

; 988  : 		JabberLog(info->proto, "Handling iq request for id=%d", id);

  000cb	ff 75 f8	 push	 DWORD PTR _id$[ebp]
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IBHF@Handling?5iq?5request?5for?5id?$DN?$CFd?$AA@ ; `string'
  000d3	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  000d9	e8 00 00 00 00	 call	 _JabberLog

; 989  : 		pfunc(info->proto, node);

  000de	57		 push	 edi
  000df	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  000e5	ff 55 0c	 call	 DWORD PTR _pfunc$[ebp]
  000e8	83 c4 14	 add	 esp, 20			; 00000014H

; 990  : 	/////////////////////////////////////////////////////////////////////////
; 991  : 	// MORE GENERAL ROUTINES, WHEN ID DOES NOT MATCH
; 992  : 	/////////////////////////////////////////////////////////////////////////
; 993  : 	// new p2p connections
; 994  : 	} else if (xmlns != NULL && !strcmp(xmlns, "p2p")) { 

  000eb	e9 8c 08 00 00	 jmp	 $L84357
$L84365:
  000f0	83 7d fc 00	 cmp	 DWORD PTR _xmlns$[ebp], 0
  000f4	74 32		 je	 SHORT $L84369
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03CKOL@p2p?$AA@ ; `string'
  000fb	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  000fe	e8 00 00 00 00	 call	 _strcmp
  00103	59		 pop	 ecx
  00104	85 c0		 test	 eax, eax
  00106	59		 pop	 ecx
  00107	75 1f		 jne	 SHORT $L84369

; 995  : 		if (info->proto->tlenOptions.useNewP2P) {

  00109	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0010f	83 b8 ec 01 00
	00 00		 cmp	 DWORD PTR [eax+492], 0
  00116	0f 84 60 08 00
	00		 je	 $L84357

; 996  : 			TlenProcessP2P(node, info);

  0011c	56		 push	 esi
  0011d	57		 push	 edi
  0011e	e8 00 00 00 00	 call	 _TlenProcessP2P

; 997  : 		}
; 998  : 	}
; 999  : 	// RECVED: <iq type='set'><query ...
; 1000 : 	else if (!strcmp(type, "set") && queryNode!=NULL && xmlns!=NULL) {

  00123	e9 52 08 00 00	 jmp	 $L85618
$L84369:
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03NHNF@set?$AA@ ; `string'
  0012d	ff 75 08	 push	 DWORD PTR _type$[ebp]
  00130	e8 00 00 00 00	 call	 _strcmp
  00135	59		 pop	 ecx
  00136	85 c0		 test	 eax, eax
  00138	59		 pop	 ecx
  00139	0f 85 51 04 00
	00		 jne	 $L84375
  0013f	85 db		 test	 ebx, ebx
  00141	0f 84 49 04 00
	00		 je	 $L84375
  00147	39 45 fc	 cmp	 DWORD PTR _xmlns$[ebp], eax
  0014a	0f 84 40 04 00
	00		 je	 $L84375

; 1001 : 
; 1002 : 		// RECVED: roster push
; 1003 : 		// ACTION: similar to iqIdGetRoster above
; 1004 : 		if (!strcmp(xmlns, "jabber:iq:roster")) {

  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@INA@jabber?3iq?3roster?$AA@ ; `string'
  00155	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  00158	e8 00 00 00 00	 call	 _strcmp
  0015d	59		 pop	 ecx
  0015e	85 c0		 test	 eax, eax
  00160	59		 pop	 ecx
  00161	0f 85 15 08 00
	00		 jne	 $L84357

; 1005 : 			XmlNode *itemNode, *groupNode;
; 1006 : 			JABBER_LIST_ITEM *item;
; 1007 : 			char *name;
; 1008 : 
; 1009 : 			JabberLog(info->proto, "<iq/> Got roster push, query has %d children", queryNode->numChild);

  00167	ff 73 14	 push	 DWORD PTR [ebx+20]
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@OLFG@?$DMiq?1?$DO?5Got?5roster?5push?0?5query?5has@ ; `string'
  0016f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00175	e8 00 00 00 00	 call	 _JabberLog

; 1010 : 			for (i=0; i<queryNode->numChild; i++) {

  0017a	83 65 f8 00	 and	 DWORD PTR _i$[ebp], 0
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00181	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  00185	0f 8e f1 07 00
	00		 jle	 $L84357
  0018b	eb 03		 jmp	 SHORT $L84384
$L85616:
  0018d	8b 5d f0	 mov	 ebx, DWORD PTR _queryNode$[ebp]
$L84384:

; 1011 : 				itemNode = queryNode->child[i];

  00190	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00193	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]

; 1012 : 				if (!strcmp(itemNode->name, "item")) {

  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MPOO@item?$AA@ ; `string'
  0019b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0019e	89 45 fc	 mov	 DWORD PTR _itemNode$84379[ebp], eax
  001a1	ff 70 04	 push	 DWORD PTR [eax+4]
  001a4	e8 00 00 00 00	 call	 _strcmp
  001a9	59		 pop	 ecx
  001aa	85 c0		 test	 eax, eax
  001ac	59		 pop	 ecx
  001ad	0f 85 c6 03 00
	00		 jne	 $L84385

; 1013 : 					if ((jid=JabberXmlGetAttrValue(itemNode, "jid")) != NULL) {

  001b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  001b8	ff 75 fc	 push	 DWORD PTR _itemNode$84379[ebp]
  001bb	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001c0	59		 pop	 ecx
  001c1	89 45 08	 mov	 DWORD PTR _jid$[ebp], eax
  001c4	85 c0		 test	 eax, eax
  001c6	59		 pop	 ecx
  001c7	0f 84 ac 03 00
	00		 je	 $L84385

; 1014 : 						if ((str=JabberXmlGetAttrValue(itemNode, "subscription")) != NULL) {

  001cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@CJOK@subscription?$AA@ ; `string'
  001d2	ff 75 fc	 push	 DWORD PTR _itemNode$84379[ebp]
  001d5	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001da	59		 pop	 ecx
  001db	89 45 f4	 mov	 DWORD PTR _str$[ebp], eax
  001de	85 c0		 test	 eax, eax
  001e0	59		 pop	 ecx
  001e1	0f 84 92 03 00
	00		 je	 $L84385

; 1015 : 							// we will not add new account when subscription=remove
; 1016 : 							if (!strcmp(str, "to") || !strcmp(str, "both") || !strcmp(str, "from") || !strcmp(str, "none")) {

  001e7	8b f8		 mov	 edi, eax
  001e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LJIJ@to?$AA@ ; `string'
  001ee	57		 push	 edi
  001ef	e8 00 00 00 00	 call	 _strcmp
  001f4	59		 pop	 ecx
  001f5	85 c0		 test	 eax, eax
  001f7	59		 pop	 ecx
  001f8	74 37		 je	 SHORT $L84395
  001fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LBKE@both?$AA@ ; `string'
  001ff	57		 push	 edi
  00200	e8 00 00 00 00	 call	 _strcmp
  00205	59		 pop	 ecx
  00206	85 c0		 test	 eax, eax
  00208	59		 pop	 ecx
  00209	74 26		 je	 SHORT $L84395
  0020b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00210	57		 push	 edi
  00211	e8 00 00 00 00	 call	 _strcmp
  00216	59		 pop	 ecx
  00217	85 c0		 test	 eax, eax
  00219	59		 pop	 ecx
  0021a	74 15		 je	 SHORT $L84395
  0021c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KIKH@none?$AA@ ; `string'
  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 _strcmp
  00227	59		 pop	 ecx
  00228	85 c0		 test	 eax, eax
  0022a	59		 pop	 ecx
  0022b	0f 85 0d 02 00
	00		 jne	 $L84423
$L84395:

; 1017 : 								if ((name=JabberXmlGetAttrValue(itemNode, "name")) != NULL) {

  00231	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04OPJK@name?$AA@ ; `string'
  00236	ff 75 fc	 push	 DWORD PTR _itemNode$84379[ebp]
  00239	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0023e	59		 pop	 ecx
  0023f	85 c0		 test	 eax, eax
  00241	59		 pop	 ecx
  00242	74 08		 je	 SHORT $L84400

; 1018 : 									nick = JabberTextDecode(name);

  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _JabberTextDecode

; 1019 : 								} else {

  0024a	eb 08		 jmp	 SHORT $L85619
$L84400:

; 1020 : 									nick = JabberLocalNickFromJID(jid);

  0024c	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  0024f	e8 00 00 00 00	 call	 _JabberLocalNickFromJID
$L85619:
  00254	8b d8		 mov	 ebx, eax
  00256	59		 pop	 ecx

; 1021 : 								}
; 1022 : 								if (nick != NULL) {

  00257	85 db		 test	 ebx, ebx
  00259	0f 84 df 01 00
	00		 je	 $L84423

; 1023 : 									if ((item=JabberListAdd(info->proto, LIST_ROSTER, jid)) != NULL) {

  0025f	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  00262	6a 00		 push	 0
  00264	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0026a	e8 00 00 00 00	 call	 _JabberListAdd
  0026f	8b f8		 mov	 edi, eax
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH
  00274	85 ff		 test	 edi, edi
  00276	0f 84 ba 01 00
	00		 je	 $L84406

; 1024 : 										if (item->nick) mir_free(item->nick);

  0027c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0027f	85 c0		 test	 eax, eax
  00281	74 08		 je	 SHORT $L84407
  00283	50		 push	 eax
  00284	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0028a	59		 pop	 ecx
$L84407:

; 1025 : 										item->nick = nick;
; 1026 : 										if ((hContact=JabberHContactFromJID(info->proto, jid)) == NULL) {

  0028b	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  0028e	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx
  00291	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00297	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0029c	59		 pop	 ecx
  0029d	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
  002a0	85 c0		 test	 eax, eax
  002a2	59		 pop	 ecx
  002a3	75 16		 jne	 SHORT $L84409

; 1027 : 											// Received roster has a new JID.
; 1028 : 											// Add the jid (with empty resource) to Miranda contact list.
; 1029 : 											hContact = JabberDBCreateContact(info->proto, jid, nick, FALSE);

  002a5	50		 push	 eax
  002a6	53		 push	 ebx
  002a7	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  002aa	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  002b0	e8 00 00 00 00	 call	 _JabberDBCreateContact
  002b5	83 c4 10	 add	 esp, 16			; 00000010H
  002b8	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
$L84409:

; 1030 : 										}
; 1031 : 										DBWriteContactSettingString(hContact, "CList", "MyHandle", nick);

  002bb	80 4d c0 ff	 or	 BYTE PTR _cws$85576[ebp+8], 255 ; 000000ffH
  002bf	8d 45 b8	 lea	 eax, DWORD PTR _cws$85576[ebp]
  002c2	50		 push	 eax
  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002c8	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  002cb	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _cws$85576[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  002d2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _cws$85576[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  002d9	89 5d c4	 mov	 DWORD PTR _cws$85576[ebp+12], ebx
  002dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  002e1	ff 50 24	 call	 DWORD PTR [eax+36]

; 1032 : 										if (item->group) mir_free(item->group);

  002e4	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  002e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ea	85 c0		 test	 eax, eax
  002ec	74 08		 je	 SHORT $L84411
  002ee	50		 push	 eax
  002ef	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  002f5	59		 pop	 ecx
$L84411:

; 1033 : 										if ((groupNode=JabberXmlGetChild(itemNode, "group"))!=NULL && groupNode->text!=NULL) {

  002f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GCOD@group?$AA@ ; `string'
  002fb	ff 75 fc	 push	 DWORD PTR _itemNode$84379[ebp]
  002fe	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00303	59		 pop	 ecx
  00304	85 c0		 test	 eax, eax
  00306	59		 pop	 ecx
  00307	74 47		 je	 SHORT $L84414
  00309	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0030c	85 c0		 test	 eax, eax
  0030e	74 40		 je	 SHORT $L84414

; 1034 : 											item->group = TlenGroupDecode(groupNode->text);

  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _TlenGroupDecode

; 1035 : 											JabberContactListCreateGroup(item->group);

  00316	50		 push	 eax
  00317	89 47 28	 mov	 DWORD PTR [edi+40], eax
  0031a	e8 00 00 00 00	 call	 _JabberContactListCreateGroup

; 1036 : 											DBWriteContactSettingString(hContact, "CList", "Group", item->group);

  0031f	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00322	80 4d ac ff	 or	 BYTE PTR _cws$85580[ebp+8], 255 ; 000000ffH
  00326	89 45 b0	 mov	 DWORD PTR _cws$85580[ebp+12], eax
  00329	8d 45 a4	 lea	 eax, DWORD PTR _cws$85580[ebp]
  0032c	50		 push	 eax
  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00332	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00335	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _cws$85580[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  0033c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _cws$85580[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  00343	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00348	ff 50 24	 call	 DWORD PTR [eax+36]
  0034b	83 c4 14	 add	 esp, 20			; 00000014H

; 1037 : 										}
; 1038 : 										else {

  0034e	eb 29		 jmp	 SHORT $L85583
$L84414:

; 1039 : 											item->group = NULL;

  00350	83 67 28 00	 and	 DWORD PTR [edi+40], 0

; 1040 : 											DBDeleteContactSetting(hContact, "CList", "Group");

  00354	8d 45 cc	 lea	 eax, DWORD PTR _cgs$85584[ebp]
  00357	50		 push	 eax
  00358	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0035d	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00360	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _cgs$85584[ebp], OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  00367	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _cgs$85584[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  0036e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  00373	ff 50 24	 call	 DWORD PTR [eax+36]
  00376	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85583:

; 1041 : 										}
; 1042 : 										if (!strcmp(str, "none") || (!strcmp(str, "from") && strchr(jid, '@')!=NULL)) {

  00379	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KIKH@none?$AA@ ; `string'
  0037e	ff 75 f4	 push	 DWORD PTR _str$[ebp]
  00381	e8 00 00 00 00	 call	 _strcmp
  00386	59		 pop	 ecx
  00387	85 c0		 test	 eax, eax
  00389	59		 pop	 ecx
  0038a	74 2c		 je	 SHORT $L84421
  0038c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00391	ff 75 f4	 push	 DWORD PTR _str$[ebp]
  00394	e8 00 00 00 00	 call	 _strcmp
  00399	59		 pop	 ecx
  0039a	85 c0		 test	 eax, eax
  0039c	59		 pop	 ecx
  0039d	0f 85 9b 00 00
	00		 jne	 $L84423
  003a3	6a 40		 push	 64			; 00000040H
  003a5	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  003a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  003ae	59		 pop	 ecx
  003af	85 c0		 test	 eax, eax
  003b1	59		 pop	 ecx
  003b2	0f 84 86 00 00
	00		 je	 $L84423
$L84421:

; 1043 : 											if (DBGetContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != ID_STATUS_OFFLINE)

  003b8	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  003be	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  003c3	89 7d e8	 mov	 DWORD PTR _cgs$85589[ebp+4], edi
  003c6	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003c9	89 45 e4	 mov	 DWORD PTR _cgs$85589[ebp], eax
  003cc	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _dbv$85588[ebp]
  003d2	89 45 ec	 mov	 DWORD PTR _cgs$85589[ebp+8], eax
  003d5	8d 45 e4	 lea	 eax, DWORD PTR _cgs$85589[ebp]
  003d8	50		 push	 eax
  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003de	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  003e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  003e6	ff 50 24	 call	 DWORD PTR [eax+36]
  003e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ec	85 c0		 test	 eax, eax
  003ee	75 4e		 jne	 SHORT $L84423
  003f0	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _dbv$85588[ebp+4]
  003f7	3d 87 9c 00 00	 cmp	 eax, 40071		; 00009c87H
  003fc	74 40		 je	 SHORT $L84423

; 1044 : 												DBWriteContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE);

  003fe	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  00404	89 7d 80	 mov	 DWORD PTR _cws$85596[ebp+4], edi
  00407	c6 45 84 02	 mov	 BYTE PTR _cws$85596[ebp+8], 2
  0040b	66 c7 45 88 87
	9c		 mov	 WORD PTR _cws$85596[ebp+12], 40071 ; 00009c87H
  00411	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00414	89 85 7c ff ff
	ff		 mov	 DWORD PTR _cws$85596[ebp], eax
  0041a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _cws$85596[ebp]
  00420	50		 push	 eax
  00421	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00426	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00429	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  0042e	ff 50 24	 call	 DWORD PTR [eax+36]
  00431	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1045 : 										}
; 1046 : 									}
; 1047 : 									else {

  00434	eb 08		 jmp	 SHORT $L84423
$L84406:

; 1048 : 										mir_free(nick);

  00436	53		 push	 ebx
  00437	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0043d	59		 pop	 ecx
$L84423:

; 1049 : 									}
; 1050 : 								}
; 1051 : 							}
; 1052 : 							if ((item=JabberListGetItemPtr(info->proto, LIST_ROSTER, jid)) != NULL) {

  0043e	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  00441	6a 00		 push	 0
  00443	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00449	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0044e	8b f8		 mov	 edi, eax
  00450	83 c4 0c	 add	 esp, 12			; 0000000cH
  00453	85 ff		 test	 edi, edi
  00455	0f 84 1e 01 00
	00		 je	 $L84385

; 1053 : 								if (!strcmp(str, "both")) item->subscription = SUB_BOTH;

  0045b	8b 5d f4	 mov	 ebx, DWORD PTR _str$[ebp]
  0045e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LBKE@both?$AA@ ; `string'
  00463	53		 push	 ebx
  00464	e8 00 00 00 00	 call	 _strcmp
  00469	59		 pop	 ecx
  0046a	85 c0		 test	 eax, eax
  0046c	59		 pop	 ecx
  0046d	75 09		 jne	 SHORT $L84426
  0046f	c7 47 14 03 00
	00 00		 mov	 DWORD PTR [edi+20], 3

; 1054 : 								else if (!strcmp(str, "to")) item->subscription = SUB_TO;

  00476	eb 38		 jmp	 SHORT $L84431
$L84426:
  00478	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LJIJ@to?$AA@ ; `string'
  0047d	53		 push	 ebx
  0047e	e8 00 00 00 00	 call	 _strcmp
  00483	59		 pop	 ecx
  00484	85 c0		 test	 eax, eax
  00486	59		 pop	 ecx
  00487	75 09		 jne	 SHORT $L84428
  00489	c7 47 14 01 00
	00 00		 mov	 DWORD PTR [edi+20], 1

; 1055 : 								else if (!strcmp(str, "from")) item->subscription = SUB_FROM;

  00490	eb 1e		 jmp	 SHORT $L84431
$L84428:
  00492	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00497	53		 push	 ebx
  00498	e8 00 00 00 00	 call	 _strcmp
  0049d	59		 pop	 ecx
  0049e	85 c0		 test	 eax, eax
  004a0	59		 pop	 ecx
  004a1	75 09		 jne	 SHORT $L84430
  004a3	c7 47 14 02 00
	00 00		 mov	 DWORD PTR [edi+20], 2

; 1056 : 								else item->subscription = SUB_NONE;

  004aa	eb 04		 jmp	 SHORT $L84431
$L84430:
  004ac	83 67 14 00	 and	 DWORD PTR [edi+20], 0
$L84431:

; 1057 : 								JabberLog(info->proto, "Roster push for jid=%s, set subscription to %s", jid, str);

  004b0	53		 push	 ebx
  004b1	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  004b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@CLHC@Roster?5push?5for?5jid?$DN?$CFs?0?5set?5subs@ ; `string'
  004b9	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  004bf	e8 00 00 00 00	 call	 _JabberLog

; 1058 : 								// subscription = remove is to remove from roster list
; 1059 : 								// but we will just set the contact to offline and not actually
; 1060 : 								// remove, so that history will be retained.
; 1061 : 								if (!strcmp(str, "remove")) {

  004c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JIKN@remove?$AA@ ; `string'
  004c9	53		 push	 ebx
  004ca	e8 00 00 00 00	 call	 _strcmp
  004cf	83 c4 18	 add	 esp, 24			; 00000018H
  004d2	85 c0		 test	 eax, eax
  004d4	0f 85 9f 00 00
	00		 jne	 $L84385

; 1062 : 									if ((hContact=JabberHContactFromJID(info->proto, jid)) != NULL) {

  004da	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  004dd	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  004e3	e8 00 00 00 00	 call	 _JabberHContactFromJID
  004e8	8b d8		 mov	 ebx, eax
  004ea	59		 pop	 ecx
  004eb	85 db		 test	 ebx, ebx
  004ed	59		 pop	 ecx
  004ee	0f 84 85 00 00
	00		 je	 $L84385

; 1063 : 										if (DBGetContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != ID_STATUS_OFFLINE)

  004f4	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  004fa	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  004ff	89 7d dc	 mov	 DWORD PTR _cgs$85602[ebp+4], edi
  00502	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00505	89 45 d8	 mov	 DWORD PTR _cgs$85602[ebp], eax
  00508	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _dbv$85601[ebp]
  0050e	89 45 e0	 mov	 DWORD PTR _cgs$85602[ebp+8], eax
  00511	8d 45 d8	 lea	 eax, DWORD PTR _cgs$85602[ebp]
  00514	50		 push	 eax
  00515	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0051a	53		 push	 ebx
  0051b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00520	ff 50 24	 call	 DWORD PTR [eax+36]
  00523	83 c4 0c	 add	 esp, 12			; 0000000cH
  00526	85 c0		 test	 eax, eax
  00528	75 3c		 jne	 SHORT $L85608
  0052a	0f b7 85 74 ff
	ff ff		 movzx	 eax, WORD PTR _dbv$85601[ebp+4]
  00531	3d 87 9c 00 00	 cmp	 eax, 40071		; 00009c87H
  00536	74 2e		 je	 SHORT $L85608

; 1064 : 											DBWriteContactSettingWord(hContact, info->proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE);

  00538	8b 86 20 0f 00
	00		 mov	 eax, DWORD PTR [esi+3872]
  0053e	89 7d 94	 mov	 DWORD PTR _cws$85609[ebp+4], edi
  00541	c6 45 98 02	 mov	 BYTE PTR _cws$85609[ebp+8], 2
  00545	66 c7 45 9c 87
	9c		 mov	 WORD PTR _cws$85609[ebp+12], 40071 ; 00009c87H
  0054b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0054e	89 45 90	 mov	 DWORD PTR _cws$85609[ebp], eax
  00551	8d 45 90	 lea	 eax, DWORD PTR _cws$85609[ebp]
  00554	50		 push	 eax
  00555	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0055a	53		 push	 ebx
  0055b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00560	ff 50 24	 call	 DWORD PTR [eax+36]
  00563	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85608:

; 1065 : 										JabberListRemove(info->proto, LIST_ROSTER, jid);

  00566	ff 75 08	 push	 DWORD PTR _jid$[ebp]
  00569	6a 00		 push	 0
  0056b	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00571	e8 00 00 00 00	 call	 _JabberListRemove
  00576	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84385:
  00579	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  0057c	8b 45 f0	 mov	 eax, DWORD PTR _queryNode$[ebp]
  0057f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00582	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00585	0f 8c 02 fc ff
	ff		 jl	 $L85616

; 1066 : 									}
; 1067 : 								}
; 1068 : 							}
; 1069 : 						}
; 1070 : 					}
; 1071 : 				}
; 1072 : 			}
; 1073 : 		}
; 1074 : 
; 1075 : 	}
; 1076 : 	// RECVED: <iq type='get'><query ...
; 1077 : 	else if ( !strcmp( type, "get" ) && queryNode!=NULL && xmlns!=NULL ) {

  0058b	e9 ec 03 00 00	 jmp	 $L84357
$L84375:
  00590	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03LOOF@get?$AA@ ; `string'
  00595	ff 75 08	 push	 DWORD PTR _type$[ebp]
  00598	e8 00 00 00 00	 call	 _strcmp
  0059d	59		 pop	 ecx
  0059e	85 c0		 test	 eax, eax
  005a0	59		 pop	 ecx
  005a1	75 31		 jne	 SHORT $L84441
  005a3	85 db		 test	 ebx, ebx
  005a5	74 2d		 je	 SHORT $L84441
  005a7	39 45 fc	 cmp	 DWORD PTR _xmlns$[ebp], eax
  005aa	74 28		 je	 SHORT $L84441

; 1078 : 		// RECVED: software version query
; 1079 : 		// ACTION: return my software version
; 1080 : 		if ( !strcmp( xmlns, "jabber:iq:version" )) TlenProcessIqGetVersion(info->proto, node);

  005ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NOHM@jabber?3iq?3version?$AA@ ; `string'
  005b1	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  005b4	e8 00 00 00 00	 call	 _strcmp
  005b9	59		 pop	 ecx
  005ba	85 c0		 test	 eax, eax
  005bc	59		 pop	 ecx
  005bd	0f 85 b9 03 00
	00		 jne	 $L84357
  005c3	57		 push	 edi
  005c4	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  005ca	e8 00 00 00 00	 call	 _TlenProcessIqGetVersion

; 1081 : 	}
; 1082 : 	// RECVED: <iq type='result'><query ...
; 1083 : 	else if ( !strcmp( type, "result") && queryNode!=NULL) {

  005cf	e9 a6 03 00 00	 jmp	 $L85618
$L84441:
  005d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  005d9	ff 75 08	 push	 DWORD PTR _type$[ebp]
  005dc	e8 00 00 00 00	 call	 _strcmp
  005e1	59		 pop	 ecx
  005e2	85 c0		 test	 eax, eax
  005e4	59		 pop	 ecx
  005e5	0f 85 b8 00 00
	00		 jne	 $L84447
  005eb	85 db		 test	 ebx, ebx
  005ed	0f 84 b0 00 00
	00		 je	 $L84447

; 1084 : 		if (xmlns!=NULL ) {

  005f3	39 45 fc	 cmp	 DWORD PTR _xmlns$[ebp], eax
  005f6	74 70		 je	 SHORT $L84450

; 1085 : 			if ( !strcmp(xmlns, "jabber:iq:roster" )) {

  005f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@INA@jabber?3iq?3roster?$AA@ ; `string'
  005fd	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  00600	e8 00 00 00 00	 call	 _strcmp
  00605	59		 pop	 ecx
  00606	85 c0		 test	 eax, eax
  00608	59		 pop	 ecx
  00609	75 11		 jne	 SHORT $L84451

; 1086 : 				JabberIqResultRoster(info->proto, node);

  0060b	57		 push	 edi
  0060c	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00612	e8 00 00 00 00	 call	 _JabberIqResultRoster

; 1087 : 			} else if ( !strcmp( xmlns, "jabber:iq:version" )) {

  00617	e9 5e 03 00 00	 jmp	 $L85618
$L84451:
  0061c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NOHM@jabber?3iq?3version?$AA@ ; `string'
  00621	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  00624	e8 00 00 00 00	 call	 _strcmp
  00629	59		 pop	 ecx
  0062a	85 c0		 test	 eax, eax
  0062c	59		 pop	 ecx
  0062d	75 11		 jne	 SHORT $L84453

; 1088 : 				TlenIqResultVersion(info->proto, node);

  0062f	57		 push	 edi
  00630	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00636	e8 00 00 00 00	 call	 _TlenIqResultVersion

; 1089 : 			} else if ( !strcmp( xmlns, "jabber:iq:info" )) {

  0063b	e9 3a 03 00 00	 jmp	 $L85618
$L84453:
  00640	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BIMC@jabber?3iq?3info?$AA@ ; `string'
  00645	ff 75 fc	 push	 DWORD PTR _xmlns$[ebp]
  00648	e8 00 00 00 00	 call	 _strcmp
  0064d	59		 pop	 ecx
  0064e	85 c0		 test	 eax, eax
  00650	59		 pop	 ecx
  00651	0f 85 25 03 00
	00		 jne	 $L84357

; 1090 : 				TlenIqResultInfo(info->proto, node);

  00657	57		 push	 edi
  00658	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0065e	e8 00 00 00 00	 call	 _TlenIqResultInfo

; 1091 : 			}
; 1092 : 		} else {

  00663	e9 12 03 00 00	 jmp	 $L85618
$L84450:

; 1093 : 			char *from;
; 1094 : 			if (( from=JabberXmlGetAttrValue( node, "from" )) != NULL ) {

  00668	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  0066d	57		 push	 edi
  0066e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00673	59		 pop	 ecx
  00674	85 c0		 test	 eax, eax
  00676	59		 pop	 ecx
  00677	0f 84 ff 02 00
	00		 je	 $L84357

; 1095 : 				if ( !strcmp(from, "tcfg" )) {

  0067d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KFCH@tcfg?$AA@ ; `string'
  00682	50		 push	 eax
  00683	e8 00 00 00 00	 call	 _strcmp
  00688	59		 pop	 ecx
  00689	85 c0		 test	 eax, eax
  0068b	59		 pop	 ecx
  0068c	0f 85 ea 02 00
	00		 jne	 $L84357

; 1096 : 					TlenIqResultTcfg(info->proto, node);

  00692	57		 push	 edi
  00693	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00699	e8 00 00 00 00	 call	 _TlenIqResultTcfg

; 1097 : 				}
; 1098 : 			}
; 1099 : 		}
; 1100 : 	}
; 1101 : 	// RECVED: <iq type='error'> ...
; 1102 : 	else if (!strcmp(type, "error")) {

  0069e	e9 d7 02 00 00	 jmp	 $L85618
$L84447:
  006a3	8b 5d 08	 mov	 ebx, DWORD PTR _type$[ebp]
  006a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05COLM@error?$AA@ ; `string'
  006ab	53		 push	 ebx
  006ac	e8 00 00 00 00	 call	 _strcmp
  006b1	59		 pop	 ecx
  006b2	85 c0		 test	 eax, eax
  006b4	59		 pop	 ecx
  006b5	0f 85 b0 00 00
	00		 jne	 $L84464

; 1103 : 		JABBER_LIST_ITEM *item;
; 1104 : 		// Check for multi-user chat errors
; 1105 : 		char *from;
; 1106 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  006bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  006c0	57		 push	 edi
  006c1	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  006c6	8b d8		 mov	 ebx, eax
  006c8	59		 pop	 ecx
  006c9	85 db		 test	 ebx, ebx
  006cb	59		 pop	 ecx
  006cc	74 38		 je	 SHORT $L84470

; 1107 : 			if (strstr(from, "@c")!=NULL || !strcmp(from, "c")) {

  006ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KCDM@?$EAc?$AA@ ; `string'
  006d3	53		 push	 ebx
  006d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  006da	59		 pop	 ecx
  006db	85 c0		 test	 eax, eax
  006dd	59		 pop	 ecx
  006de	75 11		 jne	 SHORT $L84471
  006e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  006e5	53		 push	 ebx
  006e6	e8 00 00 00 00	 call	 _strcmp
  006eb	59		 pop	 ecx
  006ec	85 c0		 test	 eax, eax
  006ee	59		 pop	 ecx
  006ef	75 15		 jne	 SHORT $L84470
$L84471:

; 1108 : 				TlenMUCRecvError(info->proto, from, node);

  006f1	57		 push	 edi
  006f2	53		 push	 ebx
  006f3	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  006f9	e8 00 00 00 00	 call	 _TlenMUCRecvError
  006fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1109 : 				return;

  00701	e9 76 02 00 00	 jmp	 $L84357
$L84470:

; 1110 : 			}
; 1111 : 		}
; 1112 : 
; 1113 : 		// Check for file transfer deny by comparing idStr with ft->iqId
; 1114 : 		i = 0;
; 1115 : 		while ((i=JabberListFindNext(info->proto, LIST_FILE, i)) >= 0) {

  00706	6a 00		 push	 0
$L85620:
  00708	6a 02		 push	 2
  0070a	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00710	e8 00 00 00 00	 call	 _JabberListFindNext
  00715	8b d8		 mov	 ebx, eax
  00717	83 c4 0c	 add	 esp, 12			; 0000000cH
  0071a	85 db		 test	 ebx, ebx
  0071c	0f 8c 5a 02 00
	00		 jl	 $L84357

; 1116 : 			item = JabberListGetItemPtrFromIndex(info->proto,i);

  00722	53		 push	 ebx
  00723	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00729	e8 00 00 00 00	 call	 _JabberListGetItemPtrFromIndex
  0072e	8b f8		 mov	 edi, eax
  00730	59		 pop	 ecx
  00731	59		 pop	 ecx

; 1117 : 			if (item->ft->state==FT_CONNECTING && !strcmp(idStr, item->ft->iqId)) {

  00732	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00735	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00739	75 2c		 jne	 SHORT $L84479
  0073b	ff 70 18	 push	 DWORD PTR [eax+24]
  0073e	ff 75 f4	 push	 DWORD PTR _idStr$[ebp]
  00741	e8 00 00 00 00	 call	 _strcmp
  00746	59		 pop	 ecx
  00747	85 c0		 test	 eax, eax
  00749	59		 pop	 ecx
  0074a	75 1b		 jne	 SHORT $L84479

; 1118 : 				item->ft->state = FT_DENIED;

  0074c	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  0074f	c7 40 0c 05 00
	00 00		 mov	 DWORD PTR [eax+12], 5

; 1119 : 				if (item->ft->hFileEvent != NULL)

  00756	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00759	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0075c	85 c0		 test	 eax, eax
  0075e	74 07		 je	 SHORT $L84479

; 1120 : 					SetEvent(item->ft->hFileEvent);	// Simulate the termination of file server connection

  00760	50		 push	 eax
  00761	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$L84479:

; 1121 : 			}
; 1122 : 			i++;

  00767	43		 inc	 ebx
  00768	53		 push	 ebx

; 1123 : 		}
; 1124 : 	}
; 1125 : 	// RECVED: <iq type='1'>...
; 1126 : 	else if (!strcmp(type, "1")) { // Chat groups list result

  00769	eb 9d		 jmp	 SHORT $L85620
$L84464:
  0076b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  00770	53		 push	 ebx
  00771	e8 00 00 00 00	 call	 _strcmp
  00776	59		 pop	 ecx
  00777	85 c0		 test	 eax, eax
  00779	59		 pop	 ecx
  0077a	75 3b		 jne	 SHORT $L84481

; 1127 : 		char *from;
; 1128 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  0077c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00781	57		 push	 edi
  00782	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00787	59		 pop	 ecx
  00788	85 c0		 test	 eax, eax
  0078a	59		 pop	 ecx
  0078b	0f 84 eb 01 00
	00		 je	 $L84357

; 1129 : 			if (strcmp(from, "c")==0) {

  00791	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  00796	50		 push	 eax
  00797	e8 00 00 00 00	 call	 _strcmp
  0079c	59		 pop	 ecx
  0079d	85 c0		 test	 eax, eax
  0079f	59		 pop	 ecx
  007a0	0f 85 d6 01 00
	00		 jne	 $L84357

; 1130 : 				TlenIqResultChatGroups(info->proto, node);

  007a6	57		 push	 edi
  007a7	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  007ad	e8 00 00 00 00	 call	 _TlenIqResultChatGroups

; 1131 : 			}
; 1132 : 		}
; 1133 : 	}
; 1134 : 	else if (!strcmp(type, "2")) { // Chat rooms list result

  007b2	e9 c3 01 00 00	 jmp	 $L85618
$L84481:
  007b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOLO@2?$AA@ ; `string'
  007bc	53		 push	 ebx
  007bd	e8 00 00 00 00	 call	 _strcmp
  007c2	59		 pop	 ecx
  007c3	85 c0		 test	 eax, eax
  007c5	59		 pop	 ecx
  007c6	75 3b		 jne	 SHORT $L84487

; 1135 : 		char *from;
; 1136 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  007c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  007cd	57		 push	 edi
  007ce	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  007d3	59		 pop	 ecx
  007d4	85 c0		 test	 eax, eax
  007d6	59		 pop	 ecx
  007d7	0f 84 9f 01 00
	00		 je	 $L84357

; 1137 : 			if (strcmp(from, "c")==0) {

  007dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  007e2	50		 push	 eax
  007e3	e8 00 00 00 00	 call	 _strcmp
  007e8	59		 pop	 ecx
  007e9	85 c0		 test	 eax, eax
  007eb	59		 pop	 ecx
  007ec	0f 85 8a 01 00
	00		 jne	 $L84357

; 1138 : 				TlenIqResultChatRooms(info->proto, node);

  007f2	57		 push	 edi
  007f3	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  007f9	e8 00 00 00 00	 call	 _TlenIqResultChatRooms

; 1139 : 			}
; 1140 : 		}
; 1141 : 	} else if (!strcmp(type, "3")) { // room search result - result to iq type 3 query

  007fe	e9 77 01 00 00	 jmp	 $L85618
$L84487:
  00803	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01ECJ@3?$AA@ ; `string'
  00808	53		 push	 ebx
  00809	e8 00 00 00 00	 call	 _strcmp
  0080e	59		 pop	 ecx
  0080f	85 c0		 test	 eax, eax
  00811	59		 pop	 ecx
  00812	75 3b		 jne	 SHORT $L84494

; 1142 : 		char *from;
; 1143 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  00814	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00819	57		 push	 edi
  0081a	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0081f	59		 pop	 ecx
  00820	85 c0		 test	 eax, eax
  00822	59		 pop	 ecx
  00823	0f 84 53 01 00
	00		 je	 $L84357

; 1144 : 			if (strcmp(from, "c")==0) {

  00829	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  0082e	50		 push	 eax
  0082f	e8 00 00 00 00	 call	 _strcmp
  00834	59		 pop	 ecx
  00835	85 c0		 test	 eax, eax
  00837	59		 pop	 ecx
  00838	0f 85 3e 01 00
	00		 jne	 $L84357

; 1145 : 				TlenIqResultRoomSearch(info->proto, node);

  0083e	57		 push	 edi
  0083f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00845	e8 00 00 00 00	 call	 _TlenIqResultRoomSearch

; 1146 : 			}
; 1147 : 		}
; 1148 : 	} else if (!strcmp(type, "4")) { // chat room users list

  0084a	e9 2b 01 00 00	 jmp	 $L85618
$L84494:
  0084f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBMM@4?$AA@ ; `string'
  00854	53		 push	 ebx
  00855	e8 00 00 00 00	 call	 _strcmp
  0085a	59		 pop	 ecx
  0085b	85 c0		 test	 eax, eax
  0085d	59		 pop	 ecx
  0085e	75 3c		 jne	 SHORT $L84501

; 1149 : 		char *from;
; 1150 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  00860	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00865	57		 push	 edi
  00866	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0086b	59		 pop	 ecx
  0086c	85 c0		 test	 eax, eax
  0086e	59		 pop	 ecx
  0086f	0f 84 07 01 00
	00		 je	 $L84357

; 1151 : 			if (strstr(from, "@c")!=NULL) {

  00875	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KCDM@?$EAc?$AA@ ; `string'
  0087a	50		 push	 eax
  0087b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  00881	59		 pop	 ecx
  00882	85 c0		 test	 eax, eax
  00884	59		 pop	 ecx
  00885	0f 84 f1 00 00
	00		 je	 $L84357

; 1152 : 				TlenIqResultChatRoomUsers(info->proto, node);

  0088b	57		 push	 edi
  0088c	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00892	e8 00 00 00 00	 call	 _TlenIqResultChatRoomUsers

; 1153 : 			}
; 1154 : 		}
; 1155 : 	} else if (!strcmp(type, "5")) { // room name & group & flags info - sent on joining the room

  00897	e9 de 00 00 00	 jmp	 $L85618
$L84501:
  0089c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PLFL@5?$AA@ ; `string'
  008a1	53		 push	 ebx
  008a2	e8 00 00 00 00	 call	 _strcmp
  008a7	59		 pop	 ecx
  008a8	85 c0		 test	 eax, eax
  008aa	59		 pop	 ecx
  008ab	75 3c		 jne	 SHORT $L84509

; 1156 : 		char *from;
; 1157 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  008ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  008b2	57		 push	 edi
  008b3	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  008b8	59		 pop	 ecx
  008b9	85 c0		 test	 eax, eax
  008bb	59		 pop	 ecx
  008bc	0f 84 ba 00 00
	00		 je	 $L84357

; 1158 : 			if (strstr(from, "@c")!=NULL) {

  008c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KCDM@?$EAc?$AA@ ; `string'
  008c7	50		 push	 eax
  008c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  008ce	59		 pop	 ecx
  008cf	85 c0		 test	 eax, eax
  008d1	59		 pop	 ecx
  008d2	0f 84 a4 00 00
	00		 je	 $L84357

; 1159 : 				TlenIqResultRoomInfo(info->proto, node);

  008d8	57		 push	 edi
  008d9	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  008df	e8 00 00 00 00	 call	 _TlenIqResultRoomInfo

; 1160 : 			}
; 1161 : 		}
; 1162 : 	} else if (!strcmp(type, "6")) { // new nick registered

  008e4	e9 91 00 00 00	 jmp	 $L85618
$L84509:
  008e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EOC@6?$AA@ ; `string'
  008ee	53		 push	 ebx
  008ef	e8 00 00 00 00	 call	 _strcmp
  008f4	59		 pop	 ecx
  008f5	85 c0		 test	 eax, eax
  008f7	59		 pop	 ecx

; 1163 : 		char *from;
; 1164 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {
; 1165 : 			if (strcmp(from, "c")==0) {
; 1166 : 				TlenIqResultUserNicks(info->proto, node);
; 1167 : 			}
; 1168 : 		}
; 1169 : 	} else if (!strcmp(type, "7")) { // user nicknames list

  008f8	74 11		 je	 SHORT $L85621
  008fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOHF@7?$AA@ ; `string'
  008ff	53		 push	 ebx
  00900	e8 00 00 00 00	 call	 _strcmp
  00905	59		 pop	 ecx
  00906	85 c0		 test	 eax, eax
  00908	59		 pop	 ecx
  00909	75 30		 jne	 SHORT $L84524
$L85621:

; 1170 : 		char *from;
; 1171 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  0090b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00910	57		 push	 edi
  00911	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00916	59		 pop	 ecx
  00917	85 c0		 test	 eax, eax
  00919	59		 pop	 ecx
  0091a	74 60		 je	 SHORT $L84357

; 1172 : 			if (strcmp(from, "c")==0) {

  0091c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  00921	50		 push	 eax
  00922	e8 00 00 00 00	 call	 _strcmp
  00927	59		 pop	 ecx
  00928	85 c0		 test	 eax, eax
  0092a	59		 pop	 ecx
  0092b	75 4f		 jne	 SHORT $L84357

; 1173 : 				TlenIqResultUserNicks(info->proto, node);

  0092d	57		 push	 edi
  0092e	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00934	e8 00 00 00 00	 call	 _TlenIqResultUserNicks

; 1174 : 			}
; 1175 : 		}
; 1176 : 	} else if (!strcmp(type, "8")) { // user chat rooms list

  00939	eb 3f		 jmp	 SHORT $L85618
$L84524:
  0093b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KPCI@8?$AA@ ; `string'
  00940	53		 push	 ebx
  00941	e8 00 00 00 00	 call	 _strcmp
  00946	59		 pop	 ecx
  00947	85 c0		 test	 eax, eax
  00949	59		 pop	 ecx
  0094a	75 30		 jne	 SHORT $L84357

; 1177 : 		char *from;
; 1178 : 		if ((from=JabberXmlGetAttrValue(node, "from")) != NULL) {

  0094c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00951	57		 push	 edi
  00952	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00957	59		 pop	 ecx
  00958	85 c0		 test	 eax, eax
  0095a	59		 pop	 ecx
  0095b	74 1f		 je	 SHORT $L84357

; 1179 : 			if (strcmp(from, "c")==0) {

  0095d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  00962	50		 push	 eax
  00963	e8 00 00 00 00	 call	 _strcmp
  00968	59		 pop	 ecx
  00969	85 c0		 test	 eax, eax
  0096b	59		 pop	 ecx
  0096c	75 0e		 jne	 SHORT $L84357

; 1180 : 				TlenIqResultUserRooms(info->proto, node);

  0096e	57		 push	 edi
  0096f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00975	e8 00 00 00 00	 call	 _TlenIqResultUserRooms
$L85618:
  0097a	59		 pop	 ecx
  0097b	59		 pop	 ecx
$L84357:
  0097c	5f		 pop	 edi
  0097d	5e		 pop	 esi
  0097e	5b		 pop	 ebx

; 1181 : 			}
; 1182 : 		}
; 1183 : 	}
; 1184 : }

  0097f	c9		 leave
  00980	c3		 ret	 0
_JabberProcessIq ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CDPP@Windows?52000?$AA@		; `string'
PUBLIC	??_C@_0L@CEIK@Windows?5NT?$AA@			; `string'
PUBLIC	??_C@_0L@NDG@Windows?595?$AA@			; `string'
PUBLIC	??_C@_0L@FJEF@Windows?598?$AA@			; `string'
PUBLIC	??_C@_0L@BMJC@Windows?5ME?$AA@			; `string'
PUBLIC	??_C@_07PKLL@Windows?$AA@			; `string'
PUBLIC	??_C@_0M@FMHA@Miranda?5IM?5?$AA@		; `string'
PUBLIC	??_C@_0BO@HNHJ@Miranda?1System?1GetVersionText?$AA@ ; `string'
PUBLIC	??_C@_09CDOA@?5?$CITlen?5v?4?$AA@		; `string'
PUBLIC	??_C@_01KMMP@?$CJ?$AA@				; `string'
PUBLIC	??_C@_0JF@MBPO@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ ; `string'
PUBLIC	??_C@_07KGID@1?48?40?40?$AA@			; `string'
PUBLIC	??_C@_0BE@CBAK@Windows?5Server?52003?$AA@	; `string'
PUBLIC	??_C@_0L@JDIA@Windows?5XP?$AA@			; `string'
EXTRN	_strcat:NEAR
EXTRN	__imp__GetVersionExW@4:NEAR
;	COMDAT ??_C@_07KGID@1?48?40?40?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_07KGID@1?48?40?40?$AA@ DB '1.8.0.0', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CBAK@Windows?5Server?52003?$AA@
_DATA	SEGMENT
??_C@_0BE@CBAK@Windows?5Server?52003?$AA@ DB 'Windows Server 2003', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JDIA@Windows?5XP?$AA@
_DATA	SEGMENT
??_C@_0L@JDIA@Windows?5XP?$AA@ DB 'Windows XP', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CDPP@Windows?52000?$AA@
_DATA	SEGMENT
??_C@_0N@CDPP@Windows?52000?$AA@ DB 'Windows 2000', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CEIK@Windows?5NT?$AA@
_DATA	SEGMENT
??_C@_0L@CEIK@Windows?5NT?$AA@ DB 'Windows NT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@NDG@Windows?595?$AA@
_DATA	SEGMENT
??_C@_0L@NDG@Windows?595?$AA@ DB 'Windows 95', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FJEF@Windows?598?$AA@
_DATA	SEGMENT
??_C@_0L@FJEF@Windows?598?$AA@ DB 'Windows 98', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BMJC@Windows?5ME?$AA@
_DATA	SEGMENT
??_C@_0L@BMJC@Windows?5ME?$AA@ DB 'Windows ME', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07PKLL@Windows?$AA@
_DATA	SEGMENT
??_C@_07PKLL@Windows?$AA@ DB 'Windows', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@FMHA@Miranda?5IM?5?$AA@
_DATA	SEGMENT
??_C@_0M@FMHA@Miranda?5IM?5?$AA@ DB 'Miranda IM ', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HNHJ@Miranda?1System?1GetVersionText?$AA@
_DATA	SEGMENT
??_C@_0BO@HNHJ@Miranda?1System?1GetVersionText?$AA@ DB 'Miranda/System/Ge'
	DB	'tVersionText', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CDOA@?5?$CITlen?5v?4?$AA@
_DATA	SEGMENT
??_C@_09CDOA@?5?$CITlen?5v?4?$AA@ DB ' (Tlen v.', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KMMP@?$CJ?$AA@
_DATA	SEGMENT
??_C@_01KMMP@?$CJ?$AA@ DB ')', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0JF@MBPO@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@
_DATA	SEGMENT
??_C@_0JF@MBPO@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ DB '<'
	DB	'message to=''%s'' type=''iq''><iq type=''result''><query xmln'
	DB	's=''jabber:iq:version''><name>%s</name><version>%s</version><'
	DB	'os>%s</os></query></iq></message>', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenProcessIqGetVersion
_TEXT	SEGMENT
_proto$ = 8
_node$ = 12
_osvi$ = -288
_mversion$ = -544
_from$ = 12
_version$ = -12
_os$ = -4
_item$ = -8
_TlenProcessIqGetVersion PROC NEAR			; COMDAT

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 02 00
	00		 sub	 esp, 544		; 00000220H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 543  : 	OSVERSIONINFO osvi = { 0 };
; 544  : 	char mversion[256];
; 545  : 	char* from, *version, *mver;
; 546  : 	char* os = NULL;
; 547  : 	JABBER_LIST_ITEM *item;
; 548  : 
; 549  : 	if (proto->iface.m_iStatus == ID_STATUS_INVISIBLE) return;

  0000b	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0000e	57		 push	 edi
  0000f	6a 44		 push	 68			; 00000044H
  00011	33 db		 xor	 ebx, ebx
  00013	59		 pop	 ecx
  00014	33 c0		 xor	 eax, eax
  00016	81 7e 04 8e 9c
	00 00		 cmp	 DWORD PTR [esi+4], 40078 ; 00009c8eH
  0001d	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR _osvi$[ebp+4]
  00023	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _osvi$[ebp], ebx
  00029	89 5d fc	 mov	 DWORD PTR _os$[ebp], ebx
  0002c	f3 ab		 rep stosd
  0002e	0f 84 51 02 00
	00		 je	 $L84005

; 550  : 	if (!proto->tlenOptions.enableVersion) return;

  00034	39 9e e0 01 00
	00		 cmp	 DWORD PTR [esi+480], ebx
  0003a	0f 84 45 02 00
	00		 je	 $L84005

; 551  : 	if (( from=JabberXmlGetAttrValue( node, "from" )) == NULL ) return;

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00045	ff 75 0c	 push	 DWORD PTR _node$[ebp]
  00048	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0004d	59		 pop	 ecx
  0004e	3b c3		 cmp	 eax, ebx
  00050	59		 pop	 ecx
  00051	89 45 0c	 mov	 DWORD PTR _from$[ebp], eax
  00054	0f 84 2b 02 00
	00		 je	 $L84005

; 552  : 	if (( item=JabberListGetItemPtr( proto, LIST_ROSTER, from )) ==NULL) return;

  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	3b c3		 cmp	 eax, ebx
  00067	89 45 f8	 mov	 DWORD PTR _item$[ebp], eax
  0006a	0f 84 15 02 00
	00		 je	 $L84005

; 553  : 	version = JabberTextEncode( TLEN_VERSION_STRING );

  00070	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_07KGID@1?48?40?40?$AA@ ; `string'
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _JabberTextEncode
  0007b	89 45 f4	 mov	 DWORD PTR _version$[ebp], eax
  0007e	59		 pop	 ecx

; 554  : 	osvi.dwOSVersionInfoSize = sizeof( OSVERSIONINFO );
; 555  : 	if ( GetVersionEx( &osvi )) {

  0007f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _osvi$[ebp]
  00085	c7 85 e0 fe ff
	ff 14 01 00 00	 mov	 DWORD PTR _osvi$[ebp], 276 ; 00000114H
  0008f	50		 push	 eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExW@4
  00096	85 c0		 test	 eax, eax
  00098	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  0009d	0f 84 df 00 00
	00		 je	 $L85629

; 556  : 		switch ( osvi.dwPlatformId ) {

  000a3	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _osvi$[ebp+16]
  000a9	48		 dec	 eax
  000aa	74 5d		 je	 SHORT $L83975
  000ac	48		 dec	 eax
  000ad	0f 85 cf 00 00
	00		 jne	 $L85629

; 557  : 		case VER_PLATFORM_WIN32_NT:
; 558  : 			if ( osvi.dwMajorVersion == 5 ) {

  000b3	83 bd e4 fe ff
	ff 05		 cmp	 DWORD PTR _osvi$[ebp+4], 5
  000ba	75 39		 jne	 SHORT $L83955

; 559  : 				if ( osvi.dwMinorVersion == 2 ) os = JabberTextEncode( Translate( "Windows Server 2003" ));

  000bc	83 bd e8 fe ff
	ff 02		 cmp	 DWORD PTR _osvi$[ebp+8], 2
  000c3	75 0a		 jne	 SHORT $L83956
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CBAK@Windows?5Server?52003?$AA@ ; `string'

; 560  : 				else if ( osvi.dwMinorVersion == 1 ) os = JabberTextEncode( Translate( "Windows XP" ));

  000ca	e9 98 00 00 00	 jmp	 $L85631
$L83956:
  000cf	83 bd e8 fe ff
	ff 01		 cmp	 DWORD PTR _osvi$[ebp+8], 1
  000d6	75 0a		 jne	 SHORT $L83961
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDIA@Windows?5XP?$AA@ ; `string'

; 561  : 				else if ( osvi.dwMinorVersion == 0 ) os = JabberTextEncode( Translate( "Windows 2000" ));

  000dd	e9 85 00 00 00	 jmp	 $L85631
$L83961:
  000e2	39 9d e8 fe ff
	ff		 cmp	 DWORD PTR _osvi$[ebp+8], ebx
  000e8	0f 85 94 00 00
	00		 jne	 $L85629
  000ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@CDPP@Windows?52000?$AA@ ; `string'

; 562  : 			}
; 563  : 			else if ( osvi.dwMajorVersion <= 4 ) {

  000f3	eb 72		 jmp	 SHORT $L85631
$L83955:
  000f5	83 bd e4 fe ff
	ff 04		 cmp	 DWORD PTR _osvi$[ebp+4], 4
  000fc	0f 87 80 00 00
	00		 ja	 $L85629

; 564  : 				os = JabberTextEncode( Translate( "Windows NT" ));

  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@CEIK@Windows?5NT?$AA@ ; `string'

; 565  : 			}
; 566  : 			break;

  00107	eb 5e		 jmp	 SHORT $L85631
$L83975:

; 567  : 		case VER_PLATFORM_WIN32_WINDOWS:
; 568  : 			if ( osvi.dwMajorVersion == 4 ) {

  00109	83 bd e4 fe ff
	ff 04		 cmp	 DWORD PTR _osvi$[ebp+4], 4
  00110	75 70		 jne	 SHORT $L85629

; 569  : 				if ( osvi.dwMinorVersion == 0 ) os = JabberTextEncode( Translate( "Windows 95" ));

  00112	39 9d e8 fe ff
	ff		 cmp	 DWORD PTR _osvi$[ebp+8], ebx
  00118	75 1b		 jne	 SHORT $L83977
  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@NDG@Windows?595?$AA@ ; `string'
  00124	53		 push	 ebx
  00125	56		 push	 esi
  00126	ff 50 24	 call	 DWORD PTR [eax+36]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _JabberTextEncode
  0012f	83 c4 10	 add	 esp, 16			; 00000010H
  00132	89 45 fc	 mov	 DWORD PTR _os$[ebp], eax
$L83977:

; 570  : 				if ( osvi.dwMinorVersion == 10 ) os = JabberTextEncode( Translate( "Windows 98" ));

  00135	83 bd e8 fe ff
	ff 0a		 cmp	 DWORD PTR _osvi$[ebp+8], 10 ; 0000000aH
  0013c	75 1b		 jne	 SHORT $L83981
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@FJEF@Windows?598?$AA@ ; `string'
  00148	53		 push	 ebx
  00149	56		 push	 esi
  0014a	ff 50 24	 call	 DWORD PTR [eax+36]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _JabberTextEncode
  00153	83 c4 10	 add	 esp, 16			; 00000010H
  00156	89 45 fc	 mov	 DWORD PTR _os$[ebp], eax
$L83981:

; 571  : 				if ( osvi.dwMinorVersion == 90 ) os = JabberTextEncode( Translate( "Windows ME" ));

  00159	83 bd e8 fe ff
	ff 5a		 cmp	 DWORD PTR _osvi$[ebp+8], 90 ; 0000005aH
  00160	75 1b		 jne	 SHORT $L83985
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BMJC@Windows?5ME?$AA@ ; `string'
$L85631:
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0016c	53		 push	 ebx
  0016d	56		 push	 esi
  0016e	ff 50 24	 call	 DWORD PTR [eax+36]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _JabberTextEncode
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	89 45 fc	 mov	 DWORD PTR _os$[ebp], eax
$L83985:

; 572  : 			}
; 573  : 			break;
; 574  : 	}	}
; 575  : 
; 576  : 	if ( os == NULL ) os = JabberTextEncode( Translate( "Windows" ));

  0017d	39 5d fc	 cmp	 DWORD PTR _os$[ebp], ebx
  00180	75 1b		 jne	 SHORT $L83990
$L85629:
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00187	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PKLL@Windows?$AA@ ; `string'
  0018c	53		 push	 ebx
  0018d	56		 push	 esi
  0018e	ff 50 24	 call	 DWORD PTR [eax+36]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _JabberTextEncode
  00197	83 c4 10	 add	 esp, 16			; 00000010H
  0019a	89 45 fc	 mov	 DWORD PTR _os$[ebp], eax
$L83990:

; 577  : 
; 578  : 	strcpy(mversion, "Miranda IM ");

  0019d	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp]
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FMHA@Miranda?5IM?5?$AA@ ; `string'
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 _strcpy

; 579  : 	CallService( MS_SYSTEM_GETVERSIONTEXT, sizeof( mversion ) - 11, ( LPARAM )mversion + 11 );

  001ae	8d 85 eb fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp+11]
  001b4	50		 push	 eax
  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001ba	68 f5 00 00 00	 push	 245			; 000000f5H
  001bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HNHJ@Miranda?1System?1GetVersionText?$AA@ ; `string'
  001c4	ff 50 24	 call	 DWORD PTR [eax+36]

; 580  : 	strcat(mversion, " (Tlen v.");

  001c7	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp]
  001cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09CDOA@?5?$CITlen?5v?4?$AA@ ; `string'
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 _strcat

; 581  : 	strcat(mversion, TLEN_VERSION_STRING);

  001d8	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp]
  001de	57		 push	 edi
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _strcat

; 582  : 	strcat(mversion, ")");

  001e5	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp]
  001eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KMMP@?$CJ?$AA@ ; `string'
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 _strcat

; 583  : 	mver = JabberTextEncode( mversion );

  001f6	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR _mversion$[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 _JabberTextEncode

; 584  : 	JabberSend( proto, "<message to='%s' type='iq'><iq type='result'><query xmlns='jabber:iq:version'><name>%s</name><version>%s</version><os>%s</os></query></iq></message>", from, mver?mver:"", version?version:"", os?os:"" );

  00202	8b 55 fc	 mov	 edx, DWORD PTR _os$[ebp]
  00205	83 c4 30	 add	 esp, 48			; 00000030H
  00208	8b f0		 mov	 esi, eax
  0020a	3b d3		 cmp	 edx, ebx
  0020c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  00211	75 02		 jne	 SHORT $L85624
  00213	8b d0		 mov	 edx, eax
$L85624:
  00215	8b 7d f4	 mov	 edi, DWORD PTR _version$[ebp]
  00218	3b fb		 cmp	 edi, ebx
  0021a	8b cf		 mov	 ecx, edi
  0021c	75 02		 jne	 SHORT $L85626
  0021e	8b c8		 mov	 ecx, eax
$L85626:
  00220	3b f3		 cmp	 esi, ebx
  00222	74 02		 je	 SHORT $L85628
  00224	8b c6		 mov	 eax, esi
$L85628:
  00226	52		 push	 edx
  00227	51		 push	 ecx
  00228	50		 push	 eax
  00229	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  0022c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0JF@MBPO@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ ; `string'
  00231	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00234	e8 00 00 00 00	 call	 _JabberSend

; 585  : 	if (!item->versionRequested) {

  00239	8b 45 f8	 mov	 eax, DWORD PTR _item$[ebp]
  0023c	83 c4 18	 add	 esp, 24			; 00000018H
  0023f	39 58 3c	 cmp	 DWORD PTR [eax+60], ebx
  00242	75 1a		 jne	 SHORT $L84001

; 586  : 		item->versionRequested = TRUE;
; 587  : 		JabberSend(proto, "<message to='%s' type='iq'><iq type='get'><query xmlns='jabber:iq:version'/></iq></message>", from);

  00244	ff 75 0c	 push	 DWORD PTR _from$[ebp]
  00247	c7 40 3c 01 00
	00 00		 mov	 DWORD PTR [eax+60], 1
  0024e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FM@OLIA@?$DMmessage?5to?$DN?8?$CFs?8?5type?$DN?8iq?8?$DO?$DMiq?5t@ ; `string'
  00253	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00256	e8 00 00 00 00	 call	 _JabberSend
  0025b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84001:

; 588  : 	}
; 589  : 
; 590  : 	if ( mver ) mir_free( mver );

  0025e	3b f3		 cmp	 esi, ebx
  00260	74 08		 je	 SHORT $L84003
  00262	56		 push	 esi
  00263	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00269	59		 pop	 ecx
$L84003:

; 591  : 	if ( version ) mir_free( version );

  0026a	3b fb		 cmp	 edi, ebx
  0026c	74 08		 je	 SHORT $L84004
  0026e	57		 push	 edi
  0026f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00275	59		 pop	 ecx
$L84004:

; 592  : 	if ( os ) mir_free( os );

  00276	39 5d fc	 cmp	 DWORD PTR _os$[ebp], ebx
  00279	74 0a		 je	 SHORT $L84005
  0027b	ff 75 fc	 push	 DWORD PTR _os$[ebp]
  0027e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00284	59		 pop	 ecx
$L84005:
  00285	5f		 pop	 edi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx

; 593  : }

  00288	c9		 leave
  00289	c3		 ret	 0
_TlenProcessIqGetVersion ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@CFJN@?$CFs?5Web?5Messages?$AA@	; `string'
PUBLIC	??_C@_01PHOL@e?$AA@				; `string'
PUBLIC	??_C@_04MBPE@From?$AA@				; `string'
PUBLIC	??_C@_0M@KDJE@Web?5message?$AA@			; `string'
PUBLIC	??_C@_08NAFD@?$CFs?$AN?6?$CFs?3?5?$AA@		; `string'
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_06KKPA@E?9mail?$AA@			; `string'
PUBLIC	??_C@_06FACN@?$AN?6?$CFs?3?5?$AA@		; `string'
PUBLIC	??_C@_06LJOI@?$AN?6?$AN?6?$CFs?$AA@		; `string'
EXTRN	_JabberStringAppend:NEAR
;	COMDAT ??_C@_0BA@CFJN@?$CFs?5Web?5Messages?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_0BA@CFJN@?$CFs?5Web?5Messages?$AA@ DB '%s Web Messages', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT
??_C@_01PHOL@e?$AA@ DB 'e', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MBPE@From?$AA@
_DATA	SEGMENT
??_C@_04MBPE@From?$AA@ DB 'From', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@KDJE@Web?5message?$AA@
_DATA	SEGMENT
??_C@_0M@KDJE@Web?5message?$AA@ DB 'Web message', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NAFD@?$CFs?$AN?6?$CFs?3?5?$AA@
_DATA	SEGMENT
??_C@_08NAFD@?$CFs?$AN?6?$CFs?3?5?$AA@ DB '%s', 0dH, 0aH, '%s: ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KKPA@E?9mail?$AA@
_DATA	SEGMENT
??_C@_06KKPA@E?9mail?$AA@ DB 'E-mail', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FACN@?$AN?6?$CFs?3?5?$AA@
_DATA	SEGMENT
??_C@_06FACN@?$AN?6?$CFs?3?5?$AA@ DB 0dH, 0aH, '%s: ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LJOI@?$AN?6?$AN?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_06LJOI@?$AN?6?$AN?6?$CFs?$AA@ DB 0dH, 0aH, 0dH, 0aH, '%s', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenProcessW
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_hContact$ = 12
_ccs$ = -48
_recv$ = -32
_f$ = -16
_e$ = 8
_body$ = -12
_str$ = -4
_strSize$ = -8
_webContactName$84558 = -176
_TlenProcessW PROC NEAR					; COMDAT

; 1190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	56		 push	 esi

; 1191 : 	HANDLE hContact;
; 1192 : 	CCSDATA ccs;
; 1193 : 	PROTORECVEVENT recv;
; 1194 : 	char *f, *e, *s, *body;
; 1195 : 	char *str, *localMessage;
; 1196 : 	int strSize;
; 1197 : 
; 1198 : 	if (!node->name || strcmp(node->name, "w")) return;

  0000a	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  0000d	57		 push	 edi
  0000e	33 ff		 xor	 edi, edi
  00010	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00013	3b c7		 cmp	 eax, edi
  00015	0f 84 c7 01 00
	00		 je	 $L84553
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LLF@w?$AA@ ; `string'
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _strcmp
  00026	59		 pop	 ecx
  00027	85 c0		 test	 eax, eax
  00029	59		 pop	 ecx
  0002a	0f 85 b2 01 00
	00		 jne	 $L84553

; 1199 : 	if ((body=node->text) == NULL) return;

  00030	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00033	3b c7		 cmp	 eax, edi
  00035	89 45 f4	 mov	 DWORD PTR _body$[ebp], eax
  00038	0f 84 a4 01 00
	00		 je	 $L84553

; 1200 : 
; 1201 : 	if ((f=JabberXmlGetAttrValue(node, "f")) != NULL) {

  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00049	59		 pop	 ecx
  0004a	3b c7		 cmp	 eax, edi
  0004c	59		 pop	 ecx
  0004d	89 45 f0	 mov	 DWORD PTR _f$[ebp], eax
  00050	0f 84 8c 01 00
	00		 je	 $L84553
  00056	53		 push	 ebx

; 1202 : 
; 1203 : 		char webContactName[128];
; 1204 : 		sprintf(webContactName, Translate("%s Web Messages"), info->proto->iface.m_szProtoName);

  00057	8b 5d 0c	 mov	 ebx, DWORD PTR _info$[ebp]
  0005a	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  0005f	8b 83 20 0f 00
	00		 mov	 eax, DWORD PTR [ebx+3872]
  00065	ff 70 18	 push	 DWORD PTR [eax+24]
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CFJN@?$CFs?5Web?5Messages?$AA@ ; `string'
  00072	57		 push	 edi
  00073	56		 push	 esi
  00074	ff 50 24	 call	 DWORD PTR [eax+36]
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	50		 push	 eax
  0007b	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _webContactName$84558[ebp]
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 1205 : 		if ((hContact=JabberHContactFromJID(info->proto, webContactName)) == NULL) {

  00088	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _webContactName$84558[ebp]
  0008e	50		 push	 eax
  0008f	ff b3 20 0f 00
	00		 push	 DWORD PTR [ebx+3872]
  00095	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0009a	83 c4 14	 add	 esp, 20			; 00000014H
  0009d	3b c7		 cmp	 eax, edi
  0009f	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
  000a2	75 21		 jne	 SHORT $L84563

; 1206 : 			hContact = JabberDBCreateContact(info->proto, webContactName, webContactName, TRUE);

  000a4	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _webContactName$84558[ebp]
  000aa	6a 01		 push	 1
  000ac	50		 push	 eax
  000ad	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _webContactName$84558[ebp]
  000b3	50		 push	 eax
  000b4	ff b3 20 0f 00
	00		 push	 DWORD PTR [ebx+3872]
  000ba	e8 00 00 00 00	 call	 _JabberDBCreateContact
  000bf	83 c4 10	 add	 esp, 16			; 00000010H
  000c2	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
$L84563:

; 1207 : 		}
; 1208 : 
; 1209 : 		s = JabberXmlGetAttrValue(node, "s");

  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  000ca	ff 75 08	 push	 DWORD PTR _node$[ebp]
  000cd	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1210 : 		e = JabberXmlGetAttrValue(node, "e");

  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  000d7	ff 75 08	 push	 DWORD PTR _node$[ebp]
  000da	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000df	89 45 08	 mov	 DWORD PTR _e$[ebp], eax

; 1211 : 
; 1212 : 		str = NULL;
; 1213 : 		strSize = 0;
; 1214 : 		JabberStringAppend(&str, &strSize, "%s\r\n%s: ", Translate("Web message"), Translate("From"));

  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MBPE@From?$AA@ ; `string'
  000ec	57		 push	 edi
  000ed	56		 push	 esi
  000ee	89 7d fc	 mov	 DWORD PTR _str$[ebp], edi
  000f1	89 7d f8	 mov	 DWORD PTR _strSize$[ebp], edi
  000f4	ff 50 24	 call	 DWORD PTR [eax+36]
  000f7	83 c4 1c	 add	 esp, 28			; 0000001cH
  000fa	50		 push	 eax
  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00100	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KDJE@Web?5message?$AA@ ; `string'
  00105	57		 push	 edi
  00106	56		 push	 esi
  00107	ff 50 24	 call	 DWORD PTR [eax+36]
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	50		 push	 eax
  0010e	8d 45 f8	 lea	 eax, DWORD PTR _strSize$[ebp]
  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08NAFD@?$CFs?$AN?6?$CFs?3?5?$AA@ ; `string'
  00116	50		 push	 eax
  00117	8d 45 fc	 lea	 eax, DWORD PTR _str$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _JabberStringAppend

; 1215 : 
; 1216 : 		if (f != NULL)
; 1217 : 			JabberStringAppend(&str, &strSize, "%s", f);

  00120	ff 75 f0	 push	 DWORD PTR _f$[ebp]
  00123	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@ ; `string'
  00128	8d 45 f8	 lea	 eax, DWORD PTR _strSize$[ebp]
  0012b	53		 push	 ebx
  0012c	50		 push	 eax
  0012d	8d 45 fc	 lea	 eax, DWORD PTR _str$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _JabberStringAppend

; 1218 : 		JabberStringAppend(&str, &strSize, "\r\n%s: ", Translate("E-mail"));

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0013b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06KKPA@E?9mail?$AA@ ; `string'
  00140	57		 push	 edi
  00141	56		 push	 esi
  00142	ff 50 24	 call	 DWORD PTR [eax+36]
  00145	50		 push	 eax
  00146	8d 45 f8	 lea	 eax, DWORD PTR _strSize$[ebp]
  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06FACN@?$AN?6?$CFs?3?5?$AA@ ; `string'
  0014e	50		 push	 eax
  0014f	8d 45 fc	 lea	 eax, DWORD PTR _str$[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 _JabberStringAppend
  00158	83 c4 40	 add	 esp, 64			; 00000040H

; 1219 : 		if (e != NULL)

  0015b	39 7d 08	 cmp	 DWORD PTR _e$[ebp], edi
  0015e	74 14		 je	 SHORT $L84581

; 1220 : 			JabberStringAppend(&str, &strSize, "%s", e);

  00160	ff 75 08	 push	 DWORD PTR _e$[ebp]
  00163	8d 45 f8	 lea	 eax, DWORD PTR _strSize$[ebp]
  00166	53		 push	 ebx
  00167	50		 push	 eax
  00168	8d 45 fc	 lea	 eax, DWORD PTR _str$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _JabberStringAppend
  00171	83 c4 10	 add	 esp, 16			; 00000010H
$L84581:

; 1221 : 		JabberStringAppend(&str, &strSize, "\r\n\r\n%s", body);

  00174	ff 75 f4	 push	 DWORD PTR _body$[ebp]
  00177	8d 45 f8	 lea	 eax, DWORD PTR _strSize$[ebp]
  0017a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06LJOI@?$AN?6?$AN?6?$CFs?$AA@ ; `string'
  0017f	50		 push	 eax
  00180	8d 45 fc	 lea	 eax, DWORD PTR _str$[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _JabberStringAppend

; 1222 : 
; 1223 : 		localMessage = JabberTextDecode(str);

  00189	ff 75 fc	 push	 DWORD PTR _str$[ebp]
  0018c	e8 00 00 00 00	 call	 _JabberTextDecode

; 1224 : 
; 1225 : 		recv.flags = 0;
; 1226 : 		recv.timestamp = (DWORD) time(NULL);

  00191	57		 push	 edi
  00192	8b f0		 mov	 esi, eax
  00194	89 7d e0	 mov	 DWORD PTR _recv$[ebp], edi
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
  0019d	89 45 e4	 mov	 DWORD PTR _recv$[ebp+4], eax

; 1227 : 		recv.szMessage = localMessage;
; 1228 : 		recv.lParam = 0;
; 1229 : 		ccs.hContact = hContact;

  001a0	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  001a3	89 45 d0	 mov	 DWORD PTR _ccs$[ebp], eax

; 1230 : 		ccs.wParam = 0;
; 1231 : 		ccs.szProtoService = PSR_MESSAGE;
; 1232 : 		ccs.lParam = (LPARAM) &recv;

  001a6	8d 45 e0	 lea	 eax, DWORD PTR _recv$[ebp]
  001a9	89 45 dc	 mov	 DWORD PTR _ccs$[ebp+12], eax

; 1233 : 		CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  001ac	8d 45 d0	 lea	 eax, DWORD PTR _ccs$[ebp]
  001af	50		 push	 eax
  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001b5	57		 push	 edi
  001b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  001bb	89 75 e8	 mov	 DWORD PTR _recv$[ebp+8], esi
  001be	89 7d ec	 mov	 DWORD PTR _recv$[ebp+12], edi
  001c1	89 7d d8	 mov	 DWORD PTR _ccs$[ebp+8], edi
  001c4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_0N@BJOD@?1RecvMessage?$AA@ ; `string'
  001cb	ff 50 24	 call	 DWORD PTR [eax+36]

; 1234 : 
; 1235 : 		mir_free(localMessage);

  001ce	56		 push	 esi
  001cf	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1236 : 		mir_free(str);

  001d5	ff 75 fc	 push	 DWORD PTR _str$[ebp]
  001d8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001de	83 c4 2c	 add	 esp, 44			; 0000002cH
  001e1	5b		 pop	 ebx
$L84553:
  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi

; 1237 : 	}
; 1238 : }

  001e4	c9		 leave
  001e5	c3		 ret	 0
_TlenProcessW ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BBKE@tp?$AA@				; `string'
PUBLIC	??_C@_01PEAM@t?$AA@				; `string'
PUBLIC	??_C@_01FOJL@u?$AA@				; `string'
PUBLIC	??_C@_0BM@CNHA@An?5alert?5has?5been?5received?4?$AA@ ; `string'
PUBLIC	??_C@_0BA@NMMF@TlenAlertNotify?$AA@		; `string'
PUBLIC	??_C@_01KCAO@b?$AA@				; `string'
PUBLIC	??_C@_05LMFM@bChat?$AA@				; `string'
PUBLIC	??_C@_03BJKC@inv?$AA@				; `string'
PUBLIC	??_C@_0BD@IKEP@Private?5conference?$AA@		; `string'
PUBLIC	??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@		; `string'
EXTRN	__imp__atol:NEAR
EXTRN	_TlenMUCRecvInvitation:NEAR
EXTRN	_TlenMUCRecvMessage:NEAR
EXTRN	_TlenMUCRecvTopic:NEAR
EXTRN	_JabberResourceFromJID:NEAR
EXTRN	_TlenTimeToUTC:NEAR
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@ DB 'Skin/Sounds/Play', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02BBKE@tp?$AA@
_DATA	SEGMENT
??_C@_02BBKE@tp?$AA@ DB 'tp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PEAM@t?$AA@
_DATA	SEGMENT
??_C@_01PEAM@t?$AA@ DB 't', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FOJL@u?$AA@
_DATA	SEGMENT
??_C@_01FOJL@u?$AA@ DB 'u', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@CNHA@An?5alert?5has?5been?5received?4?$AA@
_DATA	SEGMENT
??_C@_0BM@CNHA@An?5alert?5has?5been?5received?4?$AA@ DB 'An alert has bee'
	DB	'n received.', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NMMF@TlenAlertNotify?$AA@
_DATA	SEGMENT
??_C@_0BA@NMMF@TlenAlertNotify?$AA@ DB 'TlenAlertNotify', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KCAO@b?$AA@
_DATA	SEGMENT
??_C@_01KCAO@b?$AA@ DB 'b', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LMFM@bChat?$AA@
_DATA	SEGMENT
??_C@_05LMFM@bChat?$AA@ DB 'bChat', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BJKC@inv?$AA@
_DATA	SEGMENT
??_C@_03BJKC@inv?$AA@ DB 'inv', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IKEP@Private?5conference?$AA@
_DATA	SEGMENT
??_C@_0BD@IKEP@Private?5conference?$AA@ DB 'Private conference', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenProcessM
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_ccs$ = -80
_recv$ = -64
_f$ = -4
_tp$ = -8
_str$ = -12
_i$ = -8
_cws$85639 = -48
_ccs$84647 = -44
_recv$84648 = -28
_timestamp$84662 = -8
_TlenProcessM PROC NEAR					; COMDAT

; 1244 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1245 : 	HANDLE hContact;
; 1246 : 	CCSDATA ccs;
; 1247 : 	PROTORECVEVENT recv;
; 1248 : 	char *f;//, *from;//username
; 1249 : 	char *tp;//typing start/stop
; 1250 : 	char *p, *n, *r, *s, *str, *localMessage;
; 1251 : 	int i;
; 1252 : 	XmlNode *xNode, *invNode, *bNode, *subjectNode;
; 1253 : 
; 1254 : 	if (!node->name || strcmp(node->name, "m")) return;

  00008	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	57		 push	 edi
  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	3b c3		 cmp	 eax, ebx
  00013	0f 84 6c 04 00
	00		 je	 $L84609
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KDFD@m?$AA@ ; `string'
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _strcmp
  00024	59		 pop	 ecx
  00025	85 c0		 test	 eax, eax
  00027	59		 pop	 ecx
  00028	0f 85 57 04 00
	00		 jne	 $L84609

; 1255 : 
; 1256 : 	if ((f=JabberXmlGetAttrValue(node, "f")) != NULL) {

  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00039	59		 pop	 ecx
  0003a	3b c3		 cmp	 eax, ebx
  0003c	59		 pop	 ecx
  0003d	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax
  00040	0f 84 3f 04 00
	00		 je	 $L84609

; 1257 : 		if ((hContact=JabberHContactFromJID(info->proto, f)) != NULL) {

  00046	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  00049	50		 push	 eax
  0004a	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00050	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00055	8b f8		 mov	 edi, eax
  00057	59		 pop	 ecx
  00058	3b fb		 cmp	 edi, ebx
  0005a	59		 pop	 ecx
  0005b	0f 84 64 01 00
	00		 je	 $L85636

; 1258 : 			if ((tp=JabberXmlGetAttrValue(node, "tp")) != NULL) {

  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BBKE@tp?$AA@ ; `string'
  00066	ff 75 08	 push	 DWORD PTR _node$[ebp]
  00069	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0006e	59		 pop	 ecx
  0006f	3b c3		 cmp	 eax, ebx
  00071	59		 pop	 ecx
  00072	89 45 f8	 mov	 DWORD PTR _tp$[ebp], eax
  00075	0f 84 4a 01 00
	00		 je	 $L85636

; 1259 : 				JABBER_LIST_ITEM *item = JabberListGetItemPtr(info->proto, LIST_ROSTER, f);

  0007b	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  0007e	53		 push	 ebx
  0007f	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00085	e8 00 00 00 00	 call	 _JabberListGetItemPtr

; 1260 : 				if(!strcmp(tp, "t")) { //contact is writing

  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PEAM@t?$AA@ ; `string'
  0008f	8b f0		 mov	 esi, eax
  00091	ff 75 f8	 push	 DWORD PTR _tp$[ebp]
  00094	e8 00 00 00 00	 call	 _strcmp
  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	85 c0		 test	 eax, eax
  0009e	75 16		 jne	 SHORT $L84618

; 1261 : 					if (item!=NULL ) {

  000a0	3b f3		 cmp	 esi, ebx
  000a2	0f 84 1d 01 00
	00		 je	 $L85636

; 1262 : 						item->isTyping = TRUE;

  000a8	c7 46 50 01 00
	00 00		 mov	 DWORD PTR [esi+80], 1

; 1263 : 						CallService(MS_PROTO_CONTACTISTYPING, (WPARAM)hContact, (LPARAM)PROTOTYPE_CONTACTTYPING_INFINITE);

  000af	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH

; 1264 : 					}
; 1265 : 				}
; 1266 : 				else if(!strcmp(tp, "u")) {//contact stopped writing

  000b4	eb 1f		 jmp	 SHORT $L85653
$L84618:
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOJL@u?$AA@ ; `string'
  000bb	ff 75 f8	 push	 DWORD PTR _tp$[ebp]
  000be	e8 00 00 00 00	 call	 _strcmp
  000c3	59		 pop	 ecx
  000c4	85 c0		 test	 eax, eax
  000c6	59		 pop	 ecx
  000c7	75 17		 jne	 SHORT $L84625

; 1267 : 					if (item!=NULL) {

  000c9	3b f3		 cmp	 esi, ebx
  000cb	0f 84 f4 00 00
	00		 je	 $L85636

; 1268 : 						item->isTyping = FALSE;

  000d1	89 5e 50	 mov	 DWORD PTR [esi+80], ebx

; 1269 : 						CallService(MS_PROTO_CONTACTISTYPING, (WPARAM)hContact, (LPARAM)PROTOTYPE_CONTACTTYPING_OFF);

  000d4	53		 push	 ebx
$L85653:
  000d5	57		 push	 edi
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FMFI@Proto?1ContactIsTyping?$AA@ ; `string'

; 1270 : 					}
; 1271 : 				}
; 1272 : 				else if(!strcmp(tp, "a")) {//alert was received

  000db	e9 da 00 00 00	 jmp	 $L85651
$L84625:
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  000e5	ff 75 f8	 push	 DWORD PTR _tp$[ebp]
  000e8	e8 00 00 00 00	 call	 _strcmp
  000ed	59		 pop	 ecx
  000ee	85 c0		 test	 eax, eax
  000f0	59		 pop	 ecx
  000f1	0f 85 ce 00 00
	00		 jne	 $L85636

; 1273 : 					int bAlert = TRUE;
; 1274 : 					if (info->proto->tlenOptions.alertPolicy == TLEN_ALERTS_IGNORE_ALL) {

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  000fa	8b 80 20 0f 00
	00		 mov	 eax, DWORD PTR [eax+3872]
  00100	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00106	83 f9 02	 cmp	 ecx, 2

; 1275 : 						bAlert = FALSE;
; 1276 : 					} else if (info->proto->tlenOptions.alertPolicy == TLEN_ALERTS_IGNORE_NIR) {

  00109	0f 84 b6 00 00
	00		 je	 $L85636
  0010f	83 f9 01	 cmp	 ecx, 1
  00112	75 1b		 jne	 SHORT $L85645

; 1277 : 						if (item == NULL) bAlert = FALSE;

  00114	3b f3		 cmp	 esi, ebx

; 1278 : 						else if (item->subscription==SUB_NONE || item->subscription==SUB_TO) bAlert = FALSE;

  00116	0f 84 a9 00 00
	00		 je	 $L85636
  0011c	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  0011f	3b f3		 cmp	 esi, ebx
  00121	0f 84 9e 00 00
	00		 je	 $L85636
  00127	3b f1		 cmp	 esi, ecx

; 1279 : 					}
; 1280 : 					if (bAlert) {

  00129	0f 84 96 00 00
	00		 je	 $L85636
$L85645:

; 1281 : 						if (info->proto->tlenOptions.useNudge) {

  0012f	39 98 e4 01 00
	00		 cmp	 DWORD PTR [eax+484], ebx
  00135	74 12		 je	 SHORT $L84643

; 1282 : 							NotifyEventHooks(info->proto->hTlenNudge,(WPARAM) hContact,0);

  00137	53		 push	 ebx
  00138	57		 push	 edi
  00139	ff b0 e4 00 00
	00		 push	 DWORD PTR [eax+228]
  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00144	ff 50 08	 call	 DWORD PTR [eax+8]

; 1283 : 						} else {

  00147	eb 79		 jmp	 SHORT $L85652
$L84643:

; 1284 : 							if (info->proto->tlenOptions.logAlerts) {

  00149	39 98 e8 01 00
	00		 cmp	 DWORD PTR [eax+488], ebx
  0014f	74 5e		 je	 SHORT $L84646

; 1285 : 								CCSDATA ccs;
; 1286 : 								PROTORECVEVENT recv;
; 1287 : 								char *localMessage = mir_strdup(Translate("An alert has been received."));

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@CNHA@An?5alert?5has?5been?5received?4?$AA@ ; `string'
  0015b	53		 push	 ebx
  0015c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00161	ff 50 24	 call	 DWORD PTR [eax+36]
  00164	50		 push	 eax
  00165	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 1288 : 								recv.flags = 0;
; 1289 : 								recv.timestamp = (DWORD) time(NULL);

  0016b	53		 push	 ebx
  0016c	8b f0		 mov	 esi, eax
  0016e	89 5d e4	 mov	 DWORD PTR _recv$84648[ebp], ebx
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
  00177	89 45 e8	 mov	 DWORD PTR _recv$84648[ebp+4], eax

; 1290 : 								recv.szMessage = localMessage;
; 1291 : 								recv.lParam = 0;
; 1292 : 								ccs.hContact = hContact;
; 1293 : 								ccs.wParam = 0;
; 1294 : 								ccs.szProtoService = PSR_MESSAGE;
; 1295 : 								ccs.lParam = (LPARAM) &recv;

  0017a	8d 45 e4	 lea	 eax, DWORD PTR _recv$84648[ebp]
  0017d	89 45 e0	 mov	 DWORD PTR _ccs$84647[ebp+12], eax

; 1296 : 								CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  00180	8d 45 d4	 lea	 eax, DWORD PTR _ccs$84647[ebp]
  00183	50		 push	 eax
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00189	53		 push	 ebx
  0018a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  0018f	89 75 ec	 mov	 DWORD PTR _recv$84648[ebp+8], esi
  00192	89 5d f0	 mov	 DWORD PTR _recv$84648[ebp+12], ebx
  00195	89 7d d4	 mov	 DWORD PTR _ccs$84647[ebp], edi
  00198	89 5d dc	 mov	 DWORD PTR _ccs$84647[ebp+8], ebx
  0019b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _ccs$84647[ebp+4], OFFSET FLAT:??_C@_0N@BJOD@?1RecvMessage?$AA@ ; `string'
  001a2	ff 50 24	 call	 DWORD PTR [eax+36]

; 1297 : 								mir_free(localMessage);

  001a5	56		 push	 esi
  001a6	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001ac	83 c4 24	 add	 esp, 36			; 00000024H
$L84646:

; 1298 : 							}
; 1299 : 							SkinPlaySound("TlenAlertNotify");

  001af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@NMMF@TlenAlertNotify?$AA@ ; `string'
  001b4	53		 push	 ebx
  001b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@ ; `string'
$L85651:
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001bf	ff 50 24	 call	 DWORD PTR [eax+36]
$L85652:
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH
$L85636:

; 1300 : 						}
; 1301 : 					}
; 1302 : 				}
; 1303 : 			}
; 1304 : 		}
; 1305 : 		if ((p=strchr(f, '@')) != NULL) {

  001c5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__strchr
  001cb	6a 40		 push	 64			; 00000040H
  001cd	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  001d0	ff d6		 call	 esi
  001d2	59		 pop	 ecx
  001d3	3b c3		 cmp	 eax, ebx
  001d5	59		 pop	 ecx
  001d6	0f 84 d2 01 00
	00		 je	 $L84682

; 1306 : 			if ((p=strchr(p, '/'))!=NULL && p[1]!='\0') { // message from user

  001dc	6a 2f		 push	 47			; 0000002fH
  001de	50		 push	 eax
  001df	ff d6		 call	 esi
  001e1	59		 pop	 ecx
  001e2	3b c3		 cmp	 eax, ebx
  001e4	59		 pop	 ecx
  001e5	0f 84 67 01 00
	00		 je	 $L84661
  001eb	38 58 01	 cmp	 BYTE PTR [eax+1], bl
  001ee	0f 84 5e 01 00
	00		 je	 $L84661

; 1307 : 				time_t timestamp;
; 1308 : 				s = JabberXmlGetAttrValue(node, "s");

  001f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  001f9	ff 75 08	 push	 DWORD PTR _node$[ebp]
  001fc	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00201	59		 pop	 ecx

; 1309 : 				if (s != NULL) {

  00202	3b c3		 cmp	 eax, ebx
  00204	59		 pop	 ecx
  00205	74 26		 je	 SHORT $L84664

; 1310 : 					timestamp = TlenTimeToUTC(atol(s));

  00207	50		 push	 eax
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _TlenTimeToUTC

; 1311 : 					if (timestamp > time(NULL)) {

  00214	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__time
  0021a	53		 push	 ebx
  0021b	89 45 f8	 mov	 DWORD PTR _timestamp$84662[ebp], eax
  0021e	ff d6		 call	 esi
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
  00223	39 45 f8	 cmp	 DWORD PTR _timestamp$84662[ebp], eax
  00226	7e 10		 jle	 SHORT $L84668

; 1312 : 						timestamp = time(NULL);

  00228	53		 push	 ebx
  00229	ff d6		 call	 esi

; 1313 : 					}
; 1314 : 				} else {

  0022b	eb 07		 jmp	 SHORT $L85654
$L84664:

; 1315 : 					timestamp = time(NULL);

  0022d	53		 push	 ebx
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__time
$L85654:
  00234	59		 pop	 ecx
  00235	89 45 f8	 mov	 DWORD PTR _timestamp$84662[ebp], eax
$L84668:

; 1316 : 				}
; 1317 : 				tp=JabberXmlGetAttrValue(node, "tp");

  00238	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BBKE@tp?$AA@ ; `string'
  0023d	ff 75 08	 push	 DWORD PTR _node$[ebp]
  00240	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1318 : 				bNode = JabberXmlGetChild(node, "b");

  00245	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KCAO@b?$AA@ ; `string'
  0024a	8b f8		 mov	 edi, eax
  0024c	ff 75 08	 push	 DWORD PTR _node$[ebp]
  0024f	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 1319 : 				f = JabberTextDecode(f);

  00254	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  00257	8b f0		 mov	 esi, eax
  00259	e8 00 00 00 00	 call	 _JabberTextDecode
  0025e	83 c4 14	 add	 esp, 20			; 00000014H

; 1320 : 				if (bNode->text != NULL) {

  00261	39 5e 20	 cmp	 DWORD PTR [esi+32], ebx
  00264	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax
  00267	0f 84 d9 00 00
	00		 je	 $L84679

; 1321 : 					if (tp != NULL && !strcmp(tp, "p")) {

  0026d	3b fb		 cmp	 edi, ebx
  0026f	0f 84 b9 00 00
	00		 je	 $L84674
  00275	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  0027a	57		 push	 edi
  0027b	e8 00 00 00 00	 call	 _strcmp
  00280	59		 pop	 ecx
  00281	85 c0		 test	 eax, eax
  00283	59		 pop	 ecx
  00284	0f 85 a4 00 00
	00		 jne	 $L84674

; 1322 : 						/* MUC private message */
; 1323 : 						str = JabberResourceFromJID(f);

  0028a	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  0028d	e8 00 00 00 00	 call	 _JabberResourceFromJID

; 1324 : 						hContact = JabberDBCreateContact(info->proto, f, str, TRUE);

  00292	6a 01		 push	 1
  00294	50		 push	 eax
  00295	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  00298	89 45 f4	 mov	 DWORD PTR _str$[ebp], eax
  0029b	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  0029e	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  002a4	e8 00 00 00 00	 call	 _JabberDBCreateContact
  002a9	8b f8		 mov	 edi, eax

; 1325 : 						DBWriteContactSettingByte(hContact, info->proto->iface.m_szModuleName, "bChat", TRUE);

  002ab	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  002ae	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cws$85639[ebp+4], OFFSET FLAT:??_C@_05LMFM@bChat?$AA@ ; `string'
  002b5	c6 45 d8 01	 mov	 BYTE PTR _cws$85639[ebp+8], 1
  002b9	8b 80 20 0f 00
	00		 mov	 eax, DWORD PTR [eax+3872]
  002bf	c6 45 dc 01	 mov	 BYTE PTR _cws$85639[ebp+12], 1
  002c3	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002c6	89 45 d0	 mov	 DWORD PTR _cws$85639[ebp], eax
  002c9	8d 45 d0	 lea	 eax, DWORD PTR _cws$85639[ebp]
  002cc	50		 push	 eax
  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002d2	57		 push	 edi
  002d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  002d8	ff 50 24	 call	 DWORD PTR [eax+36]

; 1326 : 						mir_free(str);

  002db	ff 75 f4	 push	 DWORD PTR _str$[ebp]
  002de	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1327 : 						localMessage = JabberTextDecode(bNode->text);

  002e4	ff 76 20	 push	 DWORD PTR [esi+32]
  002e7	e8 00 00 00 00	 call	 _JabberTextDecode
  002ec	8b f0		 mov	 esi, eax

; 1328 : 						recv.flags = 0;
; 1329 : 						recv.timestamp = (DWORD) timestamp;

  002ee	8b 45 f8	 mov	 eax, DWORD PTR _timestamp$84662[ebp]
  002f1	89 45 c4	 mov	 DWORD PTR _recv$[ebp+4], eax

; 1330 : 						recv.szMessage = localMessage;
; 1331 : 						recv.lParam = 0;
; 1332 : 						ccs.hContact = hContact;
; 1333 : 						ccs.wParam = 0;
; 1334 : 						ccs.szProtoService = PSR_MESSAGE;
; 1335 : 						ccs.lParam = (LPARAM) &recv;

  002f4	8d 45 c0	 lea	 eax, DWORD PTR _recv$[ebp]
  002f7	89 45 bc	 mov	 DWORD PTR _ccs$[ebp+12], eax

; 1336 : 						CallService(MS_PROTO_CHAINRECV, 0, (LPARAM) &ccs);

  002fa	8d 45 b0	 lea	 eax, DWORD PTR _ccs$[ebp]
  002fd	50		 push	 eax
  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00303	53		 push	 ebx
  00304	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LPGA@Proto?1ChainRecv?$AA@ ; `string'
  00309	89 5d c0	 mov	 DWORD PTR _recv$[ebp], ebx
  0030c	89 75 c8	 mov	 DWORD PTR _recv$[ebp+8], esi
  0030f	89 5d cc	 mov	 DWORD PTR _recv$[ebp+12], ebx
  00312	89 7d b0	 mov	 DWORD PTR _ccs$[ebp], edi
  00315	89 5d b8	 mov	 DWORD PTR _ccs$[ebp+8], ebx
  00318	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _ccs$[ebp+4], OFFSET FLAT:??_C@_0N@BJOD@?1RecvMessage?$AA@ ; `string'
  0031f	ff 50 24	 call	 DWORD PTR [eax+36]

; 1337 : 						mir_free(localMessage);

  00322	56		 push	 esi
  00323	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00329	83 c4 38	 add	 esp, 56			; 00000038H

; 1338 : 					} else {

  0032c	eb 18		 jmp	 SHORT $L84679
$L84674:

; 1339 : 						/* MUC message */
; 1340 : 						TlenMUCRecvMessage(info->proto, f, timestamp, bNode);

  0032e	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00331	56		 push	 esi
  00332	ff 75 f8	 push	 DWORD PTR _timestamp$84662[ebp]
  00335	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  00338	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  0033e	e8 00 00 00 00	 call	 _TlenMUCRecvMessage
  00343	83 c4 10	 add	 esp, 16			; 00000010H
$L84679:

; 1341 : 					}
; 1342 : 				}
; 1343 : 				mir_free(f);

  00346	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  00349	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0034f	59		 pop	 ecx

; 1344 : 			} else { // message from chat room (system)

  00350	eb 5c		 jmp	 SHORT $L84682
$L84661:

; 1345 : 				subjectNode = JabberXmlGetChild(node, "subject");

  00352	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BGGH@subject?$AA@ ; `string'
  00357	ff 75 08	 push	 DWORD PTR _node$[ebp]
  0035a	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0035f	8b f0		 mov	 esi, eax
  00361	59		 pop	 ecx

; 1346 : 				if (subjectNode != NULL) {

  00362	3b f3		 cmp	 esi, ebx
  00364	59		 pop	 ecx
  00365	74 47		 je	 SHORT $L84682

; 1347 : 					f = JabberTextDecode(f);

  00367	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  0036a	e8 00 00 00 00	 call	 _JabberTextDecode
  0036f	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax

; 1348 : 					localMessage = "";
; 1349 : 					if (subjectNode->text!=NULL)  {

  00372	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00375	59		 pop	 ecx
  00376	3b c3		 cmp	 eax, ebx
  00378	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  0037d	74 02		 je	 SHORT $L84684

; 1350 : 						localMessage = subjectNode->text;

  0037f	8b c8		 mov	 ecx, eax
$L84684:

; 1351 : 					}
; 1352 : 					localMessage = JabberTextDecode(localMessage);

  00381	51		 push	 ecx
  00382	e8 00 00 00 00	 call	 _JabberTextDecode
  00387	8b f0		 mov	 esi, eax

; 1353 : 					TlenMUCRecvTopic(info->proto, f, localMessage);

  00389	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  0038c	56		 push	 esi
  0038d	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  00390	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00396	e8 00 00 00 00	 call	 _TlenMUCRecvTopic

; 1354 : 					mir_free(localMessage);

  0039b	56		 push	 esi
  0039c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1355 : 					mir_free(f);

  003a2	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  003a5	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  003ab	83 c4 18	 add	 esp, 24			; 00000018H
$L84682:

; 1356 : 				}
; 1357 : 			}
; 1358 : 		}
; 1359 : 		i=1;

  003ae	6a 01		 push	 1

; 1360 : 		while ((xNode=JabberXmlGetNthChild(node, "x", i)) != NULL) {

  003b0	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  003b5	58		 pop	 eax
  003b6	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  003b9	50		 push	 eax
$L85655:
  003ba	56		 push	 esi
  003bb	ff 75 08	 push	 DWORD PTR _node$[ebp]
  003be	e8 00 00 00 00	 call	 _JabberXmlGetNthChild
  003c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c6	3b c3		 cmp	 eax, ebx
  003c8	0f 84 b7 00 00
	00		 je	 $L84609

; 1361 : 			invNode=JabberXmlGetChild(xNode, "inv");

  003ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03BJKC@inv?$AA@ ; `string'
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 _JabberXmlGetChild
  003d9	8b f8		 mov	 edi, eax
  003db	59		 pop	 ecx

; 1362 : 			if (invNode != NULL) {

  003dc	3b fb		 cmp	 edi, ebx
  003de	59		 pop	 ecx
  003df	75 08		 jne	 SHORT $L85643

; 1377 : 				break;
; 1378 : 			}
; 1379 : 			i++;

  003e1	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  003e4	ff 75 f8	 push	 DWORD PTR _i$[ebp]
  003e7	eb d1		 jmp	 SHORT $L85655
$L85643:

; 1363 : 				r = JabberTextDecode(f);

  003e9	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  003ec	e8 00 00 00 00	 call	 _JabberTextDecode

; 1364 : 				f = JabberXmlGetAttrValue(invNode, "f");

  003f1	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  003f8	57		 push	 edi
  003f9	8b f0		 mov	 esi, eax
  003fb	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1365 : 				f = JabberTextDecode(f);

  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 _JabberTextDecode

; 1366 : 				n = JabberXmlGetAttrValue(invNode, "n");

  00406	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  0040b	57		 push	 edi
  0040c	89 45 fc	 mov	 DWORD PTR _f$[ebp], eax
  0040f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00414	8b f8		 mov	 edi, eax
  00416	83 c4 14	 add	 esp, 20			; 00000014H

; 1367 : 				if (n!=NULL && strstr(r, n)!=r) {

  00419	3b fb		 cmp	 edi, ebx
  0041b	74 17		 je	 SHORT $L84693
  0041d	57		 push	 edi
  0041e	56		 push	 esi
  0041f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strstr
  00425	59		 pop	 ecx
  00426	3b c6		 cmp	 eax, esi
  00428	59		 pop	 ecx
  00429	74 09		 je	 SHORT $L84693

; 1368 : 					n = JabberTextDecode(n);

  0042b	57		 push	 edi
  0042c	e8 00 00 00 00	 call	 _JabberTextDecode
  00431	59		 pop	 ecx

; 1369 : 				} else {

  00432	eb 1d		 jmp	 SHORT $L85656
$L84693:

; 1370 : 					n = mir_strdup(Translate("Private conference"));

  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00439	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IKEP@Private?5conference?$AA@ ; `string'
  0043e	53		 push	 ebx
  0043f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00444	ff 50 24	 call	 DWORD PTR [eax+36]
  00447	50		 push	 eax
  00448	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0044e	83 c4 10	 add	 esp, 16			; 00000010H
$L85656:

; 1371 : 					//n = JabberNickFromJID(r);
; 1372 : 				}
; 1373 : 				TlenMUCRecvInvitation(info->proto, r, n, f, "");

  00451	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  00456	8b f8		 mov	 edi, eax
  00458	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  0045b	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  0045e	57		 push	 edi
  0045f	56		 push	 esi
  00460	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00466	e8 00 00 00 00	 call	 _TlenMUCRecvInvitation

; 1374 : 				mir_free(n);

  0046b	57		 push	 edi
  0046c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1375 : 				mir_free(r);

  00472	56		 push	 esi
  00473	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1376 : 				mir_free(f);

  00479	ff 75 fc	 push	 DWORD PTR _f$[ebp]
  0047c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00482	83 c4 20	 add	 esp, 32			; 00000020H
$L84609:
  00485	5f		 pop	 edi
  00486	5e		 pop	 esi
  00487	5b		 pop	 ebx

; 1380 : 		}
; 1381 : 	}
; 1382 : }

  00488	c9		 leave
  00489	c3		 ret	 0
_TlenProcessM ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FONL@?$CFs?5mail?$AA@			; `string'
PUBLIC	??_C@_07OEOL@?$CFs?3?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_07MEND@Subject?$AA@			; `string'
PUBLIC	??_C@_06HNNJ@?$CFs?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0P@DCBH@TlenMailNotify?$AA@		; `string'
;	COMDAT ??_C@_07FONL@?$CFs?5mail?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_skin.h
_DATA	SEGMENT
??_C@_07FONL@?$CFs?5mail?$AA@ DB '%s mail', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OEOL@?$CFs?3?5?$CFs?6?$AA@
_DATA	SEGMENT
??_C@_07OEOL@?$CFs?3?5?$CFs?6?$AA@ DB '%s: %s', 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MEND@Subject?$AA@
_DATA	SEGMENT
??_C@_07MEND@Subject?$AA@ DB 'Subject', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06HNNJ@?$CFs?3?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_06HNNJ@?$CFs?3?5?$CFs?$AA@ DB '%s: %s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@DCBH@TlenMailNotify?$AA@
_DATA	SEGMENT
??_C@_0P@DCBH@TlenMailNotify?$AA@ DB 'TlenMailNotify', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenProcessN
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_f$ = -12
_s$ = -8
_str$ = 8
_popupTitle$ = 12
_strSize$ = -4
_TlenProcessN PROC NEAR					; COMDAT

; 1426 : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 1427 : 	char *f, *s;
; 1428 : 	char *str, *popupTitle, *popupText;
; 1429 : 	int strSize;
; 1430 : 
; 1431 : 	if (!node->name || strcmp(node->name, "n")) return;

  00007	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	3b c7		 cmp	 eax, edi
  00012	0f 84 36 01 00
	00		 je	 $L84748
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strcmp
  00023	59		 pop	 ecx
  00024	85 c0		 test	 eax, eax
  00026	59		 pop	 ecx
  00027	0f 85 21 01 00
	00		 jne	 $L84748

; 1432 : 
; 1433 : 	s = JabberXmlGetAttrValue(node, "s");

  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1434 : 	f = JabberXmlGetAttrValue(node, "f");

  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  0003d	56		 push	 esi
  0003e	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax
  00041	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 1435 : 	if (s != NULL && f!=NULL) {

  00049	39 7d f8	 cmp	 DWORD PTR _s$[ebp], edi
  0004c	89 45 f4	 mov	 DWORD PTR _f$[ebp], eax
  0004f	0f 84 f9 00 00
	00		 je	 $L84748
  00055	3b c7		 cmp	 eax, edi
  00057	0f 84 f1 00 00
	00		 je	 $L84748
  0005d	53		 push	 ebx

; 1436 : 		str = NULL;
; 1437 : 		strSize = 0;
; 1438 : 
; 1439 : 		JabberStringAppend(&str, &strSize, Translate("%s mail"), info->proto->iface.m_szProtoName);

  0005e	8b 5d 0c	 mov	 ebx, DWORD PTR _info$[ebp]
  00061	89 7d 08	 mov	 DWORD PTR _str$[ebp], edi
  00064	89 7d fc	 mov	 DWORD PTR _strSize$[ebp], edi
  00067	8b 83 20 0f 00
	00		 mov	 eax, DWORD PTR [ebx+3872]
  0006d	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00072	ff 70 18	 push	 DWORD PTR [eax+24]
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FONL@?$CFs?5mail?$AA@ ; `string'
  0007f	57		 push	 edi
  00080	56		 push	 esi
  00081	ff 50 24	 call	 DWORD PTR [eax+36]
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	50		 push	 eax
  00088	8d 45 fc	 lea	 eax, DWORD PTR _strSize$[ebp]
  0008b	50		 push	 eax
  0008c	8d 45 08	 lea	 eax, DWORD PTR _str$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _JabberStringAppend

; 1440 : 		popupTitle = JabberTextDecode(str);

  00095	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00098	e8 00 00 00 00	 call	 _JabberTextDecode

; 1441 : 		mir_free(str);

  0009d	ff 75 08	 push	 DWORD PTR _str$[ebp]
  000a0	89 45 0c	 mov	 DWORD PTR _popupTitle$[ebp], eax
  000a3	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1442 : 
; 1443 : 		str = NULL;
; 1444 : 		strSize = 0;
; 1445 : 
; 1446 : 		JabberStringAppend(&str, &strSize, "%s: %s\n", Translate("From"), f);

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000ae	83 c4 18	 add	 esp, 24			; 00000018H
  000b1	89 7d 08	 mov	 DWORD PTR _str$[ebp], edi
  000b4	89 7d fc	 mov	 DWORD PTR _strSize$[ebp], edi
  000b7	ff 75 f4	 push	 DWORD PTR _f$[ebp]
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MBPE@From?$AA@ ; `string'
  000bf	57		 push	 edi
  000c0	56		 push	 esi
  000c1	ff 50 24	 call	 DWORD PTR [eax+36]
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	50		 push	 eax
  000c8	8d 45 fc	 lea	 eax, DWORD PTR _strSize$[ebp]
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEOL@?$CFs?3?5?$CFs?6?$AA@ ; `string'
  000d0	50		 push	 eax
  000d1	8d 45 08	 lea	 eax, DWORD PTR _str$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _JabberStringAppend

; 1447 : 		JabberStringAppend(&str, &strSize, "%s: %s", Translate("Subject"), s);

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000df	83 c4 14	 add	 esp, 20			; 00000014H
  000e2	ff 75 f8	 push	 DWORD PTR _s$[ebp]
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07MEND@Subject?$AA@ ; `string'
  000ea	57		 push	 edi
  000eb	56		 push	 esi
  000ec	ff 50 24	 call	 DWORD PTR [eax+36]
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	50		 push	 eax
  000f3	8d 45 fc	 lea	 eax, DWORD PTR _strSize$[ebp]
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HNNJ@?$CFs?3?5?$CFs?$AA@ ; `string'
  000fb	50		 push	 eax
  000fc	8d 45 08	 lea	 eax, DWORD PTR _str$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _JabberStringAppend

; 1448 : 		popupText = JabberTextDecode(str);

  00105	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00108	e8 00 00 00 00	 call	 _JabberTextDecode
  0010d	8b f0		 mov	 esi, eax

; 1449 : 		TlenMailPopup(info->proto, popupTitle, popupText);

  0010f	56		 push	 esi
  00110	ff 75 0c	 push	 DWORD PTR _popupTitle$[ebp]
  00113	ff b3 20 0f 00
	00		 push	 DWORD PTR [ebx+3872]
  00119	e8 00 00 00 00	 call	 _TlenMailPopup

; 1450 : 		SkinPlaySound("TlenMailNotify");

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DCBH@TlenMailNotify?$AA@ ; `string'
  00128	57		 push	 edi
  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@ ; `string'
  0012e	ff 50 24	 call	 DWORD PTR [eax+36]

; 1451 : 
; 1452 : 		mir_free(popupTitle);

  00131	ff 75 0c	 push	 DWORD PTR _popupTitle$[ebp]
  00134	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1453 : 		mir_free(popupText);

  0013a	56		 push	 esi
  0013b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1454 : 		mir_free(str);

  00141	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00144	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0014a	83 c4 3c	 add	 esp, 60			; 0000003cH
  0014d	5b		 pop	 ebx
$L84748:
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi

; 1455 : 	}
; 1456 : }

  00150	c9		 leave
  00151	c3		 ret	 0
_TlenProcessN ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GMOL@MailPopupEnabled?$AA@		; `string'
PUBLIC	??_C@_0O@CNMO@MailPopupBack?$AA@		; `string'
PUBLIC	??_C@_0O@KDHG@MailPopupText?$AA@		; `string'
PUBLIC	??_C@_0BD@JHKD@MailPopupDelayMode?$AA@		; `string'
PUBLIC	??_C@_0P@ECBA@MailPopupDelay?$AA@		; `string'
PUBLIC	??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@		; `string'
PUBLIC	??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@		; `string'
EXTRN	__imp__LoadIconW@8:NEAR
EXTRN	__chkstk:NEAR
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@ DB 'PopUp/AddPopUp', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT
??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@ DB 'PopUp/AddPopUpEx', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GMOL@MailPopupEnabled?$AA@
_DATA	SEGMENT
??_C@_0BB@GMOL@MailPopupEnabled?$AA@ DB 'MailPopupEnabled', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@CNMO@MailPopupBack?$AA@
_DATA	SEGMENT
??_C@_0O@CNMO@MailPopupBack?$AA@ DB 'MailPopupBack', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@KDHG@MailPopupText?$AA@
_DATA	SEGMENT
??_C@_0O@KDHG@MailPopupText?$AA@ DB 'MailPopupText', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JHKD@MailPopupDelayMode?$AA@
_DATA	SEGMENT
??_C@_0BD@JHKD@MailPopupDelayMode?$AA@ DB 'MailPopupDelayMode', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@ECBA@MailPopupDelay?$AA@
_DATA	SEGMENT
??_C@_0P@ECBA@MailPopupDelay?$AA@ DB 'MailPopupDelay', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenMailPopup
_TEXT	SEGMENT
_dbv$85664 = -24
_cgs$85665 = -12
_dbv$85673 = -24
_cgs$85674 = -12
_dbv$85682 = -24
_cgs$85683 = -12
_dbv$85691 = -24
_cgs$85692 = -12
_dbv$85700 = -24
_cgs$85701 = -12
_proto$ = 8
_title$ = 12
_emailInfo$ = 16
_ppd$ = -4164
_TlenMailPopup PROC NEAR				; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 44 10 00 00	 mov	 eax, 4164		; 00001044H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 1386 : 	POPUPDATAEX ppd;
; 1387 : 	char * lpzContactName;
; 1388 : 	char * lpzText;
; 1389 : 
; 1390 : 	if (!DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "MailPopupEnabled", TRUE)) {

  00010	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  00013	33 db		 xor	 ebx, ebx
  00015	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0001a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85665[ebp+4], OFFSET FLAT:??_C@_0BB@GMOL@MailPopupEnabled?$AA@ ; `string'
  00024	89 45 f4	 mov	 DWORD PTR _cgs$85665[ebp], eax
  00027	8d 45 e8	 lea	 eax, DWORD PTR _dbv$85664[ebp]
  0002a	89 45 fc	 mov	 DWORD PTR _cgs$85665[ebp+8], eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85665[ebp]
  00030	50		 push	 eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00036	53		 push	 ebx
  00037	56		 push	 esi
  00038	ff 50 24	 call	 DWORD PTR [eax+36]
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	85 c0		 test	 eax, eax
  00040	75 0c		 jne	 SHORT $L85707
  00042	0f b6 45 ec	 movzx	 eax, BYTE PTR _dbv$85664[ebp+4]
  00046	3b c3		 cmp	 eax, ebx
  00048	0f 84 6f 01 00
	00		 je	 $L84734
$L85707:

; 1391 : 		return;
; 1392 : 	}
; 1393 : 	lpzContactName = title;
; 1394 : 	lpzText = emailInfo;
; 1395 : 	ZeroMemory(&ppd, sizeof(ppd));

  0004e	68 2c 10 00 00	 push	 4140			; 0000102cH
  00053	8d 85 bc ef ff
	ff		 lea	 eax, DWORD PTR _ppd$[ebp]
  00059	53		 push	 ebx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1396 : 	ppd.lchContact = NULL;

  00063	89 9d bc ef ff
	ff		 mov	 DWORD PTR _ppd$[ebp], ebx

; 1397 : 	ppd.lchIcon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_MAIL));

  00069	6a 65		 push	 101			; 00000065H
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconW@8

; 1398 : 	strcpy(ppd.lpzContactName, lpzContactName);

  00077	ff 75 0c	 push	 DWORD PTR _title$[ebp]
  0007a	89 85 c0 ef ff
	ff		 mov	 DWORD PTR _ppd$[ebp+4], eax
  00080	8d 85 c4 ef ff
	ff		 lea	 eax, DWORD PTR _ppd$[ebp+8]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _strcpy

; 1399 : 	strcpy(ppd.lpzText, lpzText);

  0008c	ff 75 10	 push	 DWORD PTR _emailInfo$[ebp]
  0008f	8d 85 c4 f7 ff
	ff		 lea	 eax, DWORD PTR _ppd$[ebp+2056]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _strcpy

; 1400 : 	ppd.colorBack = DBGetContactSettingDword(NULL, proto->iface.m_szModuleName, "MailPopupBack", 0);

  0009b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0009e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85674[ebp+4], OFFSET FLAT:??_C@_0O@CNMO@MailPopupBack?$AA@ ; `string'
  000a5	89 45 f4	 mov	 DWORD PTR _cgs$85674[ebp], eax
  000a8	8d 45 e8	 lea	 eax, DWORD PTR _dbv$85673[ebp]
  000ab	89 45 fc	 mov	 DWORD PTR _cgs$85674[ebp+8], eax
  000ae	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85674[ebp]
  000b1	50		 push	 eax
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000b7	53		 push	 ebx
  000b8	56		 push	 esi
  000b9	ff 50 24	 call	 DWORD PTR [eax+36]
  000bc	f7 d8		 neg	 eax
  000be	1b c0		 sbb	 eax, eax

; 1401 : 	ppd.colorText = DBGetContactSettingDword(NULL, proto->iface.m_szModuleName, "MailPopupText", 0);

  000c0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85683[ebp+4], OFFSET FLAT:??_C@_0O@KDHG@MailPopupText?$AA@ ; `string'
  000c7	f7 d0		 not	 eax
  000c9	23 45 ec	 and	 eax, DWORD PTR _dbv$85673[ebp+4]
  000cc	89 45 c4	 mov	 DWORD PTR _ppd$[ebp+4104], eax
  000cf	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000d2	89 45 f4	 mov	 DWORD PTR _cgs$85683[ebp], eax
  000d5	8d 45 e8	 lea	 eax, DWORD PTR _dbv$85682[ebp]
  000d8	89 45 fc	 mov	 DWORD PTR _cgs$85683[ebp+8], eax
  000db	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85683[ebp]
  000de	50		 push	 eax
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e4	53		 push	 ebx
  000e5	56		 push	 esi
  000e6	ff 50 24	 call	 DWORD PTR [eax+36]
  000e9	f7 d8		 neg	 eax
  000eb	1b c0		 sbb	 eax, eax

; 1402 : 	ppd.PluginWindowProc = NULL;
; 1403 : 	ppd.PluginData=NULL;
; 1404 : 	if ( ServiceExists( MS_POPUP_ADDPOPUPEX )) {

  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@ ; `string'
  000f2	f7 d0		 not	 eax
  000f4	23 45 ec	 and	 eax, DWORD PTR _dbv$85682[ebp+4]
  000f7	89 5d cc	 mov	 DWORD PTR _ppd$[ebp+4112], ebx
  000fa	89 5d d0	 mov	 DWORD PTR _ppd$[ebp+4116], ebx
  000fd	89 45 c8	 mov	 DWORD PTR _ppd$[ebp+4108], eax
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00105	ff 50 28	 call	 DWORD PTR [eax+40]
  00108	83 c4 2c	 add	 esp, 44			; 0000002cH
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 83 00 00
	00		 je	 $L84722

; 1405 : 		BYTE delayMode;
; 1406 : 		int delay;
; 1407 : 		delayMode = DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "MailPopupDelayMode", 0);

  00113	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00116	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85692[ebp+4], OFFSET FLAT:??_C@_0BD@JHKD@MailPopupDelayMode?$AA@ ; `string'
  0011d	89 45 f4	 mov	 DWORD PTR _cgs$85692[ebp], eax
  00120	8d 45 e8	 lea	 eax, DWORD PTR _dbv$85691[ebp]
  00123	89 45 fc	 mov	 DWORD PTR _cgs$85692[ebp+8], eax
  00126	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85692[ebp]
  00129	50		 push	 eax
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0012f	53		 push	 ebx
  00130	56		 push	 esi
  00131	ff 50 24	 call	 DWORD PTR [eax+36]
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH
  00137	85 c0		 test	 eax, eax
  00139	74 04		 je	 SHORT $L85693
  0013b	33 c9		 xor	 ecx, ecx
  0013d	eb 04		 jmp	 SHORT $L85690
$L85693:
  0013f	0f b6 4d ec	 movzx	 ecx, BYTE PTR _dbv$85691[ebp+4]
$L85690:

; 1408 : 		delay = 0;

  00143	33 c0		 xor	 eax, eax

; 1409 : 		if (delayMode==1) {

  00145	80 f9 01	 cmp	 cl, 1
  00148	75 32		 jne	 SHORT $L84727

; 1410 : 			delay = DBGetContactSettingDword(NULL, proto->iface.m_szModuleName, "MailPopupDelay", 4);

  0014a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0014d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$85701[ebp+4], OFFSET FLAT:??_C@_0P@ECBA@MailPopupDelay?$AA@ ; `string'
  00154	89 45 f4	 mov	 DWORD PTR _cgs$85701[ebp], eax
  00157	8d 45 e8	 lea	 eax, DWORD PTR _dbv$85700[ebp]
  0015a	89 45 fc	 mov	 DWORD PTR _cgs$85701[ebp+8], eax
  0015d	8d 45 f4	 lea	 eax, DWORD PTR _cgs$85701[ebp]
  00160	50		 push	 eax
  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00166	53		 push	 ebx
  00167	56		 push	 esi
  00168	ff 50 24	 call	 DWORD PTR [eax+36]
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016e	85 c0		 test	 eax, eax
  00170	74 05		 je	 SHORT $L85702
  00172	6a 04		 push	 4
  00174	58		 pop	 eax
  00175	eb 0d		 jmp	 SHORT $L84731
$L85702:
  00177	8b 45 ec	 mov	 eax, DWORD PTR _dbv$85700[ebp+4]

; 1411 : 		} else if (delayMode==2) {

  0017a	eb 08		 jmp	 SHORT $L84731
$L84727:
  0017c	80 f9 02	 cmp	 cl, 2
  0017f	75 03		 jne	 SHORT $L84731

; 1412 : 			delay = -1;

  00181	83 c8 ff	 or	 eax, -1
$L84731:

; 1413 : 		}
; 1414 : 		ppd.iSeconds = delay;

  00184	89 45 d4	 mov	 DWORD PTR _ppd$[ebp+4120], eax

; 1415 : 		CallService(MS_POPUP_ADDPOPUPEX, (WPARAM)&ppd, 0);

  00187	8d 85 bc ef ff
	ff		 lea	 eax, DWORD PTR _ppd$[ebp]
  0018d	53		 push	 ebx
  0018e	50		 push	 eax
  0018f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@ ; `string'

; 1416 : 
; 1417 : 	}
; 1418 : 	else if ( ServiceExists( MS_POPUP_ADDPOPUP )) {

  00194	eb 1c		 jmp	 SHORT $L85709
$L84722:
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0019b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@ ; `string'
  001a0	56		 push	 esi
  001a1	ff 50 28	 call	 DWORD PTR [eax+40]
  001a4	85 c0		 test	 eax, eax
  001a6	59		 pop	 ecx
  001a7	74 14		 je	 SHORT $L84734

; 1419 : 		CallService(MS_POPUP_ADDPOPUP, (WPARAM)&ppd, 0);

  001a9	8d 85 bc ef ff
	ff		 lea	 eax, DWORD PTR _ppd$[ebp]
  001af	53		 push	 ebx
  001b0	50		 push	 eax
  001b1	56		 push	 esi
$L85709:
  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001b7	ff 50 24	 call	 DWORD PTR [eax+36]
  001ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84734:
  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx

; 1420 : 	}
; 1421 : }

  001c0	c9		 leave
  001c1	c3		 ret	 0
_TlenMailPopup ENDP
_TEXT	ENDS
PUBLIC	??_C@_01FDLN@?1?$AA@				; `string'
PUBLIC	??_C@_01FPMG@z?$AA@				; `string'
PUBLIC	??_C@_04KGFE@kick?$AA@				; `string'
PUBLIC	??_C@_01LHO@r?$AA@				; `string'
PUBLIC	??_C@_05LELA@?$CFs?1?$CFs?$AA@			; `string'
EXTRN	_TlenMUCCreateWindow:NEAR
EXTRN	_TlenMUCRecvPresence:NEAR
;	COMDAT ??_C@_01FDLN@?1?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_01FDLN@?1?$AA@ DB '/', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FPMG@z?$AA@
_DATA	SEGMENT
??_C@_01FPMG@z?$AA@ DB 'z', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KGFE@kick?$AA@
_DATA	SEGMENT
??_C@_04KGFE@kick?$AA@ DB 'kick', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT
??_C@_01LHO@r?$AA@ DB 'r', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LELA@?$CFs?1?$CFs?$AA@
_DATA	SEGMENT
??_C@_05LELA@?$CFs?1?$CFs?$AA@ DB '%s/%s', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenProcessP
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_jid$ = -524
_f$ = 8
_k$ = -8
_status$ = -12
_flags$ = -4
_TlenProcessP PROC NEAR					; COMDAT

; 1462 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	57		 push	 edi

; 1463 : 	char jid[512];
; 1464 : 	char *f, *id, *tp, *a, *n, *k;
; 1465 : 	XmlNode *sNode, *xNode, *iNode, *kNode;
; 1466 : 	int status, flags;
; 1467 : 
; 1468 : 	if (!node->name || strcmp(node->name, "p")) return;

  0000a	8b 7d 08	 mov	 edi, DWORD PTR _node$[ebp]
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	85 c0		 test	 eax, eax
  00012	0f 84 8c 02 00
	00		 je	 $L84784
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strcmp
  00023	59		 pop	 ecx
  00024	85 c0		 test	 eax, eax
  00026	59		 pop	 ecx
  00027	0f 85 77 02 00
	00		 jne	 $L84784

; 1469 : 
; 1470 :  // presence from users in chat room
; 1471 : 	flags = 0;

  0002d	21 45 fc	 and	 DWORD PTR _flags$[ebp], eax
  00030	53		 push	 ebx
  00031	56		 push	 esi

; 1472 : 	status = ID_STATUS_ONLINE;
; 1473 : 	f = JabberXmlGetAttrValue(node, "f");

  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  00037	57		 push	 edi
  00038	c7 45 f4 88 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40072 ; 00009c88H
  0003f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1474 : 	xNode = JabberXmlGetChild(node, "x");

  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOI@x?$AA@ ; `string'
  00049	57		 push	 edi
  0004a	89 45 08	 mov	 DWORD PTR _f$[ebp], eax
  0004d	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 1475 : 	if (xNode != NULL) { // x subtag present (message from chat room) - change user rights only

  00055	85 c0		 test	 eax, eax
  00057	74 70		 je	 SHORT $L84790

; 1476 : 		char *temp, *iStr;
; 1477 : 		iNode = JabberXmlGetChild(xNode, "i");

  00059	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  0005e	56		 push	 esi
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00065	8b d8		 mov	 ebx, eax
  00067	59		 pop	 ecx

; 1478 : 		if (iNode != NULL) {

  00068	85 db		 test	 ebx, ebx
  0006a	59		 pop	 ecx
  0006b	74 5c		 je	 SHORT $L84790

; 1479 : 			iStr = JabberXmlGetAttrValue(iNode, "i");

  0006d	56		 push	 esi
  0006e	53		 push	 ebx
  0006f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00074	8b f8		 mov	 edi, eax

; 1480 : 			temp = mir_alloc(strlen(f)+strlen(iStr)+2);

  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 _strlen
  0007c	ff 75 08	 push	 DWORD PTR _f$[ebp]
  0007f	8b f0		 mov	 esi, eax
  00081	e8 00 00 00 00	 call	 _strlen
  00086	8d 44 06 02	 lea	 eax, DWORD PTR [esi+eax+2]
  0008a	50		 push	 eax
  0008b	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 1481 : 			strcpy(temp, f);

  00091	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00094	8b f0		 mov	 esi, eax
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _strcpy

; 1482 : 			strcat(temp, "/");

  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FDLN@?1?$AA@ ; `string'
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 _strcat

; 1483 : 			strcat(temp, iStr);

  000a7	57		 push	 edi
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _strcat

; 1484 : 			f = JabberTextDecode(temp);

  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 _JabberTextDecode

; 1485 : 			mir_free(temp);

  000b4	56		 push	 esi
  000b5	89 45 08	 mov	 DWORD PTR _f$[ebp], eax
  000b8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  000be	83 c4 34	 add	 esp, 52			; 00000034H

; 1486 : 			node = iNode;
; 1487 : 			status = 0;

  000c1	83 65 f4 00	 and	 DWORD PTR _status$[ebp], 0
  000c5	8b fb		 mov	 edi, ebx

; 1488 : 		} else {

  000c7	eb 0c		 jmp	 SHORT $L84793
$L84790:

; 1489 : 			f = JabberTextDecode(f);
; 1490 : 		}
; 1491 : 	} else {
; 1492 : 		f = JabberTextDecode(f);

  000c9	ff 75 08	 push	 DWORD PTR _f$[ebp]
  000cc	e8 00 00 00 00	 call	 _JabberTextDecode
  000d1	59		 pop	 ecx
  000d2	89 45 08	 mov	 DWORD PTR _f$[ebp], eax
$L84793:

; 1493 : 	}
; 1494 : 	a = JabberXmlGetAttrValue(node, "z");

  000d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FPMG@z?$AA@ ; `string'
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 1495 : 	if (a!=NULL) {

  000e0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__atoi
  000e6	59		 pop	 ecx
  000e7	85 c0		 test	 eax, eax
  000e9	59		 pop	 ecx
  000ea	74 0f		 je	 SHORT $L84797

; 1496 : 		if (atoi(a) &1 ) {

  000ec	50		 push	 eax
  000ed	ff d6		 call	 esi
  000ef	a8 01		 test	 al, 1
  000f1	59		 pop	 ecx
  000f2	74 07		 je	 SHORT $L84797

; 1497 : 			flags |= USER_FLAGS_REGISTERED;

  000f4	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _flags$[ebp], 4
$L84797:

; 1498 : 		}
; 1499 : 	}
; 1500 : 	a = JabberXmlGetAttrValue(node, "a");

  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  00100	57		 push	 edi
  00101	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00106	8b d8		 mov	 ebx, eax
  00108	59		 pop	 ecx

; 1501 : 	if (a!=NULL) {

  00109	85 db		 test	 ebx, ebx
  0010b	59		 pop	 ecx
  0010c	74 29		 je	 SHORT $L84803

; 1502 : 		if (atoi(a) == 2) {

  0010e	53		 push	 ebx
  0010f	ff d6		 call	 esi
  00111	83 f8 02	 cmp	 eax, 2
  00114	59		 pop	 ecx
  00115	75 03		 jne	 SHORT $L84800

; 1503 : 			flags |= USER_FLAGS_ADMIN;

  00117	09 45 fc	 or	 DWORD PTR _flags$[ebp], eax
$L84800:

; 1504 : 		}
; 1505 : 		if (atoi(a) == 1) {

  0011a	53		 push	 ebx
  0011b	ff d6		 call	 esi
  0011d	83 f8 01	 cmp	 eax, 1
  00120	59		 pop	 ecx
  00121	75 03		 jne	 SHORT $L84801

; 1506 : 			flags |= USER_FLAGS_OWNER;

  00123	09 45 fc	 or	 DWORD PTR _flags$[ebp], eax
$L84801:

; 1507 : 		}
; 1508 : 		if (atoi(a) == 3) {

  00126	53		 push	 ebx
  00127	ff d6		 call	 esi

; 1509 : 			//flags |= USER_FLAGS_MEMBER;
; 1510 : 		}
; 1511 : 		if (atoi(a) == 5) {

  00129	53		 push	 ebx
  0012a	ff d6		 call	 esi
  0012c	59		 pop	 ecx
  0012d	83 f8 05	 cmp	 eax, 5
  00130	59		 pop	 ecx
  00131	75 04		 jne	 SHORT $L84803

; 1512 : 			flags |= USER_FLAGS_GLOBALOWNER;

  00133	83 4d fc 08	 or	 DWORD PTR _flags$[ebp], 8
$L84803:

; 1513 : 		}
; 1514 : 	}
; 1515 : 	sNode = JabberXmlGetChild(node, "s");

  00137	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  0013c	57		 push	 edi
  0013d	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00142	59		 pop	 ecx

; 1516 : 	if (sNode != NULL) {

  00143	85 c0		 test	 eax, eax
  00145	59		 pop	 ecx
  00146	74 1a		 je	 SHORT $L84806

; 1517 : 		if (!strcmp(sNode->text, "unavailable")) {

  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@IHLO@unavailable?$AA@ ; `string'
  0014d	ff 70 20	 push	 DWORD PTR [eax+32]
  00150	e8 00 00 00 00	 call	 _strcmp
  00155	59		 pop	 ecx
  00156	85 c0		 test	 eax, eax
  00158	59		 pop	 ecx
  00159	75 07		 jne	 SHORT $L84806

; 1518 : 			status = ID_STATUS_OFFLINE;

  0015b	c7 45 f4 87 9c
	00 00		 mov	 DWORD PTR _status$[ebp], 40071 ; 00009c87H
$L84806:

; 1519 : 		}
; 1520 : 	}
; 1521 : 	kNode = JabberXmlGetChild(node, "kick");

  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04KGFE@kick?$AA@ ; `string'
  00167	57		 push	 edi
  00168	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 1522 : 	k = NULL;

  0016d	83 65 f8 00	 and	 DWORD PTR _k$[ebp], 0
  00171	59		 pop	 ecx

; 1523 : 	if (kNode != NULL) {

  00172	85 c0		 test	 eax, eax
  00174	59		 pop	 ecx
  00175	74 20		 je	 SHORT $L84810

; 1524 : 		k = JabberXmlGetAttrValue(kNode, "r");

  00177	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LHO@r?$AA@ ; `string'
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00182	59		 pop	 ecx

; 1525 : 		if (k==NULL) {

  00183	85 c0		 test	 eax, eax
  00185	59		 pop	 ecx
  00186	75 05		 jne	 SHORT $L84813

; 1526 : 			k = "";

  00188	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
$L84813:

; 1527 : 		}
; 1528 : 		k = JabberTextDecode(k);

  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 _JabberTextDecode
  00193	59		 pop	 ecx
  00194	89 45 f8	 mov	 DWORD PTR _k$[ebp], eax
$L84810:

; 1529 : 	}
; 1530 : 	tp = JabberXmlGetAttrValue(node, "tp");

  00197	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BBKE@tp?$AA@ ; `string'
  0019c	57		 push	 edi
  0019d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001a2	59		 pop	 ecx

; 1531 : 	if (tp!=NULL && !strcmp(tp, "c")) { // new chat room has just been created

  001a3	85 c0		 test	 eax, eax
  001a5	59		 pop	 ecx
  001a6	0f 84 bf 00 00
	00		 je	 $L84815
  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _strcmp
  001b7	59		 pop	 ecx
  001b8	85 c0		 test	 eax, eax
  001ba	59		 pop	 ecx
  001bb	0f 85 aa 00 00
	00		 jne	 $L84815

; 1532 : 		id = JabberXmlGetAttrValue(node, "id");

  001c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  001c6	57		 push	 edi
  001c7	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001cc	8b d8		 mov	 ebx, eax
  001ce	59		 pop	 ecx

; 1533 : 		if (id != NULL) {

  001cf	85 db		 test	 ebx, ebx
  001d1	59		 pop	 ecx
  001d2	0f 84 b0 00 00
	00		 je	 $L84825

; 1534 : 			n = JabberXmlGetAttrValue(node, "n");

  001d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FMOK@n?$AA@ ; `string'
  001dd	57		 push	 edi
  001de	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001e3	59		 pop	 ecx

; 1535 : 			if (n!=NULL) {

  001e4	85 c0		 test	 eax, eax
  001e6	59		 pop	 ecx
  001e7	74 09		 je	 SHORT $L84819

; 1536 : 				n = JabberTextDecode(n);

  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _JabberTextDecode
  001ef	59		 pop	 ecx

; 1537 : 			} else {

  001f0	eb 1e		 jmp	 SHORT $L85713
$L84819:

; 1538 : 				n = mir_strdup(Translate("Private conference"));// JabberNickFromJID(f);

  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IKEP@Private?5conference?$AA@ ; `string'
  001fc	6a 00		 push	 0
  001fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  00203	ff 50 24	 call	 DWORD PTR [eax+36]
  00206	50		 push	 eax
  00207	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0020d	83 c4 10	 add	 esp, 16			; 00000010H
$L85713:

; 1539 : 			}
; 1540 : 			sprintf(jid, "%s/%s", f, info->username);

  00210	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  00213	8b f8		 mov	 edi, eax
  00215	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00218	50		 push	 eax
  00219	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  0021f	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00222	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05LELA@?$CFs?1?$CFs?$AA@ ; `string'
  00227	50		 push	 eax
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 1541 : //			if (!DBGetContactSetting(NULL, iface.m_szModuleName, "LoginName", &dbv)) {
; 1542 : 				// always real username
; 1543 : //				sprintf(jid, "%s/%s", f, dbv.pszVal);
; 1544 : 			TlenMUCCreateWindow(info->proto, f, n, 0, NULL, id);

  0022e	53		 push	 ebx
  0022f	6a 00		 push	 0
  00231	6a 00		 push	 0
  00233	57		 push	 edi
  00234	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00237	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0023d	e8 00 00 00 00	 call	 _TlenMUCCreateWindow

; 1545 : 			TlenMUCRecvPresence(info->proto, jid, ID_STATUS_ONLINE, flags, k);

  00242	ff 75 f8	 push	 DWORD PTR _k$[ebp]
  00245	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _jid$[ebp]
  0024b	ff 75 fc	 push	 DWORD PTR _flags$[ebp]
  0024e	68 88 9c 00 00	 push	 40072			; 00009c88H
  00253	50		 push	 eax
  00254	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  0025a	e8 00 00 00 00	 call	 _TlenMUCRecvPresence

; 1546 : //				DBFreeVariant(&dbv);
; 1547 : //			}
; 1548 : 			mir_free(n);

  0025f	57		 push	 edi
  00260	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00266	83 c4 40	 add	 esp, 64			; 00000040H

; 1549 : 		}
; 1550 : 	} else {

  00269	eb 1d		 jmp	 SHORT $L84825
$L84815:

; 1551 : 		TlenMUCRecvPresence(info->proto, f, status, flags, k); // user presence

  0026b	ff 75 f8	 push	 DWORD PTR _k$[ebp]
  0026e	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00271	ff 75 fc	 push	 DWORD PTR _flags$[ebp]
  00274	ff 75 f4	 push	 DWORD PTR _status$[ebp]
  00277	ff 75 08	 push	 DWORD PTR _f$[ebp]
  0027a	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00280	e8 00 00 00 00	 call	 _TlenMUCRecvPresence
  00285	83 c4 14	 add	 esp, 20			; 00000014H
$L84825:

; 1552 : 	}
; 1553 : 	if (k!=NULL) {

  00288	83 7d f8 00	 cmp	 DWORD PTR _k$[ebp], 0
  0028c	5e		 pop	 esi
  0028d	5b		 pop	 ebx
  0028e	74 0a		 je	 SHORT $L84827

; 1554 : 		mir_free(k);

  00290	ff 75 f8	 push	 DWORD PTR _k$[ebp]
  00293	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00299	59		 pop	 ecx
$L84827:

; 1555 : 	}
; 1556 : 	mir_free(f);

  0029a	ff 75 08	 push	 DWORD PTR _f$[ebp]
  0029d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  002a3	59		 pop	 ecx
$L84784:
  002a4	5f		 pop	 edi

; 1557 : }

  002a5	c9		 leave
  002a6	c3		 ret	 0
_TlenProcessP ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GHLJ@TlenVoiceNotify?$AA@		; `string'
EXTRN	_TlenP2PFreeFileTransfer:NEAR
EXTRN	_TlenVoiceCancelAll:NEAR
EXTRN	_TlenVoiceStart:NEAR
EXTRN	_TlenVoiceAccept:NEAR
;	COMDAT ??_C@_0BA@GHLJ@TlenVoiceNotify?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_netlib.h
_DATA	SEGMENT
??_C@_0BA@GHLJ@TlenVoiceNotify?$AA@ DB 'TlenVoiceNotify', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenProcessV
_TEXT	SEGMENT
_node$ = 8
_info$ = 12
_from$ = 8
_p$ = 8
_TlenProcessV PROC NEAR					; COMDAT

; 1562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1563 : 	JABBER_LIST_ITEM *item;
; 1564 : 	char *from, *id, *e, *p, *nick;
; 1565 : //	if (!node->name || strcmp(node->name, "v")) return;
; 1566 : 
; 1567 : 	if ((from=JabberXmlGetAttrValue(node, "f")) != NULL) {

  00006	8b 7d 08	 mov	 edi, DWORD PTR _node$[ebp]
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IFC@f?$AA@ ; `string'
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00014	33 db		 xor	 ebx, ebx
  00016	59		 pop	 ecx
  00017	3b c3		 cmp	 eax, ebx
  00019	59		 pop	 ecx
  0001a	89 45 08	 mov	 DWORD PTR _from$[ebp], eax
  0001d	0f 84 a6 03 00
	00		 je	 $L84905

; 1568 : 		if ((e=JabberXmlGetAttrValue(node, "e")) != NULL) {

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0002e	8b f0		 mov	 esi, eax
  00030	59		 pop	 ecx
  00031	3b f3		 cmp	 esi, ebx
  00033	59		 pop	 ecx
  00034	0f 84 8f 03 00
	00		 je	 $L84905

; 1569 : 			if (!strcmp(e, "1")) {

  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBAH@1?$AA@ ; `string'
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _strcmp
  00045	59		 pop	 ecx
  00046	85 c0		 test	 eax, eax
  00048	59		 pop	 ecx
  00049	75 44		 jne	 SHORT $L84843

; 1570 : 				if ((id=JabberXmlGetAttrValue(node, "i")) != NULL) {

  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00056	8b f0		 mov	 esi, eax
  00058	59		 pop	 ecx
  00059	3b f3		 cmp	 esi, ebx
  0005b	59		 pop	 ecx
  0005c	0f 84 67 03 00
	00		 je	 $L84905

; 1571 : 					SkinPlaySound("TlenVoiceNotify");

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GHLJ@TlenVoiceNotify?$AA@ ; `string'
  0006c	53		 push	 ebx
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@ ; `string'
  00072	ff 50 24	 call	 DWORD PTR [eax+36]

; 1572 : 					TlenVoiceAccept(info->proto, id, from);

  00075	ff 75 08	 push	 DWORD PTR _from$[ebp]
  00078	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  0007b	56		 push	 esi
  0007c	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00082	e8 00 00 00 00	 call	 _TlenVoiceAccept
  00087	83 c4 18	 add	 esp, 24			; 00000018H

; 1573 : 				}
; 1574 : 			} else if (!strcmp(e, "3")) {

  0008a	e9 3a 03 00 00	 jmp	 $L84905
$L84843:
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01ECJ@3?$AA@ ; `string'
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 _strcmp
  0009a	59		 pop	 ecx
  0009b	85 c0		 test	 eax, eax
  0009d	59		 pop	 ecx
  0009e	0f 85 a1 00 00
	00		 jne	 $L84848

; 1575 : 				// FILE_RECV : e='3' : invalid transfer error
; 1576 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  000a9	57		 push	 edi
  000aa	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000af	59		 pop	 ecx
  000b0	3b c3		 cmp	 eax, ebx
  000b2	59		 pop	 ecx
  000b3	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
  000b6	0f 84 0d 03 00
	00		 je	 $L84905

; 1577 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  000bc	8b 7d 0c	 mov	 edi, DWORD PTR _info$[ebp]
  000bf	50		 push	 eax
  000c0	6a 05		 push	 5
  000c2	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  000c8	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  000cd	8b f0		 mov	 esi, eax
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	3b f3		 cmp	 esi, ebx
  000d4	0f 84 ef 02 00
	00		 je	 $L84905

; 1578 : 						if (item->ft != NULL) {

  000da	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000dd	3b c3		 cmp	 eax, ebx
  000df	74 4c		 je	 SHORT $L84854

; 1579 : 							HANDLE  hEvent = item->ft->hFileEvent;

  000e1	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]

; 1580 : 							item->ft->hFileEvent = NULL;

  000e4	89 58 3c	 mov	 DWORD PTR [eax+60], ebx

; 1581 : 							item->ft->state = FT_ERROR;

  000e7	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000ea	c7 40 0c 04 00
	00 00		 mov	 DWORD PTR [eax+12], 4

; 1582 : 							if (item->ft->s != NULL) {

  000f1	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f7	3b cb		 cmp	 ecx, ebx
  000f9	74 26		 je	 SHORT $L84858

; 1583 : 								Netlib_CloseHandle(item->ft->s);

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00100	53		 push	 ebx
  00101	51		 push	 ecx
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@ ; `string'
  00107	ff 50 24	 call	 DWORD PTR [eax+36]

; 1584 : 								item->ft->s = NULL;

  0010a	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1585 : 								if (hEvent != NULL) {

  00110	3b fb		 cmp	 edi, ebx
  00112	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00115	0f 84 ae 02 00
	00		 je	 $L84905

; 1586 : 									SetEvent(hEvent);

  0011b	57		 push	 edi

; 1587 : 								}
; 1588 : 							} else {

  0011c	e9 a2 02 00 00	 jmp	 $L85722
$L84858:

; 1589 : 								TlenP2PFreeFileTransfer(item->ft);

  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _TlenP2PFreeFileTransfer
$L85724:
  00127	59		 pop	 ecx

; 1590 : 							}
; 1591 : 						} else {

  00128	e9 9c 02 00 00	 jmp	 $L84905
$L84854:

; 1592 : 							JabberListRemove(info->proto, LIST_VOICE, p);

  0012d	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00130	6a 05		 push	 5
  00132	ff b7 20 0f 00
	00		 push	 DWORD PTR [edi+3872]
  00138	e8 00 00 00 00	 call	 _JabberListRemove
$L85725:
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 : 						}
; 1594 : 					}
; 1595 : 				}
; 1596 : 			} else if (!strcmp(e, "4")) {

  00140	e9 84 02 00 00	 jmp	 $L84905
$L84848:
  00145	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FBMM@4?$AA@ ; `string'
  0014a	56		 push	 esi
  0014b	e8 00 00 00 00	 call	 _strcmp
  00150	59		 pop	 ecx
  00151	85 c0		 test	 eax, eax
  00153	59		 pop	 ecx
  00154	75 5b		 jne	 SHORT $L84865

; 1597 : 				// FILE_SEND : e='4' : File sending request was denied by the remote client
; 1598 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  0015b	57		 push	 edi
  0015c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00161	59		 pop	 ecx
  00162	3b c3		 cmp	 eax, ebx
  00164	59		 pop	 ecx
  00165	0f 84 5e 02 00
	00		 je	 $L84905

; 1599 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  0016b	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  0016e	50		 push	 eax
  0016f	6a 05		 push	 5
  00171	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  00177	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017f	3b c3		 cmp	 eax, ebx
  00181	0f 84 42 02 00
	00		 je	 $L84905

; 1600 : 						nick = JabberNickFromJID(item->ft->jid);

  00187	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  0018a	ff 70 10	 push	 DWORD PTR [eax+16]
  0018d	e8 00 00 00 00	 call	 _JabberNickFromJID

; 1601 : 						if (!strcmp(nick, from)) {

  00192	ff 75 08	 push	 DWORD PTR _from$[ebp]
  00195	8b f8		 mov	 edi, eax
  00197	57		 push	 edi
  00198	e8 00 00 00 00	 call	 _strcmp
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a0	85 c0		 test	 eax, eax
  001a2	75 7a		 jne	 SHORT $L84870

; 1602 : 							TlenVoiceCancelAll(info->proto);

  001a4	ff b6 20 0f 00
	00		 push	 DWORD PTR [esi+3872]
  001aa	e8 00 00 00 00	 call	 _TlenVoiceCancelAll

; 1603 : 							//JabberListRemove(info->proto, LIST_VOICE, p);
; 1604 : 						}
; 1605 : 						mir_free(nick);
; 1606 : 					}
; 1607 : 				}
; 1608 : 			} else if (!strcmp(e, "5")) {

  001af	eb 6c		 jmp	 SHORT $L85726
$L84865:
  001b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PLFL@5?$AA@ ; `string'
  001b6	56		 push	 esi
  001b7	e8 00 00 00 00	 call	 _strcmp
  001bc	59		 pop	 ecx
  001bd	85 c0		 test	 eax, eax
  001bf	59		 pop	 ecx
  001c0	75 68		 jne	 SHORT $L84872

; 1609 : 			// FILE_SEND : e='5' : Voice request was accepted
; 1610 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  001c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  001c7	57		 push	 edi
  001c8	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  001cd	59		 pop	 ecx
  001ce	3b c3		 cmp	 eax, ebx
  001d0	59		 pop	 ecx
  001d1	0f 84 f2 01 00
	00		 je	 $L84905

; 1611 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  001d7	50		 push	 eax
  001d8	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  001db	6a 05		 push	 5
  001dd	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  001e3	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  001e8	8b f0		 mov	 esi, eax
  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ed	3b f3		 cmp	 esi, ebx
  001ef	0f 84 d4 01 00
	00		 je	 $L84905

; 1612 : 						nick = JabberNickFromJID(item->ft->jid);

  001f5	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  001f8	ff 70 10	 push	 DWORD PTR [eax+16]
  001fb	e8 00 00 00 00	 call	 _JabberNickFromJID

; 1613 : 						if (!strcmp(nick, from)) {

  00200	ff 75 08	 push	 DWORD PTR _from$[ebp]
  00203	8b f8		 mov	 edi, eax
  00205	57		 push	 edi
  00206	e8 00 00 00 00	 call	 _strcmp
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020e	85 c0		 test	 eax, eax
  00210	75 0c		 jne	 SHORT $L84870

; 1614 : 							TlenVoiceStart(item->ft, 1);

  00212	6a 01		 push	 1
  00214	ff 76 58	 push	 DWORD PTR [esi+88]
  00217	e8 00 00 00 00	 call	 _TlenVoiceStart
  0021c	59		 pop	 ecx
$L85726:
  0021d	59		 pop	 ecx
$L84870:

; 1615 : 						}
; 1616 : 						mir_free(nick);

  0021e	57		 push	 edi
  0021f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 1617 : 					}
; 1618 : 				}
; 1619 : 			} else if (!strcmp(e, "6")) {

  00225	e9 fd fe ff ff	 jmp	 $L85724
$L84872:
  0022a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EOC@6?$AA@ ; `string'
  0022f	56		 push	 esi
  00230	e8 00 00 00 00	 call	 _strcmp
  00235	59		 pop	 ecx
  00236	85 c0		 test	 eax, eax
  00238	59		 pop	 ecx
  00239	0f 85 88 00 00
	00		 jne	 $L84879

; 1620 : 				// FILE_RECV : e='6' : IP and port information to connect to get file
; 1621 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  0023f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  00244	57		 push	 edi
  00245	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0024a	59		 pop	 ecx
  0024b	3b c3		 cmp	 eax, ebx
  0024d	59		 pop	 ecx
  0024e	0f 84 75 01 00
	00		 je	 $L84905

; 1622 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  00254	50		 push	 eax
  00255	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  00258	6a 05		 push	 5
  0025a	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  00260	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00265	8b f0		 mov	 esi, eax
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	3b f3		 cmp	 esi, ebx
  0026c	0f 84 57 01 00
	00		 je	 $L84905

; 1623 : 						if ((p=JabberXmlGetAttrValue(node, "a")) != NULL) {

  00272	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  00277	57		 push	 edi
  00278	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0027d	59		 pop	 ecx
  0027e	3b c3		 cmp	 eax, ebx
  00280	59		 pop	 ecx
  00281	0f 84 42 01 00
	00		 je	 $L84905

; 1624 : 							item->ft->hostName = mir_strdup(p);

  00287	50		 push	 eax
  00288	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  0028e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1625 : 							if ((p=JabberXmlGetAttrValue(node, "p")) != NULL) {

  00291	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  00298	57		 push	 edi
  00299	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0029c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  002a1	59		 pop	 ecx
  002a2	3b c3		 cmp	 eax, ebx
  002a4	59		 pop	 ecx
  002a5	0f 84 1e 01 00
	00		 je	 $L84905

; 1626 : 								item->ft->wPort = atoi(p);

  002ab	50		 push	 eax
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  002b2	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1627 : 								TlenVoiceStart(item->ft, 0);

  002b5	53		 push	 ebx
  002b6	66 89 41 24	 mov	 WORD PTR [ecx+36], ax
  002ba	ff 76 58	 push	 DWORD PTR [esi+88]
  002bd	e8 00 00 00 00	 call	 _TlenVoiceStart

; 1628 : 								//JabberForkThread((void (__cdecl *)(void*))TlenVoiceReceiveThread, 0, item->ft);
; 1629 : 							}
; 1630 : 						}
; 1631 : 					}
; 1632 : 				}
; 1633 : 			}
; 1634 : 			else if (!strcmp(e, "7")) {

  002c2	e9 76 fe ff ff	 jmp	 $L85725
$L84879:
  002c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KOHF@7?$AA@ ; `string'
  002cc	56		 push	 esi
  002cd	e8 00 00 00 00	 call	 _strcmp
  002d2	59		 pop	 ecx
  002d3	85 c0		 test	 eax, eax
  002d5	59		 pop	 ecx
  002d6	0f 85 9d 00 00
	00		 jne	 $L84889

; 1635 : 				// FILE_RECV : e='7' : IP and port information to connect to send file
; 1636 : 				// in case the conection to the given server was not successful
; 1637 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  002dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  002e1	57		 push	 edi
  002e2	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  002e7	59		 pop	 ecx
  002e8	3b c3		 cmp	 eax, ebx
  002ea	59		 pop	 ecx
  002eb	0f 84 d8 00 00
	00		 je	 $L84905

; 1638 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  002f1	50		 push	 eax
  002f2	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  002f5	6a 05		 push	 5
  002f7	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  002fd	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00302	8b f0		 mov	 esi, eax
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
  00307	3b f3		 cmp	 esi, ebx
  00309	0f 84 ba 00 00
	00		 je	 $L84905

; 1639 : 						if ((p=JabberXmlGetAttrValue(node, "a")) != NULL) {

  0030f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  00314	57		 push	 edi
  00315	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0031a	59		 pop	 ecx
  0031b	3b c3		 cmp	 eax, ebx
  0031d	59		 pop	 ecx
  0031e	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
  00321	0f 84 a2 00 00
	00		 je	 $L84905

; 1640 : 							if (item->ft->hostName!=NULL) mir_free(item->ft->hostName);

  00327	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0032a	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0032d	3b c3		 cmp	 eax, ebx
  0032f	74 08		 je	 SHORT $L84897
  00331	50		 push	 eax
  00332	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00338	59		 pop	 ecx
$L84897:

; 1641 : 							item->ft->hostName = mir_strdup(p);

  00339	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0033c	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00342	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1642 : 							if ((p=JabberXmlGetAttrValue(node, "p")) != NULL) {

  00345	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_01FOFA@p?$AA@ ; `string'
  0034c	57		 push	 edi
  0034d	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00350	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00355	59		 pop	 ecx
  00356	3b c3		 cmp	 eax, ebx
  00358	59		 pop	 ecx
  00359	74 6e		 je	 SHORT $L84905

; 1643 : 								item->ft->wPort = atoi(p);

  0035b	50		 push	 eax
  0035c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00362	59		 pop	 ecx
  00363	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00366	66 89 41 24	 mov	 WORD PTR [ecx+36], ax

; 1644 : 								item->ft->state = FT_SWITCH;

  0036a	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0036d	c7 40 0c 06 00
	00 00		 mov	 DWORD PTR [eax+12], 6

; 1645 : 								SetEvent(item->ft->hFileEvent);

  00374	8b 46 58	 mov	 eax, DWORD PTR [esi+88]

; 1646 : 							}
; 1647 : 						}
; 1648 : 					}
; 1649 : 				}
; 1650 : 			}
; 1651 : 			else if (!strcmp(e, "8")) {

  00377	eb 47		 jmp	 SHORT $L85723
$L84889:
  00379	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KPCI@8?$AA@ ; `string'
  0037e	56		 push	 esi
  0037f	e8 00 00 00 00	 call	 _strcmp
  00384	59		 pop	 ecx
  00385	85 c0		 test	 eax, eax
  00387	59		 pop	 ecx
  00388	75 3f		 jne	 SHORT $L84905

; 1652 : 				// FILE_RECV : e='8' : transfer error
; 1653 : 				if ((p=JabberXmlGetAttrValue(node, "i")) != NULL) {

  0038a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JAP@i?$AA@ ; `string'
  0038f	57		 push	 edi
  00390	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00395	59		 pop	 ecx
  00396	3b c3		 cmp	 eax, ebx
  00398	59		 pop	 ecx
  00399	74 2e		 je	 SHORT $L84905

; 1654 : 					if ((item=JabberListGetItemPtr(info->proto, LIST_VOICE, p)) != NULL) {

  0039b	50		 push	 eax
  0039c	8b 45 0c	 mov	 eax, DWORD PTR _info$[ebp]
  0039f	6a 05		 push	 5
  003a1	ff b0 20 0f 00
	00		 push	 DWORD PTR [eax+3872]
  003a7	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  003ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  003af	3b c3		 cmp	 eax, ebx
  003b1	74 16		 je	 SHORT $L84905

; 1655 : 						item->ft->state = FT_ERROR;

  003b3	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  003b6	c7 41 0c 04 00
	00 00		 mov	 DWORD PTR [ecx+12], 4

; 1656 : 						SetEvent(item->ft->hFileEvent);

  003bd	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
$L85723:
  003c0	ff 70 3c	 push	 DWORD PTR [eax+60]
$L85722:
  003c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$L84905:
  003c9	5f		 pop	 edi
  003ca	5e		 pop	 esi
  003cb	5b		 pop	 ebx

; 1657 : 					}
; 1658 : 				}
; 1659 : 			}
; 1660 : 
; 1661 : 		}
; 1662 : 	}
; 1663 : }

  003cc	5d		 pop	 ebp
  003cd	c3		 ret	 0
_TlenProcessV ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OEJB@Netlib?1Select?$AA@		; `string'
PUBLIC	??_C@_03LDML@?5?7?5?$AA@			; `string'
PUBLIC	??_C@_0BI@IAJP@Exiting?5KeepAliveThread?$AA@	; `string'
;	COMDAT ??_C@_0O@OEJB@Netlib?1Select?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_thread.c
_DATA	SEGMENT
??_C@_0O@OEJB@Netlib?1Select?$AA@ DB 'Netlib/Select', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LDML@?5?7?5?$AA@
_DATA	SEGMENT
??_C@_03LDML@?5?7?5?$AA@ DB ' ', 09H, ' ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@IAJP@Exiting?5KeepAliveThread?$AA@
_DATA	SEGMENT
??_C@_0BI@IAJP@Exiting?5KeepAliveThread?$AA@ DB 'Exiting KeepAliveThread', 00H ; `string'
_DATA	ENDS
;	COMDAT _JabberKeepAliveThread
_TEXT	SEGMENT
_ptr$ = 8
_nls$ = -788
_JabberKeepAliveThread PROC NEAR			; COMDAT

; 1666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 03 00
	00		 sub	 esp, 788		; 00000314H
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1667 : 	NETLIBSELECT nls = {0};

  0000b	b9 c4 00 00 00	 mov	 ecx, 196		; 000000c4H
  00010	33 c0		 xor	 eax, eax
  00012	8d bd f0 fc ff
	ff		 lea	 edi, DWORD PTR _nls$[ebp+4]

; 1668 : 
; 1669 : 	TlenProtocol *proto = (TlenProtocol *)ptr;
; 1670 : 	nls.cbSize = sizeof(NETLIBSELECT);
; 1671 : 	nls.dwTimeout = 60000;	// 60000 millisecond (1 minute)
; 1672 : 	nls.hExceptConns[0] = proto->threadData->s;
; 1673 : 	for (;;) {
; 1674 : 		if (CallService(MS_NETLIB_SELECT, 0, (LPARAM) &nls) != 0)

  00018	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@OEJB@Netlib?1Select?$AA@ ; `string'
  0001d	f3 ab		 rep stosd
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  00022	c7 85 ec fc ff
	ff 14 03 00 00	 mov	 DWORD PTR _nls$[ebp], 788 ; 00000314H
  0002c	c7 85 f0 fc ff
	ff 60 ea 00 00	 mov	 DWORD PTR _nls$[ebp+4], 60000 ; 0000ea60H
  00036	8b 87 e0 00 00
	00		 mov	 eax, DWORD PTR [edi+224]
  0003c	8b 80 d4 02 00
	00		 mov	 eax, DWORD PTR [eax+724]
  00042	89 85 fc fe ff
	ff		 mov	 DWORD PTR _nls$[ebp+528], eax
  00048	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _nls$[ebp]
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
$L85731:
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00056	56		 push	 esi
  00057	ff 50 24	 call	 DWORD PTR [eax+36]
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	85 c0		 test	 eax, eax
  0005f	75 20		 jne	 SHORT $L85730

; 1675 : 			break;
; 1676 : 		if (proto->tlenOptions.sendKeepAlive)

  00061	39 87 f0 01 00
	00		 cmp	 DWORD PTR [edi+496], eax
  00067	74 0d		 je	 SHORT $L84919

; 1677 : 			JabberSend(proto, " \t ");

  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03LDML@?5?7?5?$AA@ ; `string'
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 _JabberSend
  00074	59		 pop	 ecx
  00075	59		 pop	 ecx
$L84919:
  00076	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _nls$[ebp]
  0007c	50		 push	 eax
  0007d	6a 00		 push	 0
  0007f	eb d0		 jmp	 SHORT $L85731
$L85730:

; 1678 : 	}
; 1679 : 	JabberLog(proto, "Exiting KeepAliveThread");

  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IAJP@Exiting?5KeepAliveThread?$AA@ ; `string'
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 _JabberLog
  0008c	59		 pop	 ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi

; 1680 : }

  00090	c9		 leave
  00091	c3		 ret	 0
_JabberKeepAliveThread ENDP
_TEXT	ENDS
END
