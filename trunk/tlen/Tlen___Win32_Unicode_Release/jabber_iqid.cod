	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_iqid.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIKN@type?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NMEN@result?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FE@GNOH@E?3?2Documents?5and?5Settings?2piotr?2@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EF@JECA@?$DMiq?5type?$DN?8get?8?5id?$DN?8GetRoster?8?$DO?$DMq@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@FBNO@?$DMiq?5to?$DN?8tcfg?8?5type?$DN?8get?8?5id?$DN?8Tcf@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05COLM@error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FCEB@?$DM?1s?$DO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DE@IMOK@?$AAA?$AAu?$AAt?$AAh?$AAe?$AAn?$AAt?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EHED@?$CFs?5?$CFs?$EA?$CFs?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GPDC@Tlen?5Authentication?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MPOO@item?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJOK@subscription?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JIKN@remove?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IOLI@Status?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LBKE@both?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02LJIJ@to?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OPJK@name?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GCOD@group?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PBDF@query?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GJOJ@xmlns?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@INA@jabber?3iq?3roster?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@DPHJ@Setting?5hash?5?$FL?$CFs?$FN?5?$DN?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EKFF@RosterSync?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@GIJ@Syncing?5roster?3?5preparing?5to?5del@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JLOJ@Syncing?5roster?3?5deleting?50x?$CFx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@ICEO@DB?1Contact?1Delete?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EJBC@Status?5changed?5via?5THREADSTART?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ONOL@LoginName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KELB@first?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CJDC@FirstName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04ONL@last?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MBCL@LastName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BGEO@nick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JKH@email?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BOPE@e?9mail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NBCE@City?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KCAO@b?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DOPF@Age?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BBDA@Gender?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06POLE@School?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PGLG@j?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHOC@Occupation?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BFLA@LookingFor?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KCMF@g?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BPFM@VoiceChat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@OEII@PublicStatus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IBHF@id?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OKNP@mim_?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IM@method?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PHMF@POST?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EHD@mini?9mail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIEA@base?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03MBOC@msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BBHA@index?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FLFF@login?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CKGN@compose?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BPMN@avatar?9get?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@GALA@avatar?9upload?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@COAM@avatar?9remove?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BPOH@version?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02KBP@os?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DLKF@MirVer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KFCN@Tlen?5Protocol?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSetting_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBDeleteContactSetting
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingByte
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingWord
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingString
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberIqResultAuth
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberResultSetRoster
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberIqResultRoster
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultVcard
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _JabberIqResultSearch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetConfigItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultTcfg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultVersion
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenIqResultInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_JabberIqResultAuth
PUBLIC	??_C@_04PIKN@type?$AA@				; `string'
PUBLIC	??_C@_06NMEN@result?$AA@			; `string'
PUBLIC	??_C@_04LMAM@Nick?$AA@				; `string'
PUBLIC	??_C@_0EF@JECA@?$DMiq?5type?$DN?8get?8?5id?$DN?8GetRoster?8?$DO?$DMq@ ; `string'
PUBLIC	??_C@_0DJ@FBNO@?$DMiq?5to?$DN?8tcfg?8?5type?$DN?8get?8?5id?$DN?8Tcf@ ; `string'
PUBLIC	??_C@_05COLM@error?$AA@				; `string'
PUBLIC	??_C@_04FCEB@?$DM?1s?$DO?$AA@			; `string'
PUBLIC	??_C@_1DE@IMOK@?$AAA?$AAu?$AAt?$AAh?$AAe?$AAn?$AAt?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@	; `string'
PUBLIC	??_C@_09EHED@?$CFs?5?$CFs?$EA?$CFs?4?$AA@	; `string'
PUBLIC	??_C@_0BE@GPDC@Tlen?5Authentication?$AA@	; `string'
PUBLIC	??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@	; `string'
PUBLIC	??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@	; `string'
PUBLIC	??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@	; `string'
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_strcmp:NEAR
EXTRN	__imp___snprintf:NEAR
EXTRN	_JabberSend:NEAR
EXTRN	__imp__MessageBoxA@16:NEAR
EXTRN	_pluginLink:DWORD
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT
??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ DB 'DB/Contact/GetSetting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT
??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ DB 'DB/Contact/FreeVariant', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT
??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ DB 'DB/Contact/WriteSetting'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PIKN@type?$AA@
_DATA	SEGMENT
??_C@_04PIKN@type?$AA@ DB 'type', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NMEN@result?$AA@
_DATA	SEGMENT
??_C@_06NMEN@result?$AA@ DB 'result', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LMAM@Nick?$AA@
_DATA	SEGMENT
??_C@_04LMAM@Nick?$AA@ DB 'Nick', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0EF@JECA@?$DMiq?5type?$DN?8get?8?5id?$DN?8GetRoster?8?$DO?$DMq@
_DATA	SEGMENT
??_C@_0EF@JECA@?$DMiq?5type?$DN?8get?8?5id?$DN?8GetRoster?8?$DO?$DMq@ DB '<'
	DB	'iq type=''get'' id=''GetRoster''><query xmlns=''jabber:iq:ros'
	DB	'ter''/></iq>', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@FBNO@?$DMiq?5to?$DN?8tcfg?8?5type?$DN?8get?8?5id?$DN?8Tcf@
_DATA	SEGMENT
??_C@_0DJ@FBNO@?$DMiq?5to?$DN?8tcfg?8?5type?$DN?8get?8?5id?$DN?8Tcf@ DB '<'
	DB	'iq to=''tcfg'' type=''get'' id=''TcfgGetAfterLoggedIn''></iq>'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_05COLM@error?$AA@
_DATA	SEGMENT
??_C@_05COLM@error?$AA@ DB 'error', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FCEB@?$DM?1s?$DO?$AA@
_DATA	SEGMENT
??_C@_04FCEB@?$DM?1s?$DO?$AA@ DB '</s>', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DE@IMOK@?$AAA?$AAu?$AAt?$AAh?$AAe?$AAn?$AAt?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@
_DATA	SEGMENT
??_C@_1DE@IMOK@?$AAA?$AAu?$AAt?$AAh?$AAe?$AAn?$AAt?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@ DB 'A'
	DB	00H, 'u', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@
_DATA	SEGMENT
??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ DB 'LangPack/TranslateStrin'
	DB	'g', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EHED@?$CFs?5?$CFs?$EA?$CFs?4?$AA@
_DATA	SEGMENT
??_C@_09EHED@?$CFs?5?$CFs?$EA?$CFs?4?$AA@ DB '%s %s@%s.', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GPDC@Tlen?5Authentication?$AA@
_DATA	SEGMENT
??_C@_0BE@GPDC@Tlen?5Authentication?$AA@ DB 'Tlen Authentication', 00H ; `string'
_DATA	ENDS
;	COMDAT _JabberIqResultAuth
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_dbv$83160 = -40
_text$83172 = -168
_cgs$83864 = -12
_cws$83870 = -20
_ack$83881 = -28
_JabberIqResultAuth PROC NEAR				; COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 32   : 	char *type;
; 33   : 
; 34   : 	// RECVED: authentication result
; 35   : 	// ACTION: if successfully logged in, continue by requesting roster list and set my initial status
; 36   : 	if ((type=JabberXmlGetAttrValue(iqNode, "type")) == NULL) return;

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00011	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00014	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00019	8b f0		 mov	 esi, eax
  0001b	33 db		 xor	 ebx, ebx
  0001d	59		 pop	 ecx
  0001e	3b f3		 cmp	 esi, ebx
  00020	59		 pop	 ecx
  00021	0f 84 77 01 00
	00		 je	 $L83170

; 37   : 
; 38   : 	if (!strcmp(type, "result")) {

  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _strcmp
  00032	59		 pop	 ecx
  00033	85 c0		 test	 eax, eax
  00035	59		 pop	 ecx
  00036	0f 85 88 00 00
	00		 jne	 $L83158

; 39   : 		DBVARIANT dbv;
; 40   : 
; 41   : 		if (DBGetContactSetting(NULL, proto->iface.m_szModuleName, "Nick", &dbv))

  0003c	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  0003f	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_04LMAM@Nick?$AA@ ; `string'
  00044	89 7d f8	 mov	 DWORD PTR _cgs$83864[ebp+4], edi
  00047	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004a	89 45 f4	 mov	 DWORD PTR _cgs$83864[ebp], eax
  0004d	8d 45 d8	 lea	 eax, DWORD PTR _dbv$83160[ebp]
  00050	89 45 fc	 mov	 DWORD PTR _cgs$83864[ebp+8], eax
  00053	8d 45 f4	 lea	 eax, DWORD PTR _cgs$83864[ebp]
  00056	50		 push	 eax
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0005c	53		 push	 ebx
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00062	ff 50 24	 call	 DWORD PTR [eax+36]
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	85 c0		 test	 eax, eax
  0006a	74 25		 je	 SHORT $L83162

; 42   : 			DBWriteContactSettingString(NULL, proto->iface.m_szModuleName, "Nick", proto->threadData->username);

  0006c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0006f	80 4d f4 ff	 or	 BYTE PTR _cws$83870[ebp+8], 255 ; 000000ffH
  00073	89 45 ec	 mov	 DWORD PTR _cws$83870[ebp], eax
  00076	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0007c	83 c0 08	 add	 eax, 8
  0007f	89 7d f0	 mov	 DWORD PTR _cws$83870[ebp+4], edi
  00082	89 45 f8	 mov	 DWORD PTR _cws$83870[ebp+12], eax
  00085	8d 45 ec	 lea	 eax, DWORD PTR _cws$83870[ebp]
  00088	50		 push	 eax
  00089	53		 push	 ebx
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'

; 43   : 		else

  0008f	eb 0a		 jmp	 SHORT $L83883
$L83162:

; 44   : 			DBFreeVariant(&dbv);

  00091	8d 45 d8	 lea	 eax, DWORD PTR _dbv$83160[ebp]
  00094	50		 push	 eax
  00095	53		 push	 ebx
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
$L83883:
  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000a0	ff 50 24	 call	 DWORD PTR [eax+36]
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : //		iqId = JabberSerialNext();
; 46   : //		JabberIqAdd(iqId, IQ_PROC_NONE, JabberIqResultGetRoster);
; 47   : //		JabberSend(info, "<iq type='get' id='"JABBER_IQID"%d'><query xmlns='jabber:iq:roster'/></iq>", iqId);
; 48   : 
; 49   : 		JabberSend(proto, "<iq type='get' id='GetRoster'><query xmlns='jabber:iq:roster'/></iq>");

  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@JECA@?$DMiq?5type?$DN?8get?8?5id?$DN?8GetRoster?8?$DO?$DMq@ ; `string'
  000ab	56		 push	 esi
  000ac	e8 00 00 00 00	 call	 _JabberSend

; 50   : 		JabberSend(proto, "<iq to='tcfg' type='get' id='TcfgGetAfterLoggedIn'></iq>");

  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@FBNO@?$DMiq?5to?$DN?8tcfg?8?5type?$DN?8get?8?5id?$DN?8Tcf@ ; `string'
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 _JabberSend
  000bc	83 c4 10	 add	 esp, 16			; 00000010H

; 51   : 	}
; 52   : 	// What to do if password error? etc...
; 53   : 	else if (!strcmp(type, "error")) {

  000bf	e9 da 00 00 00	 jmp	 $L83170
$L83158:
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05COLM@error?$AA@ ; `string'
  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 _strcmp
  000cf	59		 pop	 ecx
  000d0	85 c0		 test	 eax, eax
  000d2	59		 pop	 ecx
  000d3	0f 85 c5 00 00
	00		 jne	 $L83170

; 54   : 		char text[128];
; 55   : 
; 56   : 		JabberSend(proto, "</s>");

  000d9	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04FCEB@?$DM?1s?$DO?$AA@ ; `string'
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 _JabberSend

; 57   : 		_snprintf(text, sizeof(text), "%s %s@%s.", TranslateT("Authentication failed for"), proto->threadData->username, proto->threadData->server);

  000e7	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  000ed	59		 pop	 ecx
  000ee	59		 pop	 ecx
  000ef	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BJ@MKNL@LangPack?1TranslateString?$AA@ ; `string'
  000f4	8d 88 08 01 00
	00		 lea	 ecx, DWORD PTR [eax+264]
  000fa	83 c0 08	 add	 eax, 8
  000fd	51		 push	 ecx
  000fe	50		 push	 eax
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DE@IMOK@?$AAA?$AAu?$AAt?$AAh?$AAe?$AAn?$AAt?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@ ; `string'
  00109	68 00 10 00 00	 push	 4096			; 00001000H
  0010e	57		 push	 edi
  0010f	ff 50 24	 call	 DWORD PTR [eax+36]
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	50		 push	 eax
  00116	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EHED@?$CFs?5?$CFs?$EA?$CFs?4?$AA@ ; `string'
  0011b	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _text$83172[ebp]
  00121	68 80 00 00 00	 push	 128			; 00000080H
  00126	50		 push	 eax
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 58   : 		MessageBoxA(NULL, text, Translate("Tlen Authentication"), MB_OK|MB_ICONSTOP|MB_SETFOREGROUND);

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00132	83 c4 18	 add	 esp, 24			; 00000018H
  00135	68 10 00 01 00	 push	 65552			; 00010010H
  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GPDC@Tlen?5Authentication?$AA@ ; `string'
  0013f	53		 push	 ebx
  00140	57		 push	 edi
  00141	ff 50 24	 call	 DWORD PTR [eax+36]
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
  00147	50		 push	 eax
  00148	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _text$83172[ebp]
  0014e	50		 push	 eax
  0014f	53		 push	 ebx
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 59   : 		ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_LOGIN, ACKRESULT_FAILED, NULL, LOGINERR_WRONGPASSWORD);

  00156	6a 06		 push	 6
  00158	33 c0		 xor	 eax, eax
  0015a	59		 pop	 ecx
  0015b	8d 7d e8	 lea	 edi, DWORD PTR _ack$83881[ebp+4]
  0015e	f3 ab		 rep stosd
  00160	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00163	6a 01		 push	 1
  00165	89 45 e8	 mov	 DWORD PTR _ack$83881[ebp+4], eax
  00168	58		 pop	 eax
  00169	89 45 f4	 mov	 DWORD PTR _ack$83881[ebp+16], eax
  0016c	89 45 fc	 mov	 DWORD PTR _ack$83881[ebp+24], eax
  0016f	8d 45 e4	 lea	 eax, DWORD PTR _ack$83881[ebp]
  00172	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83881[ebp], 28 ; 0000001cH
  00179	50		 push	 eax
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0017f	53		 push	 ebx
  00180	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00185	89 5d ec	 mov	 DWORD PTR _ack$83881[ebp+8], ebx
  00188	c7 45 f0 09 00
	00 00		 mov	 DWORD PTR _ack$83881[ebp+12], 9
  0018f	89 5d f8	 mov	 DWORD PTR _ack$83881[ebp+20], ebx
  00192	ff 50 24	 call	 DWORD PTR [eax+36]
  00195	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   : 		proto->threadData = NULL;	// To disallow auto reconnect

  00198	89 9e e0 00 00
	00		 mov	 DWORD PTR [esi+224], ebx
$L83170:
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx

; 61   : 	}
; 62   : }

  001a1	c9		 leave
  001a2	c3		 ret	 0
_JabberIqResultAuth ENDP
_TEXT	ENDS
PUBLIC	_JabberResultSetRoster
PUBLIC	??_C@_04MPOO@item?$AA@				; `string'
PUBLIC	??_C@_03HCJC@jid?$AA@				; `string'
PUBLIC	??_C@_0N@CJOK@subscription?$AA@			; `string'
PUBLIC	??_C@_06JIKN@remove?$AA@			; `string'
PUBLIC	??_C@_06IOLI@Status?$AA@			; `string'
PUBLIC	??_C@_04LBKE@both?$AA@				; `string'
PUBLIC	??_C@_02LJIJ@to?$AA@				; `string'
PUBLIC	??_C@_04GLLG@from?$AA@				; `string'
PUBLIC	??_C@_04OPJK@name?$AA@				; `string'
PUBLIC	??_C@_08GNFE@MyHandle?$AA@			; `string'
PUBLIC	??_C@_05NNBH@CList?$AA@				; `string'
PUBLIC	??_C@_05GCOD@group?$AA@				; `string'
PUBLIC	??_C@_05GGEJ@Group?$AA@				; `string'
PUBLIC	??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@	; `string'
EXTRN	_JabberXmlGetChild:NEAR
EXTRN	_mmi:BYTE
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	_JabberLocalNickFromJID:NEAR
EXTRN	_TlenGroupDecode:NEAR
EXTRN	_JabberTextDecode:NEAR
EXTRN	_JabberDBCreateContact:NEAR
EXTRN	_JabberContactListCreateGroup:NEAR
EXTRN	_JabberListAdd:NEAR
EXTRN	_JabberListRemove:NEAR
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ DB 'DB/Contact/DeleteSetti'
	DB	'ng', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MPOO@item?$AA@
_DATA	SEGMENT
??_C@_04MPOO@item?$AA@ DB 'item', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HCJC@jid?$AA@
_DATA	SEGMENT
??_C@_03HCJC@jid?$AA@ DB 'jid', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CJOK@subscription?$AA@
_DATA	SEGMENT
??_C@_0N@CJOK@subscription?$AA@ DB 'subscription', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JIKN@remove?$AA@
_DATA	SEGMENT
??_C@_06JIKN@remove?$AA@ DB 'remove', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IOLI@Status?$AA@
_DATA	SEGMENT
??_C@_06IOLI@Status?$AA@ DB 'Status', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LBKE@both?$AA@
_DATA	SEGMENT
??_C@_04LBKE@both?$AA@ DB 'both', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02LJIJ@to?$AA@
_DATA	SEGMENT
??_C@_02LJIJ@to?$AA@ DB 'to', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GLLG@from?$AA@
_DATA	SEGMENT
??_C@_04GLLG@from?$AA@ DB 'from', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OPJK@name?$AA@
_DATA	SEGMENT
??_C@_04OPJK@name?$AA@ DB 'name', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GNFE@MyHandle?$AA@
_DATA	SEGMENT
??_C@_08GNFE@MyHandle?$AA@ DB 'MyHandle', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NNBH@CList?$AA@
_DATA	SEGMENT
??_C@_05NNBH@CList?$AA@ DB 'CList', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GCOD@group?$AA@
_DATA	SEGMENT
??_C@_05GCOD@group?$AA@ DB 'group', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GGEJ@Group?$AA@
_DATA	SEGMENT
??_C@_05GGEJ@Group?$AA@ DB 'Group', 00H			; `string'
_DATA	ENDS
;	COMDAT _JabberResultSetRoster
_TEXT	SEGMENT
_proto$ = 8
_queryNode$ = 12
_dbv$ = -52
_itemNode$ = -16
_hContact$ = -4
_jid$ = -12
_i$ = -8
_str$ = -4
_dbv$83887 = -156
_cgs$83888 = -28
_cws$83895 = -72
_cws$83900 = -92
_cgs$83905 = -40
_cws$83909 = -144
_cws$83917 = -124
_cgs$83922 = -104
_JabberResultSetRoster PROC NEAR			; COMDAT

; 64   : void JabberResultSetRoster(TlenProtocol *proto, XmlNode *queryNode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH

; 65   :     DBVARIANT dbv;
; 66   :     XmlNode *itemNode, *groupNode;
; 67   :     JABBER_LIST_ITEM *item;
; 68   :     HANDLE hContact;
; 69   :     char *jid, *name, *nick;
; 70   :     int i;
; 71   :     char *str;
; 72   : 
; 73   :     for (i=0; i<queryNode->numChild; i++) {

  00009	8b 45 0c	 mov	 eax, DWORD PTR _queryNode$[ebp]
  0000c	83 65 f8 00	 and	 DWORD PTR _i$[ebp], 0
  00010	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00014	0f 8e 0e 03 00
	00		 jle	 $L83204
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 74   :         itemNode = queryNode->child[i];

  0001d	bb 00 00 00 00	 mov	 ebx, OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
$L83202:
  00022	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]

; 75   :         if (!strcmp(itemNode->name, "item")) {

  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MPOO@item?$AA@ ; `string'
  0002d	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  00030	89 7d f0	 mov	 DWORD PTR _itemNode$[ebp], edi
  00033	ff 77 04	 push	 DWORD PTR [edi+4]
  00036	e8 00 00 00 00	 call	 _strcmp
  0003b	59		 pop	 ecx
  0003c	85 c0		 test	 eax, eax
  0003e	59		 pop	 ecx
  0003f	0f 85 ce 02 00
	00		 jne	 $L83203

; 76   :             if ((jid=JabberXmlGetAttrValue(itemNode, "jid")) != NULL) {

  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00050	8b f0		 mov	 esi, eax
  00052	59		 pop	 ecx
  00053	85 f6		 test	 esi, esi
  00055	59		 pop	 ecx
  00056	89 75 f4	 mov	 DWORD PTR _jid$[ebp], esi
  00059	0f 84 b4 02 00
	00		 je	 $L83203

; 77   :                 str = JabberXmlGetAttrValue(itemNode, "subscription");

  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@CJOK@subscription?$AA@ ; `string'
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 78   :                 if (!strcmp(str, "remove")) {

  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JIKN@remove?$AA@ ; `string'
  0006f	50		 push	 eax
  00070	89 45 fc	 mov	 DWORD PTR _str$[ebp], eax
  00073	e8 00 00 00 00	 call	 _strcmp
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	85 c0		 test	 eax, eax

; 79   :                     if ((hContact=JabberHContactFromJID(proto, jid)) != NULL) {

  0007d	56		 push	 esi
  0007e	0f 85 8a 00 00
	00		 jne	 $L83211
  00084	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0008d	59		 pop	 ecx
  0008e	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
  00091	85 c0		 test	 eax, eax
  00093	59		 pop	 ecx
  00094	74 68		 je	 SHORT $L83894

; 80   :                         if (DBGetContactSettingWord(hContact, proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE) != ID_STATUS_OFFLINE)

  00096	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00099	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_06IOLI@Status?$AA@ ; `string'
  0009e	89 4d e4	 mov	 DWORD PTR _cgs$83888[ebp], ecx
  000a1	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _dbv$83887[ebp]
  000a7	89 4d ec	 mov	 DWORD PTR _cgs$83888[ebp+8], ecx
  000aa	8d 4d e4	 lea	 ecx, DWORD PTR _cgs$83888[ebp]
  000ad	51		 push	 ecx
  000ae	50		 push	 eax
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000b9	89 7d e8	 mov	 DWORD PTR _cgs$83888[ebp+4], edi
  000bc	ff 50 24	 call	 DWORD PTR [eax+36]
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	85 c0		 test	 eax, eax
  000c4	75 38		 jne	 SHORT $L83894
  000c6	0f b7 85 68 ff
	ff ff		 movzx	 eax, WORD PTR _dbv$83887[ebp+4]
  000cd	3d 87 9c 00 00	 cmp	 eax, 40071		; 00009c87H
  000d2	74 2a		 je	 SHORT $L83894

; 81   :                             DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "Status", ID_STATUS_OFFLINE);

  000d4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d7	89 7d bc	 mov	 DWORD PTR _cws$83895[ebp+4], edi
  000da	89 45 b8	 mov	 DWORD PTR _cws$83895[ebp], eax
  000dd	8d 45 b8	 lea	 eax, DWORD PTR _cws$83895[ebp]
  000e0	50		 push	 eax
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000e6	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  000e9	c6 45 c0 02	 mov	 BYTE PTR _cws$83895[ebp+8], 2
  000ed	66 c7 45 c4 87
	9c		 mov	 WORD PTR _cws$83895[ebp+12], 40071 ; 00009c87H
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  000f8	ff 50 24	 call	 DWORD PTR [eax+36]
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83894:

; 82   :                     }
; 83   :                     JabberListRemove(proto, LIST_ROSTER, jid);

  000fe	ff 75 f4	 push	 DWORD PTR _jid$[ebp]
  00101	6a 00		 push	 0
  00103	56		 push	 esi
  00104	e8 00 00 00 00	 call	 _JabberListRemove

; 84   :                 } else {

  00109	e9 02 02 00 00	 jmp	 $L83930
$L83211:

; 85   :                     item = JabberListAdd(proto, LIST_ROSTER, jid);

  0010e	6a 00		 push	 0
  00110	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00113	e8 00 00 00 00	 call	 _JabberListAdd
  00118	8b f0		 mov	 esi, eax
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   :                     if (item != NULL) {

  0011d	85 f6		 test	 esi, esi
  0011f	0f 84 ee 01 00
	00		 je	 $L83203

; 87   :                         if (str == NULL) item->subscription = SUB_NONE;

  00125	83 7d fc 00	 cmp	 DWORD PTR _str$[ebp], 0

; 88   :                         else if (!strcmp(str, "both")) item->subscription = SUB_BOTH;

  00129	74 54		 je	 SHORT $L83229
  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LBKE@both?$AA@ ; `string'
  00130	ff 75 fc	 push	 DWORD PTR _str$[ebp]
  00133	e8 00 00 00 00	 call	 _strcmp
  00138	59		 pop	 ecx
  00139	85 c0		 test	 eax, eax
  0013b	59		 pop	 ecx
  0013c	75 09		 jne	 SHORT $L83223
  0013e	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3

; 89   :                         else if (!strcmp(str, "to")) item->subscription = SUB_TO;

  00145	eb 3c		 jmp	 SHORT $L83231
$L83223:
  00147	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LJIJ@to?$AA@ ; `string'
  0014c	ff 75 fc	 push	 DWORD PTR _str$[ebp]
  0014f	e8 00 00 00 00	 call	 _strcmp
  00154	59		 pop	 ecx
  00155	85 c0		 test	 eax, eax
  00157	59		 pop	 ecx
  00158	75 09		 jne	 SHORT $L83226
  0015a	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 90   :                         else if (!strcmp(str, "from")) item->subscription = SUB_FROM;

  00161	eb 20		 jmp	 SHORT $L83231
$L83226:
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00168	ff 75 fc	 push	 DWORD PTR _str$[ebp]
  0016b	e8 00 00 00 00	 call	 _strcmp
  00170	59		 pop	 ecx
  00171	85 c0		 test	 eax, eax
  00173	59		 pop	 ecx
  00174	75 09		 jne	 SHORT $L83229
  00176	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2

; 91   :                         else item->subscription = SUB_NONE;

  0017d	eb 04		 jmp	 SHORT $L83231
$L83229:
  0017f	83 66 14 00	 and	 DWORD PTR [esi+20], 0
$L83231:

; 92   :                         if ((name=JabberXmlGetAttrValue(itemNode, "name")) != NULL) {

  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04OPJK@name?$AA@ ; `string'
  00188	57		 push	 edi
  00189	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0018e	59		 pop	 ecx
  0018f	85 c0		 test	 eax, eax
  00191	59		 pop	 ecx
  00192	74 08		 je	 SHORT $L83233

; 93   :                             nick = JabberTextDecode(name);

  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _JabberTextDecode

; 94   :                         } else {

  0019a	eb 08		 jmp	 SHORT $L83931
$L83233:

; 95   :                             nick = JabberLocalNickFromJID(jid);

  0019c	ff 75 f4	 push	 DWORD PTR _jid$[ebp]
  0019f	e8 00 00 00 00	 call	 _JabberLocalNickFromJID
$L83931:
  001a4	8b f8		 mov	 edi, eax
  001a6	59		 pop	 ecx

; 96   :                         }
; 97   :                         if (nick != NULL) {

  001a7	85 ff		 test	 edi, edi
  001a9	0f 84 64 01 00
	00		 je	 $L83203

; 98   :                             if (item->nick) mir_free(item->nick);

  001af	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001b2	85 c0		 test	 eax, eax
  001b4	74 08		 je	 SHORT $L83238
  001b6	50		 push	 eax
  001b7	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001bd	59		 pop	 ecx
$L83238:

; 99   :                             item->nick = nick;
; 100  : 
; 101  :                             if ((hContact=JabberHContactFromJID(proto, jid)) == NULL) {

  001be	ff 75 f4	 push	 DWORD PTR _jid$[ebp]
  001c1	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  001c4	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  001c7	e8 00 00 00 00	 call	 _JabberHContactFromJID
  001cc	59		 pop	 ecx
  001cd	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
  001d0	85 c0		 test	 eax, eax
  001d2	59		 pop	 ecx
  001d3	75 13		 jne	 SHORT $L83240

; 102  :                                 // Received roster has a new JID.
; 103  :                                 // Add the jid (with empty resource) to Miranda contact list.
; 104  :                                 hContact = JabberDBCreateContact(proto, jid, nick, FALSE);

  001d5	50		 push	 eax
  001d6	57		 push	 edi
  001d7	ff 75 f4	 push	 DWORD PTR _jid$[ebp]
  001da	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  001dd	e8 00 00 00 00	 call	 _JabberDBCreateContact
  001e2	83 c4 10	 add	 esp, 16			; 00000010H
  001e5	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
$L83240:

; 105  :                             }
; 106  :                             DBWriteContactSettingString(hContact, "CList", "MyHandle", nick);

  001e8	80 4d ac ff	 or	 BYTE PTR _cws$83900[ebp+8], 255 ; 000000ffH
  001ec	8d 45 a4	 lea	 eax, DWORD PTR _cws$83900[ebp]
  001ef	50		 push	 eax
  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001f5	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  001f8	89 5d a4	 mov	 DWORD PTR _cws$83900[ebp], ebx
  001fb	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _cws$83900[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  00202	89 7d b0	 mov	 DWORD PTR _cws$83900[ebp+12], edi
  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  0020a	ff 50 24	 call	 DWORD PTR [eax+36]

; 107  :                             if (item->group) mir_free(item->group);

  0020d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00210	83 c4 0c	 add	 esp, 12			; 0000000cH
  00213	85 c0		 test	 eax, eax
  00215	74 08		 je	 SHORT $L83243
  00217	50		 push	 eax
  00218	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0021e	59		 pop	 ecx
$L83243:

; 108  :                             if ((groupNode=JabberXmlGetChild(itemNode, "group"))!=NULL && groupNode->text!=NULL) {

  0021f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GCOD@group?$AA@ ; `string'
  00224	ff 75 f0	 push	 DWORD PTR _itemNode$[ebp]
  00227	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0022c	59		 pop	 ecx
  0022d	85 c0		 test	 eax, eax
  0022f	59		 pop	 ecx
  00230	0f 84 b8 00 00
	00		 je	 $L83246
  00236	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00239	85 c0		 test	 eax, eax
  0023b	0f 84 ad 00 00
	00		 je	 $L83246

; 109  :                                 item->group = TlenGroupDecode(groupNode->text);

  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 _TlenGroupDecode

; 110  :                                 JabberContactListCreateGroup(item->group);

  00247	50		 push	 eax
  00248	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0024b	e8 00 00 00 00	 call	 _JabberContactListCreateGroup

; 111  :                                 // Don't set group again if already correct, or Miranda may show wrong group count in some case
; 112  :                                 if (!DBGetContactSetting(hContact, "CList", "Group", &dbv)) {

  00250	8d 45 cc	 lea	 eax, DWORD PTR _dbv$[ebp]
  00253	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  00258	89 45 e0	 mov	 DWORD PTR _cgs$83905[ebp+8], eax
  0025b	8d 45 d8	 lea	 eax, DWORD PTR _cgs$83905[ebp]
  0025e	50		 push	 eax
  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00264	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  00267	89 5d d8	 mov	 DWORD PTR _cgs$83905[ebp], ebx
  0026a	89 7d dc	 mov	 DWORD PTR _cgs$83905[ebp+4], edi
  0026d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00272	ff 50 24	 call	 DWORD PTR [eax+36]
  00275	83 c4 14	 add	 esp, 20			; 00000014H
  00278	85 c0		 test	 eax, eax
  0027a	75 54		 jne	 SHORT $L83248

; 113  :                                     if (strcmp(dbv.pszVal, item->group))

  0027c	ff 76 28	 push	 DWORD PTR [esi+40]
  0027f	ff 75 d0	 push	 DWORD PTR _dbv$[ebp+4]
  00282	e8 00 00 00 00	 call	 _strcmp
  00287	59		 pop	 ecx
  00288	85 c0		 test	 eax, eax
  0028a	59		 pop	 ecx
  0028b	74 36		 je	 SHORT $L83908

; 114  :                                         DBWriteContactSettingString(hContact, "CList", "Group", item->group);

  0028d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00290	80 8d 78 ff ff
	ff ff		 or	 BYTE PTR _cws$83909[ebp+8], 255 ; 000000ffH
  00297	89 85 7c ff ff
	ff		 mov	 DWORD PTR _cws$83909[ebp+12], eax
  0029d	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _cws$83909[ebp]
  002a3	50		 push	 eax
  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002a9	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  002ac	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _cws$83909[ebp], ebx
  002b2	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _cws$83909[ebp+4], edi
  002b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  002bd	ff 50 24	 call	 DWORD PTR [eax+36]
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83908:

; 115  :                                     DBFreeVariant(&dbv);

  002c3	8d 45 cc	 lea	 eax, DWORD PTR _dbv$[ebp]
  002c6	50		 push	 eax
  002c7	6a 00		 push	 0
  002c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'

; 116  :                                 } else

  002ce	eb 38		 jmp	 SHORT $L83932
$L83248:

; 117  :                                     DBWriteContactSettingString(hContact, "CList", "Group", item->group);

  002d0	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  002d3	80 4d 8c ff	 or	 BYTE PTR _cws$83917[ebp+8], 255 ; 000000ffH
  002d7	89 45 90	 mov	 DWORD PTR _cws$83917[ebp+12], eax
  002da	8d 45 84	 lea	 eax, DWORD PTR _cws$83917[ebp]
  002dd	50		 push	 eax
  002de	89 5d 84	 mov	 DWORD PTR _cws$83917[ebp], ebx
  002e1	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  002e4	89 7d 88	 mov	 DWORD PTR _cws$83917[ebp+4], edi
  002e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'

; 118  :                             } else {

  002ec	eb 1a		 jmp	 SHORT $L83932
$L83246:

; 119  :                                 item->group = NULL;

  002ee	83 66 28 00	 and	 DWORD PTR [esi+40], 0

; 120  :                                 DBDeleteContactSetting(hContact, "CList", "Group");

  002f2	8d 45 98	 lea	 eax, DWORD PTR _cgs$83922[ebp]
  002f5	50		 push	 eax
  002f6	89 5d 98	 mov	 DWORD PTR _cgs$83922[ebp], ebx
  002f9	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  002fc	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _cgs$83922[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  00303	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
$L83932:
  00308	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0030d	ff 50 24	 call	 DWORD PTR [eax+36]
$L83930:
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83203:

; 65   :     DBVARIANT dbv;
; 66   :     XmlNode *itemNode, *groupNode;
; 67   :     JABBER_LIST_ITEM *item;
; 68   :     HANDLE hContact;
; 69   :     char *jid, *name, *nick;
; 70   :     int i;
; 71   :     char *str;
; 72   : 
; 73   :     for (i=0; i<queryNode->numChild; i++) {

  00313	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  00316	8b 45 0c	 mov	 eax, DWORD PTR _queryNode$[ebp]
  00319	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0031c	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0031f	0f 8c fd fc ff
	ff		 jl	 $L83202
  00325	5f		 pop	 edi
  00326	5e		 pop	 esi
  00327	5b		 pop	 ebx
$L83204:

; 121  :                             }
; 122  :                         }
; 123  :                     }
; 124  :                 }
; 125  :             }
; 126  :         }
; 127  :     }
; 128  : }

  00328	c9		 leave
  00329	c3		 ret	 0
_JabberResultSetRoster ENDP
_TEXT	ENDS
PUBLIC	_JabberIqResultRoster
PUBLIC	??_C@_05PBDF@query?$AA@				; `string'
PUBLIC	??_C@_05GJOJ@xmlns?$AA@				; `string'
PUBLIC	??_C@_0BB@INA@jabber?3iq?3roster?$AA@		; `string'
PUBLIC	??_C@_0L@POM@AvatarHash?$AA@			; `string'
PUBLIC	??_C@_0BH@DPHJ@Setting?5hash?5?$FL?$CFs?$FN?5?$DN?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0N@IOKO@AvatarFormat?$AA@			; `string'
PUBLIC	??_C@_0L@EKFF@RosterSync?$AA@			; `string'
PUBLIC	??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@	; `string'
PUBLIC	??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@	; `string'
PUBLIC	??_C@_0DH@GIJ@Syncing?5roster?3?5preparing?5to?5del@ ; `string'
PUBLIC	??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@	; `string'
PUBLIC	??_C@_0BO@JLOJ@Syncing?5roster?3?5deleting?50x?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0BC@ICEO@DB?1Contact?1Delete?$AA@		; `string'
PUBLIC	??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@	; `string'
PUBLIC	??_C@_0BP@EJBC@Status?5changed?5via?5THREADSTART?$AA@ ; `string'
EXTRN	_memset:NEAR
EXTRN	_JabberLog:NEAR
EXTRN	_JabberSendPresence:NEAR
EXTRN	_JabberListExist:NEAR
;	COMDAT ??_C@_05PBDF@query?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_05PBDF@query?$AA@ DB 'query', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GJOJ@xmlns?$AA@
_DATA	SEGMENT
??_C@_05GJOJ@xmlns?$AA@ DB 'xmlns', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@INA@jabber?3iq?3roster?$AA@
_DATA	SEGMENT
??_C@_0BB@INA@jabber?3iq?3roster?$AA@ DB 'jabber:iq:roster', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT
??_C@_0L@POM@AvatarHash?$AA@ DB 'AvatarHash', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@DPHJ@Setting?5hash?5?$FL?$CFs?$FN?5?$DN?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BH@DPHJ@Setting?5hash?5?$FL?$CFs?$FN?5?$DN?5?$CFs?$AA@ DB 'Setting'
	DB	' hash [%s] = %s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT
??_C@_0N@IOKO@AvatarFormat?$AA@ DB 'AvatarFormat', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EKFF@RosterSync?$AA@
_DATA	SEGMENT
??_C@_0L@EKFF@RosterSync?$AA@ DB 'RosterSync', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@
_DATA	SEGMENT
??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ DB 'DB/Contact/FindFirst', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@
_DATA	SEGMENT
??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ DB 'Proto/GetContactBasePr'
	DB	'oto', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DH@GIJ@Syncing?5roster?3?5preparing?5to?5del@
_DATA	SEGMENT
??_C@_0DH@GIJ@Syncing?5roster?3?5preparing?5to?5del@ DB 'Syncing roster: '
	DB	'preparing to delete %s (hContact=0x%x)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@
_DATA	SEGMENT
??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ DB 'DB/Contact/FindNext', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JLOJ@Syncing?5roster?3?5deleting?50x?$CFx?$AA@
_DATA	SEGMENT
??_C@_0BO@JLOJ@Syncing?5roster?3?5deleting?50x?$CFx?$AA@ DB 'Syncing rost'
	DB	'er: deleting 0x%x', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@ICEO@DB?1Contact?1Delete?$AA@
_DATA	SEGMENT
??_C@_0BC@ICEO@DB?1Contact?1Delete?$AA@ DB 'DB/Contact/Delete', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@
_DATA	SEGMENT
??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ DB 'CList/ModifyMenuItem', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EJBC@Status?5changed?5via?5THREADSTART?$AA@
_DATA	SEGMENT
??_C@_0BP@EJBC@Status?5changed?5via?5THREADSTART?$AA@ DB 'Status changed '
	DB	'via THREADSTART', 00H			; `string'
_DATA	ENDS
;	COMDAT _JabberIqResultRoster
_TEXT	SEGMENT
_dbv$83972 = -116
_cgs$83973 = -24
_dbv$83980 = -116
_cgs$83981 = -24
_cgs$83990 = -24
_ack$83998 = -68
_proto$ = 8
_iqNode$ = 12
_queryNode$ = -4
_str$ = 12
_dbv$83272 = -36
_itemNode$83273 = -40
_sub$83275 = 12
_hContact$83277 = 12
_jid$83278 = -8
_nick$83280 = 8
_i$83281 = -12
_list$83323 = 12
_listAllocSize$83325 = -4
_clmi$83356 = -80
_cws$83936 = -136
_cgs$83941 = -104
_cws$83945 = -156
_cws$83953 = -60
_cgs$83958 = -168
_cgs$83963 = -92
_JabberIqResultRoster PROC NEAR				; COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 132  : 	XmlNode *queryNode;
; 133  : 	char *type;
; 134  : 	char *str;
; 135  : 
; 136  : 	// RECVED: roster information
; 137  : 	// ACTION: populate LIST_ROSTER and create contact for any new rosters
; 138  : 	if ((type=JabberXmlGetAttrValue(iqNode, "type")) == NULL) return;

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00011	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00014	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00019	8b d8		 mov	 ebx, eax
  0001b	33 ff		 xor	 edi, edi
  0001d	59		 pop	 ecx
  0001e	3b df		 cmp	 ebx, edi
  00020	59		 pop	 ecx
  00021	0f 84 bf 05 00
	00		 je	 $L83997

; 139  : 	if ((queryNode=JabberXmlGetChild(iqNode, "query")) == NULL) return;

  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  0002c	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  0002f	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00034	8b f0		 mov	 esi, eax
  00036	59		 pop	 ecx
  00037	3b f7		 cmp	 esi, edi
  00039	59		 pop	 ecx
  0003a	89 75 fc	 mov	 DWORD PTR _queryNode$[ebp], esi
  0003d	0f 84 a3 05 00
	00		 je	 $L83997

; 140  : 
; 141  : 	if (!strcmp(type, "result")) {

  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  00048	53		 push	 ebx
  00049	e8 00 00 00 00	 call	 _strcmp
  0004e	59		 pop	 ecx
  0004f	85 c0		 test	 eax, eax
  00051	59		 pop	 ecx
  00052	0f 85 8e 05 00
	00		 jne	 $L83997

; 142  : 		str = JabberXmlGetAttrValue(queryNode, "xmlns");

  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GJOJ@xmlns?$AA@ ; `string'
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00063	59		 pop	 ecx

; 143  : 		if (str!=NULL && !strcmp(str, "jabber:iq:roster")) {

  00064	3b c7		 cmp	 eax, edi
  00066	59		 pop	 ecx
  00067	0f 84 79 05 00
	00		 je	 $L83997
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@INA@jabber?3iq?3roster?$AA@ ; `string'
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _strcmp
  00078	59		 pop	 ecx
  00079	85 c0		 test	 eax, eax
  0007b	59		 pop	 ecx
  0007c	0f 85 64 05 00
	00		 jne	 $L83997

; 144  : 			DBVARIANT dbv;
; 145  : 			XmlNode *itemNode, *groupNode;
; 146  : 			JABBER_SUBSCRIPTION sub;
; 147  : 			JABBER_LIST_ITEM *item;
; 148  : 			HANDLE hContact;
; 149  : 			char *jid, *name, *nick;
; 150  : 			int i, oldStatus;
; 151  : 
; 152  : 			for (i=0; i<queryNode->numChild; i++) {

  00082	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00085	8b 5d 08	 mov	 ebx, DWORD PTR _proto$[ebp]
  00088	89 7d f4	 mov	 DWORD PTR _i$83281[ebp], edi
  0008b	0f 8e 2a 03 00
	00		 jle	 $L83285

; 153  : 				itemNode = queryNode->child[i];

  00091	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_05NNBH@CList?$AA@ ; `string'
  00096	eb 03		 jmp	 SHORT $L83283
$L84009:
  00098	8b 75 fc	 mov	 esi, DWORD PTR _queryNode$[ebp]
$L83283:
  0009b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _i$83281[ebp]

; 154  : 				if (!strcmp(itemNode->name, "item")) {

  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MPOO@item?$AA@ ; `string'
  000a6	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
  000a9	89 75 d8	 mov	 DWORD PTR _itemNode$83273[ebp], esi
  000ac	ff 76 04	 push	 DWORD PTR [esi+4]
  000af	e8 00 00 00 00	 call	 _strcmp
  000b4	59		 pop	 ecx
  000b5	85 c0		 test	 eax, eax
  000b7	59		 pop	 ecx
  000b8	0f 85 e9 02 00
	00		 jne	 $L83284

; 155  : 					str = JabberXmlGetAttrValue(itemNode, "subscription");

  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@CJOK@subscription?$AA@ ; `string'
  000c3	56		 push	 esi
  000c4	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  000c9	59		 pop	 ecx
  000ca	89 45 0c	 mov	 DWORD PTR _str$[ebp], eax

; 156  : 					if (str==NULL) sub = SUB_NONE;

  000cd	85 c0		 test	 eax, eax
  000cf	59		 pop	 ecx
  000d0	75 05		 jne	 SHORT $L83288
  000d2	21 45 0c	 and	 DWORD PTR _sub$83275[ebp], eax

; 157  : 					else if (!strcmp(str, "both")) sub = SUB_BOTH;

  000d5	eb 50		 jmp	 SHORT $L83294
$L83288:
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04LBKE@both?$AA@ ; `string'
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _strcmp
  000e2	59		 pop	 ecx
  000e3	85 c0		 test	 eax, eax
  000e5	59		 pop	 ecx
  000e6	75 09		 jne	 SHORT $L83290
  000e8	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR _sub$83275[ebp], 3

; 158  : 					else if (!strcmp(str, "to")) sub = SUB_TO;

  000ef	eb 36		 jmp	 SHORT $L83294
$L83290:
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LJIJ@to?$AA@ ; `string'
  000f6	ff 75 0c	 push	 DWORD PTR _str$[ebp]
  000f9	e8 00 00 00 00	 call	 _strcmp
  000fe	59		 pop	 ecx
  000ff	85 c0		 test	 eax, eax
  00101	59		 pop	 ecx
  00102	75 09		 jne	 SHORT $L83292
  00104	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _sub$83275[ebp], 1

; 159  : 					else if (!strcmp(str, "from")) sub = SUB_FROM;

  0010b	eb 1a		 jmp	 SHORT $L83294
$L83292:
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00112	ff 75 0c	 push	 DWORD PTR _str$[ebp]
  00115	e8 00 00 00 00	 call	 _strcmp
  0011a	f7 d8		 neg	 eax
  0011c	1b c0		 sbb	 eax, eax
  0011e	59		 pop	 ecx
  0011f	24 fe		 and	 al, -2			; fffffffeH
  00121	59		 pop	 ecx
  00122	40		 inc	 eax
  00123	40		 inc	 eax
  00124	89 45 0c	 mov	 DWORD PTR _sub$83275[ebp], eax
$L83294:

; 160  : 					else sub = SUB_NONE;
; 161  : 					//if (str!=NULL && (!strcmp(str, "to") || !strcmp(str, "both"))) {
; 162  : 					if ((jid=JabberXmlGetAttrValue(itemNode, "jid")) != NULL) {

  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0012c	56		 push	 esi
  0012d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00132	59		 pop	 ecx
  00133	89 45 f8	 mov	 DWORD PTR _jid$83278[ebp], eax
  00136	85 c0		 test	 eax, eax
  00138	59		 pop	 ecx
  00139	0f 84 68 02 00
	00		 je	 $L83284

; 163  : 						if ((name=JabberXmlGetAttrValue(itemNode, "name")) != NULL) {

  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04OPJK@name?$AA@ ; `string'
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0014a	59		 pop	 ecx
  0014b	85 c0		 test	 eax, eax
  0014d	59		 pop	 ecx
  0014e	74 08		 je	 SHORT $L83299

; 164  : 							nick = JabberTextDecode(name);

  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _JabberTextDecode

; 165  : 						} else {

  00156	eb 08		 jmp	 SHORT $L84016
$L83299:

; 166  : 							nick = JabberLocalNickFromJID(jid);

  00158	ff 75 f8	 push	 DWORD PTR _jid$83278[ebp]
  0015b	e8 00 00 00 00	 call	 _JabberLocalNickFromJID
$L84016:

; 167  : 						}
; 168  : 						if (nick != NULL) {

  00160	85 c0		 test	 eax, eax
  00162	59		 pop	 ecx
  00163	89 45 08	 mov	 DWORD PTR _nick$83280[ebp], eax
  00166	0f 84 3b 02 00
	00		 je	 $L83284

; 169  : 							item = JabberListAdd(proto, LIST_ROSTER, jid);

  0016c	ff 75 f8	 push	 DWORD PTR _jid$83278[ebp]
  0016f	6a 00		 push	 0
  00171	53		 push	 ebx
  00172	e8 00 00 00 00	 call	 _JabberListAdd
  00177	8b f0		 mov	 esi, eax
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 							if (item->nick) mir_free(item->nick);

  0017c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0017f	85 c0		 test	 eax, eax
  00181	74 08		 je	 SHORT $L83303
  00183	50		 push	 eax
  00184	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0018a	59		 pop	 ecx
$L83303:

; 171  : 							item->nick = nick;

  0018b	8b 45 08	 mov	 eax, DWORD PTR _nick$83280[ebp]

; 172  : 							item->subscription = sub;
; 173  : 							if ((hContact=JabberHContactFromJID(proto, jid)) == NULL) {

  0018e	ff 75 f8	 push	 DWORD PTR _jid$83278[ebp]
  00191	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00194	8b 45 0c	 mov	 eax, DWORD PTR _sub$83275[ebp]
  00197	53		 push	 ebx
  00198	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0019b	e8 00 00 00 00	 call	 _JabberHContactFromJID
  001a0	59		 pop	 ecx
  001a1	89 45 0c	 mov	 DWORD PTR _hContact$83277[ebp], eax
  001a4	85 c0		 test	 eax, eax
  001a6	59		 pop	 ecx
  001a7	75 13		 jne	 SHORT $L83305

; 174  : 								// Received roster has a new JID.
; 175  : 								// Add the jid (with empty resource) to Miranda contact list.
; 176  : 								hContact = JabberDBCreateContact(proto, jid, nick, FALSE);

  001a9	50		 push	 eax
  001aa	ff 75 08	 push	 DWORD PTR _nick$83280[ebp]
  001ad	ff 75 f8	 push	 DWORD PTR _jid$83278[ebp]
  001b0	53		 push	 ebx
  001b1	e8 00 00 00 00	 call	 _JabberDBCreateContact
  001b6	83 c4 10	 add	 esp, 16			; 00000010H
  001b9	89 45 0c	 mov	 DWORD PTR _hContact$83277[ebp], eax
$L83305:

; 177  : 							}
; 178  : 							DBWriteContactSettingString(hContact, "CList", "MyHandle", nick);

  001bc	8b 45 08	 mov	 eax, DWORD PTR _nick$83280[ebp]
  001bf	80 4d 80 ff	 or	 BYTE PTR _cws$83936[ebp+8], 255 ; 000000ffH
  001c3	89 45 84	 mov	 DWORD PTR _cws$83936[ebp+12], eax
  001c6	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _cws$83936[ebp]
  001cc	50		 push	 eax
  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001d2	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  001d5	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _cws$83936[ebp], edi
  001db	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$83936[ebp+4], OFFSET FLAT:??_C@_08GNFE@MyHandle?$AA@ ; `string'
  001e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  001ea	ff 50 24	 call	 DWORD PTR [eax+36]

; 179  : 							if (item->group) mir_free(item->group);

  001ed	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f3	85 c0		 test	 eax, eax
  001f5	74 08		 je	 SHORT $L83306
  001f7	50		 push	 eax
  001f8	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001fe	59		 pop	 ecx
$L83306:

; 180  : 							if ((groupNode=JabberXmlGetChild(itemNode, "group"))!=NULL && groupNode->text!=NULL) {

  001ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GCOD@group?$AA@ ; `string'
  00204	ff 75 d8	 push	 DWORD PTR _itemNode$83273[ebp]
  00207	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0020c	59		 pop	 ecx
  0020d	85 c0		 test	 eax, eax
  0020f	59		 pop	 ecx
  00210	0f 84 bf 00 00
	00		 je	 $L83309
  00216	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00219	85 c0		 test	 eax, eax
  0021b	0f 84 b4 00 00
	00		 je	 $L83309

; 181  : 								item->group = TlenGroupDecode(groupNode->text);

  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _TlenGroupDecode

; 182  : 								JabberContactListCreateGroup(item->group);

  00227	50		 push	 eax
  00228	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0022b	e8 00 00 00 00	 call	 _JabberContactListCreateGroup

; 183  : 								// Don't set group again if already correct, or Miranda may show wrong group count in some case
; 184  : 								if (!DBGetContactSetting(hContact, "CList", "Group", &dbv)) {

  00230	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  00233	89 7d 98	 mov	 DWORD PTR _cgs$83941[ebp], edi
  00236	89 45 a0	 mov	 DWORD PTR _cgs$83941[ebp+8], eax
  00239	8d 45 98	 lea	 eax, DWORD PTR _cgs$83941[ebp]
  0023c	50		 push	 eax
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00242	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  00245	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _cgs$83941[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  0024c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00251	ff 50 24	 call	 DWORD PTR [eax+36]
  00254	83 c4 14	 add	 esp, 20			; 00000014H
  00257	85 c0		 test	 eax, eax
  00259	75 58		 jne	 SHORT $L83310

; 185  : 									if (strcmp(dbv.pszVal, item->group))

  0025b	ff 76 28	 push	 DWORD PTR [esi+40]
  0025e	ff 75 e0	 push	 DWORD PTR _dbv$83272[ebp+4]
  00261	e8 00 00 00 00	 call	 _strcmp
  00266	59		 pop	 ecx
  00267	85 c0		 test	 eax, eax
  00269	59		 pop	 ecx
  0026a	74 3a		 je	 SHORT $L83944

; 186  : 										DBWriteContactSettingString(hContact, "CList", "Group", item->group);

  0026c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0026f	80 8d 6c ff ff
	ff ff		 or	 BYTE PTR _cws$83945[ebp+8], 255 ; 000000ffH
  00276	89 85 70 ff ff
	ff		 mov	 DWORD PTR _cws$83945[ebp+12], eax
  0027c	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _cws$83945[ebp]
  00282	50		 push	 eax
  00283	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00288	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  0028b	89 bd 64 ff ff
	ff		 mov	 DWORD PTR _cws$83945[ebp], edi
  00291	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$83945[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  0029b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  002a0	ff 50 24	 call	 DWORD PTR [eax+36]
  002a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83944:

; 187  : 									DBFreeVariant(&dbv);

  002a6	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  002a9	50		 push	 eax
  002aa	6a 00		 push	 0
  002ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'

; 188  : 								}
; 189  : 								else

  002b1	eb 45		 jmp	 SHORT $L84017
$L83310:

; 190  : 									DBWriteContactSettingString(hContact, "CList", "Group", item->group);

  002b3	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  002b6	80 4d cc ff	 or	 BYTE PTR _cws$83953[ebp+8], 255 ; 000000ffH
  002ba	89 45 d0	 mov	 DWORD PTR _cws$83953[ebp+12], eax
  002bd	8d 45 c4	 lea	 eax, DWORD PTR _cws$83953[ebp]
  002c0	50		 push	 eax
  002c1	89 7d c4	 mov	 DWORD PTR _cws$83953[ebp], edi
  002c4	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  002c7	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _cws$83953[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  002ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'

; 191  : 							}
; 192  : 							else {

  002d3	eb 23		 jmp	 SHORT $L84017
$L83309:

; 193  : 								item->group = NULL;

  002d5	83 66 28 00	 and	 DWORD PTR [esi+40], 0

; 194  : 								DBDeleteContactSetting(hContact, "CList", "Group");

  002d9	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _cgs$83958[ebp]
  002df	50		 push	 eax
  002e0	89 bd 58 ff ff
	ff		 mov	 DWORD PTR _cgs$83958[ebp], edi
  002e6	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  002e9	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cgs$83958[ebp+4], OFFSET FLAT:??_C@_05GGEJ@Group?$AA@ ; `string'
  002f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
$L84017:
  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  002fd	ff 50 24	 call	 DWORD PTR [eax+36]

; 195  : 							}
; 196  : 							if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "AvatarHash", &dbv)) {

  00300	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00303	83 c4 0c	 add	 esp, 12			; 0000000cH
  00306	89 45 a4	 mov	 DWORD PTR _cgs$83963[ebp], eax
  00309	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  0030c	89 45 ac	 mov	 DWORD PTR _cgs$83963[ebp+8], eax
  0030f	8d 45 a4	 lea	 eax, DWORD PTR _cgs$83963[ebp]
  00312	50		 push	 eax
  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00318	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  0031b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _cgs$83963[ebp+4], OFFSET FLAT:??_C@_0L@POM@AvatarHash?$AA@ ; `string'
  00322	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00327	ff 50 24	 call	 DWORD PTR [eax+36]
  0032a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0032d	85 c0		 test	 eax, eax
  0032f	75 40		 jne	 SHORT $L83967

; 197  : 								if (item->avatarHash) mir_free(item->avatarHash);

  00331	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00334	85 c0		 test	 eax, eax
  00336	74 08		 je	 SHORT $L83317
  00338	50		 push	 eax
  00339	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0033f	59		 pop	 ecx
$L83317:

; 198  : 								item->avatarHash = mir_strdup(dbv.pszVal);

  00340	ff 75 e0	 push	 DWORD PTR _dbv$83272[ebp+4]
  00343	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 199  : 								JabberLog(proto, "Setting hash [%s] = %s", nick, item->avatarHash);

  00349	50		 push	 eax
  0034a	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0034d	ff 75 08	 push	 DWORD PTR _nick$83280[ebp]
  00350	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@DPHJ@Setting?5hash?5?$FL?$CFs?$FN?5?$DN?5?$CFs?$AA@ ; `string'
  00355	53		 push	 ebx
  00356	e8 00 00 00 00	 call	 _JabberLog

; 200  : 								DBFreeVariant(&dbv);

  0035b	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  0035e	50		 push	 eax
  0035f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00364	6a 00		 push	 0
  00366	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  0036b	ff 50 24	 call	 DWORD PTR [eax+36]
  0036e	83 c4 20	 add	 esp, 32			; 00000020H
$L83967:

; 201  : 							}
; 202  : 							item->avatarFormat = DBGetContactSettingDword(hContact, proto->iface.m_szModuleName, "AvatarFormat", PA_FORMAT_UNKNOWN);

  00371	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00374	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$83973[ebp+4], OFFSET FLAT:??_C@_0N@IOKO@AvatarFormat?$AA@ ; `string'
  0037b	89 45 e8	 mov	 DWORD PTR _cgs$83973[ebp], eax
  0037e	8d 45 8c	 lea	 eax, DWORD PTR _dbv$83972[ebp]
  00381	89 45 f0	 mov	 DWORD PTR _cgs$83973[ebp+8], eax
  00384	8d 45 e8	 lea	 eax, DWORD PTR _cgs$83973[ebp]
  00387	50		 push	 eax
  00388	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0038d	ff 75 0c	 push	 DWORD PTR _hContact$83277[ebp]
  00390	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00395	ff 50 24	 call	 DWORD PTR [eax+36]
  00398	83 c4 0c	 add	 esp, 12			; 0000000cH
  0039b	f7 d8		 neg	 eax
  0039d	1b c0		 sbb	 eax, eax
  0039f	f7 d0		 not	 eax
  003a1	23 45 90	 and	 eax, DWORD PTR _dbv$83972[ebp+4]
  003a4	89 46 30	 mov	 DWORD PTR [esi+48], eax
$L83284:
  003a7	ff 45 f4	 inc	 DWORD PTR _i$83281[ebp]
  003aa	8b 45 fc	 mov	 eax, DWORD PTR _queryNode$[ebp]
  003ad	8b 4d f4	 mov	 ecx, DWORD PTR _i$83281[ebp]
  003b0	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  003b3	0f 8c df fc ff
	ff		 jl	 $L84009

; 144  : 			DBVARIANT dbv;
; 145  : 			XmlNode *itemNode, *groupNode;
; 146  : 			JABBER_SUBSCRIPTION sub;
; 147  : 			JABBER_LIST_ITEM *item;
; 148  : 			HANDLE hContact;
; 149  : 			char *jid, *name, *nick;
; 150  : 			int i, oldStatus;
; 151  : 
; 152  : 			for (i=0; i<queryNode->numChild; i++) {

  003b9	33 ff		 xor	 edi, edi
$L83285:

; 203  : 						}
; 204  : 					}
; 205  : 				}
; 206  : 			}
; 207  : 			// Delete orphaned contacts (if roster sync is enabled)
; 208  : 			if (DBGetContactSettingByte(NULL, proto->iface.m_szModuleName, "RosterSync", FALSE) == TRUE) {

  003bb	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  003be	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$83981[ebp+4], OFFSET FLAT:??_C@_0L@EKFF@RosterSync?$AA@ ; `string'
  003c5	89 45 e8	 mov	 DWORD PTR _cgs$83981[ebp], eax
  003c8	8d 45 8c	 lea	 eax, DWORD PTR _dbv$83980[ebp]
  003cb	89 45 f0	 mov	 DWORD PTR _cgs$83981[ebp+8], eax
  003ce	8d 45 e8	 lea	 eax, DWORD PTR _cgs$83981[ebp]
  003d1	50		 push	 eax
  003d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003d7	57		 push	 edi
  003d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  003dd	ff 50 24	 call	 DWORD PTR [eax+36]
  003e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e3	85 c0		 test	 eax, eax
  003e5	0f 85 52 01 00
	00		 jne	 $L83355
  003eb	0f b6 45 90	 movzx	 eax, BYTE PTR _dbv$83980[ebp+4]
  003ef	83 f8 01	 cmp	 eax, 1
  003f2	0f 85 45 01 00
	00		 jne	 $L83355

; 213  : 				list = NULL;
; 214  : 				hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDFIRST, 0, 0);

  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  003fd	57		 push	 edi
  003fe	57		 push	 edi
  003ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@ODDI@DB?1Contact?1FindFirst?$AA@ ; `string'
  00404	89 7d fc	 mov	 DWORD PTR _listAllocSize$83325[ebp], edi
  00407	33 f6		 xor	 esi, esi
  00409	89 7d 0c	 mov	 DWORD PTR _list$83323[ebp], edi
  0040c	ff 50 24	 call	 DWORD PTR [eax+36]
  0040f	8b f8		 mov	 edi, eax
  00411	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : 				while (hContact != NULL) {

  00414	85 ff		 test	 edi, edi
  00416	0f 84 e3 00 00
	00		 je	 $L83332

; 209  : 				HANDLE *list;
; 210  : 				int listSize, listAllocSize;
; 211  : 
; 212  : 				listSize = listAllocSize = 0;

  0041c	c7 45 08 64 00
	00 00		 mov	 DWORD PTR 8+[ebp], 100	; 00000064H
$L83331:

; 216  : 					str = (char *) CallService(MS_PROTO_GETCONTACTBASEPROTO, (WPARAM) hContact, 0);

  00423	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00428	6a 00		 push	 0
  0042a	57		 push	 edi
  0042b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HFIO@Proto?1GetContactBaseProto?$AA@ ; `string'
  00430	ff 50 24	 call	 DWORD PTR [eax+36]
  00433	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 					if(str!=NULL && !strcmp(str, proto->iface.m_szModuleName)) {

  00436	85 c0		 test	 eax, eax
  00438	0f 84 a0 00 00
	00		 je	 $L83994
  0043e	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 _strcmp
  00447	59		 pop	 ecx
  00448	85 c0		 test	 eax, eax
  0044a	59		 pop	 ecx
  0044b	0f 85 8d 00 00
	00		 jne	 $L83994

; 218  : 						if (!DBGetContactSetting(hContact, proto->iface.m_szModuleName, "jid", &dbv)) {

  00451	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00454	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cgs$83990[ebp+4], OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  0045b	89 45 e8	 mov	 DWORD PTR _cgs$83990[ebp], eax
  0045e	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  00461	89 45 f0	 mov	 DWORD PTR _cgs$83990[ebp+8], eax
  00464	8d 45 e8	 lea	 eax, DWORD PTR _cgs$83990[ebp]
  00467	50		 push	 eax
  00468	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0046d	57		 push	 edi
  0046e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  00473	ff 50 24	 call	 DWORD PTR [eax+36]
  00476	83 c4 0c	 add	 esp, 12			; 0000000cH
  00479	85 c0		 test	 eax, eax
  0047b	75 61		 jne	 SHORT $L83994

; 219  : 							if (!JabberListExist(proto, LIST_ROSTER, dbv.pszVal)) {

  0047d	ff 75 e0	 push	 DWORD PTR _dbv$83272[ebp+4]
  00480	50		 push	 eax
  00481	53		 push	 ebx
  00482	e8 00 00 00 00	 call	 _JabberListExist
  00487	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048a	85 c0		 test	 eax, eax
  0048c	75 3a		 jne	 SHORT $L83339

; 220  : 								JabberLog(proto, "Syncing roster: preparing to delete %s (hContact=0x%x)", dbv.pszVal, hContact);

  0048e	57		 push	 edi
  0048f	ff 75 e0	 push	 DWORD PTR _dbv$83272[ebp+4]
  00492	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@GIJ@Syncing?5roster?3?5preparing?5to?5del@ ; `string'
  00497	53		 push	 ebx
  00498	e8 00 00 00 00	 call	 _JabberLog
  0049d	83 c4 10	 add	 esp, 16			; 00000010H

; 221  : 								if (listSize >= listAllocSize) {

  004a0	3b 75 fc	 cmp	 esi, DWORD PTR _listAllocSize$83325[ebp]
  004a3	7c 19		 jl	 SHORT $L83344

; 222  : 									listAllocSize = listSize + 100;

  004a5	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]

; 223  : 									if ((list=(HANDLE *) mir_realloc(list, listAllocSize)) == NULL) {

  004a8	50		 push	 eax
  004a9	89 45 fc	 mov	 DWORD PTR _listAllocSize$83325[ebp], eax
  004ac	ff 75 0c	 push	 DWORD PTR _list$83323[ebp]
  004af	ff 15 08 00 00
	00		 call	 DWORD PTR _mmi+8
  004b5	59		 pop	 ecx
  004b6	89 45 0c	 mov	 DWORD PTR _list$83323[ebp], eax
  004b9	85 c0		 test	 eax, eax
  004bb	59		 pop	 ecx
  004bc	74 3f		 je	 SHORT $L84004
$L83344:

; 225  : 										break;
; 226  : 									}
; 227  : 								}
; 228  : 								list[listSize++] = hContact;

  004be	8b 45 0c	 mov	 eax, DWORD PTR _list$83323[ebp]
  004c1	89 3c b0	 mov	 DWORD PTR [eax+esi*4], edi
  004c4	46		 inc	 esi
  004c5	ff 45 08	 inc	 DWORD PTR 8+[ebp]
$L83339:

; 229  : 							}
; 230  : 							DBFreeVariant(&dbv);

  004c8	8d 45 dc	 lea	 eax, DWORD PTR _dbv$83272[ebp]
  004cb	50		 push	 eax
  004cc	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004d1	6a 00		 push	 0
  004d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  004d8	ff 50 24	 call	 DWORD PTR [eax+36]
  004db	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83994:

; 231  : 						}
; 232  : 					}
; 233  : 					hContact = (HANDLE) CallService(MS_DB_CONTACT_FINDNEXT, (WPARAM) hContact, 0);

  004de	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  004e3	6a 00		 push	 0
  004e5	57		 push	 edi
  004e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LDI@DB?1Contact?1FindNext?$AA@ ; `string'
  004eb	ff 50 24	 call	 DWORD PTR [eax+36]
  004ee	8b f8		 mov	 edi, eax
  004f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f3	85 ff		 test	 edi, edi
  004f5	0f 85 28 ff ff
	ff		 jne	 $L83331

; 223  : 									if ((list=(HANDLE *) mir_realloc(list, listAllocSize)) == NULL) {

  004fb	eb 02		 jmp	 SHORT $L83332
$L84004:

; 224  : 										listSize = 0;

  004fd	33 f6		 xor	 esi, esi
$L83332:

; 234  : 				}
; 235  : 				for (i=0; i<listSize; i++) {

  004ff	85 f6		 test	 esi, esi
  00501	7e 2a		 jle	 SHORT $L83350
  00503	8b 7d 0c	 mov	 edi, DWORD PTR _list$83323[ebp]
$L83348:

; 236  : 					JabberLog(proto, "Syncing roster: deleting 0x%x", list[i]);

  00506	ff 37		 push	 DWORD PTR [edi]
  00508	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JLOJ@Syncing?5roster?3?5deleting?50x?$CFx?$AA@ ; `string'
  0050d	53		 push	 ebx
  0050e	e8 00 00 00 00	 call	 _JabberLog

; 237  : 					CallService(MS_DB_CONTACT_DELETE, (WPARAM) list[i], 0);

  00513	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00518	6a 00		 push	 0
  0051a	ff 37		 push	 DWORD PTR [edi]
  0051c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@ICEO@DB?1Contact?1Delete?$AA@ ; `string'
  00521	ff 50 24	 call	 DWORD PTR [eax+36]
  00524	83 c4 18	 add	 esp, 24			; 00000018H
  00527	83 c7 04	 add	 edi, 4
  0052a	4e		 dec	 esi
  0052b	75 d9		 jne	 SHORT $L83348
$L83350:

; 238  : 				}
; 239  : 				if (list != NULL)

  0052d	83 7d 0c 00	 cmp	 DWORD PTR _list$83323[ebp], 0
  00531	74 0a		 je	 SHORT $L83355

; 240  : 					mir_free(list);

  00533	ff 75 0c	 push	 DWORD PTR _list$83323[ebp]
  00536	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0053c	59		 pop	 ecx
$L83355:

; 241  : 			}
; 242  : 			///////////////////////////////////////
; 243  : 			{
; 244  : 				CLISTMENUITEM clmi;
; 245  : 				memset(&clmi, 0, sizeof(CLISTMENUITEM));

  0053d	6a 28		 push	 40			; 00000028H
  0053f	8d 45 b0	 lea	 eax, DWORD PTR _clmi$83356[ebp]
  00542	5f		 pop	 edi
  00543	57		 push	 edi
  00544	6a 00		 push	 0
  00546	50		 push	 eax
  00547	e8 00 00 00 00	 call	 _memset

; 246  : 				clmi.cbSize = sizeof(CLISTMENUITEM);
; 247  : 				clmi.flags = CMIM_FLAGS;
; 248  : 				CallService(MS_CLIST_MODIFYMENUITEM, (WPARAM) proto->hMenuMUC, (LPARAM) &clmi);

  0054c	8d 45 b0	 lea	 eax, DWORD PTR _clmi$83356[ebp]
  0054f	89 7d b0	 mov	 DWORD PTR _clmi$83356[ebp], edi
  00552	50		 push	 eax
  00553	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00558	ff b3 e8 00 00
	00		 push	 DWORD PTR [ebx+232]
  0055e	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_0BF@CGG@CList?1ModifyMenuItem?$AA@ ; `string'
  00563	c7 45 b8 00 00
	00 40		 mov	 DWORD PTR _clmi$83356[ebp+8], 1073741824 ; 40000000H
  0056a	57		 push	 edi
  0056b	ff 50 24	 call	 DWORD PTR [eax+36]

; 249  : 				CallService(MS_CLIST_MODIFYMENUITEM, (WPARAM) proto->hMenuChats, (LPARAM) &clmi);

  0056e	8d 45 b0	 lea	 eax, DWORD PTR _clmi$83356[ebp]
  00571	50		 push	 eax
  00572	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00577	ff b3 ec 00 00
	00		 push	 DWORD PTR [ebx+236]
  0057d	57		 push	 edi
  0057e	ff 50 24	 call	 DWORD PTR [eax+36]

; 250  : 			}
; 251  : 
; 252  : 			proto->jabberOnline = TRUE;
; 253  : 			JabberLog(proto, "Status changed via THREADSTART");

  00581	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@EJBC@Status?5changed?5via?5THREADSTART?$AA@ ; `string'
  00586	53		 push	 ebx
  00587	c7 83 78 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+376], 1
  00591	e8 00 00 00 00	 call	 _JabberLog

; 254  : 			oldStatus = proto->iface.m_iStatus;
; 255  : 			JabberSendPresence(proto, proto->iface.m_iDesiredStatus);

  00596	ff 73 08	 push	 DWORD PTR [ebx+8]
  00599	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0059c	53		 push	 ebx
  0059d	e8 00 00 00 00	 call	 _JabberSendPresence

; 256  : 			ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_STATUS, ACKRESULT_SUCCESS, (HANDLE) oldStatus, proto->iface.m_iStatus);

  005a2	6a 06		 push	 6
  005a4	33 c0		 xor	 eax, eax
  005a6	59		 pop	 ecx
  005a7	8d 7d c0	 lea	 edi, DWORD PTR _ack$83998[ebp+4]
  005aa	f3 ab		 rep stosd
  005ac	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  005af	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  005b2	89 4d d4	 mov	 DWORD PTR _ack$83998[ebp+24], ecx
  005b5	89 45 c0	 mov	 DWORD PTR _ack$83998[ebp+4], eax
  005b8	8d 4d bc	 lea	 ecx, DWORD PTR _ack$83998[ebp]
  005bb	33 c0		 xor	 eax, eax
  005bd	51		 push	 ecx
  005be	89 45 c4	 mov	 DWORD PTR _ack$83998[ebp+8], eax
  005c1	89 45 cc	 mov	 DWORD PTR _ack$83998[ebp+16], eax
  005c4	50		 push	 eax
  005c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  005ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  005cf	c7 45 bc 1c 00
	00 00		 mov	 DWORD PTR _ack$83998[ebp], 28 ; 0000001cH
  005d6	c7 45 c8 0c 00
	00 00		 mov	 DWORD PTR _ack$83998[ebp+12], 12 ; 0000000cH
  005dd	89 75 d0	 mov	 DWORD PTR _ack$83998[ebp+20], esi
  005e0	ff 50 24	 call	 DWORD PTR [eax+36]
  005e3	83 c4 40	 add	 esp, 64			; 00000040H
$L83997:
  005e6	5f		 pop	 edi
  005e7	5e		 pop	 esi
  005e8	5b		 pop	 ebx

; 257  : 			//////////////////////////////////
; 258  : 		}
; 259  : 	}
; 260  : }

  005e9	c9		 leave
  005ea	c3		 ret	 0
_JabberIqResultRoster ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultVcard
PUBLIC	??_C@_0M@IBOM@LoginServer?$AA@			; `string'
PUBLIC	??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@		; `string'
PUBLIC	??_C@_09ONOL@LoginName?$AA@			; `string'
PUBLIC	??_C@_05KELB@first?$AA@				; `string'
PUBLIC	??_C@_09CJDC@FirstName?$AA@			; `string'
PUBLIC	??_C@_04ONL@last?$AA@				; `string'
PUBLIC	??_C@_08MBCL@LastName?$AA@			; `string'
PUBLIC	??_C@_04BGEO@nick?$AA@				; `string'
PUBLIC	??_C@_05JKH@email?$AA@				; `string'
PUBLIC	??_C@_06BOPE@e?9mail?$AA@			; `string'
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	??_C@_04NBCE@City?$AA@				; `string'
PUBLIC	??_C@_01KCAO@b?$AA@				; `string'
PUBLIC	??_C@_03DOPF@Age?$AA@				; `string'
PUBLIC	??_C@_01KBOJ@s?$AA@				; `string'
PUBLIC	??_C@_06BBDA@Gender?$AA@			; `string'
PUBLIC	??_C@_01PHOL@e?$AA@				; `string'
PUBLIC	??_C@_06POLE@School?$AA@			; `string'
PUBLIC	??_C@_01PGLG@j?$AA@				; `string'
PUBLIC	??_C@_0L@IHOC@Occupation?$AA@			; `string'
PUBLIC	??_C@_01LHO@r?$AA@				; `string'
PUBLIC	??_C@_0L@BFLA@LookingFor?$AA@			; `string'
PUBLIC	??_C@_01KCMF@g?$AA@				; `string'
PUBLIC	??_C@_09BPFM@VoiceChat?$AA@			; `string'
PUBLIC	??_C@_01KBCC@v?$AA@				; `string'
PUBLIC	??_C@_0N@OEII@PublicStatus?$AA@			; `string'
EXTRN	__imp__atoi:NEAR
EXTRN	__imp__sprintf:NEAR
;	COMDAT ??_C@_0M@IBOM@LoginServer?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0M@IBOM@LoginServer?$AA@ DB 'LoginServer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@
_DATA	SEGMENT
??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ DB '%s@%s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ONOL@LoginName?$AA@
_DATA	SEGMENT
??_C@_09ONOL@LoginName?$AA@ DB 'LoginName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KELB@first?$AA@
_DATA	SEGMENT
??_C@_05KELB@first?$AA@ DB 'first', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CJDC@FirstName?$AA@
_DATA	SEGMENT
??_C@_09CJDC@FirstName?$AA@ DB 'FirstName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04ONL@last?$AA@
_DATA	SEGMENT
??_C@_04ONL@last?$AA@ DB 'last', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08MBCL@LastName?$AA@
_DATA	SEGMENT
??_C@_08MBCL@LastName?$AA@ DB 'LastName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BGEO@nick?$AA@
_DATA	SEGMENT
??_C@_04BGEO@nick?$AA@ DB 'nick', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JKH@email?$AA@
_DATA	SEGMENT
??_C@_05JKH@email?$AA@ DB 'email', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BOPE@e?9mail?$AA@
_DATA	SEGMENT
??_C@_06BOPE@e?9mail?$AA@ DB 'e-mail', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NBCE@City?$AA@
_DATA	SEGMENT
??_C@_04NBCE@City?$AA@ DB 'City', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KCAO@b?$AA@
_DATA	SEGMENT
??_C@_01KCAO@b?$AA@ DB 'b', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DOPF@Age?$AA@
_DATA	SEGMENT
??_C@_03DOPF@Age?$AA@ DB 'Age', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBOJ@s?$AA@
_DATA	SEGMENT
??_C@_01KBOJ@s?$AA@ DB 's', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BBDA@Gender?$AA@
_DATA	SEGMENT
??_C@_06BBDA@Gender?$AA@ DB 'Gender', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PHOL@e?$AA@
_DATA	SEGMENT
??_C@_01PHOL@e?$AA@ DB 'e', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06POLE@School?$AA@
_DATA	SEGMENT
??_C@_06POLE@School?$AA@ DB 'School', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PGLG@j?$AA@
_DATA	SEGMENT
??_C@_01PGLG@j?$AA@ DB 'j', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHOC@Occupation?$AA@
_DATA	SEGMENT
??_C@_0L@IHOC@Occupation?$AA@ DB 'Occupation', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01LHO@r?$AA@
_DATA	SEGMENT
??_C@_01LHO@r?$AA@ DB 'r', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BFLA@LookingFor?$AA@
_DATA	SEGMENT
??_C@_0L@BFLA@LookingFor?$AA@ DB 'LookingFor', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KCMF@g?$AA@
_DATA	SEGMENT
??_C@_01KCMF@g?$AA@ DB 'g', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BPFM@VoiceChat?$AA@
_DATA	SEGMENT
??_C@_09BPFM@VoiceChat?$AA@ DB 'VoiceChat', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KBCC@v?$AA@
_DATA	SEGMENT
??_C@_01KBCC@v?$AA@ DB 'v', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@OEII@PublicStatus?$AA@
_DATA	SEGMENT
??_C@_0N@OEII@PublicStatus?$AA@ DB 'PublicStatus', 00H	; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultVcard
_TEXT	SEGMENT
_cgs$84023 = -12
_cgs$84033 = -12
_cws$84045 = -20
_cws$84050 = -120
_cws$84055 = -280
_cws$84060 = -300
_cws$84065 = -180
_cws$84070 = -260
_cws$84075 = -220
_cws$84081 = -140
_cws$84086 = -160
_cws$84091 = -200
_cws$84096 = -240
_cws$84101 = -92
_cgs$84106 = -12
_cgs$84111 = -12
_cgs$84116 = -12
_cgs$84121 = -12
_cgs$84126 = -12
_cgs$84131 = -12
_cgs$84136 = -12
_cgs$84141 = -12
_cgs$84146 = -12
_ack$84151 = -100
_proto$ = 8
_iqNode$ = 12
_itemNode$ = -52
_jid$ = -24
_text$ = -428
_hContact$ = 12
_hasFirst$83383 = -24
_hasLast$83384 = -56
_hasEmail$83386 = -48
_hasCity$83387 = -40
_hasAge$83388 = -60
_hasGender$83389 = -28
_hasSchool$83390 = -32
_hasLookFor$83391 = -44
_hasOccupation$83392 = -36
_dbv$83393 = -72
_i$83394 = 8
_TlenIqResultVcard PROC NEAR				; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 266  : 	XmlNode *queryNode, *itemNode, *n;
; 267  : 	char *type, *jid;
; 268  : 	char text[128];
; 269  : 	HANDLE hContact;
; 270  : 	char *nText;
; 271  : 
; 272  : //	JabberLog("<iq/> iqIdGetVcard (tlen)");
; 273  : 	if ((type=JabberXmlGetAttrValue(iqNode, "type")) == NULL) return;

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00011	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00014	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00019	33 f6		 xor	 esi, esi
  0001b	59		 pop	 ecx
  0001c	3b c6		 cmp	 eax, esi
  0001e	59		 pop	 ecx
  0001f	0f 84 57 07 00
	00		 je	 $L84150

; 274  : 
; 275  : 	if (!strcmp(type, "result")) {

  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _strcmp
  00030	59		 pop	 ecx
  00031	85 c0		 test	 eax, eax
  00033	59		 pop	 ecx
  00034	0f 85 42 07 00
	00		 jne	 $L84150

; 276  : 		BOOL hasFirst, hasLast, hasNick, hasEmail, hasCity, hasAge, hasGender, hasSchool, hasLookFor, hasOccupation;
; 277  : 		DBVARIANT dbv;
; 278  : 		int i;
; 279  : 
; 280  : 		if ((queryNode=JabberXmlGetChild(iqNode, "query")) == NULL) return;

  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  0003f	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00042	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00047	59		 pop	 ecx
  00048	3b c6		 cmp	 eax, esi
  0004a	59		 pop	 ecx
  0004b	0f 84 2b 07 00
	00		 je	 $L84150

; 281  : 		if ((itemNode=JabberXmlGetChild(queryNode, "item")) == NULL) return;

  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MPOO@item?$AA@ ; `string'
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0005c	8b f8		 mov	 edi, eax
  0005e	59		 pop	 ecx
  0005f	3b fe		 cmp	 edi, esi
  00061	59		 pop	 ecx
  00062	89 7d cc	 mov	 DWORD PTR _itemNode$[ebp], edi
  00065	0f 84 11 07 00
	00		 je	 $L84150

; 282  : 		if ((jid=JabberXmlGetAttrValue(itemNode, "jid")) != NULL) {

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00076	8b 5d 08	 mov	 ebx, DWORD PTR _proto$[ebp]
  00079	59		 pop	 ecx
  0007a	3b c6		 cmp	 eax, esi
  0007c	59		 pop	 ecx
  0007d	89 45 e8	 mov	 DWORD PTR _jid$[ebp], eax
  00080	0f 84 fa 00 00
	00		 je	 $L83400

; 283  : 			if (DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) return;

  00086	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00089	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84023[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00090	89 45 f4	 mov	 DWORD PTR _cgs$84023[ebp], eax
  00093	8d 45 b8	 lea	 eax, DWORD PTR _dbv$83393[ebp]
  00096	89 45 fc	 mov	 DWORD PTR _cgs$84023[ebp+8], eax
  00099	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84023[ebp]
  0009c	50		 push	 eax
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000a2	56		 push	 esi
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000a8	ff 50 24	 call	 DWORD PTR [eax+36]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	85 c0		 test	 eax, eax
  000b0	0f 85 c6 06 00
	00		 jne	 $L84150

; 284  : 			sprintf(text, "%s@%s", jid, dbv.pszVal);	// Add @tlen.pl

  000b6	ff 75 bc	 push	 DWORD PTR _dbv$83393[ebp+4]
  000b9	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  000bf	ff 75 e8	 push	 DWORD PTR _jid$[ebp]
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  000c7	50		 push	 eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 285  : 			DBFreeVariant(&dbv);

  000ce	8d 45 b8	 lea	 eax, DWORD PTR _dbv$83393[ebp]
  000d1	50		 push	 eax
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000d7	56		 push	 esi
  000d8	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  000dd	56		 push	 esi
  000de	ff 50 24	 call	 DWORD PTR [eax+36]

; 286  : 			if ((hContact=JabberHContactFromJID(proto, text)) == NULL) {

  000e1	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  000e7	50		 push	 eax
  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 _JabberHContactFromJID
  000ee	83 c4 24	 add	 esp, 36			; 00000024H
  000f1	89 45 0c	 mov	 DWORD PTR _hContact$[ebp], eax
  000f4	85 c0		 test	 eax, eax
  000f6	75 58		 jne	 SHORT $L84160

; 287  : 				if (DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginName", &dbv)) return;

  000f8	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000fb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84033[ebp+4], OFFSET FLAT:??_C@_09ONOL@LoginName?$AA@ ; `string'
  00102	89 45 f4	 mov	 DWORD PTR _cgs$84033[ebp], eax
  00105	8d 45 b8	 lea	 eax, DWORD PTR _dbv$83393[ebp]
  00108	89 45 fc	 mov	 DWORD PTR _cgs$84033[ebp+8], eax
  0010b	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84033[ebp]
  0010e	50		 push	 eax
  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00114	6a 00		 push	 0
  00116	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0011b	ff 50 24	 call	 DWORD PTR [eax+36]
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	85 c0		 test	 eax, eax
  00123	0f 85 53 06 00
	00		 jne	 $L84150

; 288  : 				if (strcmp(dbv.pszVal, jid)) {

  00129	ff 75 e8	 push	 DWORD PTR _jid$[ebp]
  0012c	ff 75 bc	 push	 DWORD PTR _dbv$83393[ebp+4]
  0012f	e8 00 00 00 00	 call	 _strcmp
  00134	59		 pop	 ecx
  00135	85 c0		 test	 eax, eax
  00137	59		 pop	 ecx

; 289  : 					DBFreeVariant(&dbv);

  00138	8d 45 b8	 lea	 eax, DWORD PTR _dbv$83393[ebp]
  0013b	50		 push	 eax
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00141	6a 00		 push	 0
  00143	56		 push	 esi

; 290  : 					return;

  00144	0f 85 2c 06 00
	00		 jne	 $L84161

; 291  : 				}
; 292  : 				DBFreeVariant(&dbv);

  0014a	ff 50 24	 call	 DWORD PTR [eax+36]
  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84160:

; 293  : 			}
; 294  : 		} else {

  00150	33 f6		 xor	 esi, esi
$L83411:

; 296  : 		}
; 297  : 		hasFirst = hasLast = hasNick = hasEmail = hasCity = hasAge = hasGender = hasOccupation = hasLookFor = hasSchool = FALSE;
; 298  : 		for (i=0; i<itemNode->numChild; i++) {

  00152	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  00155	89 75 e0	 mov	 DWORD PTR _hasSchool$83390[ebp], esi
  00158	89 75 d4	 mov	 DWORD PTR _hasLookFor$83391[ebp], esi
  0015b	89 75 dc	 mov	 DWORD PTR _hasOccupation$83392[ebp], esi
  0015e	89 75 e4	 mov	 DWORD PTR _hasGender$83389[ebp], esi
  00161	89 75 c4	 mov	 DWORD PTR _hasAge$83388[ebp], esi
  00164	89 75 d8	 mov	 DWORD PTR _hasCity$83387[ebp], esi
  00167	89 75 d0	 mov	 DWORD PTR _hasEmail$83386[ebp], esi
  0016a	89 75 c8	 mov	 DWORD PTR _hasLast$83384[ebp], esi
  0016d	89 75 e8	 mov	 DWORD PTR _hasFirst$83383[ebp], esi
  00170	89 75 08	 mov	 DWORD PTR _i$83394[ebp], esi
  00173	0f 8e 67 04 00
	00		 jle	 $L84155

; 299  : 			n = itemNode->child[i];

  00179	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  0017e	eb 08		 jmp	 SHORT $L83413
$L83400:

; 295  : 			hContact = NULL;

  00180	89 75 0c	 mov	 DWORD PTR _hContact$[ebp], esi
  00183	eb cd		 jmp	 SHORT $L83411
$L84156:

; 299  : 			n = itemNode->child[i];

  00185	8b 7d cc	 mov	 edi, DWORD PTR _itemNode$[ebp]
$L83413:
  00188	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _i$83394[ebp]
  0018e	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]

; 300  : 			if (n==NULL || n->name==NULL) continue;

  00191	85 ff		 test	 edi, edi
  00193	0f 84 2f 04 00
	00		 je	 $L83414
  00199	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0019c	85 c0		 test	 eax, eax
  0019e	0f 84 24 04 00
	00		 je	 $L83414

; 301  : 			if (!strcmp(n->name, "first")) {

  001a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05KELB@first?$AA@ ; `string'
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _strcmp
  001af	59		 pop	 ecx
  001b0	85 c0		 test	 eax, eax
  001b2	59		 pop	 ecx
  001b3	75 4d		 jne	 SHORT $L83420

; 302  : 				if (n->text != NULL) {

  001b5	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  001b8	85 ff		 test	 edi, edi
  001ba	0f 84 08 04 00
	00		 je	 $L83414

; 303  : 					hasFirst = TRUE;
; 304  : 					nText = JabberTextDecode(n->text);

  001c0	57		 push	 edi
  001c1	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _hasFirst$83383[ebp], 1
  001c8	e8 00 00 00 00	 call	 _JabberTextDecode

; 305  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "FirstName", nText);

  001cd	80 4d f4 ff	 or	 BYTE PTR _cws$84045[ebp+8], 255 ; 000000ffH
  001d1	8b f8		 mov	 edi, eax
  001d3	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  001d6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$84045[ebp+4], OFFSET FLAT:??_C@_09CJDC@FirstName?$AA@ ; `string'
  001dd	89 45 ec	 mov	 DWORD PTR _cws$84045[ebp], eax
  001e0	89 7d f8	 mov	 DWORD PTR _cws$84045[ebp+12], edi
  001e3	8d 45 ec	 lea	 eax, DWORD PTR _cws$84045[ebp]
$L84163:
  001e6	50		 push	 eax
  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001ec	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  001ef	56		 push	 esi
  001f0	ff 50 24	 call	 DWORD PTR [eax+36]

; 306  : 					mir_free(nText);

  001f3	57		 push	 edi
  001f4	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  001fa	83 c4 14	 add	 esp, 20			; 00000014H

; 307  : 				}
; 308  : 			}
; 309  : 			else if (!strcmp(n->name, "last")) {

  001fd	e9 c6 03 00 00	 jmp	 $L83414
$L83420:
  00202	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ONL@last?$AA@ ; `string'
  00207	ff 77 04	 push	 DWORD PTR [edi+4]
  0020a	e8 00 00 00 00	 call	 _strcmp
  0020f	59		 pop	 ecx
  00210	85 c0		 test	 eax, eax
  00212	59		 pop	 ecx
  00213	75 33		 jne	 SHORT $L83426

; 310  : 				if (n->text != NULL) {

  00215	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  00218	85 ff		 test	 edi, edi
  0021a	0f 84 a8 03 00
	00		 je	 $L83414

; 311  : 					hasLast = TRUE;
; 312  : 					nText = JabberTextDecode(n->text);

  00220	57		 push	 edi
  00221	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _hasLast$83384[ebp], 1
  00228	e8 00 00 00 00	 call	 _JabberTextDecode

; 313  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "LastName", nText);

  0022d	80 4d 90 ff	 or	 BYTE PTR _cws$84050[ebp+8], 255 ; 000000ffH
  00231	8b f8		 mov	 edi, eax
  00233	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00236	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _cws$84050[ebp+4], OFFSET FLAT:??_C@_08MBCL@LastName?$AA@ ; `string'
  0023d	89 45 88	 mov	 DWORD PTR _cws$84050[ebp], eax
  00240	89 7d 94	 mov	 DWORD PTR _cws$84050[ebp+12], edi
  00243	8d 45 88	 lea	 eax, DWORD PTR _cws$84050[ebp]

; 314  : 					mir_free(nText);
; 315  : 				}
; 316  : 			}
; 317  : 			else if (!strcmp(n->name, "nick")) {

  00246	eb 9e		 jmp	 SHORT $L84163
$L83426:
  00248	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BGEO@nick?$AA@ ; `string'
  0024d	ff 77 04	 push	 DWORD PTR [edi+4]
  00250	e8 00 00 00 00	 call	 _strcmp
  00255	59		 pop	 ecx
  00256	85 c0		 test	 eax, eax
  00258	59		 pop	 ecx
  00259	75 3e		 jne	 SHORT $L83432

; 318  : 				if (n->text != NULL) {

  0025b	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  0025e	85 ff		 test	 edi, edi
  00260	0f 84 62 03 00
	00		 je	 $L83414

; 319  : 					hasNick = TRUE;
; 320  : 					nText = JabberTextDecode(n->text);

  00266	57		 push	 edi
  00267	e8 00 00 00 00	 call	 _JabberTextDecode

; 321  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "Nick", nText);

  0026c	80 8d f0 fe ff
	ff ff		 or	 BYTE PTR _cws$84055[ebp+8], 255 ; 000000ffH
  00273	8b f8		 mov	 edi, eax
  00275	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00278	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84055[ebp+4], OFFSET FLAT:??_C@_04LMAM@Nick?$AA@ ; `string'
  00282	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _cws$84055[ebp], eax
  00288	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _cws$84055[ebp+12], edi
  0028e	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _cws$84055[ebp]

; 322  : 					mir_free(nText);
; 323  : 				}
; 324  : 			}
; 325  : 			else if (!strcmp(n->name, "email")) {

  00294	e9 4d ff ff ff	 jmp	 $L84163
$L83432:
  00299	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05JKH@email?$AA@ ; `string'
  0029e	ff 77 04	 push	 DWORD PTR [edi+4]
  002a1	e8 00 00 00 00	 call	 _strcmp
  002a6	59		 pop	 ecx
  002a7	85 c0		 test	 eax, eax
  002a9	59		 pop	 ecx
  002aa	75 45		 jne	 SHORT $L83437

; 326  : 				if (n->text != NULL) {

  002ac	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  002af	85 ff		 test	 edi, edi
  002b1	0f 84 11 03 00
	00		 je	 $L83414

; 327  : 					hasEmail = TRUE;
; 328  : 					nText = JabberTextDecode(n->text);

  002b7	57		 push	 edi
  002b8	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _hasEmail$83386[ebp], 1
  002bf	e8 00 00 00 00	 call	 _JabberTextDecode

; 329  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "e-mail", nText);

  002c4	80 8d dc fe ff
	ff ff		 or	 BYTE PTR _cws$84060[ebp+8], 255 ; 000000ffH
  002cb	8b f8		 mov	 edi, eax
  002cd	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  002d0	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84060[ebp+4], OFFSET FLAT:??_C@_06BOPE@e?9mail?$AA@ ; `string'
  002da	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _cws$84060[ebp], eax
  002e0	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _cws$84060[ebp+12], edi
  002e6	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _cws$84060[ebp]

; 330  : 					mir_free(nText);
; 331  : 				}
; 332  : 			}
; 333  : 			else if (!strcmp(n->name, "c")) {

  002ec	e9 f5 fe ff ff	 jmp	 $L84163
$L83437:
  002f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01IJJ@c?$AA@ ; `string'
  002f6	ff 77 04	 push	 DWORD PTR [edi+4]
  002f9	e8 00 00 00 00	 call	 _strcmp
  002fe	59		 pop	 ecx
  002ff	85 c0		 test	 eax, eax
  00301	59		 pop	 ecx
  00302	75 45		 jne	 SHORT $L83443

; 334  : 				if (n->text != NULL) {

  00304	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  00307	85 ff		 test	 edi, edi
  00309	0f 84 b9 02 00
	00		 je	 $L83414

; 335  : 					hasCity = TRUE;
; 336  : 					nText = JabberTextDecode(n->text);

  0030f	57		 push	 edi
  00310	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _hasCity$83387[ebp], 1
  00317	e8 00 00 00 00	 call	 _JabberTextDecode

; 337  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "City", nText);

  0031c	80 8d 54 ff ff
	ff ff		 or	 BYTE PTR _cws$84065[ebp+8], 255 ; 000000ffH
  00323	8b f8		 mov	 edi, eax
  00325	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00328	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84065[ebp+4], OFFSET FLAT:??_C@_04NBCE@City?$AA@ ; `string'
  00332	89 85 4c ff ff
	ff		 mov	 DWORD PTR _cws$84065[ebp], eax
  00338	89 bd 58 ff ff
	ff		 mov	 DWORD PTR _cws$84065[ebp+12], edi
  0033e	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _cws$84065[ebp]

; 338  : 					mir_free(nText);
; 339  : 				}
; 340  : 			}
; 341  : 			else if (!strcmp(n->name, "b")) {

  00344	e9 9d fe ff ff	 jmp	 $L84163
$L83443:
  00349	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KCAO@b?$AA@ ; `string'
  0034e	ff 77 04	 push	 DWORD PTR [edi+4]
  00351	e8 00 00 00 00	 call	 _strcmp
  00356	59		 pop	 ecx
  00357	85 c0		 test	 eax, eax
  00359	59		 pop	 ecx
  0035a	75 45		 jne	 SHORT $L83449

; 342  : 				if (n->text != NULL) {

  0035c	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  0035f	85 ff		 test	 edi, edi
  00361	0f 84 61 02 00
	00		 je	 $L83414

; 343  : 					WORD nAge;
; 344  : 					hasAge = TRUE;
; 345  : 					nAge = atoi(n->text);

  00367	57		 push	 edi
  00368	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _hasAge$83388[ebp], 1
  0036f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 346  : 					DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "Age", nAge);

  00375	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00378	66 89 85 08 ff
	ff ff		 mov	 WORD PTR _cws$84070[ebp+12], ax
  0037f	89 8d fc fe ff
	ff		 mov	 DWORD PTR _cws$84070[ebp], ecx
  00385	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84070[ebp+4], OFFSET FLAT:??_C@_03DOPF@Age?$AA@ ; `string'
  0038f	c6 85 04 ff ff
	ff 02		 mov	 BYTE PTR _cws$84070[ebp+8], 2
  00396	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cws$84070[ebp]

; 347  : 				}
; 348  : 			}
; 349  : 			else if (!strcmp(n->name, "s")) {

  0039c	e9 17 02 00 00	 jmp	 $L84162
$L83449:
  003a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBOJ@s?$AA@ ; `string'
  003a6	ff 77 04	 push	 DWORD PTR [edi+4]
  003a9	e8 00 00 00 00	 call	 _strcmp
  003ae	59		 pop	 ecx
  003af	85 c0		 test	 eax, eax
  003b1	59		 pop	 ecx
  003b2	75 70		 jne	 SHORT $L83456

; 350  : 				if (n->text!=NULL && n->text[1]=='\0' && (n->text[0]=='1' || n->text[0]=='2')) {

  003b4	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  003b7	85 ff		 test	 edi, edi
  003b9	0f 84 09 02 00
	00		 je	 $L83414
  003bf	38 47 01	 cmp	 BYTE PTR [edi+1], al
  003c2	0f 85 00 02 00
	00		 jne	 $L83414
  003c8	8a 07		 mov	 al, BYTE PTR [edi]
  003ca	3c 31		 cmp	 al, 49			; 00000031H
  003cc	74 08		 je	 SHORT $L83460
  003ce	3c 32		 cmp	 al, 50			; 00000032H
  003d0	0f 85 f2 01 00
	00		 jne	 $L83414
$L83460:

; 351  : 					hasGender = TRUE;
; 352  : 					DBWriteContactSettingByte(hContact, proto->iface.m_szModuleName, "Gender", (BYTE) (n->text[0]=='1'?'M':'F'));

  003d6	3c 31		 cmp	 al, 49			; 00000031H
  003d8	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  003db	0f 95 c0	 setne	 al
  003de	48		 dec	 eax
  003df	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _hasGender$83389[ebp], 1
  003e6	83 e0 07	 and	 eax, 7
  003e9	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _cws$84075[ebp], ecx
  003ef	83 c0 46	 add	 eax, 70			; 00000046H
  003f2	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84075[ebp+4], OFFSET FLAT:??_C@_06BBDA@Gender?$AA@ ; `string'
  003fc	88 85 30 ff ff
	ff		 mov	 BYTE PTR _cws$84075[ebp+12], al
  00402	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _cws$84075[ebp]
  00408	50		 push	 eax
  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0040e	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00411	c6 85 2c ff ff
	ff 01		 mov	 BYTE PTR _cws$84075[ebp+8], 1
  00418	56		 push	 esi
  00419	ff 50 24	 call	 DWORD PTR [eax+36]
  0041c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 353  : 				}
; 354  : 			}
; 355  : 			else if (!strcmp(n->name, "e")) {

  0041f	e9 a4 01 00 00	 jmp	 $L83414
$L83456:
  00424	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PHOL@e?$AA@ ; `string'
  00429	ff 77 04	 push	 DWORD PTR [edi+4]
  0042c	e8 00 00 00 00	 call	 _strcmp
  00431	59		 pop	 ecx
  00432	85 c0		 test	 eax, eax
  00434	59		 pop	 ecx
  00435	75 42		 jne	 SHORT $L83464

; 356  : 				if (n->text != NULL) {

  00437	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  0043a	85 ff		 test	 edi, edi
  0043c	0f 84 86 01 00
	00		 je	 $L83414

; 357  : 					hasSchool = TRUE;
; 358  : 					nText = JabberTextDecode(n->text);

  00442	57		 push	 edi
  00443	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _hasSchool$83390[ebp], 1
  0044a	e8 00 00 00 00	 call	 _JabberTextDecode

; 359  : 					DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "School", nText);

  0044f	80 8d 7c ff ff
	ff ff		 or	 BYTE PTR _cws$84081[ebp+8], 255 ; 000000ffH
  00456	8b f8		 mov	 edi, eax
  00458	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0045b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84081[ebp+4], OFFSET FLAT:??_C@_06POLE@School?$AA@ ; `string'
  00465	89 85 74 ff ff
	ff		 mov	 DWORD PTR _cws$84081[ebp], eax
  0046b	89 7d 80	 mov	 DWORD PTR _cws$84081[ebp+12], edi
  0046e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _cws$84081[ebp]

; 360  : 					mir_free(nText);
; 361  : 				}
; 362  : 			}
; 363  : 			else if (!strcmp(n->name, "j")) {

  00474	e9 6d fd ff ff	 jmp	 $L84163
$L83464:
  00479	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PGLG@j?$AA@ ; `string'
  0047e	ff 77 04	 push	 DWORD PTR [edi+4]
  00481	e8 00 00 00 00	 call	 _strcmp
  00486	59		 pop	 ecx
  00487	85 c0		 test	 eax, eax
  00489	59		 pop	 ecx
  0048a	75 45		 jne	 SHORT $L83470

; 364  : 				if (n->text != NULL) {

  0048c	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  0048f	85 ff		 test	 edi, edi
  00491	0f 84 31 01 00
	00		 je	 $L83414

; 365  : 					WORD nOccupation;
; 366  : 					hasOccupation = TRUE;
; 367  : 					nOccupation = atoi(n->text);

  00497	57		 push	 edi
  00498	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _hasOccupation$83392[ebp], 1
  0049f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 368  : 					DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "Occupation", nOccupation);

  004a5	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  004a8	66 89 85 6c ff
	ff ff		 mov	 WORD PTR _cws$84086[ebp+12], ax
  004af	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _cws$84086[ebp], ecx
  004b5	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84086[ebp+4], OFFSET FLAT:??_C@_0L@IHOC@Occupation?$AA@ ; `string'
  004bf	c6 85 68 ff ff
	ff 02		 mov	 BYTE PTR _cws$84086[ebp+8], 2
  004c6	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _cws$84086[ebp]

; 369  : 				}
; 370  : 			}
; 371  : 			else if (!strcmp(n->name, "r")) {

  004cc	e9 e7 00 00 00	 jmp	 $L84162
$L83470:
  004d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01LHO@r?$AA@ ; `string'
  004d6	ff 77 04	 push	 DWORD PTR [edi+4]
  004d9	e8 00 00 00 00	 call	 _strcmp
  004de	59		 pop	 ecx
  004df	85 c0		 test	 eax, eax
  004e1	59		 pop	 ecx
  004e2	75 45		 jne	 SHORT $L83477

; 372  : 				if (n->text != NULL) {

  004e4	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  004e7	85 ff		 test	 edi, edi
  004e9	0f 84 d9 00 00
	00		 je	 $L83414

; 373  : 					WORD nLookFor;
; 374  : 					hasLookFor = TRUE;
; 375  : 					nLookFor = atoi(n->text);

  004ef	57		 push	 edi
  004f0	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _hasLookFor$83391[ebp], 1
  004f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 376  : 					DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "LookingFor", nLookFor);

  004fd	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00500	66 89 85 44 ff
	ff ff		 mov	 WORD PTR _cws$84091[ebp+12], ax
  00507	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _cws$84091[ebp], ecx
  0050d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84091[ebp+4], OFFSET FLAT:??_C@_0L@BFLA@LookingFor?$AA@ ; `string'
  00517	c6 85 40 ff ff
	ff 02		 mov	 BYTE PTR _cws$84091[ebp+8], 2
  0051e	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _cws$84091[ebp]

; 377  : 				}
; 378  : 			}
; 379  : 			else if (!strcmp(n->name, "g")) { // voice chat enabled

  00524	e9 8f 00 00 00	 jmp	 $L84162
$L83477:
  00529	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KCMF@g?$AA@ ; `string'
  0052e	ff 77 04	 push	 DWORD PTR [edi+4]
  00531	e8 00 00 00 00	 call	 _strcmp
  00536	59		 pop	 ecx
  00537	85 c0		 test	 eax, eax
  00539	59		 pop	 ecx
  0053a	75 3f		 jne	 SHORT $L83484

; 380  : 				if (n->text != NULL) {

  0053c	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  0053f	85 ff		 test	 edi, edi
  00541	0f 84 81 00 00
	00		 je	 $L83414

; 381  : 					BYTE bVoice;
; 382  : 					bVoice = atoi(n->text);

  00547	57		 push	 edi
  00548	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 383  : 					DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "VoiceChat", bVoice);

  0054e	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00551	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _cws$84096[ebp+4], OFFSET FLAT:??_C@_09BPFM@VoiceChat?$AA@ ; `string'
  0055b	66 0f b6 c0	 movzx	 ax, al
  0055f	66 89 85 1c ff
	ff ff		 mov	 WORD PTR _cws$84096[ebp+12], ax
  00566	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _cws$84096[ebp], ecx
  0056c	c6 85 18 ff ff
	ff 02		 mov	 BYTE PTR _cws$84096[ebp+8], 2
  00573	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _cws$84096[ebp]

; 384  : 				}
; 385  : 			}
; 386  : 			else if (!strcmp(n->name, "v")) { // status visibility

  00579	eb 3d		 jmp	 SHORT $L84162
$L83484:
  0057b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KBCC@v?$AA@ ; `string'
  00580	ff 77 04	 push	 DWORD PTR [edi+4]
  00583	e8 00 00 00 00	 call	 _strcmp
  00588	59		 pop	 ecx
  00589	85 c0		 test	 eax, eax
  0058b	59		 pop	 ecx
  0058c	75 3a		 jne	 SHORT $L83414

; 387  : 				if (n->text != NULL) {

  0058e	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]
  00591	85 ff		 test	 edi, edi
  00593	74 33		 je	 SHORT $L83414

; 388  : 					BYTE bPublic;
; 389  : 					bPublic = atoi(n->text);

  00595	57		 push	 edi
  00596	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 390  : 					DBWriteContactSettingWord(hContact, proto->iface.m_szModuleName, "PublicStatus", bPublic);

  0059c	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  0059f	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _cws$84101[ebp+4], OFFSET FLAT:??_C@_0N@OEII@PublicStatus?$AA@ ; `string'
  005a6	66 0f b6 c0	 movzx	 ax, al
  005aa	66 89 45 b0	 mov	 WORD PTR _cws$84101[ebp+12], ax
  005ae	89 4d a4	 mov	 DWORD PTR _cws$84101[ebp], ecx
  005b1	c6 45 ac 02	 mov	 BYTE PTR _cws$84101[ebp+8], 2
  005b5	8d 45 a4	 lea	 eax, DWORD PTR _cws$84101[ebp]
$L84162:
  005b8	50		 push	 eax
  005b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  005be	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  005c1	56		 push	 esi
  005c2	ff 50 24	 call	 DWORD PTR [eax+36]
  005c5	83 c4 10	 add	 esp, 16			; 00000010H
$L83414:
  005c8	ff 45 08	 inc	 DWORD PTR _i$83394[ebp]
  005cb	8b 45 cc	 mov	 eax, DWORD PTR _itemNode$[ebp]
  005ce	8b 4d 08	 mov	 ecx, DWORD PTR _i$83394[ebp]
  005d1	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  005d4	0f 8c ab fb ff
	ff		 jl	 $L84156

; 391  : 				}
; 392  : 			}
; 393  : 		}
; 394  : 		if (!hasFirst)

  005da	83 7d e8 00	 cmp	 DWORD PTR _hasFirst$83383[ebp], 0
  005de	75 27		 jne	 SHORT $L84158
$L84155:

; 395  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "FirstName");

  005e0	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  005e3	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  005e8	89 45 f4	 mov	 DWORD PTR _cgs$84106[ebp], eax
  005eb	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84106[ebp]
  005ee	50		 push	 eax
  005ef	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  005f4	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  005f7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84106[ebp+4], OFFSET FLAT:??_C@_09CJDC@FirstName?$AA@ ; `string'
  005fe	56		 push	 esi
  005ff	ff 50 24	 call	 DWORD PTR [eax+36]
  00602	83 c4 0c	 add	 esp, 12			; 0000000cH
  00605	eb 05		 jmp	 SHORT $L84105
$L84158:
  00607	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
$L84105:

; 396  : 		if (!hasLast)

  0060c	83 7d c8 00	 cmp	 DWORD PTR _hasLast$83384[ebp], 0
  00610	75 23		 jne	 SHORT $L84159

; 397  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "LastName");

  00612	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00615	8b 7d 0c	 mov	 edi, DWORD PTR _hContact$[ebp]
  00618	89 45 f4	 mov	 DWORD PTR _cgs$84111[ebp], eax
  0061b	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84111[ebp]
  0061e	50		 push	 eax
  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00624	57		 push	 edi
  00625	56		 push	 esi
  00626	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84111[ebp+4], OFFSET FLAT:??_C@_08MBCL@LastName?$AA@ ; `string'
  0062d	ff 50 24	 call	 DWORD PTR [eax+36]
  00630	83 c4 0c	 add	 esp, 12			; 0000000cH
  00633	eb 03		 jmp	 SHORT $L84110
$L84159:
  00635	8b 7d 0c	 mov	 edi, DWORD PTR _hContact$[ebp]
$L84110:

; 398  : 		// We are not removing "Nick"
; 399  : //		if (!hasNick)
; 400  : //			DBDeleteContactSetting(hContact, iface.m_szModuleName, "Nick");
; 401  : 		if (!hasEmail)

  00638	83 7d d0 00	 cmp	 DWORD PTR _hasEmail$83386[ebp], 0
  0063c	75 1e		 jne	 SHORT $L84115

; 402  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "e-mail");

  0063e	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00641	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84116[ebp+4], OFFSET FLAT:??_C@_06BOPE@e?9mail?$AA@ ; `string'
  00648	89 45 f4	 mov	 DWORD PTR _cgs$84116[ebp], eax
  0064b	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84116[ebp]
  0064e	50		 push	 eax
  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00654	57		 push	 edi
  00655	56		 push	 esi
  00656	ff 50 24	 call	 DWORD PTR [eax+36]
  00659	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84115:

; 403  : 		if (!hasCity)

  0065c	83 7d d8 00	 cmp	 DWORD PTR _hasCity$83387[ebp], 0
  00660	75 1e		 jne	 SHORT $L84120

; 404  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "City");

  00662	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00665	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84121[ebp+4], OFFSET FLAT:??_C@_04NBCE@City?$AA@ ; `string'
  0066c	89 45 f4	 mov	 DWORD PTR _cgs$84121[ebp], eax
  0066f	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84121[ebp]
  00672	50		 push	 eax
  00673	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00678	57		 push	 edi
  00679	56		 push	 esi
  0067a	ff 50 24	 call	 DWORD PTR [eax+36]
  0067d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84120:

; 405  : 		if (!hasAge)

  00680	83 7d c4 00	 cmp	 DWORD PTR _hasAge$83388[ebp], 0
  00684	75 1e		 jne	 SHORT $L84125

; 406  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "Age");

  00686	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00689	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84126[ebp+4], OFFSET FLAT:??_C@_03DOPF@Age?$AA@ ; `string'
  00690	89 45 f4	 mov	 DWORD PTR _cgs$84126[ebp], eax
  00693	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84126[ebp]
  00696	50		 push	 eax
  00697	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0069c	57		 push	 edi
  0069d	56		 push	 esi
  0069e	ff 50 24	 call	 DWORD PTR [eax+36]
  006a1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84125:

; 407  : 		if (!hasGender)

  006a4	83 7d e4 00	 cmp	 DWORD PTR _hasGender$83389[ebp], 0
  006a8	75 1e		 jne	 SHORT $L84130

; 408  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "Gender");

  006aa	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  006ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84131[ebp+4], OFFSET FLAT:??_C@_06BBDA@Gender?$AA@ ; `string'
  006b4	89 45 f4	 mov	 DWORD PTR _cgs$84131[ebp], eax
  006b7	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84131[ebp]
  006ba	50		 push	 eax
  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  006c0	57		 push	 edi
  006c1	56		 push	 esi
  006c2	ff 50 24	 call	 DWORD PTR [eax+36]
  006c5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84130:

; 409  : 		if (!hasSchool)

  006c8	83 7d e0 00	 cmp	 DWORD PTR _hasSchool$83390[ebp], 0
  006cc	75 1e		 jne	 SHORT $L84135

; 410  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "School");

  006ce	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  006d1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84136[ebp+4], OFFSET FLAT:??_C@_06POLE@School?$AA@ ; `string'
  006d8	89 45 f4	 mov	 DWORD PTR _cgs$84136[ebp], eax
  006db	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84136[ebp]
  006de	50		 push	 eax
  006df	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  006e4	57		 push	 edi
  006e5	56		 push	 esi
  006e6	ff 50 24	 call	 DWORD PTR [eax+36]
  006e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84135:

; 411  : 		if (!hasOccupation)

  006ec	83 7d dc 00	 cmp	 DWORD PTR _hasOccupation$83392[ebp], 0
  006f0	75 1e		 jne	 SHORT $L84140

; 412  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "Occupation");

  006f2	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  006f5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84141[ebp+4], OFFSET FLAT:??_C@_0L@IHOC@Occupation?$AA@ ; `string'
  006fc	89 45 f4	 mov	 DWORD PTR _cgs$84141[ebp], eax
  006ff	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84141[ebp]
  00702	50		 push	 eax
  00703	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00708	57		 push	 edi
  00709	56		 push	 esi
  0070a	ff 50 24	 call	 DWORD PTR [eax+36]
  0070d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84140:

; 413  : 		if (!hasLookFor)

  00710	83 7d d4 00	 cmp	 DWORD PTR _hasLookFor$83391[ebp], 0
  00714	75 1e		 jne	 SHORT $L84145

; 414  : 			DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "LookingFor");

  00716	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00719	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84146[ebp+4], OFFSET FLAT:??_C@_0L@BFLA@LookingFor?$AA@ ; `string'
  00720	89 45 f4	 mov	 DWORD PTR _cgs$84146[ebp], eax
  00723	8d 45 f4	 lea	 eax, DWORD PTR _cgs$84146[ebp]
  00726	50		 push	 eax
  00727	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0072c	57		 push	 edi
  0072d	56		 push	 esi
  0072e	ff 50 24	 call	 DWORD PTR [eax+36]
  00731	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84145:

; 415  : 		ProtoBroadcastAck(proto->iface.m_szModuleName, hContact, ACKTYPE_GETINFO, ACKRESULT_SUCCESS, (HANDLE) 1, 0);

  00734	6a 06		 push	 6
  00736	33 c0		 xor	 eax, eax
  00738	59		 pop	 ecx
  00739	8d 7d a0	 lea	 edi, DWORD PTR _ack$84151[ebp+4]
  0073c	f3 ab		 rep stosd
  0073e	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00741	8d 4d 9c	 lea	 ecx, DWORD PTR _ack$84151[ebp]
  00744	89 45 a0	 mov	 DWORD PTR _ack$84151[ebp+4], eax
  00747	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  0074a	89 45 a4	 mov	 DWORD PTR _ack$84151[ebp+8], eax
  0074d	33 c0		 xor	 eax, eax
  0074f	51		 push	 ecx
  00750	89 45 ac	 mov	 DWORD PTR _ack$84151[ebp+16], eax
  00753	89 45 b4	 mov	 DWORD PTR _ack$84151[ebp+24], eax
  00756	50		 push	 eax
  00757	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0075c	c7 45 9c 1c 00
	00 00		 mov	 DWORD PTR _ack$84151[ebp], 28 ; 0000001cH
  00763	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR _ack$84151[ebp+12], 7
  0076a	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _ack$84151[ebp+20], 1
  00771	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
$L84161:
  00776	ff 50 24	 call	 DWORD PTR [eax+36]
  00779	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84150:
  0077c	5f		 pop	 edi
  0077d	5e		 pop	 esi
  0077e	5b		 pop	 ebx

; 416  : 	}
; 417  : }

  0077f	c9		 leave
  00780	c3		 ret	 0
_TlenIqResultVcard ENDP
_TEXT	ENDS
PUBLIC	_JabberIqResultSearch
PUBLIC	??_C@_02IBHF@id?$AA@				; `string'
PUBLIC	??_C@_04OKNP@mim_?$AA@				; `string'
PUBLIC	??_C@_00A@?$AA@					; `string'
EXTRN	_strlen:NEAR
EXTRN	_TlenRunSearch:NEAR
;	COMDAT ??_C@_00A@?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??_C@_02IBHF@id?$AA@
_DATA	SEGMENT
??_C@_02IBHF@id?$AA@ DB 'id', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OKNP@mim_?$AA@
_DATA	SEGMENT
??_C@_04OKNP@mim_?$AA@ DB 'mim_', 00H			; `string'
_DATA	ENDS
;	COMDAT _JabberIqResultSearch
_TEXT	SEGMENT
_cgs$84169 = -52
_ack$84175 = -28
_ack$84180 = -28
_ack$84188 = -28
_ack$84193 = -28
_proto$ = 8
_iqNode$ = 12
_queryNode$ = -32
_id$ = -36
_i$ = 12
_found$ = -40
_jsr$ = -356
_dbv$ = -64
_JabberIqResultSearch PROC NEAR				; COMDAT

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 421  : 	XmlNode *queryNode, *itemNode, *n;
; 422  : 	char *type, *jid, *str;
; 423  : 	int id, i, found;
; 424  : 	JABBER_SEARCH_RESULT jsr;
; 425  : 	DBVARIANT dbv;
; 426  : 
; 427  : 	found = 0;
; 428  : //	JabberLog("<iq/> iqIdGetSearch");
; 429  : 	if ((type=JabberXmlGetAttrValue(iqNode, "type")) == NULL) return;

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00011	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 5d d8	 mov	 DWORD PTR _found$[ebp], ebx
  00019	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0001e	8b f8		 mov	 edi, eax
  00020	59		 pop	 ecx
  00021	3b fb		 cmp	 edi, ebx
  00023	59		 pop	 ecx
  00024	0f 84 0d 04 00
	00		 je	 $L84192

; 430  : 	if ((str=JabberXmlGetAttrValue(iqNode, "id")) == NULL) return;

  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02IBHF@id?$AA@ ; `string'
  0002f	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00032	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00037	8b f0		 mov	 esi, eax
  00039	59		 pop	 ecx
  0003a	3b f3		 cmp	 esi, ebx
  0003c	59		 pop	 ecx
  0003d	0f 84 f4 03 00
	00		 je	 $L84192

; 431  : 	id = atoi(str+strlen(JABBER_IQID));

  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04OKNP@mim_?$AA@ ; `string'
  00048	e8 00 00 00 00	 call	 _strlen
  0004d	03 c6		 add	 eax, esi
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00056	8b f0		 mov	 esi, eax

; 432  : 
; 433  : 	if (!strcmp(type, "result")) {

  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  0005d	57		 push	 edi
  0005e	89 75 dc	 mov	 DWORD PTR _id$[ebp], esi
  00061	e8 00 00 00 00	 call	 _strcmp
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	85 c0		 test	 eax, eax
  0006b	0f 85 75 03 00
	00		 jne	 $L83529

; 434  : 		if ((queryNode=JabberXmlGetChild(iqNode, "query")) == NULL) return;

  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  00076	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00079	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0007e	59		 pop	 ecx
  0007f	3b c3		 cmp	 eax, ebx
  00081	59		 pop	 ecx
  00082	89 45 e0	 mov	 DWORD PTR _queryNode$[ebp], eax
  00085	0f 84 ac 03 00
	00		 je	 $L84192

; 435  : 		if (!DBGetContactSetting(NULL, proto->iface.m_szModuleName, "LoginServer", &dbv)) {

  0008b	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  0008e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _cgs$84169[ebp+4], OFFSET FLAT:??_C@_0M@IBOM@LoginServer?$AA@ ; `string'
  00095	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00098	89 45 cc	 mov	 DWORD PTR _cgs$84169[ebp], eax
  0009b	8d 45 c0	 lea	 eax, DWORD PTR _dbv$[ebp]
  0009e	89 45 d4	 mov	 DWORD PTR _cgs$84169[ebp+8], eax
  000a1	8d 45 cc	 lea	 eax, DWORD PTR _cgs$84169[ebp]
  000a4	50		 push	 eax
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000aa	53		 push	 ebx
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  000b0	ff 50 24	 call	 DWORD PTR [eax+36]
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	85 c0		 test	 eax, eax
  000b8	0f 85 de 02 00
	00		 jne	 $L84184

; 436  : 			jsr.hdr.cbSize = sizeof(JABBER_SEARCH_RESULT);
; 437  : 			for (i=0; i<queryNode->numChild; i++) {

  000be	8b 45 e0	 mov	 eax, DWORD PTR _queryNode$[ebp]
  000c1	c7 85 9c fe ff
	ff 24 01 00 00	 mov	 DWORD PTR _jsr$[ebp], 292 ; 00000124H
  000cb	89 5d 0c	 mov	 DWORD PTR _i$[ebp], ebx
  000ce	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  000d3	39 58 14	 cmp	 DWORD PTR [eax+20], ebx
  000d6	0f 8e aa 01 00
	00		 jle	 $L83537
$L83535:

; 438  : 				itemNode = queryNode->child[i];

  000dc	8b 45 e0	 mov	 eax, DWORD PTR _queryNode$[ebp]
  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]

; 439  : 				if (!strcmp(itemNode->name, "item")) {

  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04MPOO@item?$AA@ ; `string'
  000e7	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000ea	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  000ed	ff 77 04	 push	 DWORD PTR [edi+4]
  000f0	e8 00 00 00 00	 call	 _strcmp
  000f5	59		 pop	 ecx
  000f6	85 c0		 test	 eax, eax
  000f8	59		 pop	 ecx
  000f9	0f 85 72 01 00
	00		 jne	 $L83536

; 440  : 					if ((jid=JabberXmlGetAttrValue(itemNode, "jid")) != NULL) {

  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03HCJC@jid?$AA@ ; `string'
  00104	57		 push	 edi
  00105	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0010a	59		 pop	 ecx
  0010b	3b c3		 cmp	 eax, ebx
  0010d	59		 pop	 ecx
  0010e	0f 84 5d 01 00
	00		 je	 $L83536

; 441  : 						_snprintf(jsr.jid, sizeof(jsr.jid), "%s@%s", jid, dbv.pszVal);

  00114	ff 75 c4	 push	 DWORD PTR _dbv$[ebp+4]
  00117	50		 push	 eax
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  0011d	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _jsr$[ebp+36]
  00123	68 00 01 00 00	 push	 256			; 00000100H
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 442  : 						jsr.jid[sizeof(jsr.jid)-1] = '\0';
; 443  : 						if ((n=JabberXmlGetChild(itemNode, "nick"))!=NULL && n->text!=NULL)

  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BGEO@nick?$AA@ ; `string'
  00134	57		 push	 edi
  00135	88 5d bf	 mov	 BYTE PTR _jsr$[ebp+291], bl
  00138	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0013d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00140	3b c3		 cmp	 eax, ebx
  00142	74 0f		 je	 SHORT $L83543
  00144	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00147	3b c3		 cmp	 eax, ebx
  00149	74 08		 je	 SHORT $L83543

; 444  : 							jsr.hdr.nick = JabberTextDecode(n->text);

  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _JabberTextDecode

; 445  : 						else

  00151	eb 07		 jmp	 SHORT $L84202
$L83543:

; 446  : 							jsr.hdr.nick = mir_strdup("");

  00153	56		 push	 esi
  00154	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
$L84202:
  0015a	59		 pop	 ecx
  0015b	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+4], eax

; 447  : 						if ((n=JabberXmlGetChild(itemNode, "first"))!=NULL && n->text!=NULL)

  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05KELB@first?$AA@ ; `string'
  00166	57		 push	 edi
  00167	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0016c	59		 pop	 ecx
  0016d	3b c3		 cmp	 eax, ebx
  0016f	59		 pop	 ecx
  00170	74 0f		 je	 SHORT $L83548
  00172	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00175	3b c3		 cmp	 eax, ebx
  00177	74 08		 je	 SHORT $L83548

; 448  : 							jsr.hdr.firstName = JabberTextDecode(n->text);

  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 _JabberTextDecode

; 449  : 						else

  0017f	eb 07		 jmp	 SHORT $L84203
$L83548:

; 450  : 							jsr.hdr.firstName = mir_strdup("");

  00181	56		 push	 esi
  00182	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
$L84203:
  00188	59		 pop	 ecx
  00189	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+8], eax

; 451  : 						if ((n=JabberXmlGetChild(itemNode, "last"))!=NULL && n->text!=NULL)

  0018f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ONL@last?$AA@ ; `string'
  00194	57		 push	 edi
  00195	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0019a	59		 pop	 ecx
  0019b	3b c3		 cmp	 eax, ebx
  0019d	59		 pop	 ecx
  0019e	74 0f		 je	 SHORT $L83552
  001a0	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  001a3	3b c3		 cmp	 eax, ebx
  001a5	74 08		 je	 SHORT $L83552

; 452  : 							jsr.hdr.lastName = JabberTextDecode(n->text);

  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _JabberTextDecode

; 453  : 						else

  001ad	eb 07		 jmp	 SHORT $L84204
$L83552:

; 454  : 							jsr.hdr.lastName = mir_strdup("");

  001af	56		 push	 esi
  001b0	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
$L84204:
  001b6	59		 pop	 ecx
  001b7	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+12], eax

; 455  : 						if ((n=JabberXmlGetChild(itemNode, "email"))!=NULL && n->text!=NULL)

  001bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05JKH@email?$AA@ ; `string'
  001c2	57		 push	 edi
  001c3	e8 00 00 00 00	 call	 _JabberXmlGetChild
  001c8	59		 pop	 ecx
  001c9	3b c3		 cmp	 eax, ebx
  001cb	59		 pop	 ecx
  001cc	74 0f		 je	 SHORT $L83556
  001ce	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  001d1	3b c3		 cmp	 eax, ebx
  001d3	74 08		 je	 SHORT $L83556

; 456  : 							jsr.hdr.email = JabberTextDecode(n->text);

  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _JabberTextDecode

; 457  : 						else

  001db	eb 07		 jmp	 SHORT $L84205
$L83556:

; 458  : 							jsr.hdr.email = mir_strdup("");

  001dd	56		 push	 esi
  001de	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
$L84205:
  001e4	59		 pop	 ecx
  001e5	89 85 ac fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+16], eax

; 459  : 
; 460  : 						ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_SEARCH, ACKRESULT_DATA, (HANDLE) id, (LPARAM) &jsr);

  001eb	6a 06		 push	 6
  001ed	33 c0		 xor	 eax, eax
  001ef	59		 pop	 ecx
  001f0	8d 7d e8	 lea	 edi, DWORD PTR _ack$84175[ebp+4]
  001f3	f3 ab		 rep stosd
  001f5	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  001f8	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84175[ebp], 28 ; 0000001cH
  001ff	89 5d ec	 mov	 DWORD PTR _ack$84175[ebp+8], ebx
  00202	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR _ack$84175[ebp+12], 10 ; 0000000aH
  00209	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0020c	c7 45 f4 68 00
	00 00		 mov	 DWORD PTR _ack$84175[ebp+16], 104 ; 00000068H
  00213	89 45 e8	 mov	 DWORD PTR _ack$84175[ebp+4], eax
  00216	8b 45 dc	 mov	 eax, DWORD PTR _id$[ebp]
  00219	89 45 f8	 mov	 DWORD PTR _ack$84175[ebp+20], eax
  0021c	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _jsr$[ebp]
  00222	89 45 fc	 mov	 DWORD PTR _ack$84175[ebp+24], eax
  00225	8d 45 e4	 lea	 eax, DWORD PTR _ack$84175[ebp]
  00228	50		 push	 eax
  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0022e	53		 push	 ebx
  0022f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00234	ff 50 24	 call	 DWORD PTR [eax+36]

; 461  : 						found = 1;
; 462  : 						mir_free(jsr.hdr.nick);

  00237	ff b5 a0 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+4]
  0023d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
  00244	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 463  : 						mir_free(jsr.hdr.firstName);

  0024a	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+8]
  00250	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 464  : 						mir_free(jsr.hdr.lastName);

  00256	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+12]
  0025c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 465  : 						mir_free(jsr.hdr.email);

  00262	ff b5 ac fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+16]
  00268	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0026e	83 c4 1c	 add	 esp, 28			; 0000001cH
$L83536:
  00271	ff 45 0c	 inc	 DWORD PTR _i$[ebp]
  00274	8b 45 e0	 mov	 eax, DWORD PTR _queryNode$[ebp]
  00277	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]
  0027a	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0027d	0f 8c 59 fe ff
	ff		 jl	 $L83535

; 436  : 			jsr.hdr.cbSize = sizeof(JABBER_SEARCH_RESULT);
; 437  : 			for (i=0; i<queryNode->numChild; i++) {

  00283	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
$L83537:

; 466  : 					}
; 467  : 				}
; 468  : 			}
; 469  : 			if (proto->searchJID!=NULL) {

  00286	8b 87 9c 01 00
	00		 mov	 eax, DWORD PTR [edi+412]
  0028c	3b c3		 cmp	 eax, ebx
  0028e	0f 84 f0 00 00
	00		 je	 $L83562

; 470  : 				if (!found) {

  00294	39 5d d8	 cmp	 DWORD PTR _found$[ebp], ebx
  00297	0f 85 d4 00 00
	00		 jne	 $L83563

; 471  : 					_snprintf(jsr.jid, sizeof(jsr.jid), "%s@%s", proto->searchJID, dbv.pszVal);

  0029d	ff 75 c4	 push	 DWORD PTR _dbv$[ebp+4]
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FNBL@?$CFs?$EA?$CFs?$AA@ ; `string'
  002a6	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _jsr$[ebp+36]
  002ac	68 00 01 00 00	 push	 256			; 00000100H
  002b1	50		 push	 eax
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___snprintf

; 472  : 					jsr.jid[sizeof(jsr.jid)-1] = '\0';
; 473  : 					jsr.hdr.nick = mir_strdup("");

  002b8	56		 push	 esi
  002b9	88 5d bf	 mov	 BYTE PTR _jsr$[ebp+291], bl
  002bc	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 474  : 					jsr.hdr.firstName = mir_strdup("");

  002c2	56		 push	 esi
  002c3	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+4], eax
  002c9	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 475  : 					jsr.hdr.lastName = mir_strdup("");

  002cf	56		 push	 esi
  002d0	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+8], eax
  002d6	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 476  : 					jsr.hdr.email = mir_strdup("");

  002dc	56		 push	 esi
  002dd	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+12], eax
  002e3	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 477  : 					ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_SEARCH, ACKRESULT_DATA, (HANDLE) id, (LPARAM) &jsr);

  002e9	6a 06		 push	 6
  002eb	89 85 ac fe ff
	ff		 mov	 DWORD PTR _jsr$[ebp+16], eax
  002f1	59		 pop	 ecx
  002f2	33 c0		 xor	 eax, eax
  002f4	8d 7d e8	 lea	 edi, DWORD PTR _ack$84180[ebp+4]
  002f7	f3 ab		 rep stosd
  002f9	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  002fc	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84180[ebp], 28 ; 0000001cH
  00303	89 5d ec	 mov	 DWORD PTR _ack$84180[ebp+8], ebx
  00306	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR _ack$84180[ebp+12], 10 ; 0000000aH
  0030d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00310	c7 45 f4 68 00
	00 00		 mov	 DWORD PTR _ack$84180[ebp+16], 104 ; 00000068H
  00317	89 45 e8	 mov	 DWORD PTR _ack$84180[ebp+4], eax
  0031a	8b 45 dc	 mov	 eax, DWORD PTR _id$[ebp]
  0031d	89 45 f8	 mov	 DWORD PTR _ack$84180[ebp+20], eax
  00320	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _jsr$[ebp]
  00326	89 45 fc	 mov	 DWORD PTR _ack$84180[ebp+24], eax
  00329	8d 45 e4	 lea	 eax, DWORD PTR _ack$84180[ebp]
  0032c	50		 push	 eax
  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00332	53		 push	 ebx
  00333	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00338	ff 50 24	 call	 DWORD PTR [eax+36]

; 478  : 					mir_free(jsr.hdr.nick);

  0033b	ff b5 a0 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+4]
  00341	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 479  : 					mir_free(jsr.hdr.firstName);

  00347	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+8]
  0034d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 480  : 					mir_free(jsr.hdr.lastName);

  00353	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+12]
  00359	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 481  : 					mir_free(jsr.hdr.email);

  0035f	ff b5 ac fe ff
	ff		 push	 DWORD PTR _jsr$[ebp+16]
  00365	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0036b	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  0036e	83 c4 40	 add	 esp, 64			; 00000040H
$L83563:

; 482  : 				}
; 483  : 				mir_free(proto->searchJID);

  00371	ff b7 9c 01 00
	00		 push	 DWORD PTR [edi+412]
  00377	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0037d	59		 pop	 ecx

; 484  : 				proto->searchJID = NULL;

  0037e	89 9f 9c 01 00
	00		 mov	 DWORD PTR [edi+412], ebx
$L83562:

; 485  : 			}
; 486  : 			DBFreeVariant(&dbv);

  00384	8d 45 c0	 lea	 eax, DWORD PTR _dbv$[ebp]
  00387	50		 push	 eax
  00388	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0038d	53		 push	 ebx
  0038e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@ ; `string'
  00393	ff 50 24	 call	 DWORD PTR [eax+36]
  00396	8b 75 dc	 mov	 esi, DWORD PTR _id$[ebp]
  00399	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84184:

; 487  : 		}
; 488  : 		found = 0;
; 489  : 		if (queryNode->numChild == TLEN_MAX_SEARCH_RESULTS_PER_PAGE) {

  0039c	8b 45 e0	 mov	 eax, DWORD PTR _queryNode$[ebp]
  0039f	83 78 14 14	 cmp	 DWORD PTR [eax+20], 20	; 00000014H
  003a3	75 0f		 jne	 SHORT $L84197

; 490  : 			found = TlenRunSearch(proto);

  003a5	57		 push	 edi
  003a6	e8 00 00 00 00	 call	 _TlenRunSearch

; 491  : 		}
; 492  : 		if (!found) {

  003ab	3b c3		 cmp	 eax, ebx
  003ad	59		 pop	 ecx
  003ae	0f 85 83 00 00
	00		 jne	 $L84192
$L84197:

; 493  : 			ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_SEARCH, ACKRESULT_SUCCESS, (HANDLE) id, 0);

  003b4	6a 06		 push	 6
  003b6	33 c0		 xor	 eax, eax
  003b8	59		 pop	 ecx
  003b9	8d 7d e8	 lea	 edi, DWORD PTR _ack$84188[ebp+4]
  003bc	f3 ab		 rep stosd
  003be	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  003c1	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84188[ebp], 28 ; 0000001cH
  003c8	89 5d ec	 mov	 DWORD PTR _ack$84188[ebp+8], ebx
  003cb	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR _ack$84188[ebp+12], 10 ; 0000000aH
  003d2	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  003d5	89 5d f4	 mov	 DWORD PTR _ack$84188[ebp+16], ebx
  003d8	89 45 e8	 mov	 DWORD PTR _ack$84188[ebp+4], eax
  003db	89 75 f8	 mov	 DWORD PTR _ack$84188[ebp+20], esi
  003de	89 5d fc	 mov	 DWORD PTR _ack$84188[ebp+24], ebx
  003e1	8d 45 e4	 lea	 eax, DWORD PTR _ack$84188[ebp]

; 494  : 		}
; 495  : 	} else if (!strcmp(type, "error")) {

  003e4	eb 3f		 jmp	 SHORT $L84206
$L83529:
  003e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05COLM@error?$AA@ ; `string'
  003eb	57		 push	 edi
  003ec	e8 00 00 00 00	 call	 _strcmp
  003f1	59		 pop	 ecx
  003f2	85 c0		 test	 eax, eax
  003f4	59		 pop	 ecx
  003f5	75 40		 jne	 SHORT $L84192

; 496  : 		// ProtoBroadcastAck(iface.m_szModuleName, NULL, ACKTYPE_SEARCH, ACKRESULT_FAILED, (HANDLE) id, 0);
; 497  : 		// There is no ACKRESULT_FAILED for ACKTYPE_SEARCH :) look at findadd.c
; 498  : 		// So we will just send a SUCCESS
; 499  : 		ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_SEARCH, ACKRESULT_SUCCESS, (HANDLE) id, 0);

  003f7	6a 06		 push	 6
  003f9	8d 7d e8	 lea	 edi, DWORD PTR _ack$84193[ebp+4]
  003fc	59		 pop	 ecx
  003fd	f3 ab		 rep stosd
  003ff	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00402	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$84193[ebp], 28 ; 0000001cH
  00409	89 5d ec	 mov	 DWORD PTR _ack$84193[ebp+8], ebx
  0040c	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR _ack$84193[ebp+12], 10 ; 0000000aH
  00413	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00416	89 5d f4	 mov	 DWORD PTR _ack$84193[ebp+16], ebx
  00419	89 45 e8	 mov	 DWORD PTR _ack$84193[ebp+4], eax
  0041c	89 75 f8	 mov	 DWORD PTR _ack$84193[ebp+20], esi
  0041f	89 5d fc	 mov	 DWORD PTR _ack$84193[ebp+24], ebx
  00422	8d 45 e4	 lea	 eax, DWORD PTR _ack$84193[ebp]
$L84206:
  00425	50		 push	 eax
  00426	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0042b	53		 push	 ebx
  0042c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  00431	ff 50 24	 call	 DWORD PTR [eax+36]
  00434	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84192:
  00437	5f		 pop	 edi
  00438	5e		 pop	 esi
  00439	5b		 pop	 ebx

; 500  : 	}
; 501  : }

  0043a	c9		 leave
  0043b	c3		 ret	 0
_JabberIqResultSearch ENDP
_TEXT	ENDS
PUBLIC	_GetConfigItem
PUBLIC	??_C@_06IM@method?$AA@				; `string'
PUBLIC	??_C@_04PHMF@POST?$AA@				; `string'
EXTRN	_strcpy:NEAR
EXTRN	__imp__strcmpi:NEAR
EXTRN	_TlenUrlDecode:NEAR
;	COMDAT ??_C@_06IM@method?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_iqid.c
_DATA	SEGMENT
??_C@_06IM@method?$AA@ DB 'method', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PHMF@POST?$AA@
_DATA	SEGMENT
??_C@_04PHMF@POST?$AA@ DB 'POST', 00H			; `string'
_DATA	ENDS
;	COMDAT _GetConfigItem
_TEXT	SEGMENT
_node$ = 8
_dest$ = 12
_bMethod$ = 16
_methodDest$ = 20
_GetConfigItem PROC NEAR				; COMDAT

; 504  : void GetConfigItem(XmlNode *node, char *dest, BOOL bMethod, int *methodDest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 505  : 	strcpy(dest, node->text);

  00004	8b 75 08	 mov	 esi, DWORD PTR _node$[ebp]
  00007	ff 76 20	 push	 DWORD PTR [esi+32]
  0000a	ff 75 0c	 push	 DWORD PTR _dest$[ebp]
  0000d	e8 00 00 00 00	 call	 _strcpy

; 506  : 	TlenUrlDecode(dest);

  00012	ff 75 0c	 push	 DWORD PTR _dest$[ebp]
  00015	e8 00 00 00 00	 call	 _TlenUrlDecode
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 507  : 	if (bMethod) {

  0001d	83 7d 10 00	 cmp	 DWORD PTR _bMethod$[ebp], 0
  00021	74 37		 je	 SHORT $L83592

; 508  : 		char *method = JabberXmlGetAttrValue(node, "method");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06IM@method?$AA@ ; `string'
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0002e	59		 pop	 ecx

; 509  : 		if (method != NULL && !strcmpi(method, "POST")) {

  0002f	85 c0		 test	 eax, eax
  00031	59		 pop	 ecx
  00032	74 1d		 je	 SHORT $L83590
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PHMF@POST?$AA@ ; `string'
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcmpi
  00040	59		 pop	 ecx
  00041	85 c0		 test	 eax, eax
  00043	59		 pop	 ecx
  00044	75 0b		 jne	 SHORT $L83590

; 510  : 			*methodDest = REQUEST_POST;

  00046	8b 45 14	 mov	 eax, DWORD PTR _methodDest$[ebp]
  00049	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 511  : 		} else {

  0004f	eb 09		 jmp	 SHORT $L83592
$L83590:

; 512  : 			*methodDest = REQUEST_GET;

  00051	8b 45 14	 mov	 eax, DWORD PTR _methodDest$[ebp]
  00054	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$L83592:
  0005a	5e		 pop	 esi

; 513  : 		}
; 514  : 	}
; 515  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_GetConfigItem ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultTcfg
PUBLIC	??_C@_09EHD@mini?9mail?$AA@			; `string'
PUBLIC	??_C@_04PIEA@base?$AA@				; `string'
PUBLIC	??_C@_03MBOC@msg?$AA@				; `string'
PUBLIC	??_C@_05BBHA@index?$AA@				; `string'
PUBLIC	??_C@_05FLFF@login?$AA@				; `string'
PUBLIC	??_C@_07CKGN@compose?$AA@			; `string'
PUBLIC	??_C@_0L@BPMN@avatar?9get?$AA@			; `string'
PUBLIC	??_C@_0O@GALA@avatar?9upload?$AA@		; `string'
PUBLIC	??_C@_0O@COAM@avatar?9remove?$AA@		; `string'
;	COMDAT ??_C@_09EHD@mini?9mail?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\jabber_iqid.c
_DATA	SEGMENT
??_C@_09EHD@mini?9mail?$AA@ DB 'mini-mail', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PIEA@base?$AA@
_DATA	SEGMENT
??_C@_04PIEA@base?$AA@ DB 'base', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03MBOC@msg?$AA@
_DATA	SEGMENT
??_C@_03MBOC@msg?$AA@ DB 'msg', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BBHA@index?$AA@
_DATA	SEGMENT
??_C@_05BBHA@index?$AA@ DB 'index', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FLFF@login?$AA@
_DATA	SEGMENT
??_C@_05FLFF@login?$AA@ DB 'login', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CKGN@compose?$AA@
_DATA	SEGMENT
??_C@_07CKGN@compose?$AA@ DB 'compose', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BPMN@avatar?9get?$AA@
_DATA	SEGMENT
??_C@_0L@BPMN@avatar?9get?$AA@ DB 'avatar-get', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@GALA@avatar?9upload?$AA@
_DATA	SEGMENT
??_C@_0O@GALA@avatar?9upload?$AA@ DB 'avatar-upload', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@COAM@avatar?9remove?$AA@
_DATA	SEGMENT
??_C@_0O@COAM@avatar?9remove?$AA@ DB 'avatar-remove', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultTcfg
_TEXT	SEGMENT
_proto$ = 8
_iqNode$ = 12
_TlenIqResultTcfg PROC NEAR				; COMDAT

; 518  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 519  : 	XmlNode *queryNode, *miniMailNode, *node;
; 520  : 	char *type;
; 521  : 
; 522  : 	if ((type=JabberXmlGetAttrValue(iqNode, "type")) == NULL) return;

  00003	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00008	ff 74 24 18	 push	 DWORD PTR _iqNode$[esp+12]
  0000c	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00011	59		 pop	 ecx
  00012	85 c0		 test	 eax, eax
  00014	59		 pop	 ecx
  00015	0f 84 bf 01 00
	00		 je	 $L83633

; 523  : 	if (!strcmp(type, "result")) {

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NMEN@result?$AA@ ; `string'
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _strcmp
  00026	59		 pop	 ecx
  00027	85 c0		 test	 eax, eax
  00029	59		 pop	 ecx
  0002a	0f 85 aa 01 00
	00		 jne	 $L83633

; 524  : 		if ((queryNode=JabberXmlGetChild(iqNode, "query")) == NULL) return;

  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  00035	ff 74 24 18	 push	 DWORD PTR _iqNode$[esp+12]
  00039	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0003e	59		 pop	 ecx
  0003f	85 c0		 test	 eax, eax
  00041	59		 pop	 ecx
  00042	0f 84 92 01 00
	00		 je	 $L83633

; 525  : 		if ((miniMailNode=JabberXmlGetChild(queryNode, "mini-mail")) == NULL) return;

  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EHD@mini?9mail?$AA@ ; `string'
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00053	8b d8		 mov	 ebx, eax
  00055	59		 pop	 ecx
  00056	85 db		 test	 ebx, ebx
  00058	59		 pop	 ecx
  00059	0f 84 7b 01 00
	00		 je	 $L83633

; 526  : 		if ((node=JabberXmlGetChild(miniMailNode, "base")) != NULL) {

  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIEA@base?$AA@ ; `string'
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 _JabberXmlGetChild
  0006a	8b 74 24 18	 mov	 esi, DWORD PTR _proto$[esp+16]
  0006e	59		 pop	 ecx
  0006f	85 c0		 test	 eax, eax
  00071	59		 pop	 ecx
  00072	74 1a		 je	 SHORT $L83611

; 527  : 			GetConfigItem(node, proto->threadData->tlenConfig.mailBase, FALSE, NULL);

  00074	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  0007a	6a 00		 push	 0
  0007c	81 c1 04 07 00
	00		 add	 ecx, 1796		; 00000704H
  00082	6a 00		 push	 0
  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _GetConfigItem
  0008b	83 c4 10	 add	 esp, 16			; 00000010H
$L83611:

; 528  : 		}
; 529  : 		if ((node=JabberXmlGetChild(miniMailNode, "msg")) != NULL) {

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03MBOC@msg?$AA@ ; `string'
  00093	53		 push	 ebx
  00094	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00099	59		 pop	 ecx
  0009a	59		 pop	 ecx
  0009b	6a 01		 push	 1
  0009d	85 c0		 test	 eax, eax
  0009f	5f		 pop	 edi
  000a0	74 1e		 je	 SHORT $L83615

; 530  : 			GetConfigItem(node, proto->threadData->tlenConfig.mailMsg, TRUE, &proto->threadData->tlenConfig.mailMsgMthd);

  000a2	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  000a8	8d 91 04 09 00
	00		 lea	 edx, DWORD PTR [ecx+2308]
  000ae	81 c1 04 08 00
	00		 add	 ecx, 2052		; 00000804H
  000b4	52		 push	 edx
  000b5	57		 push	 edi
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _GetConfigItem
  000bd	83 c4 10	 add	 esp, 16			; 00000010H
$L83615:

; 531  : 		}
; 532  : 		if ((node=JabberXmlGetChild(miniMailNode, "index")) != NULL) {

  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05BBHA@index?$AA@ ; `string'
  000c5	53		 push	 ebx
  000c6	e8 00 00 00 00	 call	 _JabberXmlGetChild
  000cb	59		 pop	 ecx
  000cc	85 c0		 test	 eax, eax
  000ce	59		 pop	 ecx
  000cf	74 1e		 je	 SHORT $L83618

; 533  : 			GetConfigItem(node, proto->threadData->tlenConfig.mailIndex, TRUE, &proto->threadData->tlenConfig.mailIndexMthd);

  000d1	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  000d7	8d 91 08 0a 00
	00		 lea	 edx, DWORD PTR [ecx+2568]
  000dd	81 c1 08 09 00
	00		 add	 ecx, 2312		; 00000908H
  000e3	52		 push	 edx
  000e4	57		 push	 edi
  000e5	51		 push	 ecx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _GetConfigItem
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
$L83618:

; 534  : 		}
; 535  : 		if ((node=JabberXmlGetChild(miniMailNode, "login")) != NULL) {

  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FLFF@login?$AA@ ; `string'
  000f4	53		 push	 ebx
  000f5	e8 00 00 00 00	 call	 _JabberXmlGetChild
  000fa	59		 pop	 ecx
  000fb	85 c0		 test	 eax, eax
  000fd	59		 pop	 ecx
  000fe	74 1e		 je	 SHORT $L83621

; 536  : 			GetConfigItem(node, proto->threadData->tlenConfig.mailLogin, TRUE, &proto->threadData->tlenConfig.mailLoginMthd);

  00100	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  00106	8d 91 0c 0b 00
	00		 lea	 edx, DWORD PTR [ecx+2828]
  0010c	81 c1 0c 0a 00
	00		 add	 ecx, 2572		; 00000a0cH
  00112	52		 push	 edx
  00113	57		 push	 edi
  00114	51		 push	 ecx
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _GetConfigItem
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
$L83621:

; 537  : 		}
; 538  : 		if ((node=JabberXmlGetChild(miniMailNode, "compose")) != NULL) {

  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CKGN@compose?$AA@ ; `string'
  00123	53		 push	 ebx
  00124	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00129	59		 pop	 ecx
  0012a	85 c0		 test	 eax, eax
  0012c	59		 pop	 ecx
  0012d	74 1e		 je	 SHORT $L83624

; 539  : 			GetConfigItem(node, proto->threadData->tlenConfig.mailCompose, TRUE, &proto->threadData->tlenConfig.mailComposeMthd);

  0012f	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  00135	8d 91 10 0c 00
	00		 lea	 edx, DWORD PTR [ecx+3088]
  0013b	81 c1 10 0b 00
	00		 add	 ecx, 2832		; 00000b10H
  00141	52		 push	 edx
  00142	57		 push	 edi
  00143	51		 push	 ecx
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _GetConfigItem
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
$L83624:

; 540  : 		}
; 541  : 		if ((node=JabberXmlGetChild(miniMailNode, "avatar-get")) != NULL) {

  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BPMN@avatar?9get?$AA@ ; `string'
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00158	59		 pop	 ecx
  00159	85 c0		 test	 eax, eax
  0015b	59		 pop	 ecx
  0015c	74 1e		 je	 SHORT $L83627

; 542  : 			GetConfigItem(node, proto->threadData->tlenConfig.avatarGet, TRUE, &proto->threadData->tlenConfig.avatarGetMthd);

  0015e	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  00164	8d 91 14 0d 00
	00		 lea	 edx, DWORD PTR [ecx+3348]
  0016a	81 c1 14 0c 00
	00		 add	 ecx, 3092		; 00000c14H
  00170	52		 push	 edx
  00171	57		 push	 edi
  00172	51		 push	 ecx
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _GetConfigItem
  00179	83 c4 10	 add	 esp, 16			; 00000010H
$L83627:

; 543  : 		}
; 544  : 		if ((node=JabberXmlGetChild(miniMailNode, "avatar-upload")) != NULL) {

  0017c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GALA@avatar?9upload?$AA@ ; `string'
  00181	53		 push	 ebx
  00182	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00187	59		 pop	 ecx
  00188	85 c0		 test	 eax, eax
  0018a	59		 pop	 ecx
  0018b	74 1e		 je	 SHORT $L83630

; 545  : 			GetConfigItem(node, proto->threadData->tlenConfig.avatarUpload, TRUE, &proto->threadData->tlenConfig.avatarUploadMthd);

  0018d	8b 8e e0 00 00
	00		 mov	 ecx, DWORD PTR [esi+224]
  00193	8d 91 18 0e 00
	00		 lea	 edx, DWORD PTR [ecx+3608]
  00199	81 c1 18 0d 00
	00		 add	 ecx, 3352		; 00000d18H
  0019f	52		 push	 edx
  001a0	57		 push	 edi
  001a1	51		 push	 ecx
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _GetConfigItem
  001a8	83 c4 10	 add	 esp, 16			; 00000010H
$L83630:

; 546  : 		}
; 547  : 		if ((node=JabberXmlGetChild(miniMailNode, "avatar-remove")) != NULL) {

  001ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@COAM@avatar?9remove?$AA@ ; `string'
  001b0	53		 push	 ebx
  001b1	e8 00 00 00 00	 call	 _JabberXmlGetChild
  001b6	59		 pop	 ecx
  001b7	85 c0		 test	 eax, eax
  001b9	59		 pop	 ecx
  001ba	74 1e		 je	 SHORT $L83633

; 548  : 			GetConfigItem(node, proto->threadData->tlenConfig.avatarRemove, TRUE, &proto->threadData->tlenConfig.avatarRemoveMthd);

  001bc	8b b6 e0 00 00
	00		 mov	 esi, DWORD PTR [esi+224]
  001c2	8d 8e 1c 0f 00
	00		 lea	 ecx, DWORD PTR [esi+3868]
  001c8	81 c6 1c 0e 00
	00		 add	 esi, 3612		; 00000e1cH
  001ce	51		 push	 ecx
  001cf	57		 push	 edi
  001d0	56		 push	 esi
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _GetConfigItem
  001d7	83 c4 10	 add	 esp, 16			; 00000010H
$L83633:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx

; 549  : 		}
; 550  : 	}
; 551  : }

  001dd	c3		 ret	 0
_TlenIqResultTcfg ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultVersion
PUBLIC	??_C@_07BPOH@version?$AA@			; `string'
PUBLIC	??_C@_02KBP@os?$AA@				; `string'
PUBLIC	??_C@_06DLKF@MirVer?$AA@			; `string'
EXTRN	_JabberListGetItemPtr:NEAR
;	COMDAT ??_C@_07BPOH@version?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_07BPOH@version?$AA@ DB 'version', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02KBP@os?$AA@
_DATA	SEGMENT
??_C@_02KBP@os?$AA@ DB 'os', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06DLKF@MirVer?$AA@
_DATA	SEGMENT
??_C@_06DLKF@MirVer?$AA@ DB 'MirVer', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultVersion
_TEXT	SEGMENT
_cws$84215 = -20
_cgs$84221 = -12
_proto$ = 8
_iqNode$ = 12
_TlenIqResultVersion PROC NEAR				; COMDAT

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 555  : 	XmlNode *queryNode = JabberXmlGetChild(iqNode, "query");

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  0000d	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00010	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00015	8b d8		 mov	 ebx, eax
  00017	59		 pop	 ecx

; 556  : 	if (queryNode != NULL) {

  00018	85 db		 test	 ebx, ebx
  0001a	59		 pop	 ecx
  0001b	0f 84 2c 01 00
	00		 je	 $L84220

; 557  : 		char* from;
; 558  : 		if (( from=JabberXmlGetAttrValue( iqNode, "from" )) != NULL ) {

  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  00026	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00029	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  0002e	59		 pop	 ecx
  0002f	85 c0		 test	 eax, eax
  00031	59		 pop	 ecx
  00032	0f 84 15 01 00
	00		 je	 $L84220

; 559  : 			JABBER_LIST_ITEM *item;
; 560  : 			if (( item=JabberListGetItemPtr( proto, LIST_ROSTER, from ))!=NULL) {

  00038	50		 push	 eax
  00039	6a 00		 push	 0
  0003b	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0003e	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00043	8b f0		 mov	 esi, eax
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	85 f6		 test	 esi, esi
  0004a	0f 84 fd 00 00
	00		 je	 $L84220

; 561  : 				HANDLE hContact;
; 562  : 				XmlNode *n;
; 563  : 				if ( item->software ) mir_free( item->software );

  00050	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $L83651
  00057	50		 push	 eax
  00058	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0005e	59		 pop	 ecx
$L83651:

; 564  : 				if ( item->version ) mir_free( item->version );

  0005f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00062	85 c0		 test	 eax, eax
  00064	74 08		 je	 SHORT $L83652
  00066	50		 push	 eax
  00067	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0006d	59		 pop	 ecx
$L83652:

; 565  : 				if ( item->system ) mir_free( item->system );

  0006e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00071	85 c0		 test	 eax, eax
  00073	74 08		 je	 SHORT $L83653
  00075	50		 push	 eax
  00076	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0007c	59		 pop	 ecx
$L83653:

; 566  : 				if (( n=JabberXmlGetChild( queryNode, "name" ))!=NULL && n->text ) {

  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04OPJK@name?$AA@ ; `string'
  00082	53		 push	 ebx
  00083	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00088	59		 pop	 ecx
  00089	85 c0		 test	 eax, eax
  0008b	59		 pop	 ecx
  0008c	74 13		 je	 SHORT $L83655
  0008e	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00091	85 c0		 test	 eax, eax
  00093	74 0c		 je	 SHORT $L83655

; 567  : 					item->software = JabberTextDecode( n->text );

  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _JabberTextDecode
  0009b	59		 pop	 ecx
  0009c	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 568  : 				} else

  0009f	eb 04		 jmp	 SHORT $L83656
$L83655:

; 569  : 					item->software = NULL;

  000a1	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
$L83656:

; 570  : 				if (( n=JabberXmlGetChild( queryNode, "version" ))!=NULL && n->text )

  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BPOH@version?$AA@ ; `string'
  000aa	53		 push	 ebx
  000ab	e8 00 00 00 00	 call	 _JabberXmlGetChild
  000b0	59		 pop	 ecx
  000b1	85 c0		 test	 eax, eax
  000b3	59		 pop	 ecx
  000b4	74 13		 je	 SHORT $L83659
  000b6	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000b9	85 c0		 test	 eax, eax
  000bb	74 0c		 je	 SHORT $L83659

; 571  : 					item->version = JabberTextDecode( n->text );

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _JabberTextDecode
  000c3	59		 pop	 ecx
  000c4	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 572  : 				else

  000c7	eb 04		 jmp	 SHORT $L83661
$L83659:

; 573  : 					item->version = NULL;

  000c9	83 66 20 00	 and	 DWORD PTR [esi+32], 0
$L83661:

; 574  : 				if (( n=JabberXmlGetChild( queryNode, "os" ))!=NULL && n->text )

  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KBP@os?$AA@ ; `string'
  000d2	53		 push	 ebx
  000d3	e8 00 00 00 00	 call	 _JabberXmlGetChild
  000d8	59		 pop	 ecx
  000d9	85 c0		 test	 eax, eax
  000db	59		 pop	 ecx
  000dc	74 13		 je	 SHORT $L83664
  000de	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000e1	85 c0		 test	 eax, eax
  000e3	74 0c		 je	 SHORT $L83664

; 575  : 					item->system = JabberTextDecode( n->text );

  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _JabberTextDecode
  000eb	59		 pop	 ecx
  000ec	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 576  : 				else

  000ef	eb 04		 jmp	 SHORT $L83666
$L83664:

; 577  : 					item->system = NULL;

  000f1	83 66 24 00	 and	 DWORD PTR [esi+36], 0
$L83666:

; 578  : 				if (( hContact=JabberHContactFromJID(proto, item->jid )) != NULL ) {

  000f5	ff 76 04	 push	 DWORD PTR [esi+4]
  000f8	8b 5d 08	 mov	 ebx, DWORD PTR _proto$[ebp]
  000fb	53		 push	 ebx
  000fc	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00101	59		 pop	 ecx
  00102	85 c0		 test	 eax, eax
  00104	59		 pop	 ecx
  00105	74 46		 je	 SHORT $L84220

; 579  : 					if (item->software != NULL) {

  00107	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 580  : 						DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "MirVer", item->software);

  0010a	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  0010d	85 f6		 test	 esi, esi
  0010f	74 1d		 je	 SHORT $L83671
  00111	80 4d f4 ff	 or	 BYTE PTR _cws$84215[ebp+8], 255 ; 000000ffH
  00115	89 4d ec	 mov	 DWORD PTR _cws$84215[ebp], ecx
  00118	8d 4d ec	 lea	 ecx, DWORD PTR _cws$84215[ebp]
  0011b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$84215[ebp+4], OFFSET FLAT:??_C@_06DLKF@MirVer?$AA@ ; `string'
  00122	51		 push	 ecx
  00123	50		 push	 eax
  00124	89 75 f8	 mov	 DWORD PTR _cws$84215[ebp+12], esi
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'

; 581  : 					} else {

  0012c	eb 14		 jmp	 SHORT $L84223
$L83671:

; 582  : 						DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "MirVer");

  0012e	89 4d f4	 mov	 DWORD PTR _cgs$84221[ebp], ecx
  00131	8d 4d f4	 lea	 ecx, DWORD PTR _cgs$84221[ebp]
  00134	51		 push	 ecx
  00135	50		 push	 eax
  00136	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$84221[ebp+4], OFFSET FLAT:??_C@_06DLKF@MirVer?$AA@ ; `string'
  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
$L84223:
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00147	ff 50 24	 call	 DWORD PTR [eax+36]
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L84220:
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx

; 583  : 					}
; 584  : 				}
; 585  : 			}
; 586  : 		}
; 587  : 	}
; 588  : }

  0014f	c9		 leave
  00150	c3		 ret	 0
_TlenIqResultVersion ENDP
_TEXT	ENDS
PUBLIC	_TlenIqResultInfo
PUBLIC	??_C@_0BB@KFCN@Tlen?5Protocol?5?$CFs?$AA@	; `string'
;	COMDAT ??_C@_0BB@KFCN@Tlen?5Protocol?5?$CFs?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BB@KFCN@Tlen?5Protocol?5?$CFs?$AA@ DB 'Tlen Protocol %s', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenIqResultInfo
_TEXT	SEGMENT
_cws$84228 = -20
_proto$ = 8
_iqNode$ = 12
_str$83694 = -148
_TlenIqResultInfo PROC NEAR				; COMDAT

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 592  : 	XmlNode *queryNode = JabberXmlGetChild(iqNode, "query");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PBDF@query?$AA@ ; `string'
  00011	ff 75 0c	 push	 DWORD PTR _iqNode$[ebp]
  00014	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00019	8b d8		 mov	 ebx, eax
  0001b	59		 pop	 ecx

; 593  : 	if (queryNode != NULL) {

  0001c	85 db		 test	 ebx, ebx
  0001e	59		 pop	 ecx
  0001f	0f 84 a1 00 00
	00		 je	 $L84227

; 594  : 		char* from;
; 595  : 		if (( from=JabberXmlGetAttrValue( queryNode, "from" )) != NULL ) {

  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04GLLG@from?$AA@ ; `string'
  0002a	53		 push	 ebx
  0002b	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00030	59		 pop	 ecx
  00031	85 c0		 test	 eax, eax
  00033	59		 pop	 ecx
  00034	0f 84 8c 00 00
	00		 je	 $L84227

; 596  : 			JABBER_LIST_ITEM *item;
; 597  : 			if (( item=JabberListGetItemPtr( proto, LIST_ROSTER, from ))!=NULL) {

  0003a	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  0003d	50		 push	 eax
  0003e	6a 00		 push	 0
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 _JabberListGetItemPtr
  00046	8b f0		 mov	 esi, eax
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	85 f6		 test	 esi, esi
  0004d	74 77		 je	 SHORT $L84227

; 598  : 				HANDLE hContact;
; 599  : 				XmlNode *version = JabberXmlGetChild(queryNode, "version");

  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BPOH@version?$AA@ ; `string'
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _JabberXmlGetChild

; 600  : 				item->protocolVersion = JabberTextDecode(version->text);

  0005a	ff 70 20	 push	 DWORD PTR [eax+32]
  0005d	e8 00 00 00 00	 call	 _JabberTextDecode

; 601  : 				if (( hContact=JabberHContactFromJID(proto, item->jid )) != NULL ) {

  00062	ff 76 04	 push	 DWORD PTR [esi+4]
  00065	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0006e	8b d8		 mov	 ebx, eax
  00070	83 c4 14	 add	 esp, 20			; 00000014H
  00073	85 db		 test	 ebx, ebx
  00075	74 4f		 je	 SHORT $L84227

; 602  : 					if (item->software == NULL) {

  00077	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0007b	75 49		 jne	 SHORT $L84227

; 603  : 						char str[128];
; 604  : 						mir_snprintf(str, sizeof(str), "Tlen Protocol %s", item->protocolVersion);

  0007d	ff 76 2c	 push	 DWORD PTR [esi+44]
  00080	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _str$83694[ebp]
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@KFCN@Tlen?5Protocol?5?$CFs?$AA@ ; `string'
  0008b	68 80 00 00 00	 push	 128			; 00000080H
  00090	50		 push	 eax
  00091	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28

; 605  : 						DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "MirVer", str);

  00097	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0009a	80 4d f4 ff	 or	 BYTE PTR _cws$84228[ebp+8], 255 ; 000000ffH
  0009e	89 45 ec	 mov	 DWORD PTR _cws$84228[ebp], eax
  000a1	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _str$83694[ebp]
  000a7	89 45 f8	 mov	 DWORD PTR _cws$84228[ebp+12], eax
  000aa	8d 45 ec	 lea	 eax, DWORD PTR _cws$84228[ebp]
  000ad	50		 push	 eax
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000b3	53		 push	 ebx
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  000b9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$84228[ebp+4], OFFSET FLAT:??_C@_06DLKF@MirVer?$AA@ ; `string'
  000c0	ff 50 24	 call	 DWORD PTR [eax+36]
  000c3	83 c4 1c	 add	 esp, 28			; 0000001cH
$L84227:
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx

; 606  : 					}
; 607  : 				}
; 608  : 			}
; 609  : 		}
; 610  : 	}
; 611  : }

  000c9	c9		 leave
  000ca	c3		 ret	 0
_TlenIqResultInfo ENDP
_TEXT	ENDS
END
