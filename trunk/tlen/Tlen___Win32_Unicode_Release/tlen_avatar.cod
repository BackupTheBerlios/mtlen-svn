	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BG@FJFA@Miranda?1System?1GetMMI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNA@Miranda?1System?1GetLI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@FHMP@Miranda?1System?1GetUTFI?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DCOH@Miranda?1Thread?1Fork?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IENN@Miranda?1Thread?1ForkEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGIN@Miranda?1SysTerm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LIGC@Utils?1AddToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PEAI@Utils?1RemoveFromWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GMNB@Utils?1FindWindowInList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NOMI@Utils?1BroadcastToWindowList?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@CFCA@Utils?1BroadcastToWindowListAsync@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MDKL@Utils?1SaveWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GALP@Utils?1RestoreWindowPos?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@CHLF@Miranda?1System?1GetMD5I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FOPF@Miranda?1System?1GetSHA1I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OCFE@Netlib?1CloseHandle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFDJ@Netlib?1Send?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GFGB@Netlib?1Recv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMGK@Netlib?1Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GDOO@Netlib?1InitSecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JINJ@Netlib?1DestroySecurityProvider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CBFG@Netlib?1NtlmCreateResponse?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@COCL@Proto?1EnumAccounts?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CCNI@Proto?1GetAccount?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MGBG@DB?1Event?1GetText?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BEPM@DB?1Contact?1GetSettingStr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OGAJ@DB?1Contact?1FreeVariant?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@FLKM@C?3?2MirandaDev?2miranda_svn2?2inclu@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GNEH@LangPack?1TranslateDialog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GFNK@Skin?1Icons?1Load?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BLFF@Skin?1Icons?1LoadProto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CNOA@Skin?1Sounds?1AddNew?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LENC@Skin?1Sounds?1Play?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PNGM@PopUp?1AddPopUp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OBDC@PopUp?1AddPopUpEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CGKI@PopUp?1AddPopUpW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HIHP@PopUp?1GetContact?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CCHD@PopUp?1GetPluginData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HKEA@PopUp?1IsSecondLineShown?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGOE@PopUp?1Changetext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LAPD@PopUp?1ChangetextW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KOPP@PopUp?1Change?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@BGJ@PopUp?1ShowMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NFFE@PopUp?1ShowMessageW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@MAHO@PopUp?1AddPopupClass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FE@DFOG@E?3?2Documents?5and?5Settings?2piotr?2@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NJGE@DB?1GetProfilePath?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DKBA@?2?$CFs?2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PJIM@png?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03EEHM@jpg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LHKJ@ico?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03KNEF@gif?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LLKB@bmp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OGKG@?$CFs?4?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@DJFC@?$CFs_avatar?4?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OJFH@File?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@ECGN@ContactPhoto?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GNHM@?$CF08x?$CF08x?$CF08x?$CF08x?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02NGAF@wb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FNLH@a?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PIKN@type?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JDIA@md5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JBCA@avatar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IPMD@?$FOlogin?$FO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LLEI@?$FOtype?$FO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BPPH@?$FOtoken?$FO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HJMC@?$FOaccess?$FO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@HKBC@Content?9Type?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OPBK@image?1png?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@LALM@image?1x?9png?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JAMC@image?1jpeg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FCOK@image?1jpg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LLND@image?1gif?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KNDH@image?1bmp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@DNCL@multipart?1form?9data?$DL?5boundary?$DNAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _ProtoBroadcastAck
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingByte_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingWord_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingDword_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBGetContactSettingString_Helper
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBFreeVariant
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBDeleteContactSetting
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingDword
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DBWriteContactSettingString
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAvatarFileName
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RemoveAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessAvatarNode
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenProcessPresenceAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _replaceTokens
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAvatarThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenGetAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenRemoveAvatarRequestThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenUploadAvatarRequestThread
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenRemoveAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TlenUploadAvatar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
_BSS	SEGMENT
_getAvatarMutex DD 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0N@IOKO@AvatarFormat?$AA@			; `string'
PUBLIC	??_C@_0BC@NJGE@DB?1GetProfilePath?$AA@		; `string'
PUBLIC	??_C@_04DKBA@?2?$CFs?2?$AA@			; `string'
PUBLIC	??_C@_03PJIM@png?$AA@				; `string'
PUBLIC	??_C@_03EEHM@jpg?$AA@				; `string'
PUBLIC	??_C@_03LHKJ@ico?$AA@				; `string'
PUBLIC	??_C@_03KNEF@gif?$AA@				; `string'
PUBLIC	??_C@_03LLKB@bmp?$AA@				; `string'
PUBLIC	??_C@_05OGKG@?$CFs?4?$CFs?$AA@			; `string'
PUBLIC	??_C@_0N@DJFC@?$CFs_avatar?4?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@	; `string'
PUBLIC	_TlenGetAvatarFileName
EXTRN	_mmi:BYTE
EXTRN	__imp__CreateDirectoryA@8:NEAR
EXTRN	_strlen:NEAR
EXTRN	_JabberSha1:NEAR
EXTRN	_pluginLink:DWORD
;	COMDAT ??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_database.h
_DATA	SEGMENT
??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ DB 'DB/Contact/GetSetting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@IOKO@AvatarFormat?$AA@
_DATA	SEGMENT
??_C@_0N@IOKO@AvatarFormat?$AA@ DB 'AvatarFormat', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NJGE@DB?1GetProfilePath?$AA@
_DATA	SEGMENT
??_C@_0BC@NJGE@DB?1GetProfilePath?$AA@ DB 'DB/GetProfilePath', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DKBA@?2?$CFs?2?$AA@
_DATA	SEGMENT
??_C@_04DKBA@?2?$CFs?2?$AA@ DB '\%s\', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PJIM@png?$AA@
_DATA	SEGMENT
??_C@_03PJIM@png?$AA@ DB 'png', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03EEHM@jpg?$AA@
_DATA	SEGMENT
??_C@_03EEHM@jpg?$AA@ DB 'jpg', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LHKJ@ico?$AA@
_DATA	SEGMENT
??_C@_03LHKJ@ico?$AA@ DB 'ico', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03KNEF@gif?$AA@
_DATA	SEGMENT
??_C@_03KNEF@gif?$AA@ DB 'gif', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LLKB@bmp?$AA@
_DATA	SEGMENT
??_C@_03LLKB@bmp?$AA@ DB 'bmp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05OGKG@?$CFs?4?$CFs?$AA@
_DATA	SEGMENT
??_C@_05OGKG@?$CFs?4?$CFs?$AA@ DB '%s.%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@DJFC@?$CFs_avatar?4?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@DJFC@?$CFs_avatar?4?$CFs?$AA@ DB '%s_avatar.%s', 00H ; `string'
_DATA	ENDS
;	COMDAT _TlenGetAvatarFileName
_TEXT	SEGMENT
_proto$ = 8
_item$ = 12
_pszDest$ = 16
_cbLen$ = 20
_format$ = -4
_hash$83185 = 8
_dbv$83633 = -28
_cgs$83634 = -16
_TlenGetAvatarFileName PROC NEAR			; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 35   : 	int tPathLen;
; 36   : 	int format = PA_FORMAT_PNG;
; 37   : 	char* szFileType;
; 38   : 	if (item != NULL) {

  00006	8b 45 0c	 mov	 eax, DWORD PTR _item$[ebp]
  00009	85 c0		 test	 eax, eax
  0000b	74 05		 je	 SHORT $L83157

; 39   : 		format = item->avatarFormat;

  0000d	8b 40 30	 mov	 eax, DWORD PTR [eax+48]

; 40   : 	} else if (proto->threadData != NULL) {

  00010	eb 47		 jmp	 SHORT $L83640
$L83157:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _proto$[ebp]
  00015	8b 81 e0 00 00
	00		 mov	 eax, DWORD PTR [ecx+224]
  0001b	85 c0		 test	 eax, eax
  0001d	74 08		 je	 SHORT $L83160

; 41   : 		format = proto->threadData->avatarFormat;

  0001f	8b 80 c8 02 00
	00		 mov	 eax, DWORD PTR [eax+712]

; 42   : 	} else {

  00025	eb 32		 jmp	 SHORT $L83640
$L83160:

; 43   : 		format = DBGetContactSettingDword(NULL, proto->iface.m_szModuleName, "AvatarFormat", PA_FORMAT_UNKNOWN);

  00027	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$83634[ebp+4], OFFSET FLAT:??_C@_0N@IOKO@AvatarFormat?$AA@ ; `string'
  00031	89 45 f0	 mov	 DWORD PTR _cgs$83634[ebp], eax
  00034	8d 45 e4	 lea	 eax, DWORD PTR _dbv$83633[ebp]
  00037	89 45 f8	 mov	 DWORD PTR _cgs$83634[ebp+8], eax
  0003a	8d 45 f0	 lea	 eax, DWORD PTR _cgs$83634[ebp]
  0003d	50		 push	 eax
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00043	6a 00		 push	 0
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HANO@DB?1Contact?1GetSetting?$AA@ ; `string'
  0004a	ff 50 24	 call	 DWORD PTR [eax+36]
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	f7 d8		 neg	 eax
  00052	1b c0		 sbb	 eax, eax
  00054	f7 d0		 not	 eax
  00056	23 45 e8	 and	 eax, DWORD PTR _dbv$83633[ebp+4]
$L83640:
  00059	53		 push	 ebx

; 44   : 	}
; 45   : 	CallService( MS_DB_GETPROFILEPATH, cbLen, (LPARAM) pszDest );

  0005a	8b 5d 10	 mov	 ebx, DWORD PTR _pszDest$[ebp]
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	8b 7d 14	 mov	 edi, DWORD PTR _cbLen$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _format$[ebp], eax
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0006a	53		 push	 ebx
  0006b	57		 push	 edi
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NJGE@DB?1GetProfilePath?$AA@ ; `string'
  00071	ff 50 24	 call	 DWORD PTR [eax+36]

; 46   : 	tPathLen = strlen( pszDest );

  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 _strlen
  0007a	8b f0		 mov	 esi, eax

; 47   : 	tPathLen += mir_snprintf( pszDest + tPathLen, cbLen - tPathLen, "\\%s\\", proto->iface.m_szProtoName  );

  0007c	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  0007f	2b fe		 sub	 edi, esi
  00081	ff 70 18	 push	 DWORD PTR [eax+24]
  00084	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04DKBA@?2?$CFs?2?$AA@ ; `string'
  0008c	57		 push	 edi
  0008d	50		 push	 eax
  0008e	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28
  00094	83 c4 20	 add	 esp, 32			; 00000020H
  00097	03 f0		 add	 esi, eax

; 48   : 	CreateDirectoryA( pszDest, NULL );

  00099	6a 00		 push	 0
  0009b	53		 push	 ebx
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 49   : 	szFileType = "png";
; 50   : 	switch(format) {

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _format$[ebp]
  000a5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_03PJIM@png?$AA@ ; `string'
  000aa	49		 dec	 ecx
  000ab	8b f8		 mov	 edi, eax
  000ad	74 28		 je	 SHORT $L83178
  000af	49		 dec	 ecx
  000b0	74 1e		 je	 SHORT $L83174
  000b2	49		 dec	 ecx
  000b3	74 14		 je	 SHORT $L83176
  000b5	49		 dec	 ecx
  000b6	74 0a		 je	 SHORT $L83181
  000b8	49		 dec	 ecx
  000b9	75 1e		 jne	 SHORT $L83171

; 54   : 		case PA_FORMAT_GIF:  szFileType = "gif";   break;

  000bb	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_03KNEF@gif?$AA@ ; `string'
  000c0	eb 17		 jmp	 SHORT $L83171
$L83181:

; 55   : 		case PA_FORMAT_BMP:  szFileType = "bmp";   break;

  000c2	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_03LLKB@bmp?$AA@ ; `string'
  000c7	eb 10		 jmp	 SHORT $L83171
$L83176:

; 52   : 		case PA_FORMAT_ICON: szFileType = "ico";   break;

  000c9	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_03LHKJ@ico?$AA@ ; `string'
  000ce	eb 09		 jmp	 SHORT $L83171
$L83174:

; 51   : 		case PA_FORMAT_JPEG: szFileType = "jpg";   break;

  000d0	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_03EEHM@jpg?$AA@ ; `string'
  000d5	eb 02		 jmp	 SHORT $L83171
$L83178:

; 53   : 		case PA_FORMAT_PNG:  szFileType = "png";   break;

  000d7	8b f8		 mov	 edi, eax
$L83171:

; 56   : 	}
; 57   : 	if ( item != NULL ) {

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _item$[ebp]
  000dc	85 c0		 test	 eax, eax
  000de	74 31		 je	 SHORT $L83184

; 58   : 		char* hash;
; 59   : 		hash = JabberSha1(item->jid);

  000e0	ff 70 04	 push	 DWORD PTR [eax+4]
  000e3	e8 00 00 00 00	 call	 _JabberSha1

; 60   : 		mir_snprintf( pszDest + tPathLen, MAX_PATH - tPathLen, "%s.%s", hash, szFileType );

  000e8	57		 push	 edi
  000e9	89 45 08	 mov	 DWORD PTR _hash$83185[ebp], eax
  000ec	50		 push	 eax
  000ed	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000f2	2b c6		 sub	 eax, esi
  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05OGKG@?$CFs?4?$CFs?$AA@ ; `string'
  000f9	03 f3		 add	 esi, ebx
  000fb	50		 push	 eax
  000fc	56		 push	 esi
  000fd	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28

; 61   : 		mir_free( hash );

  00103	ff 75 08	 push	 DWORD PTR _hash$83185[ebp]
  00106	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0010c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 62   : 	} else {

  0010f	eb 20		 jmp	 SHORT $L83187
$L83184:

; 63   : 		mir_snprintf( pszDest + tPathLen, MAX_PATH - tPathLen, "%s_avatar.%s", proto->iface.m_szModuleName, szFileType );

  00111	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00114	57		 push	 edi
  00115	ff 70 1c	 push	 DWORD PTR [eax+28]
  00118	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  0011d	2b c6		 sub	 eax, esi
  0011f	03 f3		 add	 esi, ebx
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@DJFC@?$CFs_avatar?4?$CFs?$AA@ ; `string'
  00126	50		 push	 eax
  00127	56		 push	 esi
  00128	ff 15 1c 00 00
	00		 call	 DWORD PTR _mmi+28
  0012e	83 c4 14	 add	 esp, 20			; 00000014H
$L83187:
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx

; 64   : 	}
; 65   : }

  00134	c9		 leave
  00135	c3		 ret	 0
_TlenGetAvatarFileName ENDP
_TEXT	ENDS
PUBLIC	??_C@_01FNLH@a?$AA@				; `string'
PUBLIC	??_C@_04PIKN@type?$AA@				; `string'
PUBLIC	??_C@_03JDIA@md5?$AA@				; `string'
PUBLIC	_TlenProcessAvatarNode
PUBLIC	_TlenGetAvatar
EXTRN	_JabberXmlGetAttrValue:NEAR
EXTRN	_JabberXmlGetChild:NEAR
EXTRN	_JabberHContactFromJID:NEAR
EXTRN	_strcmp:NEAR
;	COMDAT ??_C@_01FNLH@a?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_DATA	SEGMENT
??_C@_01FNLH@a?$AA@ DB 'a', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PIKN@type?$AA@
_DATA	SEGMENT
??_C@_04PIKN@type?$AA@ DB 'type', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JDIA@md5?$AA@
_DATA	SEGMENT
??_C@_03JDIA@md5?$AA@ DB 'md5', 00H			; `string'
_DATA	ENDS
;	COMDAT _TlenProcessAvatarNode
_TEXT	SEGMENT
_proto$ = 8
_avatarNode$ = 12
_item$ = 16
_hContact$ = -4
_TlenProcessAvatarNode PROC NEAR			; COMDAT

; 118  : int TlenProcessAvatarNode(TlenProtocol *proto, XmlNode *avatarNode, JABBER_LIST_ITEM *item) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 119  : 	XmlNode *aNode;
; 120  : 	char *oldHash = NULL;
; 121  : 	char *md5 = NULL, *type = NULL;
; 122  : 	HANDLE hContact;
; 123  : 	hContact = NULL;

  00004	83 65 fc 00	 and	 DWORD PTR _hContact$[ebp], 0
  00008	53		 push	 ebx
  00009	56		 push	 esi

; 124  : 	if (item != NULL) {

  0000a	8b 75 10	 mov	 esi, DWORD PTR _item$[ebp]
  0000d	85 f6		 test	 esi, esi
  0000f	57		 push	 edi
  00010	74 1b		 je	 SHORT $L83642

; 125  : 		if ((hContact=JabberHContactFromJID(proto, item->jid)) == NULL) return 0;

  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  00018	e8 00 00 00 00	 call	 _JabberHContactFromJID
  0001d	59		 pop	 ecx
  0001e	89 45 fc	 mov	 DWORD PTR _hContact$[ebp], eax
  00021	85 c0		 test	 eax, eax
  00023	59		 pop	 ecx
  00024	75 18		 jne	 SHORT $L83259
$L83277:

; 158  : 		}
; 159  : 	}
; 160  : 	return 0;

  00026	33 c0		 xor	 eax, eax
$L83244:
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 161  : }

  0002b	c9		 leave
  0002c	c3		 ret	 0
$L83642:

; 126  : 	} 
; 127  : 	if (item == NULL) {
; 128  : 		oldHash = proto->threadData->avatarHash;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  00030	8b b8 e0 00 00
	00		 mov	 edi, DWORD PTR [eax+224]
  00036	81 c7 88 02 00
	00		 add	 edi, 648		; 00000288H

; 129  : 	} else {

  0003c	eb 03		 jmp	 SHORT $L83260
$L83259:

; 130  : 		oldHash = item->avatarHash;

  0003e	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
$L83260:

; 131  : 	}
; 132  : 	if (avatarNode != NULL) {

  00041	83 7d 0c 00	 cmp	 DWORD PTR _avatarNode$[ebp], 0
  00045	74 5e		 je	 SHORT $L83269

; 133  : 		aNode = JabberXmlGetChild(avatarNode, "a");

  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FNLH@a?$AA@ ; `string'
  0004c	ff 75 0c	 push	 DWORD PTR _avatarNode$[ebp]
  0004f	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00054	8b d8		 mov	 ebx, eax
  00056	59		 pop	 ecx

; 134  : 		if (aNode != NULL) {

  00057	85 db		 test	 ebx, ebx
  00059	59		 pop	 ecx
  0005a	74 49		 je	 SHORT $L83269

; 135  : 			type = JabberXmlGetAttrValue(aNode, "type");

  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PIKN@type?$AA@ ; `string'
  00061	53		 push	 ebx
  00062	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue

; 136  : 			md5 = JabberXmlGetAttrValue(aNode, "md5");

  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03JDIA@md5?$AA@ ; `string'
  0006c	53		 push	 ebx
  0006d	e8 00 00 00 00	 call	 _JabberXmlGetAttrValue
  00072	83 c4 10	 add	 esp, 16			; 00000010H

; 137  : 		}
; 138  : 	}
; 139  : 	if (md5 != NULL) {

  00075	85 c0		 test	 eax, eax
  00077	74 2c		 je	 SHORT $L83269

; 140  : 		/* check contact's avatar hash - md5 */
; 141  : 		if (oldHash == NULL || strcmp(oldHash, md5)) {

  00079	85 ff		 test	 edi, edi
  0007b	74 0d		 je	 SHORT $L83272
  0007d	50		 push	 eax
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 _strcmp
  00084	59		 pop	 ecx
  00085	85 c0		 test	 eax, eax
  00087	59		 pop	 ecx
  00088	74 9c		 je	 SHORT $L83277
$L83272:

; 142  : 			if (item != NULL) {

  0008a	6a 01		 push	 1
  0008c	85 f6		 test	 esi, esi
  0008e	5f		 pop	 edi
  0008f	74 03		 je	 SHORT $L83274

; 143  : 				item->newAvatarDownloading = TRUE;

  00091	89 7e 38	 mov	 DWORD PTR [esi+56], edi
$L83274:

; 144  : 			}
; 145  : 			TlenGetAvatar(proto, hContact);

  00094	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  00097	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  0009a	e8 00 00 00 00	 call	 _TlenGetAvatar
  0009f	59		 pop	 ecx

; 146  : 			return 1;

  000a0	8b c7		 mov	 eax, edi
  000a2	59		 pop	 ecx
  000a3	eb 83		 jmp	 SHORT $L83244
$L83269:

; 147  : 		}
; 148  : 	} else {
; 149  : 		/* remove avatar */
; 150  : 		if (oldHash != NULL) {

  000a5	85 ff		 test	 edi, edi
  000a7	0f 84 79 ff ff
	ff		 je	 $L83277

; 151  : 			if (item != NULL) {

  000ad	85 f6		 test	 esi, esi
  000af	74 10		 je	 SHORT $L83279

; 152  : 				item->avatarHash = NULL;

  000b1	83 66 34 00	 and	 DWORD PTR [esi+52], 0

; 153  : 				mir_free(oldHash);

  000b5	57		 push	 edi
  000b6	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 154  : 				item->newAvatarDownloading = FALSE;

  000bc	83 66 38 00	 and	 DWORD PTR [esi+56], 0
  000c0	59		 pop	 ecx
$L83279:

; 155  : 			}
; 156  : 			RemoveAvatar(proto, hContact);

  000c1	ff 75 fc	 push	 DWORD PTR _hContact$[ebp]
  000c4	ff 75 08	 push	 DWORD PTR _proto$[ebp]
  000c7	e8 00 00 00 00	 call	 _RemoveAvatar
  000cc	59		 pop	 ecx
  000cd	59		 pop	 ecx

; 157  : 			return 1;

  000ce	6a 01		 push	 1
  000d0	58		 pop	 eax
  000d1	e9 52 ff ff ff	 jmp	 $L83244
_TlenProcessAvatarNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_04OJFH@File?$AA@				; `string'
PUBLIC	??_C@_0N@ECGN@ContactPhoto?$AA@			; `string'
PUBLIC	??_C@_0L@POM@AvatarHash?$AA@			; `string'
PUBLIC	??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@	; `string'
PUBLIC	??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@		; `string'
EXTRN	__imp__DeleteFileA@4:NEAR
;	COMDAT ??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ DB 'Proto/BroadcastAck', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@
_DATA	SEGMENT
??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ DB 'DB/Contact/DeleteSetti'
	DB	'ng', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OJFH@File?$AA@
_DATA	SEGMENT
??_C@_04OJFH@File?$AA@ DB 'File', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@ECGN@ContactPhoto?$AA@
_DATA	SEGMENT
??_C@_0N@ECGN@ContactPhoto?$AA@ DB 'ContactPhoto', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@POM@AvatarHash?$AA@
_DATA	SEGMENT
??_C@_0L@POM@AvatarHash?$AA@ DB 'AvatarHash', 00H	; `string'
_DATA	ENDS
;	COMDAT _RemoveAvatar
_TEXT	SEGMENT
_proto$ = 8
_hContact$ = 12
_tFileName$ = -300
_cgs$83647 = -12
_cgs$83651 = -12
_cgs$83656 = -12
_ack$83662 = -40
_RemoveAvatar PROC NEAR					; COMDAT

; 67   : static void RemoveAvatar(TlenProtocol *proto, HANDLE hContact) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx

; 68   : 	char tFileName[ MAX_PATH ];
; 69   : 	if (hContact == NULL) {

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _proto$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _hContact$[ebp]
  00012	85 ff		 test	 edi, edi
  00014	75 0d		 jne	 SHORT $L83197

; 70   : 		proto->threadData->avatarHash[0] = '\0';

  00016	8b 83 e0 00 00
	00		 mov	 eax, DWORD PTR [ebx+224]
  0001c	80 a0 88 02 00
	00 00		 and	 BYTE PTR [eax+648], 0
$L83197:

; 71   : 	}
; 72   : 	TlenGetAvatarFileName( proto, NULL, tFileName, sizeof tFileName );

  00023	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _tFileName$[ebp]
  00029	68 04 01 00 00	 push	 260			; 00000104H
  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 _TlenGetAvatarFileName
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 73   : 	DeleteFileA(tFileName);

  0003a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _tFileName$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 74   : 	DBDeleteContactSetting(hContact, "ContactPhoto", "File");

  00047	8d 45 f4	 lea	 eax, DWORD PTR _cgs$83647[ebp]
  0004a	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BJ@IGCO@DB?1Contact?1DeleteSetting?$AA@ ; `string'
  0004f	50		 push	 eax
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00055	57		 push	 edi
  00056	56		 push	 esi
  00057	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _cgs$83647[ebp], OFFSET FLAT:??_C@_0N@ECGN@ContactPhoto?$AA@ ; `string'
  0005e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$83647[ebp+4], OFFSET FLAT:??_C@_04OJFH@File?$AA@ ; `string'
  00065	ff 50 24	 call	 DWORD PTR [eax+36]

; 75   : 	DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "AvatarHash");

  00068	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0006b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$83651[ebp+4], OFFSET FLAT:??_C@_0L@POM@AvatarHash?$AA@ ; `string'
  00072	89 45 f4	 mov	 DWORD PTR _cgs$83651[ebp], eax
  00075	8d 45 f4	 lea	 eax, DWORD PTR _cgs$83651[ebp]
  00078	50		 push	 eax
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0007e	57		 push	 edi
  0007f	56		 push	 esi
  00080	ff 50 24	 call	 DWORD PTR [eax+36]

; 76   : 	DBDeleteContactSetting(hContact, proto->iface.m_szModuleName, "AvatarFormat");

  00083	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00086	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cgs$83656[ebp+4], OFFSET FLAT:??_C@_0N@IOKO@AvatarFormat?$AA@ ; `string'
  0008d	89 45 f4	 mov	 DWORD PTR _cgs$83656[ebp], eax
  00090	8d 45 f4	 lea	 eax, DWORD PTR _cgs$83656[ebp]
  00093	50		 push	 eax
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00099	57		 push	 edi
  0009a	56		 push	 esi
  0009b	ff 50 24	 call	 DWORD PTR [eax+36]

; 77   : 	ProtoBroadcastAck(proto->iface.m_szModuleName, NULL, ACKTYPE_AVATAR, ACKRESULT_STATUS, NULL, 0);

  0009e	6a 06		 push	 6
  000a0	33 c0		 xor	 eax, eax
  000a2	59		 pop	 ecx
  000a3	8d 7d dc	 lea	 edi, DWORD PTR _ack$83662[ebp+4]
  000a6	f3 ab		 rep stosd
  000a8	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000ab	8d 4d d8	 lea	 ecx, DWORD PTR _ack$83662[ebp]
  000ae	89 45 dc	 mov	 DWORD PTR _ack$83662[ebp+4], eax
  000b1	33 c0		 xor	 eax, eax
  000b3	51		 push	 ecx
  000b4	89 45 e0	 mov	 DWORD PTR _ack$83662[ebp+8], eax
  000b7	89 45 ec	 mov	 DWORD PTR _ack$83662[ebp+20], eax
  000ba	89 45 f0	 mov	 DWORD PTR _ack$83662[ebp+24], eax
  000bd	50		 push	 eax
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  000c8	c7 45 d8 1c 00
	00 00		 mov	 DWORD PTR _ack$83662[ebp], 28 ; 0000001cH
  000cf	c7 45 e4 0e 00
	00 00		 mov	 DWORD PTR _ack$83662[ebp+12], 14 ; 0000000eH
  000d6	c7 45 e8 6c 00
	00 00		 mov	 DWORD PTR _ack$83662[ebp+16], 108 ; 0000006cH
  000dd	ff 50 24	 call	 DWORD PTR [eax+36]
  000e0	83 c4 30	 add	 esp, 48			; 00000030H
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 78   : }

  000e6	c9		 leave
  000e7	c3		 ret	 0
_RemoveAvatar ENDP
_TEXT	ENDS
PUBLIC	??_C@_06JBCA@avatar?$AA@			; `string'
PUBLIC	_TlenProcessPresenceAvatar
;	COMDAT ??_C@_06JBCA@avatar?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_DATA	SEGMENT
??_C@_06JBCA@avatar?$AA@ DB 'avatar', 00H		; `string'
_DATA	ENDS
;	COMDAT _TlenProcessPresenceAvatar
_TEXT	SEGMENT
_proto$ = 8
_node$ = 12
_item$ = 16
_TlenProcessPresenceAvatar PROC NEAR			; COMDAT

; 163  : void TlenProcessPresenceAvatar(TlenProtocol *proto, XmlNode *node, JABBER_LIST_ITEM *item) {

  00000	56		 push	 esi

; 164  : 	HANDLE hContact;
; 165  : 	if ((hContact=JabberHContactFromJID(proto, item->jid)) == NULL) return;

  00001	8b 74 24 10	 mov	 esi, DWORD PTR _item$[esp]
  00005	ff 76 04	 push	 DWORD PTR [esi+4]
  00008	ff 74 24 0c	 push	 DWORD PTR _proto$[esp+4]
  0000c	e8 00 00 00 00	 call	 _JabberHContactFromJID
  00011	59		 pop	 ecx
  00012	85 c0		 test	 eax, eax
  00014	59		 pop	 ecx
  00015	74 1e		 je	 SHORT $L83287

; 166  : 	TlenProcessAvatarNode(proto, JabberXmlGetChild(node, "avatar"), item);

  00017	56		 push	 esi
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JBCA@avatar?$AA@ ; `string'
  0001d	ff 74 24 14	 push	 DWORD PTR _node$[esp+8]
  00021	e8 00 00 00 00	 call	 _JabberXmlGetChild
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx
  00028	50		 push	 eax
  00029	ff 74 24 10	 push	 DWORD PTR _proto$[esp+8]
  0002d	e8 00 00 00 00	 call	 _TlenProcessAvatarNode
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83287:
  00035	5e		 pop	 esi

; 167  : }

  00036	c3		 ret	 0
_TlenProcessPresenceAvatar ENDP
_TEXT	ENDS
EXTRN	_JabberForkThread:NEAR
;	COMDAT _TlenGetAvatar
_TEXT	SEGMENT
_proto$ = 8
_hContact$ = 12
_TlenGetAvatar PROC NEAR				; COMDAT

; 300  : void TlenGetAvatar(TlenProtocol *proto, HANDLE hContact) {

  00000	56		 push	 esi

; 301  : 	if (hContact == NULL) {

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _hContact$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 12		 jne	 SHORT $L83414

; 302  : 		if (getAvatarMutex != 0) {

  00009	39 35 00 00 00
	00		 cmp	 DWORD PTR _getAvatarMutex, esi
  0000f	75 2b		 jne	 SHORT $L83412

; 303  : 			return;
; 304  : 		}
; 305  : 		getAvatarMutex = 1;

  00011	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _getAvatarMutex, 1
$L83414:

; 306  : 	}
; 307  :     {
; 308  :         TLENGETAVATARTHREADDATA *data = (TLENGETAVATARTHREADDATA *)mir_alloc(sizeof(TLENGETAVATARTHREADDATA));

  0001b	6a 08		 push	 8
  0001d	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 309  :         data->proto = proto;

  00023	8b 4c 24 0c	 mov	 ecx, DWORD PTR _proto$[esp+4]

; 310  :         data->hContact = hContact;
; 311  :         JabberForkThread(TlenGetAvatarThread, 0, data);

  00027	50		 push	 eax
  00028	6a 00		 push	 0
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:_TlenGetAvatarThread
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00034	e8 00 00 00 00	 call	 _JabberForkThread
  00039	83 c4 10	 add	 esp, 16			; 00000010H
$L83412:
  0003c	5e		 pop	 esi

; 312  :     }
; 313  : }

  0003d	c3		 ret	 0
_TlenGetAvatar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@	; `string'
PUBLIC	??_C@_0N@HKBC@Content?9Type?$AA@		; `string'
PUBLIC	??_C@_09OPBK@image?1png?$AA@			; `string'
PUBLIC	??_C@_0M@LALM@image?1x?9png?$AA@		; `string'
PUBLIC	??_C@_0L@JAMC@image?1jpeg?$AA@			; `string'
PUBLIC	??_C@_09FCOK@image?1jpg?$AA@			; `string'
PUBLIC	??_C@_09LLND@image?1gif?$AA@			; `string'
PUBLIC	??_C@_09KNDH@image?1bmp?$AA@			; `string'
PUBLIC	??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@ ; `string'
EXTRN	_memset:NEAR
EXTRN	_JabberJIDFromHContact:NEAR
EXTRN	_JabberNickFromJID:NEAR
EXTRN	__imp__strcmpi:NEAR
EXTRN	_JabberListGetItemPtr:NEAR
;	COMDAT ??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_DATA	SEGMENT
??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@ DB 'Netlib/HttpTransaction', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@HKBC@Content?9Type?$AA@
_DATA	SEGMENT
??_C@_0N@HKBC@Content?9Type?$AA@ DB 'Content-Type', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OPBK@image?1png?$AA@
_DATA	SEGMENT
??_C@_09OPBK@image?1png?$AA@ DB 'image/png', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@LALM@image?1x?9png?$AA@
_DATA	SEGMENT
??_C@_0M@LALM@image?1x?9png?$AA@ DB 'image/x-png', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JAMC@image?1jpeg?$AA@
_DATA	SEGMENT
??_C@_0L@JAMC@image?1jpeg?$AA@ DB 'image/jpeg', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FCOK@image?1jpg?$AA@
_DATA	SEGMENT
??_C@_09FCOK@image?1jpg?$AA@ DB 'image/jpg', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LLND@image?1gif?$AA@
_DATA	SEGMENT
??_C@_09LLND@image?1gif?$AA@ DB 'image/gif', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KNDH@image?1bmp?$AA@
_DATA	SEGMENT
??_C@_09KNDH@image?1bmp?$AA@ DB 'image/bmp', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@
_DATA	SEGMENT
??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@ DB 'Netlib/FreeHttpRequ'
	DB	'estStruct', 00H				; `string'
_DATA	ENDS
;	COMDAT _TlenGetAvatarThread
_TEXT	SEGMENT
_ptr$ = 8
_item$ = -8
_req$ = -64
_hContact$ = -16
_request$ = -20
_login$ = -12
_format$83366 = 8
_i$83380 = -4
_TlenGetAvatarThread PROC NEAR				; COMDAT

; 227  : static void TlenGetAvatarThread(void *ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 228  :     
; 229  :     JABBER_LIST_ITEM *item = NULL;

  00006	83 65 f8 00	 and	 DWORD PTR _item$[ebp], 0
  0000a	53		 push	 ebx

; 230  : 	NETLIBHTTPREQUEST req;
; 231  :     NETLIBHTTPREQUEST *resp;
; 232  :     TLENGETAVATARTHREADDATA *data = (TLENGETAVATARTHREADDATA *)ptr;
; 233  :     HANDLE hContact = data->hContact;

  0000b	8b 5d 08	 mov	 ebx, DWORD PTR _ptr$[ebp]
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 234  : 	char *request;
; 235  : 	char *login = NULL;
; 236  : 	if (hContact != NULL) {

  00013	85 ff		 test	 edi, edi
  00015	89 7d f0	 mov	 DWORD PTR _hContact$[ebp], edi
  00018	74 2c		 je	 SHORT $L83357

; 237  : 		char *jid = JabberJIDFromHContact(data->proto, hContact);

  0001a	57		 push	 edi
  0001b	ff 33		 push	 DWORD PTR [ebx]
  0001d	e8 00 00 00 00	 call	 _JabberJIDFromHContact
  00022	8b f0		 mov	 esi, eax

; 238  : 		login = JabberNickFromJID(jid);

  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _JabberNickFromJID

; 239  : 		item = JabberListGetItemPtr(data->proto, LIST_ROSTER, jid);

  0002a	56		 push	 esi
  0002b	6a 00		 push	 0
  0002d	ff 33		 push	 DWORD PTR [ebx]
  0002f	89 45 f4	 mov	 DWORD PTR _login$[ebp], eax
  00032	e8 00 00 00 00	 call	 _JabberListGetItemPtr

; 240  : 		mir_free(jid);

  00037	56		 push	 esi
  00038	89 45 f8	 mov	 DWORD PTR _item$[ebp], eax
  0003b	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00041	83 c4 1c	 add	 esp, 28			; 0000001cH

; 241  : 	} else {

  00044	eb 16		 jmp	 SHORT $L83359
$L83357:

; 242  : 		login = mir_strdup(data->proto->threadData->username);

  00046	8b 03		 mov	 eax, DWORD PTR [ebx]
  00048	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]
  0004e	83 c0 08	 add	 eax, 8
  00051	50		 push	 eax
  00052	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20
  00058	59		 pop	 ecx
  00059	89 45 f4	 mov	 DWORD PTR _login$[ebp], eax
$L83359:

; 243  : 	}
; 244  : 	if ((data->proto->threadData != NULL && hContact == NULL) || item != NULL) {

  0005c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005e	83 b8 e0 00 00
	00 00		 cmp	 DWORD PTR [eax+224], 0
  00065	74 04		 je	 SHORT $L83365
  00067	85 ff		 test	 edi, edi
  00069	74 0d		 je	 SHORT $L83674
$L83365:
  0006b	8b 7d f8	 mov	 edi, DWORD PTR _item$[ebp]
  0006e	85 ff		 test	 edi, edi
  00070	0f 84 f8 01 00
	00		 je	 $L83363
  00076	eb 03		 jmp	 SHORT $L83364
$L83674:
  00078	8b 7d f8	 mov	 edi, DWORD PTR _item$[ebp]
$L83364:

; 245  : 		DWORD format = PA_FORMAT_UNKNOWN;

  0007b	33 c9		 xor	 ecx, ecx

; 246  : 		if (item!= NULL) {

  0007d	3b f9		 cmp	 edi, ecx
  0007f	89 4d 08	 mov	 DWORD PTR _format$83366[ebp], ecx
  00082	74 07		 je	 SHORT $L83368

; 247  : 			item->newAvatarDownloading = TRUE;

  00084	c7 47 38 01 00
	00 00		 mov	 DWORD PTR [edi+56], 1
$L83368:

; 248  : 		}
; 249  : 		request = replaceTokens(data->proto->threadData->tlenConfig.mailBase, data->proto->threadData->tlenConfig.avatarGet, login, data->proto->threadData->avatarToken, 0, 0);

  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0008d	51		 push	 ecx
  0008e	51		 push	 ecx
  0008f	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]
  00095	8d 88 08 02 00
	00		 lea	 ecx, DWORD PTR [eax+520]
  0009b	51		 push	 ecx
  0009c	8d 88 14 0c 00
	00		 lea	 ecx, DWORD PTR [eax+3092]
  000a2	ff 75 f4	 push	 DWORD PTR _login$[ebp]
  000a5	05 04 07 00 00	 add	 eax, 1796		; 00000704H
  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _replaceTokens

; 250  : 		ZeroMemory(&req, sizeof(req));

  000b1	6a 2c		 push	 44			; 0000002cH
  000b3	89 45 ec	 mov	 DWORD PTR _request$[ebp], eax
  000b6	5e		 pop	 esi
  000b7	8d 45 c0	 lea	 eax, DWORD PTR _req$[ebp]
  000ba	56		 push	 esi
  000bb	6a 00		 push	 0
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _memset

; 251  : 		req.cbSize = sizeof(req);
; 252  : 		req.requestType = data->proto->threadData->tlenConfig.avatarGetMthd;

  000c3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c5	89 75 c0	 mov	 DWORD PTR _req$[ebp], esi
  000c8	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  000ce	8b 89 14 0d 00
	00		 mov	 ecx, DWORD PTR [ecx+3348]
  000d4	89 4d c4	 mov	 DWORD PTR _req$[ebp+4], ecx

; 253  : 		req.flags = 0;

  000d7	33 c9		 xor	 ecx, ecx
  000d9	89 4d c8	 mov	 DWORD PTR _req$[ebp+8], ecx

; 254  : 		req.headersCount = 0;

  000dc	89 4d d4	 mov	 DWORD PTR _req$[ebp+20], ecx

; 255  : 		req.headers = NULL;

  000df	89 4d d0	 mov	 DWORD PTR _req$[ebp+16], ecx

; 256  : 		req.dataLength = 0;

  000e2	89 4d dc	 mov	 DWORD PTR _req$[ebp+28], ecx

; 257  : 		req.szUrl = request;

  000e5	8b 4d ec	 mov	 ecx, DWORD PTR _request$[ebp]
  000e8	89 4d cc	 mov	 DWORD PTR _req$[ebp+12], ecx

; 258  : 		resp = (NETLIBHTTPREQUEST *)CallService(MS_NETLIB_HTTPTRANSACTION, (WPARAM)data->proto->hNetlibUser, (LPARAM)&req);

  000eb	8d 4d c0	 lea	 ecx, DWORD PTR _req$[ebp]
  000ee	51		 push	 ecx
  000ef	ff b0 c0 00 00
	00		 push	 DWORD PTR [eax+192]
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@ ; `string'
  000ff	ff 50 24	 call	 DWORD PTR [eax+36]

; 259  : 		if (item!= NULL) {

  00102	33 c9		 xor	 ecx, ecx
  00104	83 c4 30	 add	 esp, 48			; 00000030H
  00107	3b f9		 cmp	 edi, ecx
  00109	8b f0		 mov	 esi, eax
  0010b	74 03		 je	 SHORT $L83375

; 260  : 			item->newAvatarDownloading = FALSE;

  0010d	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
$L83375:

; 261  : 		}
; 262  : 		if (resp != NULL) {

  00110	3b f1		 cmp	 esi, ecx
  00112	0f 84 42 01 00
	00		 je	 $L83377

; 263  : 			if (resp->resultCode/100==2) {

  00118	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0011b	6a 64		 push	 100			; 00000064H
  0011d	99		 cdq
  0011e	5f		 pop	 edi
  0011f	f7 ff		 idiv	 edi
  00121	83 f8 02	 cmp	 eax, 2
  00124	0f 85 1d 01 00
	00		 jne	 $L83403

; 264  : 				if (resp->dataLength > 0) {

  0012a	39 4e 1c	 cmp	 DWORD PTR [esi+28], ecx
  0012d	0f 8e 08 01 00
	00		 jle	 $L83379

; 265  : 					int i;
; 266  : 					for (i=0; i<resp->headersCount; i++ ) {

  00133	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  00136	89 4d fc	 mov	 DWORD PTR _i$83380[ebp], ecx
  00139	0f 8e e1 00 00
	00		 jle	 $L83401

; 267  : 						if (strcmpi(resp->headers[i].szName, "Content-Type")==0) {

  0013f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__strcmpi
$L83381:
  00145	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00148	8b 4d fc	 mov	 ecx, DWORD PTR _i$83380[ebp]
  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HKBC@Content?9Type?$AA@ ; `string'
  00150	ff 34 c8	 push	 DWORD PTR [eax+ecx*8]
  00153	ff d7		 call	 edi
  00155	59		 pop	 ecx
  00156	85 c0		 test	 eax, eax
  00158	59		 pop	 ecx
  00159	74 10		 je	 SHORT $L83670
  0015b	ff 45 fc	 inc	 DWORD PTR _i$83380[ebp]
  0015e	8b 45 fc	 mov	 eax, DWORD PTR _i$83380[ebp]
  00161	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00164	7c df		 jl	 SHORT $L83381
  00166	e9 b5 00 00 00	 jmp	 $L83401
$L83670:

; 268  : 							if (strcmpi(resp->headers[i].szValue, "image/png")==0) {

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _i$83380[ebp]
  0016e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00171	c1 e0 03	 shl	 eax, 3
  00174	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09OPBK@image?1png?$AA@ ; `string'
  00179	89 45 fc	 mov	 DWORD PTR -4+[ebp], eax
  0017c	ff 74 08 04	 push	 DWORD PTR [eax+ecx+4]
  00180	ff d7		 call	 edi
  00182	59		 pop	 ecx
  00183	85 c0		 test	 eax, eax
  00185	59		 pop	 ecx
  00186	75 0c		 jne	 SHORT $L83386
$L83678:

; 269  : 								format = PA_FORMAT_PNG;

  00188	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _format$83366[ebp], 1

; 270  : 							} else if (strcmpi(resp->headers[i].szValue, "image/x-png")==0) {

  0018f	e9 8c 00 00 00	 jmp	 $L83401
$L83386:
  00194	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00197	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@LALM@image?1x?9png?$AA@ ; `string'
  0019f	ff 74 01 04	 push	 DWORD PTR [ecx+eax+4]
  001a3	ff d7		 call	 edi
  001a5	59		 pop	 ecx
  001a6	85 c0		 test	 eax, eax
  001a8	59		 pop	 ecx

; 271  : 								format = PA_FORMAT_PNG;
; 272  : 							} else if (strcmpi(resp->headers[i].szValue, "image/jpeg")==0) {

  001a9	74 dd		 je	 SHORT $L83678
  001ab	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  001b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JAMC@image?1jpeg?$AA@ ; `string'
  001b6	ff 74 01 04	 push	 DWORD PTR [ecx+eax+4]
  001ba	ff d7		 call	 edi
  001bc	59		 pop	 ecx
  001bd	85 c0		 test	 eax, eax
  001bf	59		 pop	 ecx
  001c0	75 09		 jne	 SHORT $L83392
$L83679:

; 273  : 								format = PA_FORMAT_JPEG;

  001c2	c7 45 08 02 00
	00 00		 mov	 DWORD PTR _format$83366[ebp], 2

; 274  : 							} else if (strcmpi(resp->headers[i].szValue, "image/jpg")==0) {

  001c9	eb 55		 jmp	 SHORT $L83401
$L83392:
  001cb	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  001d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FCOK@image?1jpg?$AA@ ; `string'
  001d6	ff 74 01 04	 push	 DWORD PTR [ecx+eax+4]
  001da	ff d7		 call	 edi
  001dc	59		 pop	 ecx
  001dd	85 c0		 test	 eax, eax
  001df	59		 pop	 ecx

; 275  : 								format = PA_FORMAT_JPEG;
; 276  : 							} else if (strcmpi(resp->headers[i].szValue, "image/gif")==0) {

  001e0	74 e0		 je	 SHORT $L83679
  001e2	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001e5	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LLND@image?1gif?$AA@ ; `string'
  001ed	ff 74 01 04	 push	 DWORD PTR [ecx+eax+4]
  001f1	ff d7		 call	 edi
  001f3	59		 pop	 ecx
  001f4	85 c0		 test	 eax, eax
  001f6	59		 pop	 ecx
  001f7	75 09		 jne	 SHORT $L83398

; 277  : 								format = PA_FORMAT_GIF;

  001f9	c7 45 08 05 00
	00 00		 mov	 DWORD PTR _format$83366[ebp], 5

; 278  : 							} else if (strcmpi(resp->headers[i].szValue, "image/bmp")==0) {

  00200	eb 1e		 jmp	 SHORT $L83401
$L83398:
  00202	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00205	8b 4d fc	 mov	 ecx, DWORD PTR -4+[ebp]
  00208	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09KNDH@image?1bmp?$AA@ ; `string'
  0020d	ff 74 01 04	 push	 DWORD PTR [ecx+eax+4]
  00211	ff d7		 call	 edi
  00213	59		 pop	 ecx
  00214	85 c0		 test	 eax, eax
  00216	59		 pop	 ecx
  00217	75 07		 jne	 SHORT $L83401

; 279  : 								format = PA_FORMAT_BMP;

  00219	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _format$83366[ebp], 4
$L83401:

; 280  : 							}
; 281  : 							break;
; 282  : 						}
; 283  : 					}
; 284  : 					SetAvatar(data->proto, hContact, item, resp->pData, resp->dataLength, format);

  00220	ff 75 08	 push	 DWORD PTR _format$83366[ebp]
  00223	ff 76 1c	 push	 DWORD PTR [esi+28]
  00226	ff 76 18	 push	 DWORD PTR [esi+24]
  00229	ff 75 f8	 push	 DWORD PTR _item$[ebp]
  0022c	ff 75 f0	 push	 DWORD PTR _hContact$[ebp]
  0022f	ff 33		 push	 DWORD PTR [ebx]
  00231	e8 00 00 00 00	 call	 _SetAvatar
  00236	83 c4 18	 add	 esp, 24			; 00000018H

; 285  : 				} else {

  00239	eb 0c		 jmp	 SHORT $L83403
$L83379:

; 286  : 					RemoveAvatar(data->proto, hContact);

  0023b	ff 75 f0	 push	 DWORD PTR _hContact$[ebp]
  0023e	ff 33		 push	 DWORD PTR [ebx]
  00240	e8 00 00 00 00	 call	 _RemoveAvatar
  00245	59		 pop	 ecx
  00246	59		 pop	 ecx
$L83403:

; 287  : 				}
; 288  : 			}
; 289  : 			CallService(MS_NETLIB_FREEHTTPREQUESTSTRUCT, 0, (LPARAM)resp);

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0024c	56		 push	 esi
  0024d	6a 00		 push	 0
  0024f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@ ; `string'
  00254	ff 50 24	 call	 DWORD PTR [eax+36]
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH
$L83377:

; 290  : 		}
; 291  : 		mir_free(request);

  0025a	ff 75 ec	 push	 DWORD PTR _request$[ebp]
  0025d	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 292  : 		mir_free(login);

  00263	ff 75 f4	 push	 DWORD PTR _login$[ebp]
  00266	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0026c	59		 pop	 ecx
  0026d	59		 pop	 ecx
$L83363:

; 293  : 	}
; 294  : 	if (hContact == NULL) {

  0026e	83 7d f0 00	 cmp	 DWORD PTR _hContact$[ebp], 0
  00272	75 07		 jne	 SHORT $L83407

; 295  : 		getAvatarMutex = 0;

  00274	83 25 00 00 00
	00 00		 and	 DWORD PTR _getAvatarMutex, 0
$L83407:

; 296  : 	}
; 297  :     mir_free(data);

  0027b	53		 push	 ebx
  0027c	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00282	59		 pop	 ecx
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx

; 298  : }

  00286	c9		 leave
  00287	c3		 ret	 0
_TlenGetAvatarThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GNHM@?$CF08x?$CF08x?$CF08x?$CF08x?$AA@ ; `string'
PUBLIC	??_C@_02NGAF@wb?$AA@				; `string'
PUBLIC	??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@	; `string'
EXTRN	__imp__fclose:NEAR
EXTRN	__imp__fopen:NEAR
EXTRN	__imp__fwrite:NEAR
EXTRN	__imp__sprintf:NEAR
EXTRN	_htonl@4:NEAR
EXTRN	_md5i:BYTE
EXTRN	_strcpy:NEAR
EXTRN	_JabberGetPictureType:NEAR
;	COMDAT ??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@
; File C:\MirandaDev\miranda_svn2\include\m_protomod.h
_DATA	SEGMENT
??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ DB 'DB/Contact/WriteSetting'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GNHM@?$CF08x?$CF08x?$CF08x?$CF08x?$AA@
_DATA	SEGMENT
??_C@_0BB@GNHM@?$CF08x?$CF08x?$CF08x?$CF08x?$AA@ DB '%08x%08x%08x%08x', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02NGAF@wb?$AA@
_DATA	SEGMENT
??_C@_02NGAF@wb?$AA@ DB 'wb', 00H			; `string'
_DATA	ENDS
;	COMDAT _SetAvatar
_TEXT	SEGMENT
_proto$ = 8
_hContact$ = 12
_item$ = 16
_data$ = 20
_len$ = 24
_format$ = 28
_filename$ = -428
_md5$ = -80
_ctx$ = -168
_digest$ = -44
_hash$83232 = 28
_cws$83683 = -20
_cws$83687 = -20
_cws$83692 = -20
_ack$83698 = -28
_SetAvatar PROC NEAR					; COMDAT

; 80   : static void SetAvatar(TlenProtocol *proto, HANDLE hContact, JABBER_LIST_ITEM *item, char *data, int len, DWORD format) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 81   : 	FILE* out;
; 82   : 	char filename[MAX_PATH];
; 83   : 	char md5[33];
; 84   :     mir_md5_state_t ctx;
; 85   :     DWORD digest[4];
; 86   :     
; 87   : 	if (format == PA_FORMAT_UNKNOWN && len > 4) {

  0000c	8b 7d 1c	 mov	 edi, DWORD PTR _format$[ebp]
  0000f	85 ff		 test	 edi, edi
  00011	75 11		 jne	 SHORT $L83223
  00013	83 7d 18 04	 cmp	 DWORD PTR _len$[ebp], 4
  00017	7e 0b		 jle	 SHORT $L83223

; 88   : 		format = JabberGetPictureType(data);

  00019	ff 75 14	 push	 DWORD PTR _data$[ebp]
  0001c	e8 00 00 00 00	 call	 _JabberGetPictureType
  00021	59		 pop	 ecx
  00022	8b f8		 mov	 edi, eax
$L83223:

; 89   : 	}
; 90   :     
; 91   : 	mir_md5_init( &ctx );

  00024	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0002a	50		 push	 eax
  0002b	ff 15 04 00 00
	00		 call	 DWORD PTR _md5i+4

; 92   :     mir_md5_append( &ctx, data, len);

  00031	ff 75 18	 push	 DWORD PTR _len$[ebp]
  00034	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0003a	ff 75 14	 push	 DWORD PTR _data$[ebp]
  0003d	50		 push	 eax
  0003e	ff 15 08 00 00
	00		 call	 DWORD PTR _md5i+8

; 93   : 	mir_md5_finish( &ctx, ( BYTE* )digest );

  00044	8d 45 d4	 lea	 eax, DWORD PTR _digest$[ebp]
  00047	50		 push	 eax
  00048	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0004e	50		 push	 eax
  0004f	ff 15 0c 00 00
	00		 call	 DWORD PTR _md5i+12
  00055	83 c4 18	 add	 esp, 24			; 00000018H

; 94   :     
; 95   : 	sprintf( md5, "%08x%08x%08x%08x", (int)htonl(digest[0]), (int)htonl(digest[1]), (int)htonl(digest[2]), (int)htonl(digest[3]));

  00058	ff 75 e0	 push	 DWORD PTR _digest$[ebp+12]
  0005b	e8 00 00 00 00	 call	 _htonl@4
  00060	50		 push	 eax
  00061	ff 75 dc	 push	 DWORD PTR _digest$[ebp+8]
  00064	e8 00 00 00 00	 call	 _htonl@4
  00069	50		 push	 eax
  0006a	ff 75 d8	 push	 DWORD PTR _digest$[ebp+4]
  0006d	e8 00 00 00 00	 call	 _htonl@4
  00072	50		 push	 eax
  00073	ff 75 d4	 push	 DWORD PTR _digest$[ebp]
  00076	e8 00 00 00 00	 call	 _htonl@4
  0007b	50		 push	 eax
  0007c	8d 45 b0	 lea	 eax, DWORD PTR _md5$[ebp]
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GNHM@?$CF08x?$CF08x?$CF08x?$CF08x?$AA@ ; `string'
  00084	50		 push	 eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 96   : 	if (item != NULL) {

  0008b	8b 75 10	 mov	 esi, DWORD PTR _item$[ebp]
  0008e	8b 5d 08	 mov	 ebx, DWORD PTR _proto$[ebp]
  00091	83 c4 18	 add	 esp, 24			; 00000018H
  00094	85 f6		 test	 esi, esi
  00096	74 21		 je	 SHORT $L83231

; 97   : 		char *hash = item->avatarHash;

  00098	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 98   : 		item->avatarFormat = format;

  0009b	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  0009e	89 45 1c	 mov	 DWORD PTR _hash$83232[ebp], eax

; 99   : 		item->avatarHash = mir_strdup(md5);

  000a1	8d 45 b0	 lea	 eax, DWORD PTR _md5$[ebp]
  000a4	50		 push	 eax
  000a5	ff 15 14 00 00
	00		 call	 DWORD PTR _mmi+20

; 100  : 		mir_free(hash);

  000ab	ff 75 1c	 push	 DWORD PTR _hash$83232[ebp]
  000ae	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000b1	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 101  : 	} else {

  000b7	eb 23		 jmp	 SHORT $L83702
$L83231:

; 102  : 		proto->threadData->avatarFormat = format;

  000b9	8b 8b e0 00 00
	00		 mov	 ecx, DWORD PTR [ebx+224]
  000bf	8d 83 e0 00 00
	00		 lea	 eax, DWORD PTR [ebx+224]
  000c5	89 b9 c8 02 00
	00		 mov	 DWORD PTR [ecx+712], edi

; 103  : 		strcpy(proto->threadData->avatarHash, md5);

  000cb	8b 00		 mov	 eax, DWORD PTR [eax]
  000cd	8d 4d b0	 lea	 ecx, DWORD PTR _md5$[ebp]
  000d0	05 88 02 00 00	 add	 eax, 648		; 00000288H
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _strcpy
$L83702:
  000dc	59		 pop	 ecx

; 104  : 	}
; 105  : 	TlenGetAvatarFileName(proto, item, filename, sizeof filename );

  000dd	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  000e3	59		 pop	 ecx
  000e4	68 04 01 00 00	 push	 260			; 00000104H
  000e9	50		 push	 eax
  000ea	56		 push	 esi
  000eb	53		 push	 ebx
  000ec	e8 00 00 00 00	 call	 _TlenGetAvatarFileName
  000f1	83 c4 10	 add	 esp, 16			; 00000010H

; 106  : 	DeleteFileA(filename);

  000f4	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  000fa	50		 push	 eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 107  : 	out = fopen( filename, "wb" );

  00101	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02NGAF@wb?$AA@ ; `string'
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00113	8b f0		 mov	 esi, eax
  00115	59		 pop	 ecx

; 108  : 	if ( out != NULL ) {

  00116	85 f6		 test	 esi, esi
  00118	59		 pop	 ecx
  00119	0f 84 94 00 00
	00		 je	 $L83691

; 109  : 		fwrite( data, len, 1, out );

  0011f	56		 push	 esi
  00120	6a 01		 push	 1
  00122	ff 75 18	 push	 DWORD PTR _len$[ebp]
  00125	ff 75 14	 push	 DWORD PTR _data$[ebp]
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite

; 110  : 		fclose( out );

  0012e	56		 push	 esi
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose

; 111  : 		DBWriteContactSettingString(hContact, "ContactPhoto", "File", filename );

  00135	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0013b	80 4d f4 ff	 or	 BYTE PTR _cws$83683[ebp+8], 255 ; 000000ffH
  0013f	89 45 f8	 mov	 DWORD PTR _cws$83683[ebp+12], eax
  00142	8d 45 ec	 lea	 eax, DWORD PTR _cws$83683[ebp]
  00145	50		 push	 eax
  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0014b	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  0014e	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BI@PLGC@DB?1Contact?1WriteSetting?$AA@ ; `string'
  00153	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _cws$83683[ebp], OFFSET FLAT:??_C@_0N@ECGN@ContactPhoto?$AA@ ; `string'
  0015a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$83683[ebp+4], OFFSET FLAT:??_C@_04OJFH@File?$AA@ ; `string'
  00161	56		 push	 esi
  00162	ff 50 24	 call	 DWORD PTR [eax+36]

; 112  : 		DBWriteContactSettingString(hContact, proto->iface.m_szModuleName, "AvatarHash",  md5);

  00165	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00168	80 4d f4 ff	 or	 BYTE PTR _cws$83687[ebp+8], 255 ; 000000ffH
  0016c	89 45 ec	 mov	 DWORD PTR _cws$83687[ebp], eax
  0016f	8d 45 b0	 lea	 eax, DWORD PTR _md5$[ebp]
  00172	89 45 f8	 mov	 DWORD PTR _cws$83687[ebp+12], eax
  00175	8d 45 ec	 lea	 eax, DWORD PTR _cws$83687[ebp]
  00178	50		 push	 eax
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0017e	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  00181	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$83687[ebp+4], OFFSET FLAT:??_C@_0L@POM@AvatarHash?$AA@ ; `string'
  00188	56		 push	 esi
  00189	ff 50 24	 call	 DWORD PTR [eax+36]

; 113  : 		DBWriteContactSettingDword(hContact, proto->iface.m_szModuleName, "AvatarFormat",  format);

  0018c	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0018f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cws$83692[ebp+4], OFFSET FLAT:??_C@_0N@IOKO@AvatarFormat?$AA@ ; `string'
  00196	89 45 ec	 mov	 DWORD PTR _cws$83692[ebp], eax
  00199	8d 45 ec	 lea	 eax, DWORD PTR _cws$83692[ebp]
  0019c	50		 push	 eax
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001a2	ff 75 0c	 push	 DWORD PTR _hContact$[ebp]
  001a5	c6 45 f4 04	 mov	 BYTE PTR _cws$83692[ebp+8], 4
  001a9	89 7d f8	 mov	 DWORD PTR _cws$83692[ebp+12], edi
  001ac	56		 push	 esi
  001ad	ff 50 24	 call	 DWORD PTR [eax+36]
  001b0	83 c4 38	 add	 esp, 56			; 00000038H
$L83691:

; 114  : 	}
; 115  : 	ProtoBroadcastAck( proto->iface.m_szModuleName, hContact, ACKTYPE_AVATAR, ACKRESULT_STATUS, NULL , 0);

  001b3	6a 06		 push	 6
  001b5	33 c0		 xor	 eax, eax
  001b7	59		 pop	 ecx
  001b8	8d 7d e8	 lea	 edi, DWORD PTR _ack$83698[ebp+4]
  001bb	f3 ab		 rep stosd
  001bd	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  001c0	8d 4d e4	 lea	 ecx, DWORD PTR _ack$83698[ebp]
  001c3	89 45 e8	 mov	 DWORD PTR _ack$83698[ebp+4], eax
  001c6	8b 45 0c	 mov	 eax, DWORD PTR _hContact$[ebp]
  001c9	89 45 ec	 mov	 DWORD PTR _ack$83698[ebp+8], eax
  001cc	33 c0		 xor	 eax, eax
  001ce	51		 push	 ecx
  001cf	89 45 f8	 mov	 DWORD PTR _ack$83698[ebp+20], eax
  001d2	89 45 fc	 mov	 DWORD PTR _ack$83698[ebp+24], eax
  001d5	50		 push	 eax
  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  001db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@IFFL@Proto?1BroadcastAck?$AA@ ; `string'
  001e0	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _ack$83698[ebp], 28 ; 0000001cH
  001e7	c7 45 f0 0e 00
	00 00		 mov	 DWORD PTR _ack$83698[ebp+12], 14 ; 0000000eH
  001ee	c7 45 f4 6c 00
	00 00		 mov	 DWORD PTR _ack$83698[ebp+16], 108 ; 0000006cH
  001f5	ff 50 24	 call	 DWORD PTR [eax+36]
  001f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx

; 116  : }

  001fe	c9		 leave
  001ff	c3		 ret	 0
_SetAvatar ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IPMD@?$FOlogin?$FO?$AA@			; `string'
PUBLIC	??_C@_06LLEI@?$FOtype?$FO?$AA@			; `string'
PUBLIC	??_C@_07BPPH@?$FOtoken?$FO?$AA@			; `string'
PUBLIC	??_C@_08HJMC@?$FOaccess?$FO?$AA@		; `string'
EXTRN	__imp__strncmp:NEAR
;	COMDAT ??_C@_07IPMD@?$FOlogin?$FO?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_DATA	SEGMENT
??_C@_07IPMD@?$FOlogin?$FO?$AA@ DB '^login^', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LLEI@?$FOtype?$FO?$AA@
_DATA	SEGMENT
??_C@_06LLEI@?$FOtype?$FO?$AA@ DB '^type^', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BPPH@?$FOtoken?$FO?$AA@
_DATA	SEGMENT
??_C@_07BPPH@?$FOtoken?$FO?$AA@ DB '^token^', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HJMC@?$FOaccess?$FO?$AA@
_DATA	SEGMENT
??_C@_08HJMC@?$FOaccess?$FO?$AA@ DB '^access^', 00H	; `string'
_DATA	ENDS
;	COMDAT _replaceTokens
_TEXT	SEGMENT
_base$ = 8
_uri$ = 12
_login$ = 16
_token$ = 20
_type$ = 24
_access$ = 28
_i$ = -4
_l$ = -8
_replaceTokens PROC NEAR				; COMDAT

; 170  : static char *replaceTokens(const char *base, const char *uri, const char *login, const char* token, int type, int access) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 171  : 	char *result;
; 172  : 	int i, l, size;
; 173  : 	l = strlen(uri);

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _uri$[ebp]
  0000b	57		 push	 edi
  0000c	e8 00 00 00 00	 call	 _strlen

; 174  : 	size = strlen(base);

  00011	ff 75 08	 push	 DWORD PTR _base$[ebp]
  00014	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax
  00017	e8 00 00 00 00	 call	 _strlen

; 175  : 	for (i = 0; i < l; ) {

  0001c	83 65 fc 00	 and	 DWORD PTR _i$[ebp], 0
  00020	83 7d f8 00	 cmp	 DWORD PTR _l$[ebp], 0
  00024	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__strncmp
  0002a	59		 pop	 ecx
  0002b	59		 pop	 ecx
  0002c	8b f0		 mov	 esi, eax
  0002e	7e 7e		 jle	 SHORT $L83312
$L83311:

; 176  : 		if (!strncmp(uri + i, "^login^", 7)) {

  00030	6a 07		 push	 7
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07IPMD@?$FOlogin?$FO?$AA@ ; `string'
  00037	57		 push	 edi
  00038	ff d3		 call	 ebx
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	85 c0		 test	 eax, eax
  0003f	75 14		 jne	 SHORT $L83313

; 177  : 			size += strlen(login);

  00041	ff 75 10	 push	 DWORD PTR _login$[ebp]
$L83707:
  00044	e8 00 00 00 00	 call	 _strlen

; 178  : 			i += 7;

  00049	83 45 fc 07	 add	 DWORD PTR _i$[ebp], 7
  0004d	03 f0		 add	 esi, eax
  0004f	59		 pop	 ecx
  00050	83 c7 07	 add	 edi, 7

; 179  : 		} else if (!strncmp(uri + i, "^type^", 6)) {

  00053	eb 51		 jmp	 SHORT $L83324
$L83313:
  00055	6a 06		 push	 6
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06LLEI@?$FOtype?$FO?$AA@ ; `string'
  0005c	57		 push	 edi
  0005d	ff d3		 call	 ebx
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	75 0a		 jne	 SHORT $L83316

; 180  : 			size++;
; 181  : 			i += 6;

  00066	83 45 fc 06	 add	 DWORD PTR _i$[ebp], 6
  0006a	46		 inc	 esi
  0006b	83 c7 06	 add	 edi, 6

; 182  : 		} else if (!strncmp(uri + i, "^token^", 7)) {

  0006e	eb 36		 jmp	 SHORT $L83324
$L83316:
  00070	6a 07		 push	 7
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BPPH@?$FOtoken?$FO?$AA@ ; `string'
  00077	57		 push	 edi
  00078	ff d3		 call	 ebx
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	85 c0		 test	 eax, eax
  0007f	75 05		 jne	 SHORT $L83319

; 183  : 			size += strlen(token);

  00081	ff 75 14	 push	 DWORD PTR _token$[ebp]

; 184  : 			i += 7;
; 185  : 		} else if (!strncmp(uri + i, "^access^", 8)) {

  00084	eb be		 jmp	 SHORT $L83707
$L83319:
  00086	6a 08		 push	 8
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08HJMC@?$FOaccess?$FO?$AA@ ; `string'
  0008d	57		 push	 edi
  0008e	ff d3		 call	 ebx
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	85 c0		 test	 eax, eax
  00095	75 0a		 jne	 SHORT $L83322

; 186  : 			size++;
; 187  : 			i += 8;

  00097	83 45 fc 08	 add	 DWORD PTR _i$[ebp], 8
  0009b	46		 inc	 esi
  0009c	83 c7 08	 add	 edi, 8

; 188  : 		} else {

  0009f	eb 05		 jmp	 SHORT $L83324
$L83322:

; 189  : 			size++;

  000a1	46		 inc	 esi

; 190  : 			i++;

  000a2	ff 45 fc	 inc	 DWORD PTR _i$[ebp]
  000a5	47		 inc	 edi
$L83324:
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a9	3b 45 f8	 cmp	 eax, DWORD PTR _l$[ebp]
  000ac	7c 82		 jl	 SHORT $L83311
$L83312:

; 191  : 		}
; 192  : 	}
; 193  : 	result = (char *)mir_alloc(size +1);

  000ae	46		 inc	 esi
  000af	56		 push	 esi
  000b0	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 194  : 	strcpy(result, base);

  000b6	ff 75 08	 push	 DWORD PTR _base$[ebp]
  000b9	8b f8		 mov	 edi, eax
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 _strcpy

; 195  : 	size = strlen(base);

  000c1	ff 75 08	 push	 DWORD PTR _base$[ebp]
  000c4	e8 00 00 00 00	 call	 _strlen

; 196  : 	for (i = 0; i < l; ) {

  000c9	83 65 fc 00	 and	 DWORD PTR _i$[ebp], 0
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	83 7d f8 00	 cmp	 DWORD PTR _l$[ebp], 0
  000d4	8b f0		 mov	 esi, eax
  000d6	0f 8e c7 00 00
	00		 jle	 $L83328
  000dc	8b 45 0c	 mov	 eax, DWORD PTR _uri$[ebp]
  000df	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
$L83327:

; 197  : 		if (!strncmp(uri + i, "^login^", 7)) {

  000e2	6a 07		 push	 7
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07IPMD@?$FOlogin?$FO?$AA@ ; `string'
  000e9	ff 75 08	 push	 DWORD PTR 8+[ebp]
  000ec	ff d3		 call	 ebx
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f1	85 c0		 test	 eax, eax
  000f3	75 23		 jne	 SHORT $L83329

; 198  : 			strcpy(result + size, login);

  000f5	ff 75 10	 push	 DWORD PTR _login$[ebp]
  000f8	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _strcpy

; 199  : 			size += strlen(login);

  00101	ff 75 10	 push	 DWORD PTR _login$[ebp]
$L83708:
  00104	e8 00 00 00 00	 call	 _strlen

; 200  : 			i += 7;

  00109	83 45 fc 07	 add	 DWORD PTR _i$[ebp], 7
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00110	03 f0		 add	 esi, eax
  00112	83 45 08 07	 add	 DWORD PTR 8+[ebp], 7

; 201  : 		} else if (!strncmp(uri + i, "^type^", 6)) {

  00116	eb 7f		 jmp	 SHORT $L83336
$L83329:
  00118	6a 06		 push	 6
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06LLEI@?$FOtype?$FO?$AA@ ; `string'
  0011f	ff 75 08	 push	 DWORD PTR 8+[ebp]
  00122	ff d3		 call	 ebx
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
  00127	85 c0		 test	 eax, eax
  00129	75 13		 jne	 SHORT $L83331

; 202  : 			result[size++] = '0' + type;

  0012b	8a 45 18	 mov	 al, BYTE PTR _type$[ebp]

; 203  : 			i += 6;

  0012e	83 45 fc 06	 add	 DWORD PTR _i$[ebp], 6
  00132	04 30		 add	 al, 48			; 00000030H
  00134	88 04 37	 mov	 BYTE PTR [edi+esi], al
  00137	46		 inc	 esi
  00138	83 45 08 06	 add	 DWORD PTR 8+[ebp], 6

; 204  : 		} else if (!strncmp(uri + i, "^token^", 7)) {

  0013c	eb 59		 jmp	 SHORT $L83336
$L83331:
  0013e	6a 07		 push	 7
  00140	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BPPH@?$FOtoken?$FO?$AA@ ; `string'
  00145	ff 75 08	 push	 DWORD PTR 8+[ebp]
  00148	ff d3		 call	 ebx
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014d	85 c0		 test	 eax, eax
  0014f	75 11		 jne	 SHORT $L83333

; 205  : 			strcpy(result + size, token);

  00151	ff 75 14	 push	 DWORD PTR _token$[ebp]
  00154	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _strcpy

; 206  : 			size += strlen(token);

  0015d	ff 75 14	 push	 DWORD PTR _token$[ebp]

; 207  : 			i += 7;
; 208  : 		} else if (!strncmp(uri + i, "^access^", 8)) {

  00160	eb a2		 jmp	 SHORT $L83708
$L83333:
  00162	6a 08		 push	 8
  00164	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08HJMC@?$FOaccess?$FO?$AA@ ; `string'
  00169	ff 75 08	 push	 DWORD PTR 8+[ebp]
  0016c	ff d3		 call	 ebx
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	85 c0		 test	 eax, eax
  00173	75 13		 jne	 SHORT $L83335

; 209  : 			result[size++] = '0' + access;

  00175	8a 45 1c	 mov	 al, BYTE PTR _access$[ebp]

; 210  : 			i += 8;

  00178	83 45 fc 08	 add	 DWORD PTR _i$[ebp], 8
  0017c	04 30		 add	 al, 48			; 00000030H
  0017e	88 04 37	 mov	 BYTE PTR [edi+esi], al
  00181	46		 inc	 esi
  00182	83 45 08 08	 add	 DWORD PTR 8+[ebp], 8

; 211  : 		} else {

  00186	eb 0f		 jmp	 SHORT $L83336
$L83335:

; 212  : 			result[size++] = uri[i++];

  00188	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  0018b	8a 00		 mov	 al, BYTE PTR [eax]
  0018d	88 04 37	 mov	 BYTE PTR [edi+esi], al
  00190	46		 inc	 esi
  00191	ff 45 fc	 inc	 DWORD PTR _i$[ebp]
  00194	ff 45 08	 inc	 DWORD PTR 8+[ebp]
$L83336:
  00197	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0019a	3b 45 f8	 cmp	 eax, DWORD PTR _l$[ebp]
  0019d	0f 8c 3f ff ff
	ff		 jl	 $L83327
$L83328:

; 213  : 		}
; 214  : 	}
; 215  : 	result[size] = '\0';

  001a3	80 24 37 00	 and	 BYTE PTR [edi+esi], 0

; 216  : 	return result;

  001a7	8b c7		 mov	 eax, edi
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx

; 217  : }

  001ac	c9		 leave
  001ad	c3		 ret	 0
_replaceTokens ENDP
_TEXT	ENDS
PUBLIC	_TlenRemoveAvatar
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT _TlenRemoveAvatar
_TEXT	SEGMENT
_proto$ = 8
_request$ = 8
_TlenRemoveAvatar PROC NEAR				; COMDAT

; 361  : void TlenRemoveAvatar(TlenProtocol *proto) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 362  : 	NETLIBHTTPREQUEST *req;
; 363  : 	char *request;
; 364  : 	if (proto->threadData != NULL) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _proto$[ebp]
  00007	83 bf e0 00 00
	00 00		 cmp	 DWORD PTR [edi+224], 0
  0000e	74 7d		 je	 SHORT $L83468
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 365  :         TLENREMOVEAVATARTHREADDATA *data = (TLENREMOVEAVATARTHREADDATA *)mir_alloc(sizeof(TLENREMOVEAVATARTHREADDATA));

  00012	6a 08		 push	 8
  00014	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 366  : 		req = (NETLIBHTTPREQUEST *)mir_alloc(sizeof(NETLIBHTTPREQUEST));

  0001a	6a 2c		 push	 44			; 0000002cH
  0001c	8b d8		 mov	 ebx, eax
  0001e	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00024	8b f0		 mov	 esi, eax

; 367  :         data->proto =proto;

  00026	89 3b		 mov	 DWORD PTR [ebx], edi

; 368  :         data->req = req;

  00028	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 369  : 		request = replaceTokens(proto->threadData->tlenConfig.mailBase, proto->threadData->tlenConfig.avatarRemove, "", proto->threadData->avatarToken, 0, 0);

  0002b	8b 87 e0 00 00
	00		 mov	 eax, DWORD PTR [edi+224]
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	8d 88 08 02 00
	00		 lea	 ecx, DWORD PTR [eax+520]
  0003b	51		 push	 ecx
  0003c	8d 88 1c 0e 00
	00		 lea	 ecx, DWORD PTR [eax+3612]
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  00047	05 04 07 00 00	 add	 eax, 1796		; 00000704H
  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _replaceTokens

; 370  : 		ZeroMemory(req, sizeof(NETLIBHTTPREQUEST));

  00053	6a 2c		 push	 44			; 0000002cH
  00055	6a 00		 push	 0
  00057	56		 push	 esi
  00058	89 45 08	 mov	 DWORD PTR _request$[ebp], eax
  0005b	e8 00 00 00 00	 call	 _memset

; 371  : 		req->cbSize = sizeof(NETLIBHTTPREQUEST);

  00060	c7 06 2c 00 00
	00		 mov	 DWORD PTR [esi], 44	; 0000002cH

; 372  : 		req->requestType = proto->threadData->tlenConfig.avatarGetMthd;

  00066	8b 87 e0 00 00
	00		 mov	 eax, DWORD PTR [edi+224]

; 373  : 		req->szUrl = request;
; 374  : 		JabberForkThread(TlenRemoveAvatarRequestThread, 0, data);

  0006c	53		 push	 ebx
  0006d	6a 00		 push	 0
  0006f	8b 80 14 0d 00
	00		 mov	 eax, DWORD PTR [eax+3348]
  00075	68 00 00 00 00	 push	 OFFSET FLAT:_TlenRemoveAvatarRequestThread
  0007a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0007d	8b 45 08	 mov	 eax, DWORD PTR _request$[ebp]
  00080	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00083	e8 00 00 00 00	 call	 _JabberForkThread
  00088	83 c4 38	 add	 esp, 56			; 00000038H
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
$L83468:
  0008d	5f		 pop	 edi

; 375  : 	}
; 376  : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TlenRemoveAvatar ENDP
_TEXT	ENDS
;	COMDAT _TlenRemoveAvatarRequestThread
_TEXT	SEGMENT
_ptr$ = 8
_TlenRemoveAvatarRequestThread PROC NEAR		; COMDAT

; 320  : static void TlenRemoveAvatarRequestThread(void *ptr) {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 321  : 	NETLIBHTTPREQUEST *resp;
; 322  :     TLENREMOVEAVATARTHREADDATA *data = ptr;
; 323  : 	NETLIBHTTPREQUEST *req = (NETLIBHTTPREQUEST *)data->req;

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR _ptr$[esp+8]
  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 324  : 	resp = (NETLIBHTTPREQUEST *)CallService(MS_NETLIB_HTTPTRANSACTION, (WPARAM)data->proto->hNetlibUser, (LPARAM)req);

  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	56		 push	 esi
  0000d	ff b0 c0 00 00
	00		 push	 DWORD PTR [eax+192]
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@ ; `string'
  0001d	ff 50 24	 call	 DWORD PTR [eax+36]

; 325  : 	mir_free(req->szUrl);

  00020	ff 76 0c	 push	 DWORD PTR [esi+12]
  00023	8b d8		 mov	 ebx, eax
  00025	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 326  : 	mir_free(req->headers);

  0002b	ff 76 10	 push	 DWORD PTR [esi+16]
  0002e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 327  : 	mir_free(req->pData);

  00034	ff 76 18	 push	 DWORD PTR [esi+24]
  00037	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 328  : 	mir_free(req);

  0003d	56		 push	 esi
  0003e	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  00044	83 c4 1c	 add	 esp, 28			; 0000001cH

; 329  : 	if (resp != NULL) {

  00047	85 db		 test	 ebx, ebx
  00049	74 1c		 je	 SHORT $L83435

; 330  : 		CallService(MS_NETLIB_FREEHTTPREQUESTSTRUCT, (WPARAM)0, (LPARAM)resp);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00050	53		 push	 ebx
  00051	6a 00		 push	 0
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@ ; `string'
  00058	ff 50 24	 call	 DWORD PTR [eax+36]

; 331  : 		RemoveAvatar(data->proto, NULL);

  0005b	6a 00		 push	 0
  0005d	ff 37		 push	 DWORD PTR [edi]
  0005f	e8 00 00 00 00	 call	 _RemoveAvatar
  00064	83 c4 14	 add	 esp, 20			; 00000014H
$L83435:

; 332  : 	}
; 333  :     mir_free(data);

  00067	57		 push	 edi
  00068	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 334  : 	
; 335  : }

  00072	c3		 ret	 0
_TlenRemoveAvatarRequestThread ENDP
_TEXT	ENDS
PUBLIC	_TlenUploadAvatar
PUBLIC	??_C@_0CF@DNCL@multipart?1form?9data?$DL?5boundary?$DNAa@ ; `string'
PUBLIC	??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@ ; `string'
PUBLIC	??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@	; `string'
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0CF@DNCL@multipart?1form?9data?$DL?5boundary?$DNAa@
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\tlen_avatar.c
_DATA	SEGMENT
??_C@_0CF@DNCL@multipart?1form?9data?$DL?5boundary?$DNAa@ DB 'multipart/f'
	DB	'orm-data; boundary=AaB03x', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@
_DATA	SEGMENT
??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@ DB '--AaB03x', 0dH
	DB	0aH, 'Content-Disposition: form-data; name="filename"; filenam'
	DB	'e="plik.png"', 0dH, 0aH, 'Content-Type: image/png', 0dH, 0aH, 0dH
	DB	0aH, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@ DB 0dH, 0aH, '--AaB03x--', 0dH
	DB	0aH, 00H					; `string'
_DATA	ENDS
;	COMDAT _TlenUploadAvatar
_TEXT	SEGMENT
_proto$ = 8
_data$ = 12
_dataLen$ = 16
_access$ = 20
_request$ = 20
_buffer$ = 20
_sizeHead$83495 = 8
_TlenUploadAvatar PROC NEAR				; COMDAT

; 379  : void TlenUploadAvatar(TlenProtocol *proto, unsigned char *data, int dataLen, int access) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 380  : 	NETLIBHTTPREQUEST *req;
; 381  : 	NETLIBHTTPHEADER *headers;
; 382  : 	TLENUPLOADAVATARTHREADDATA *threadData;
; 383  : 	char *request;
; 384  : 	unsigned char *buffer;
; 385  : 	if (proto->threadData != NULL && dataLen > 0 && data != NULL) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _proto$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0000f	3b c1		 cmp	 eax, ecx
  00011	0f 84 35 01 00
	00		 je	 $L83493
  00017	39 4d 10	 cmp	 DWORD PTR _dataLen$[ebp], ecx
  0001a	0f 8e 2c 01 00
	00		 jle	 $L83493
  00020	39 4d 0c	 cmp	 DWORD PTR _data$[ebp], ecx
  00023	0f 84 23 01 00
	00		 je	 $L83493
  00029	53		 push	 ebx
  0002a	57		 push	 edi

; 386  : 		int size, sizeHead, sizeTail;
; 387  : 		request = replaceTokens(proto->threadData->tlenConfig.mailBase, proto->threadData->tlenConfig.avatarUpload, "", proto->threadData->avatarToken, 0, access);

  0002b	ff 75 14	 push	 DWORD PTR _access$[ebp]
  0002e	51		 push	 ecx
  0002f	8d 88 08 02 00
	00		 lea	 ecx, DWORD PTR [eax+520]
  00035	51		 push	 ecx
  00036	8d 88 18 0d 00
	00		 lea	 ecx, DWORD PTR [eax+3352]
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  00041	05 04 07 00 00	 add	 eax, 1796		; 00000704H
  00046	51		 push	 ecx
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _replaceTokens

; 388  : 		threadData = (TLENUPLOADAVATARTHREADDATA *)mir_alloc(sizeof(TLENUPLOADAVATARTHREADDATA));

  0004d	6a 10		 push	 16			; 00000010H
  0004f	89 45 14	 mov	 DWORD PTR _request$[ebp], eax
  00052	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  00058	8b f8		 mov	 edi, eax

; 389  :         threadData->proto = proto;
; 390  : 		req = (NETLIBHTTPREQUEST *)mir_alloc(sizeof(NETLIBHTTPREQUEST));

  0005a	6a 2c		 push	 44			; 0000002cH
  0005c	89 37		 mov	 DWORD PTR [edi], esi
  0005e	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 391  : 		headers = (NETLIBHTTPHEADER *)mir_alloc(sizeof(NETLIBHTTPHEADER));

  00064	6a 08		 push	 8
  00066	8b f0		 mov	 esi, eax
  00068	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4

; 392  : 		ZeroMemory(req, sizeof(NETLIBHTTPREQUEST));

  0006e	6a 2c		 push	 44			; 0000002cH
  00070	6a 00		 push	 0
  00072	56		 push	 esi
  00073	8b d8		 mov	 ebx, eax
  00075	e8 00 00 00 00	 call	 _memset

; 393  : 		req->cbSize = sizeof(NETLIBHTTPREQUEST);
; 394  : 		req->requestType = proto->threadData->tlenConfig.avatarUploadMthd;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _proto$[ebp]
  0007d	c7 06 2c 00 00
	00		 mov	 DWORD PTR [esi], 44	; 0000002cH

; 395  : 		req->szUrl = request;
; 396  : 		req->flags = 0;
; 397  : 		headers[0].szName = "Content-Type";
; 398  : 		headers[0].szValue = "multipart/form-data; boundary=AaB03x";
; 399  : 		req->headersCount = 1;
; 400  : 		req->headers = headers;
; 401  : 		sizeHead = strlen("--AaB03x\r\nContent-Disposition: form-data; name=\"filename\"; filename=\"plik.png\"\r\nContent-Type: image/png\r\n\r\n");

  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@ ; `string'
  00088	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]
  0008e	8b 80 18 0e 00
	00		 mov	 eax, DWORD PTR [eax+3608]
  00094	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00098	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0009b	8b 45 14	 mov	 eax, DWORD PTR _request$[ebp]
  0009e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000a1	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET FLAT:??_C@_0N@HKBC@Content?9Type?$AA@ ; `string'
  000a7	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET FLAT:??_C@_0CF@DNCL@multipart?1form?9data?$DL?5boundary?$DNAa@ ; `string'
  000ae	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  000b5	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000b8	e8 00 00 00 00	 call	 _strlen

; 402  : 		sizeTail = strlen("\r\n--AaB03x--\r\n");

  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@ ; `string'
  000c2	89 45 08	 mov	 DWORD PTR _sizeHead$83495[ebp], eax
  000c5	e8 00 00 00 00	 call	 _strlen
  000ca	8b d8		 mov	 ebx, eax

; 403  : 		size = dataLen + sizeHead + sizeTail;
; 404  : 		buffer = mir_alloc(size);
; 405  : 		strcpy(buffer, "--AaB03x\r\nContent-Disposition: form-data; name=\"filename\"; filename=\"plik.png\"\r\nContent-Type: image/png\r\n\r\n");
; 406  : 		memcpy(buffer + sizeHead, data, dataLen);
; 407  : 		strcpy(buffer + sizeHead + dataLen, "\r\n--AaB03x--\r\n");
; 408  : 		req->dataLength = size;
; 409  : 		req->pData = buffer;
; 410  : 		threadData->req = req;
; 411  : 		threadData->data = (char *) mir_alloc(dataLen);
; 412  : 		memcpy(threadData->data, data, dataLen);
; 413  : 		threadData->length = dataLen;
; 414  : 		JabberForkThread(TlenUploadAvatarRequestThread, 0, threadData);

  000cc	03 5d 08	 add	 ebx, DWORD PTR _sizeHead$83495[ebp]
  000cf	03 5d 10	 add	 ebx, DWORD PTR _dataLen$[ebp]
  000d2	53		 push	 ebx
  000d3	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GM@HAIN@?9?9AaB03x?$AN?6Content?9Disposition?3?5f@ ; `string'
  000de	50		 push	 eax
  000df	89 45 14	 mov	 DWORD PTR _buffer$[ebp], eax
  000e2	e8 00 00 00 00	 call	 _strcpy
  000e7	8b 45 14	 mov	 eax, DWORD PTR _buffer$[ebp]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _sizeHead$83495[ebp]
  000ed	83 c4 44	 add	 esp, 68			; 00000044H
  000f0	03 c1		 add	 eax, ecx
  000f2	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
  000f5	ff 75 10	 push	 DWORD PTR _dataLen$[ebp]
  000f8	ff 75 0c	 push	 DWORD PTR _data$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _memcpy
  00101	8b 45 08	 mov	 eax, DWORD PTR 8+[ebp]
  00104	8b 4d 10	 mov	 ecx, DWORD PTR _dataLen$[ebp]
  00107	03 c1		 add	 eax, ecx
  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@NPBJ@?$AN?6?9?9AaB03x?9?9?$AN?6?$AA@ ; `string'
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _strcpy
  00114	8b 45 14	 mov	 eax, DWORD PTR _buffer$[ebp]
  00117	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  0011a	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0011d	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00120	8b 75 10	 mov	 esi, DWORD PTR _dataLen$[ebp]
  00123	56		 push	 esi
  00124	ff 15 04 00 00
	00		 call	 DWORD PTR _mmi+4
  0012a	56		 push	 esi
  0012b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0012e	ff 75 0c	 push	 DWORD PTR _data$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _memcpy
  00137	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  0013a	57		 push	 edi
  0013b	6a 00		 push	 0
  0013d	68 00 00 00 00	 push	 OFFSET FLAT:_TlenUploadAvatarRequestThread
  00142	e8 00 00 00 00	 call	 _JabberForkThread
  00147	83 c4 30	 add	 esp, 48			; 00000030H
  0014a	5f		 pop	 edi
  0014b	5b		 pop	 ebx
$L83493:
  0014c	5e		 pop	 esi

; 415  : 	}
; 416  : }

  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TlenUploadAvatar ENDP
_TEXT	ENDS
;	COMDAT _TlenUploadAvatarRequestThread
_TEXT	SEGMENT
_ptr$ = 8
_TlenUploadAvatarRequestThread PROC NEAR		; COMDAT

; 344  : static void TlenUploadAvatarRequestThread(void *ptr) {

  00000	56		 push	 esi

; 345  : 	NETLIBHTTPREQUEST *resp;
; 346  : 	TLENUPLOADAVATARTHREADDATA * data = (TLENUPLOADAVATARTHREADDATA *) ptr;
; 347  : 	NETLIBHTTPREQUEST *req = data->req;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _ptr$[esp]
  00005	57		 push	 edi
  00006	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 348  : 	resp = (NETLIBHTTPREQUEST *)CallService(MS_NETLIB_HTTPTRANSACTION, (WPARAM)data->proto->hNetlibUser, (LPARAM)req);

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	57		 push	 edi
  0000c	ff b0 c0 00 00
	00		 push	 DWORD PTR [eax+192]
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GFMD@Netlib?1HttpTransaction?$AA@ ; `string'
  0001c	ff 50 24	 call	 DWORD PTR [eax+36]
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 349  : 	if (resp != NULL) {

  00022	85 c0		 test	 eax, eax
  00024	74 26		 je	 SHORT $L83457

; 350  : 		CallService(MS_NETLIB_FREEHTTPREQUESTSTRUCT, (WPARAM)0, (LPARAM)resp);

  00026	50		 push	 eax
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _pluginLink
  0002c	6a 00		 push	 0
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@JINL@Netlib?1FreeHttpRequestStruct?$AA@ ; `string'
  00033	ff 50 24	 call	 DWORD PTR [eax+36]

; 351  : 		SetAvatar(data->proto, NULL, NULL, data->data, data->length, PA_FORMAT_PNG);

  00036	6a 01		 push	 1
  00038	ff 76 0c	 push	 DWORD PTR [esi+12]
  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	ff 36		 push	 DWORD PTR [esi]
  00044	e8 00 00 00 00	 call	 _SetAvatar
  00049	83 c4 24	 add	 esp, 36			; 00000024H
$L83457:

; 352  : 	}
; 353  : 	mir_free(req->szUrl);

  0004c	ff 77 0c	 push	 DWORD PTR [edi+12]
  0004f	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 354  : 	mir_free(req->headers);

  00055	ff 77 10	 push	 DWORD PTR [edi+16]
  00058	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 355  : 	mir_free(req->pData);

  0005e	ff 77 18	 push	 DWORD PTR [edi+24]
  00061	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 356  : 	mir_free(req);

  00067	57		 push	 edi
  00068	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 357  : 	mir_free(data->data);

  0006e	ff 76 08	 push	 DWORD PTR [esi+8]
  00071	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12

; 358  : 	mir_free(data);

  00077	56		 push	 esi
  00078	ff 15 0c 00 00
	00		 call	 DWORD PTR _mmi+12
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 359  : }

  00083	c3		 ret	 0
_TlenUploadAvatarRequestThread ENDP
_TEXT	ENDS
END
