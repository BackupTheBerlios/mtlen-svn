	TITLE	E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\codec\gsm_long.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _longTermLTPCalculation
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _longTermAnalysisFilter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _longTermSynthesisFilter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _longTermAnalysis
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _longTermSynthesis
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
CONST	SEGMENT
_gsm_DLB DD	0199aH
	DD	04000H
	DD	06666H
	DD	07fffH
_gsm_QLB DD	0ccdH
	DD	02ccdH
	DD	05333H
	DD	07fffH
CONST	ENDS
PUBLIC	_longTermAnalysis
;	COMDAT _longTermAnalysis
_TEXT	SEGMENT
_state$ = 8
_in$ = 12
_longTermAnalysis PROC NEAR				; COMDAT

; 139  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 140  : 	short *in_1 = state->dp0 + 120 + state->subframe * 40;

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _state$[esp+4]
  00006	57		 push	 edi
  00007	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  0000d	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]

; 141  : 	short *out = state->dp0 + 120 + state->subframe * 40;
; 142  : 	int *e = state->e + state->subframe * 40;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e1 04	 shl	 ecx, 4
  00016	c1 e0 05	 shl	 eax, 5
  00019	8d bc 31 9c 01
	00 00		 lea	 edi, DWORD PTR [ecx+esi+412]

; 143  : /*
; 144  : 
; 145  : 	int   i;
; 146  : 	printf("Long-term in: \n");
; 147  : 	for (i=0;i<40;i++) {
; 148  : 		printf("%7d ", in[i]);
; 149  : 	}
; 150  : 	printf("\n");
; 151  : 	*/
; 152  : 	longTermLTPCalculation(state, in, in_1);

  00020	57		 push	 edi
  00021	8d 9c 30 dc 02
	00 00		 lea	 ebx, DWORD PTR [eax+esi+732]
  00028	ff 74 24 18	 push	 DWORD PTR _in$[esp+12]
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _longTermLTPCalculation

; 153  : 	/* printf("Nc: %d, bc: %d \n", state->Nc[state->subframe], state->bc[state->subframe]);
; 154  : 	*/
; 155  : 	longTermAnalysisFilter(state->Nc[state->subframe], state->bc[state->subframe], in, in_1, out, e);

  00032	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  00038	53		 push	 ebx
  00039	57		 push	 edi
  0003a	57		 push	 edi
  0003b	ff 74 24 2c	 push	 DWORD PTR _in$[esp+32]
  0003f	ff b4 86 70 05
	00 00		 push	 DWORD PTR [esi+eax*4+1392]
  00046	ff b4 86 60 05
	00 00		 push	 DWORD PTR [esi+eax*4+1376]
  0004d	e8 00 00 00 00	 call	 _longTermAnalysisFilter
  00052	83 c4 24	 add	 esp, 36			; 00000024H
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 156  : /*
; 157  : 	printf("Long-term out: \n");
; 158  : 	for (i=0;i<40;i++) {
; 159  : 		printf("%7d ", out[i]);
; 160  : 	}
; 161  : 	printf("\n");
; 162  : 	*/
; 163  : }

  00058	c3		 ret	 0
_longTermAnalysis ENDP
_TEXT	ENDS
PUBLIC	__real@8@00000000000000000000
PUBLIC	__real@8@400e8000000000000000
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@8@00000000000000000000
; File E:\Documents and Settings\piotr\Moje dokumenty\NetBeansProjects\tlen8\codec\gsm_long.c
CONST	SEGMENT
__real@8@00000000000000000000 DQ 00000000000000000r ; 0
CONST	ENDS
;	COMDAT __real@8@400e8000000000000000
CONST	SEGMENT
__real@8@400e8000000000000000 DQ 040e0000000000000r ; 32768
CONST	ENDS
;	COMDAT _longTermLTPCalculation
_TEXT	SEGMENT
_state$ = 8
_in$ = 12
_in_1$ = 16
_in_1_float_base$ = -640
_in_float$ = -160
_L_max$ = 16
_longTermLTPCalculation PROC NEAR			; COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H

; 41   : 	int  	k, lambda;
; 42   :    	int	   	Nc, bc;
; 43   :    	float   in_1_float_base[120], * in_1_float = in_1_float_base + 120;
; 44   :    	float   in_float[40];
; 45   :  	float   L_result, L_max, L_power;
; 46   : 
; 47   : 	for (k = -120; k < 0; k++) in_1_float[k] = (float)in_1[k];

  00009	8b 45 10	 mov	 eax, DWORD PTR _in_1$[ebp]
  0000c	56		 push	 esi
  0000d	6a 78		 push	 120			; 00000078H
  0000f	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _in_1_float_base$[ebp]
  00015	05 10 ff ff ff	 add	 eax, -240		; ffffff10H
  0001a	5a		 pop	 edx
$L75912:
  0001b	0f bf 30	 movsx	 esi, WORD PTR [eax]
  0001e	89 75 10	 mov	 DWORD PTR 16+[ebp], esi
  00021	40		 inc	 eax
  00022	db 45 10	 fild	 DWORD PTR 16+[ebp]
  00025	40		 inc	 eax
  00026	d9 19		 fstp	 DWORD PTR [ecx]
  00028	83 c1 04	 add	 ecx, 4
  0002b	4a		 dec	 edx
  0002c	75 ed		 jne	 SHORT $L75912

; 48   : 	for (k =    0; k < 40; k++) in_float[k] =  (float)in[k];

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  00031	6a 28		 push	 40			; 00000028H
  00033	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _in_float$[ebp]
  00039	5a		 pop	 edx
$L75916:
  0003a	0f bf 30	 movsx	 esi, WORD PTR [eax]
  0003d	89 75 10	 mov	 DWORD PTR 16+[ebp], esi
  00040	40		 inc	 eax
  00041	db 45 10	 fild	 DWORD PTR 16+[ebp]
  00044	40		 inc	 eax
  00045	d9 19		 fstp	 DWORD PTR [ecx]
  00047	83 c1 04	 add	 ecx, 4
  0004a	4a		 dec	 edx
  0004b	75 ed		 jne	 SHORT $L75916
  0004d	57		 push	 edi

; 49   : 
; 50   : 	/* Search for the maximum cross-correlation and coding of the LTP lag */
; 51   : 
; 52   : 	L_max = 0;
; 53   : 	Nc    = 40;   /* index for the maximum cross-correlation */

  0004e	6a 28		 push	 40			; 00000028H
  00050	5a		 pop	 edx
  00051	d9 ee		 fldz

; 54   : 
; 55   : 	for (lambda = 40; lambda < 121; lambda++) {

  00053	52		 push	 edx
  00054	d9 5d 10	 fstp	 DWORD PTR _L_max$[ebp]
  00057	5f		 pop	 edi
$L75920:
  00058	8b f7		 mov	 esi, edi

; 56   : 		for (L_result = 0, L_power = 0, k = 0; k < 40; k++) {

  0005a	33 c9		 xor	 ecx, ecx
  0005c	d9 ee		 fldz
  0005e	c1 e6 02	 shl	 esi, 2
$L75923:

; 57   : 			L_result += in_float[k] * in_1_float[k - lambda];

  00061	8b c1		 mov	 eax, ecx
  00063	83 c1 04	 add	 ecx, 4
  00066	2b c6		 sub	 eax, esi
  00068	81 f9 a0 00 00
	00		 cmp	 ecx, 160		; 000000a0H
  0006e	d9 84 05 60 ff
	ff ff		 fld	 DWORD PTR _in_1_float_base$[ebp+eax+480]
  00075	d8 8c 0d 5c ff
	ff ff		 fmul	 DWORD PTR _in_float$[ebp+ecx-4]
  0007c	de c1		 faddp	 ST(1), ST(0)
  0007e	7c e1		 jl	 SHORT $L75923

; 58   : //			L_power += in_1_float[k - lambda] * in_1_float[k - lambda];
; 59   : 		}
; 60   : //		L_result = L_result / L_power;
; 61   : 		if (L_result > L_max) {

  00080	d8 55 10	 fcom	 DWORD PTR _L_max$[ebp]
  00083	df e0		 fnstsw	 ax
  00085	9e		 sahf
  00086	76 07		 jbe	 SHORT $L76026

; 62   : 			Nc    = lambda;
; 63   : 			L_max = L_result;

  00088	d9 5d 10	 fstp	 DWORD PTR _L_max$[ebp]
  0008b	8b d7		 mov	 edx, edi
  0008d	eb 02		 jmp	 SHORT $L75921
$L76026:
  0008f	dd d8		 fstp	 ST(0)
$L75921:

; 54   : 
; 55   : 	for (lambda = 40; lambda < 121; lambda++) {

  00091	47		 inc	 edi
  00092	83 ff 79	 cmp	 edi, 121		; 00000079H
  00095	7c c1		 jl	 SHORT $L75920

; 64   : 		}
; 65   : 	}
; 66   : 	state->Nc[state->subframe] = Nc;

  00097	8b 75 08	 mov	 esi, DWORD PTR _state$[ebp]
  0009a	5f		 pop	 edi

; 67   : 	if (L_max <= 0.)  {

  0009b	d9 45 10	 fld	 DWORD PTR _L_max$[ebp]
  0009e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@8@00000000000000000000
  000a4	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  000aa	89 94 86 60 05
	00 00		 mov	 DWORD PTR [esi+eax*4+1376], edx
  000b1	df e0		 fnstsw	 ax
  000b3	9e		 sahf
  000b4	77 10		 ja	 SHORT $L75927

; 68   : 		state->bc[state->subframe] = 0;

  000b6	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  000bc	83 a4 86 70 05
	00 00 00	 and	 DWORD PTR [esi+eax*4+1392], 0

; 69   : 		return;

  000c4	eb 7d		 jmp	 SHORT $L75901
$L75927:

; 70   : 	}
; 71   : 	/*  Compute the power of the reconstructed short term residual signal dp[..] */
; 72   : 	in_1_float -= Nc;

  000c6	8b c2		 mov	 eax, edx
  000c8	6a 28		 push	 40			; 00000028H
  000ca	c1 e0 02	 shl	 eax, 2
  000cd	8b c8		 mov	 ecx, eax
  000cf	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _in_1_float_base$[ebp+480]
  000d5	2b c1		 sub	 eax, ecx
  000d7	59		 pop	 ecx

; 73   : 	L_power = 0;

  000d8	d9 ee		 fldz
$L75928:

; 74   : 	for (k = 0; k < 40; k++) {
; 75   : 		float f = in_1_float[k];

  000da	d9 00		 fld	 DWORD PTR [eax]

; 76   : 		L_power += f * f;

  000dc	d9 c0		 fld	 ST(0)
  000de	d8 c9		 fmul	 ST(0), ST(1)
  000e0	83 c0 04	 add	 eax, 4
  000e3	49		 dec	 ecx
  000e4	d8 c2		 fadd	 ST(0), ST(2)
  000e6	dd da		 fstp	 ST(2)
  000e8	dd d8		 fstp	 ST(0)
  000ea	75 ee		 jne	 SHORT $L75928

; 77   : 	}
; 78   : 	if (L_max >= L_power) { //1.0

  000ec	d9 45 10	 fld	 DWORD PTR _L_max$[ebp]
  000ef	d8 d9		 fcomp	 ST(1)
  000f1	df e0		 fnstsw	 ax
  000f3	9e		 sahf
  000f4	72 15		 jb	 SHORT $L75932

; 79   : 		state->bc[state->subframe] = 3;

  000f6	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  000fc	dd d8		 fstp	 ST(0)
  000fe	c7 84 86 70 05
	00 00 03 00 00
	00		 mov	 DWORD PTR [esi+eax*4+1392], 3

; 80   : 		return;

  00109	eb 38		 jmp	 SHORT $L75901
$L75932:

; 81   : 	}
; 82   :    /*  Coding of the LTP gain
; 83   :     *  Table gsm_DLB must be used to obtain the level DLB[i] for the
; 84   :     *  quantization of the LTP gain b to get the coded version bc.
; 85   :     */
; 86   : //	lambda = L_max * 32768.;
; 87   : 	lambda = (int)(L_max * 32768. / L_power);

  0010b	d9 45 10	 fld	 DWORD PTR _L_max$[ebp]
  0010e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@8@400e8000000000000000
  00114	d9 c1		 fld	 ST(1)
  00116	de f9		 fdivp	 ST(1), ST(0)
  00118	e8 00 00 00 00	 call	 __ftol
  0011d	dd d8		 fstp	 ST(0)

; 88   : 	for (bc = 0; bc <= 2; ++bc) if (lambda <= gsm_DLB[bc]) break;

  0011f	33 d2		 xor	 edx, edx
  00121	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_gsm_DLB
$L75934:
  00126	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00128	7e 0c		 jle	 SHORT $L76014
  0012a	83 c1 04	 add	 ecx, 4
  0012d	42		 inc	 edx
  0012e	81 f9 08 00 00
	00		 cmp	 ecx, OFFSET FLAT:_gsm_DLB+8
  00134	7e f0		 jle	 SHORT $L75934
$L76014:

; 89   : 	state->bc[state->subframe] = bc;

  00136	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
  0013c	89 94 86 70 05
	00 00		 mov	 DWORD PTR [esi+eax*4+1392], edx
$L75901:
  00143	5e		 pop	 esi

; 90   : }

  00144	c9		 leave
  00145	c3		 ret	 0
_longTermLTPCalculation ENDP
_TEXT	ENDS
;	COMDAT _longTermAnalysisFilter
_TEXT	SEGMENT
_Nc$ = 8
_bc$ = 12
_in$ = 16
_in_1$ = 20
_out$ = 24
_e$ = 28
_gain$ = -4
_longTermAnalysisFilter PROC NEAR			; COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 100  : 	int	gain, k, l;
; 101  : 	gain = gsm_QLB[bc];

  00004	8b 45 0c	 mov	 eax, DWORD PTR _bc$[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]

; 102  : 	for (k = 0; k < 40; k++) {

  0000a	8b 55 18	 mov	 edx, DWORD PTR _out$[ebp]
  0000d	83 65 0c 00	 and	 DWORD PTR 12+[ebp], 0
  00011	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _gsm_QLB[eax*4]
  00018	53		 push	 ebx
  00019	89 45 fc	 mov	 DWORD PTR _gain$[ebp], eax
  0001c	8b 45 08	 mov	 eax, DWORD PTR _Nc$[ebp]
  0001f	03 c0		 add	 eax, eax
  00021	56		 push	 esi
  00022	8b 75 1c	 mov	 esi, DWORD PTR _e$[ebp]
  00025	89 45 08	 mov	 DWORD PTR 8+[ebp], eax
  00028	2b d1		 sub	 edx, ecx
$L75955:

; 103  : 		l = (gain * (int)in_1[k - Nc] + 16384) >> 15;

  0002a	8b 45 0c	 mov	 eax, DWORD PTR 12+[ebp]
  0002d	8b 5d 14	 mov	 ebx, DWORD PTR _in_1$[ebp]
  00030	2b 45 08	 sub	 eax, DWORD PTR 8+[ebp]
  00033	0f bf 04 18	 movsx	 eax, WORD PTR [eax+ebx]
  00037	0f af 45 fc	 imul	 eax, DWORD PTR _gain$[ebp]
  0003b	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  00040	c1 f8 0f	 sar	 eax, 15			; 0000000fH

; 104  : 		if (l < -32768) l = -32768;

  00043	3d 00 80 ff ff	 cmp	 eax, -32768		; ffff8000H
  00048	7d 07		 jge	 SHORT $L75959
  0004a	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H

; 105  : 		else if (l > 32767) l = 32767;

  0004f	eb 0b		 jmp	 SHORT $L75961
$L75959:
  00051	bb ff 7f 00 00	 mov	 ebx, 32767		; 00007fffH
  00056	3b c3		 cmp	 eax, ebx
  00058	7e 02		 jle	 SHORT $L75961
  0005a	8b c3		 mov	 eax, ebx
$L75961:

; 102  : 	for (k = 0; k < 40; k++) {

  0005c	83 45 0c 02	 add	 DWORD PTR 12+[ebp], 2

; 106  : 		out[k]  = l;

  00060	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 107  : 		e[k]   = in[k] - l;

  00064	0f bf 19	 movsx	 ebx, WORD PTR [ecx]
  00067	2b d8		 sub	 ebx, eax
  00069	41		 inc	 ecx
  0006a	89 1e		 mov	 DWORD PTR [esi], ebx
  0006c	41		 inc	 ecx
  0006d	83 c6 04	 add	 esi, 4
  00070	83 7d 0c 50	 cmp	 DWORD PTR 12+[ebp], 80	; 00000050H
  00074	7c b4		 jl	 SHORT $L75955
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 108  : 	}
; 109  : }

  00078	c9		 leave
  00079	c3		 ret	 0
_longTermAnalysisFilter ENDP
_TEXT	ENDS
PUBLIC	_longTermSynthesis
;	COMDAT _longTermSynthesis
_TEXT	SEGMENT
_state$ = 8
_longTermSynthesis PROC NEAR				; COMDAT

; 170  : 	int Nc = state->Nc[state->subframe];
; 171  : 	int bc = state->bc[state->subframe];
; 172  : 	int *e = state->e + state->subframe * 40;
; 173  : 	short *out = state->dp0 + 120 + state->subframe * 40;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _state$[esp-4]
  00004	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  0000a	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0000d	c1 e2 04	 shl	 edx, 4

; 174  : 	//int i;
; 175  : 	longTermSynthesisFilter(state, Nc, bc, e, out);

  00010	8d 94 0a 9c 01
	00 00		 lea	 edx, DWORD PTR [edx+ecx+412]
  00017	52		 push	 edx
  00018	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0001b	c1 e2 05	 shl	 edx, 5
  0001e	8d 94 0a dc 02
	00 00		 lea	 edx, DWORD PTR [edx+ecx+732]
  00025	52		 push	 edx
  00026	ff b4 81 70 05
	00 00		 push	 DWORD PTR [ecx+eax*4+1392]
  0002d	ff b4 81 60 05
	00 00		 push	 DWORD PTR [ecx+eax*4+1376]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _longTermSynthesisFilter
  0003a	83 c4 14	 add	 esp, 20			; 00000014H

; 176  : 	/*
; 177  : 	printf("Long-term reconstructed: \n");
; 178  : 	for (i=0;i<160;i++) {
; 179  : 		printf("%7d ", state->dp0[i]);
; 180  : 	}
; 181  : 	printf("\n");
; 182  : 	*/
; 183  : }

  0003d	c3		 ret	 0
_longTermSynthesis ENDP
_TEXT	ENDS
;	COMDAT _longTermSynthesisFilter
_TEXT	SEGMENT
_state$ = 8
_Ncr$ = 12
_bcr$ = 16
_e$ = 20
_out$ = 24
_longTermSynthesisFilter PROC NEAR			; COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  : 	int 	k;
; 118  : 	int 	brp, Nr;
; 119  : 
; 120  : 	/*  Check the limits of Nr. */
; 121  : 	Nr = Ncr < 40 || Ncr > 120 ? state->nrp : Ncr;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _Ncr$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  00009	83 f8 28	 cmp	 eax, 40			; 00000028H
  0000c	7c 05		 jl	 SHORT $L76035
  0000e	83 f8 78	 cmp	 eax, 120		; 00000078H
  00011	7e 06		 jle	 SHORT $L76036
$L76035:
  00013	8b 81 5c 05 00
	00		 mov	 eax, DWORD PTR [ecx+1372]
$L76036:

; 122  : 	state->nrp = Nr;

  00019	89 81 5c 05 00
	00		 mov	 DWORD PTR [ecx+1372], eax

; 123  : 	/*  Decoding of the LTP gain bcr */
; 124  : 	brp = gsm_QLB[ bcr ];

  0001f	8b 4d 10	 mov	 ecx, DWORD PTR _bcr$[ebp]
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	8b 75 18	 mov	 esi, DWORD PTR _out$[ebp]
  00027	57		 push	 edi
  00028	8b 3c 8d 00 00
	00 00		 mov	 edi, DWORD PTR _gsm_QLB[ecx*4]
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR _e$[ebp]
  00032	33 d2		 xor	 edx, edx
  00034	8d 1c 00	 lea	 ebx, DWORD PTR [eax+eax]
$L75977:

; 125  : 
; 126  :    /*  Computation of the reconstructed short term residual
; 127  :     *  signal drp[0..39]
; 128  :     */
; 129  : 	for (k = 0; k < 40; k++) {

  00037	8b c2		 mov	 eax, edx
  00039	2b c3		 sub	 eax, ebx

; 130  : 		int temp = (brp * (int)out[ k-Nr ] + 16384) >> 15;
; 131  : 		out[k] = e[k] + temp;

  0003b	0f bf 04 30	 movsx	 eax, WORD PTR [eax+esi]
  0003f	0f af c7	 imul	 eax, edi
  00042	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  00047	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  0004a	66 03 01	 add	 ax, WORD PTR [ecx]
  0004d	83 c1 04	 add	 ecx, 4
  00050	66 89 04 32	 mov	 WORD PTR [edx+esi], ax
  00054	42		 inc	 edx
  00055	42		 inc	 edx
  00056	83 fa 50	 cmp	 edx, 80			; 00000050H
  00059	7c dc		 jl	 SHORT $L75977
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 132  :    }
; 133  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_longTermSynthesisFilter ENDP
_TEXT	ENDS
END
